
web_bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c44  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000630  08003e1c  08003e1c  00004e1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800444c  0800444c  000060c0  2**0
                  CONTENTS
  4 .ARM          00000008  0800444c  0800444c  0000544c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004454  08004454  000060c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004454  08004454  00005454  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004458  08004458  00005458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000c0  20000000  0800445c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001300  200000c0  0800451c  000060c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200013c0  0800451c  000063c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000060c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009e2b  00000000  00000000  000060f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002051  00000000  00000000  0000ff1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b08  00000000  00000000  00011f70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000855  00000000  00000000  00012a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000245f2  00000000  00000000  000132cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b472  00000000  00000000  000378bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ea102  00000000  00000000  00042d31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012ce33  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ee4  00000000  00000000  0012ce78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004d  00000000  00000000  0012fd5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200000c0 	.word	0x200000c0
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08003e04 	.word	0x08003e04

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200000c4 	.word	0x200000c4
 8000214:	08003e04 	.word	0x08003e04

08000218 <strlen>:
 8000218:	4603      	mov	r3, r0
 800021a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800021e:	2a00      	cmp	r2, #0
 8000220:	d1fb      	bne.n	800021a <strlen+0x2>
 8000222:	1a18      	subs	r0, r3, r0
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr

08000228 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b084      	sub	sp, #16
 800022c:	af00      	add	r7, sp, #0
 800022e:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8000230:	4b22      	ldr	r3, [pc, #136]	@ (80002bc <WIZCHIP_READ+0x94>)
 8000232:	68db      	ldr	r3, [r3, #12]
 8000234:	4798      	blx	r3
   WIZCHIP.CS._select();
 8000236:	4b21      	ldr	r3, [pc, #132]	@ (80002bc <WIZCHIP_READ+0x94>)
 8000238:	695b      	ldr	r3, [r3, #20]
 800023a:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800023c:	4b1f      	ldr	r3, [pc, #124]	@ (80002bc <WIZCHIP_READ+0x94>)
 800023e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000240:	2b00      	cmp	r3, #0
 8000242:	d003      	beq.n	800024c <WIZCHIP_READ+0x24>
 8000244:	4b1d      	ldr	r3, [pc, #116]	@ (80002bc <WIZCHIP_READ+0x94>)
 8000246:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000248:	2b00      	cmp	r3, #0
 800024a:	d114      	bne.n	8000276 <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800024c:	4b1b      	ldr	r3, [pc, #108]	@ (80002bc <WIZCHIP_READ+0x94>)
 800024e:	6a1b      	ldr	r3, [r3, #32]
 8000250:	687a      	ldr	r2, [r7, #4]
 8000252:	0c12      	lsrs	r2, r2, #16
 8000254:	b2d2      	uxtb	r2, r2
 8000256:	4610      	mov	r0, r2
 8000258:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800025a:	4b18      	ldr	r3, [pc, #96]	@ (80002bc <WIZCHIP_READ+0x94>)
 800025c:	6a1b      	ldr	r3, [r3, #32]
 800025e:	687a      	ldr	r2, [r7, #4]
 8000260:	0a12      	lsrs	r2, r2, #8
 8000262:	b2d2      	uxtb	r2, r2
 8000264:	4610      	mov	r0, r2
 8000266:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8000268:	4b14      	ldr	r3, [pc, #80]	@ (80002bc <WIZCHIP_READ+0x94>)
 800026a:	6a1b      	ldr	r3, [r3, #32]
 800026c:	687a      	ldr	r2, [r7, #4]
 800026e:	b2d2      	uxtb	r2, r2
 8000270:	4610      	mov	r0, r2
 8000272:	4798      	blx	r3
 8000274:	e011      	b.n	800029a <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	0c1b      	lsrs	r3, r3, #16
 800027a:	b2db      	uxtb	r3, r3
 800027c:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	0a1b      	lsrs	r3, r3, #8
 8000282:	b2db      	uxtb	r3, r3
 8000284:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	b2db      	uxtb	r3, r3
 800028a:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 800028c:	4b0b      	ldr	r3, [pc, #44]	@ (80002bc <WIZCHIP_READ+0x94>)
 800028e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000290:	f107 020c 	add.w	r2, r7, #12
 8000294:	2103      	movs	r1, #3
 8000296:	4610      	mov	r0, r2
 8000298:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 800029a:	4b08      	ldr	r3, [pc, #32]	@ (80002bc <WIZCHIP_READ+0x94>)
 800029c:	69db      	ldr	r3, [r3, #28]
 800029e:	4798      	blx	r3
 80002a0:	4603      	mov	r3, r0
 80002a2:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 80002a4:	4b05      	ldr	r3, [pc, #20]	@ (80002bc <WIZCHIP_READ+0x94>)
 80002a6:	699b      	ldr	r3, [r3, #24]
 80002a8:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80002aa:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <WIZCHIP_READ+0x94>)
 80002ac:	691b      	ldr	r3, [r3, #16]
 80002ae:	4798      	blx	r3
   return ret;
 80002b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80002b2:	4618      	mov	r0, r3
 80002b4:	3710      	adds	r7, #16
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bd80      	pop	{r7, pc}
 80002ba:	bf00      	nop
 80002bc:	2000003c 	.word	0x2000003c

080002c0 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b084      	sub	sp, #16
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
 80002c8:	460b      	mov	r3, r1
 80002ca:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 80002cc:	4b22      	ldr	r3, [pc, #136]	@ (8000358 <WIZCHIP_WRITE+0x98>)
 80002ce:	68db      	ldr	r3, [r3, #12]
 80002d0:	4798      	blx	r3
   WIZCHIP.CS._select();
 80002d2:	4b21      	ldr	r3, [pc, #132]	@ (8000358 <WIZCHIP_WRITE+0x98>)
 80002d4:	695b      	ldr	r3, [r3, #20]
 80002d6:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	f043 0304 	orr.w	r3, r3, #4
 80002de:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80002e0:	4b1d      	ldr	r3, [pc, #116]	@ (8000358 <WIZCHIP_WRITE+0x98>)
 80002e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d119      	bne.n	800031c <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80002e8:	4b1b      	ldr	r3, [pc, #108]	@ (8000358 <WIZCHIP_WRITE+0x98>)
 80002ea:	6a1b      	ldr	r3, [r3, #32]
 80002ec:	687a      	ldr	r2, [r7, #4]
 80002ee:	0c12      	lsrs	r2, r2, #16
 80002f0:	b2d2      	uxtb	r2, r2
 80002f2:	4610      	mov	r0, r2
 80002f4:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80002f6:	4b18      	ldr	r3, [pc, #96]	@ (8000358 <WIZCHIP_WRITE+0x98>)
 80002f8:	6a1b      	ldr	r3, [r3, #32]
 80002fa:	687a      	ldr	r2, [r7, #4]
 80002fc:	0a12      	lsrs	r2, r2, #8
 80002fe:	b2d2      	uxtb	r2, r2
 8000300:	4610      	mov	r0, r2
 8000302:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8000304:	4b14      	ldr	r3, [pc, #80]	@ (8000358 <WIZCHIP_WRITE+0x98>)
 8000306:	6a1b      	ldr	r3, [r3, #32]
 8000308:	687a      	ldr	r2, [r7, #4]
 800030a:	b2d2      	uxtb	r2, r2
 800030c:	4610      	mov	r0, r2
 800030e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 8000310:	4b11      	ldr	r3, [pc, #68]	@ (8000358 <WIZCHIP_WRITE+0x98>)
 8000312:	6a1b      	ldr	r3, [r3, #32]
 8000314:	78fa      	ldrb	r2, [r7, #3]
 8000316:	4610      	mov	r0, r2
 8000318:	4798      	blx	r3
 800031a:	e013      	b.n	8000344 <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	0c1b      	lsrs	r3, r3, #16
 8000320:	b2db      	uxtb	r3, r3
 8000322:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	0a1b      	lsrs	r3, r3, #8
 8000328:	b2db      	uxtb	r3, r3
 800032a:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	b2db      	uxtb	r3, r3
 8000330:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 8000332:	78fb      	ldrb	r3, [r7, #3]
 8000334:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 8000336:	4b08      	ldr	r3, [pc, #32]	@ (8000358 <WIZCHIP_WRITE+0x98>)
 8000338:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800033a:	f107 020c 	add.w	r2, r7, #12
 800033e:	2104      	movs	r1, #4
 8000340:	4610      	mov	r0, r2
 8000342:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8000344:	4b04      	ldr	r3, [pc, #16]	@ (8000358 <WIZCHIP_WRITE+0x98>)
 8000346:	699b      	ldr	r3, [r3, #24]
 8000348:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800034a:	4b03      	ldr	r3, [pc, #12]	@ (8000358 <WIZCHIP_WRITE+0x98>)
 800034c:	691b      	ldr	r3, [r3, #16]
 800034e:	4798      	blx	r3
}
 8000350:	bf00      	nop
 8000352:	3710      	adds	r7, #16
 8000354:	46bd      	mov	sp, r7
 8000356:	bd80      	pop	{r7, pc}
 8000358:	2000003c 	.word	0x2000003c

0800035c <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 800035c:	b590      	push	{r4, r7, lr}
 800035e:	b087      	sub	sp, #28
 8000360:	af00      	add	r7, sp, #0
 8000362:	60f8      	str	r0, [r7, #12]
 8000364:	60b9      	str	r1, [r7, #8]
 8000366:	4613      	mov	r3, r2
 8000368:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 800036a:	4b2b      	ldr	r3, [pc, #172]	@ (8000418 <WIZCHIP_READ_BUF+0xbc>)
 800036c:	68db      	ldr	r3, [r3, #12]
 800036e:	4798      	blx	r3
   WIZCHIP.CS._select();
 8000370:	4b29      	ldr	r3, [pc, #164]	@ (8000418 <WIZCHIP_READ_BUF+0xbc>)
 8000372:	695b      	ldr	r3, [r3, #20]
 8000374:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8000376:	4b28      	ldr	r3, [pc, #160]	@ (8000418 <WIZCHIP_READ_BUF+0xbc>)
 8000378:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800037a:	2b00      	cmp	r3, #0
 800037c:	d003      	beq.n	8000386 <WIZCHIP_READ_BUF+0x2a>
 800037e:	4b26      	ldr	r3, [pc, #152]	@ (8000418 <WIZCHIP_READ_BUF+0xbc>)
 8000380:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000382:	2b00      	cmp	r3, #0
 8000384:	d126      	bne.n	80003d4 <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8000386:	4b24      	ldr	r3, [pc, #144]	@ (8000418 <WIZCHIP_READ_BUF+0xbc>)
 8000388:	6a1b      	ldr	r3, [r3, #32]
 800038a:	68fa      	ldr	r2, [r7, #12]
 800038c:	0c12      	lsrs	r2, r2, #16
 800038e:	b2d2      	uxtb	r2, r2
 8000390:	4610      	mov	r0, r2
 8000392:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8000394:	4b20      	ldr	r3, [pc, #128]	@ (8000418 <WIZCHIP_READ_BUF+0xbc>)
 8000396:	6a1b      	ldr	r3, [r3, #32]
 8000398:	68fa      	ldr	r2, [r7, #12]
 800039a:	0a12      	lsrs	r2, r2, #8
 800039c:	b2d2      	uxtb	r2, r2
 800039e:	4610      	mov	r0, r2
 80003a0:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80003a2:	4b1d      	ldr	r3, [pc, #116]	@ (8000418 <WIZCHIP_READ_BUF+0xbc>)
 80003a4:	6a1b      	ldr	r3, [r3, #32]
 80003a6:	68fa      	ldr	r2, [r7, #12]
 80003a8:	b2d2      	uxtb	r2, r2
 80003aa:	4610      	mov	r0, r2
 80003ac:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80003ae:	2300      	movs	r3, #0
 80003b0:	82fb      	strh	r3, [r7, #22]
 80003b2:	e00a      	b.n	80003ca <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 80003b4:	4b18      	ldr	r3, [pc, #96]	@ (8000418 <WIZCHIP_READ_BUF+0xbc>)
 80003b6:	69db      	ldr	r3, [r3, #28]
 80003b8:	8afa      	ldrh	r2, [r7, #22]
 80003ba:	68b9      	ldr	r1, [r7, #8]
 80003bc:	188c      	adds	r4, r1, r2
 80003be:	4798      	blx	r3
 80003c0:	4603      	mov	r3, r0
 80003c2:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 80003c4:	8afb      	ldrh	r3, [r7, #22]
 80003c6:	3301      	adds	r3, #1
 80003c8:	82fb      	strh	r3, [r7, #22]
 80003ca:	8afa      	ldrh	r2, [r7, #22]
 80003cc:	88fb      	ldrh	r3, [r7, #6]
 80003ce:	429a      	cmp	r2, r3
 80003d0:	d3f0      	bcc.n	80003b4 <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80003d2:	e017      	b.n	8000404 <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80003d4:	68fb      	ldr	r3, [r7, #12]
 80003d6:	0c1b      	lsrs	r3, r3, #16
 80003d8:	b2db      	uxtb	r3, r3
 80003da:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80003dc:	68fb      	ldr	r3, [r7, #12]
 80003de:	0a1b      	lsrs	r3, r3, #8
 80003e0:	b2db      	uxtb	r3, r3
 80003e2:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80003e4:	68fb      	ldr	r3, [r7, #12]
 80003e6:	b2db      	uxtb	r3, r3
 80003e8:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80003ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000418 <WIZCHIP_READ_BUF+0xbc>)
 80003ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80003ee:	f107 0210 	add.w	r2, r7, #16
 80003f2:	2103      	movs	r1, #3
 80003f4:	4610      	mov	r0, r2
 80003f6:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 80003f8:	4b07      	ldr	r3, [pc, #28]	@ (8000418 <WIZCHIP_READ_BUF+0xbc>)
 80003fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80003fc:	88fa      	ldrh	r2, [r7, #6]
 80003fe:	4611      	mov	r1, r2
 8000400:	68b8      	ldr	r0, [r7, #8]
 8000402:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8000404:	4b04      	ldr	r3, [pc, #16]	@ (8000418 <WIZCHIP_READ_BUF+0xbc>)
 8000406:	699b      	ldr	r3, [r3, #24]
 8000408:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800040a:	4b03      	ldr	r3, [pc, #12]	@ (8000418 <WIZCHIP_READ_BUF+0xbc>)
 800040c:	691b      	ldr	r3, [r3, #16]
 800040e:	4798      	blx	r3
}
 8000410:	bf00      	nop
 8000412:	371c      	adds	r7, #28
 8000414:	46bd      	mov	sp, r7
 8000416:	bd90      	pop	{r4, r7, pc}
 8000418:	2000003c 	.word	0x2000003c

0800041c <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b086      	sub	sp, #24
 8000420:	af00      	add	r7, sp, #0
 8000422:	60f8      	str	r0, [r7, #12]
 8000424:	60b9      	str	r1, [r7, #8]
 8000426:	4613      	mov	r3, r2
 8000428:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 800042a:	4b2b      	ldr	r3, [pc, #172]	@ (80004d8 <WIZCHIP_WRITE_BUF+0xbc>)
 800042c:	68db      	ldr	r3, [r3, #12]
 800042e:	4798      	blx	r3
   WIZCHIP.CS._select();
 8000430:	4b29      	ldr	r3, [pc, #164]	@ (80004d8 <WIZCHIP_WRITE_BUF+0xbc>)
 8000432:	695b      	ldr	r3, [r3, #20]
 8000434:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8000436:	68fb      	ldr	r3, [r7, #12]
 8000438:	f043 0304 	orr.w	r3, r3, #4
 800043c:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800043e:	4b26      	ldr	r3, [pc, #152]	@ (80004d8 <WIZCHIP_WRITE_BUF+0xbc>)
 8000440:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000442:	2b00      	cmp	r3, #0
 8000444:	d126      	bne.n	8000494 <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8000446:	4b24      	ldr	r3, [pc, #144]	@ (80004d8 <WIZCHIP_WRITE_BUF+0xbc>)
 8000448:	6a1b      	ldr	r3, [r3, #32]
 800044a:	68fa      	ldr	r2, [r7, #12]
 800044c:	0c12      	lsrs	r2, r2, #16
 800044e:	b2d2      	uxtb	r2, r2
 8000450:	4610      	mov	r0, r2
 8000452:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8000454:	4b20      	ldr	r3, [pc, #128]	@ (80004d8 <WIZCHIP_WRITE_BUF+0xbc>)
 8000456:	6a1b      	ldr	r3, [r3, #32]
 8000458:	68fa      	ldr	r2, [r7, #12]
 800045a:	0a12      	lsrs	r2, r2, #8
 800045c:	b2d2      	uxtb	r2, r2
 800045e:	4610      	mov	r0, r2
 8000460:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8000462:	4b1d      	ldr	r3, [pc, #116]	@ (80004d8 <WIZCHIP_WRITE_BUF+0xbc>)
 8000464:	6a1b      	ldr	r3, [r3, #32]
 8000466:	68fa      	ldr	r2, [r7, #12]
 8000468:	b2d2      	uxtb	r2, r2
 800046a:	4610      	mov	r0, r2
 800046c:	4798      	blx	r3
		for(i = 0; i < len; i++)
 800046e:	2300      	movs	r3, #0
 8000470:	82fb      	strh	r3, [r7, #22]
 8000472:	e00a      	b.n	800048a <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8000474:	4b18      	ldr	r3, [pc, #96]	@ (80004d8 <WIZCHIP_WRITE_BUF+0xbc>)
 8000476:	6a1b      	ldr	r3, [r3, #32]
 8000478:	8afa      	ldrh	r2, [r7, #22]
 800047a:	68b9      	ldr	r1, [r7, #8]
 800047c:	440a      	add	r2, r1
 800047e:	7812      	ldrb	r2, [r2, #0]
 8000480:	4610      	mov	r0, r2
 8000482:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8000484:	8afb      	ldrh	r3, [r7, #22]
 8000486:	3301      	adds	r3, #1
 8000488:	82fb      	strh	r3, [r7, #22]
 800048a:	8afa      	ldrh	r2, [r7, #22]
 800048c:	88fb      	ldrh	r3, [r7, #6]
 800048e:	429a      	cmp	r2, r3
 8000490:	d3f0      	bcc.n	8000474 <WIZCHIP_WRITE_BUF+0x58>
 8000492:	e017      	b.n	80004c4 <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8000494:	68fb      	ldr	r3, [r7, #12]
 8000496:	0c1b      	lsrs	r3, r3, #16
 8000498:	b2db      	uxtb	r3, r3
 800049a:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 800049c:	68fb      	ldr	r3, [r7, #12]
 800049e:	0a1b      	lsrs	r3, r3, #8
 80004a0:	b2db      	uxtb	r3, r3
 80004a2:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80004a4:	68fb      	ldr	r3, [r7, #12]
 80004a6:	b2db      	uxtb	r3, r3
 80004a8:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80004aa:	4b0b      	ldr	r3, [pc, #44]	@ (80004d8 <WIZCHIP_WRITE_BUF+0xbc>)
 80004ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80004ae:	f107 0210 	add.w	r2, r7, #16
 80004b2:	2103      	movs	r1, #3
 80004b4:	4610      	mov	r0, r2
 80004b6:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 80004b8:	4b07      	ldr	r3, [pc, #28]	@ (80004d8 <WIZCHIP_WRITE_BUF+0xbc>)
 80004ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80004bc:	88fa      	ldrh	r2, [r7, #6]
 80004be:	4611      	mov	r1, r2
 80004c0:	68b8      	ldr	r0, [r7, #8]
 80004c2:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 80004c4:	4b04      	ldr	r3, [pc, #16]	@ (80004d8 <WIZCHIP_WRITE_BUF+0xbc>)
 80004c6:	699b      	ldr	r3, [r3, #24]
 80004c8:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80004ca:	4b03      	ldr	r3, [pc, #12]	@ (80004d8 <WIZCHIP_WRITE_BUF+0xbc>)
 80004cc:	691b      	ldr	r3, [r3, #16]
 80004ce:	4798      	blx	r3
}
 80004d0:	bf00      	nop
 80004d2:	3718      	adds	r7, #24
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bd80      	pop	{r7, pc}
 80004d8:	2000003c 	.word	0x2000003c

080004dc <default_mcu_reset>:

/*****************************************************************************
 * Public functions
 ****************************************************************************/
// Callback functions definition: MCU Reset / WDT Reset
void default_mcu_reset(void) {;}
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
 80004e0:	bf00      	nop
 80004e2:	46bd      	mov	sp, r7
 80004e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e8:	4770      	bx	lr

080004ea <default_wdt_reset>:
void default_wdt_reset(void) {;}
 80004ea:	b480      	push	{r7}
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	bf00      	nop
 80004f0:	46bd      	mov	sp, r7
 80004f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f6:	4770      	bx	lr

080004f8 <httpServer_Sockinit>:
void (*HTTPServer_ReStart)(void) = default_mcu_reset;
void (*HTTPServer_WDT_Reset)(void) = default_wdt_reset;

void httpServer_Sockinit(uint8_t cnt, uint8_t * socklist)
{
 80004f8:	b480      	push	{r7}
 80004fa:	b085      	sub	sp, #20
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	4603      	mov	r3, r0
 8000500:	6039      	str	r1, [r7, #0]
 8000502:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	for(i = 0; i < cnt; i++)
 8000504:	2300      	movs	r3, #0
 8000506:	73fb      	strb	r3, [r7, #15]
 8000508:	e009      	b.n	800051e <httpServer_Sockinit+0x26>
	{
		// Mapping the H/W socket numbers to the sequential index numbers
		HTTPSock_Num[i] = socklist[i];
 800050a:	7bfb      	ldrb	r3, [r7, #15]
 800050c:	683a      	ldr	r2, [r7, #0]
 800050e:	441a      	add	r2, r3
 8000510:	7bfb      	ldrb	r3, [r7, #15]
 8000512:	7811      	ldrb	r1, [r2, #0]
 8000514:	4a07      	ldr	r2, [pc, #28]	@ (8000534 <httpServer_Sockinit+0x3c>)
 8000516:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < cnt; i++)
 8000518:	7bfb      	ldrb	r3, [r7, #15]
 800051a:	3301      	adds	r3, #1
 800051c:	73fb      	strb	r3, [r7, #15]
 800051e:	7bfa      	ldrb	r2, [r7, #15]
 8000520:	79fb      	ldrb	r3, [r7, #7]
 8000522:	429a      	cmp	r2, r3
 8000524:	d3f1      	bcc.n	800050a <httpServer_Sockinit+0x12>
	}
}
 8000526:	bf00      	nop
 8000528:	bf00      	nop
 800052a:	3714      	adds	r7, #20
 800052c:	46bd      	mov	sp, r7
 800052e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000532:	4770      	bx	lr
 8000534:	200000dc 	.word	0x200000dc

08000538 <httpServer_init>:

	return -1;
}

void httpServer_init(uint8_t * tx_buf, uint8_t * rx_buf, uint8_t cnt, uint8_t * socklist)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b084      	sub	sp, #16
 800053c:	af00      	add	r7, sp, #0
 800053e:	60f8      	str	r0, [r7, #12]
 8000540:	60b9      	str	r1, [r7, #8]
 8000542:	603b      	str	r3, [r7, #0]
 8000544:	4613      	mov	r3, r2
 8000546:	71fb      	strb	r3, [r7, #7]
	// User's shared buffer
	pHTTP_TX = tx_buf;
 8000548:	4a07      	ldr	r2, [pc, #28]	@ (8000568 <httpServer_init+0x30>)
 800054a:	68fb      	ldr	r3, [r7, #12]
 800054c:	6013      	str	r3, [r2, #0]
	pHTTP_RX = rx_buf;
 800054e:	4a07      	ldr	r2, [pc, #28]	@ (800056c <httpServer_init+0x34>)
 8000550:	68bb      	ldr	r3, [r7, #8]
 8000552:	6013      	str	r3, [r2, #0]

	// H/W Socket number mapping
	httpServer_Sockinit(cnt, socklist);
 8000554:	79fb      	ldrb	r3, [r7, #7]
 8000556:	6839      	ldr	r1, [r7, #0]
 8000558:	4618      	mov	r0, r3
 800055a:	f7ff ffcd 	bl	80004f8 <httpServer_Sockinit>
}
 800055e:	bf00      	nop
 8000560:	3710      	adds	r7, #16
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	200000e8 	.word	0x200000e8
 800056c:	200000ec 	.word	0x200000ec

08000570 <reg_httpServer_cbfunc>:


/* Register the call back functions for HTTP Server */
void reg_httpServer_cbfunc(void(*mcu_reset)(void), void(*wdt_reset)(void))
{
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
 8000578:	6039      	str	r1, [r7, #0]
	// Callback: HW Reset and WDT reset function for each MCU platforms
	if(mcu_reset) HTTPServer_ReStart = mcu_reset;
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	2b00      	cmp	r3, #0
 800057e:	d002      	beq.n	8000586 <reg_httpServer_cbfunc+0x16>
 8000580:	4a07      	ldr	r2, [pc, #28]	@ (80005a0 <reg_httpServer_cbfunc+0x30>)
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	6013      	str	r3, [r2, #0]
	if(wdt_reset) HTTPServer_WDT_Reset = wdt_reset;
 8000586:	683b      	ldr	r3, [r7, #0]
 8000588:	2b00      	cmp	r3, #0
 800058a:	d002      	beq.n	8000592 <reg_httpServer_cbfunc+0x22>
 800058c:	4a05      	ldr	r2, [pc, #20]	@ (80005a4 <reg_httpServer_cbfunc+0x34>)
 800058e:	683b      	ldr	r3, [r7, #0]
 8000590:	6013      	str	r3, [r2, #0]
}
 8000592:	bf00      	nop
 8000594:	370c      	adds	r7, #12
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop
 80005a0:	20000000 	.word	0x20000000
 80005a4:	20000004 	.word	0x20000004

080005a8 <reg_httpServer_webContent>:
{
	return httpServer_tick_1s;
}

void reg_httpServer_webContent(uint8_t * content_name, uint8_t * content)
{
 80005a8:	b590      	push	{r4, r7, lr}
 80005aa:	b085      	sub	sp, #20
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
 80005b0:	6039      	str	r1, [r7, #0]
	uint16_t name_len;
	uint32_t content_len;

	if(content_name == NULL || content == NULL)
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d04e      	beq.n	8000656 <reg_httpServer_webContent+0xae>
 80005b8:	683b      	ldr	r3, [r7, #0]
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d04b      	beq.n	8000656 <reg_httpServer_webContent+0xae>
	{
		return;
	}
	else if(total_content_cnt >= MAX_CONTENT_CALLBACK)
 80005be:	4b29      	ldr	r3, [pc, #164]	@ (8000664 <reg_httpServer_webContent+0xbc>)
 80005c0:	881b      	ldrh	r3, [r3, #0]
 80005c2:	2b13      	cmp	r3, #19
 80005c4:	d849      	bhi.n	800065a <reg_httpServer_webContent+0xb2>
	{
		return;
	}

	name_len = strlen((char *)content_name);
 80005c6:	6878      	ldr	r0, [r7, #4]
 80005c8:	f7ff fe26 	bl	8000218 <strlen>
 80005cc:	4603      	mov	r3, r0
 80005ce:	81fb      	strh	r3, [r7, #14]
	content_len = strlen((char *)content);
 80005d0:	6838      	ldr	r0, [r7, #0]
 80005d2:	f7ff fe21 	bl	8000218 <strlen>
 80005d6:	60b8      	str	r0, [r7, #8]

	web_content[total_content_cnt].content_name = malloc(name_len+1);
 80005d8:	89fb      	ldrh	r3, [r7, #14]
 80005da:	3301      	adds	r3, #1
 80005dc:	461a      	mov	r2, r3
 80005de:	4b21      	ldr	r3, [pc, #132]	@ (8000664 <reg_httpServer_webContent+0xbc>)
 80005e0:	881b      	ldrh	r3, [r3, #0]
 80005e2:	461c      	mov	r4, r3
 80005e4:	4610      	mov	r0, r2
 80005e6:	f003 fb0b 	bl	8003c00 <malloc>
 80005ea:	4603      	mov	r3, r0
 80005ec:	4619      	mov	r1, r3
 80005ee:	4a1e      	ldr	r2, [pc, #120]	@ (8000668 <reg_httpServer_webContent+0xc0>)
 80005f0:	4623      	mov	r3, r4
 80005f2:	005b      	lsls	r3, r3, #1
 80005f4:	4423      	add	r3, r4
 80005f6:	009b      	lsls	r3, r3, #2
 80005f8:	4413      	add	r3, r2
 80005fa:	6019      	str	r1, [r3, #0]
	strcpy((char *)web_content[total_content_cnt].content_name, (const char *)content_name);
 80005fc:	4b19      	ldr	r3, [pc, #100]	@ (8000664 <reg_httpServer_webContent+0xbc>)
 80005fe:	881b      	ldrh	r3, [r3, #0]
 8000600:	4619      	mov	r1, r3
 8000602:	4a19      	ldr	r2, [pc, #100]	@ (8000668 <reg_httpServer_webContent+0xc0>)
 8000604:	460b      	mov	r3, r1
 8000606:	005b      	lsls	r3, r3, #1
 8000608:	440b      	add	r3, r1
 800060a:	009b      	lsls	r3, r3, #2
 800060c:	4413      	add	r3, r2
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	6879      	ldr	r1, [r7, #4]
 8000612:	4618      	mov	r0, r3
 8000614:	f003 fbee 	bl	8003df4 <strcpy>
	web_content[total_content_cnt].content_len = content_len;
 8000618:	4b12      	ldr	r3, [pc, #72]	@ (8000664 <reg_httpServer_webContent+0xbc>)
 800061a:	881b      	ldrh	r3, [r3, #0]
 800061c:	4619      	mov	r1, r3
 800061e:	4a12      	ldr	r2, [pc, #72]	@ (8000668 <reg_httpServer_webContent+0xc0>)
 8000620:	460b      	mov	r3, r1
 8000622:	005b      	lsls	r3, r3, #1
 8000624:	440b      	add	r3, r1
 8000626:	009b      	lsls	r3, r3, #2
 8000628:	4413      	add	r3, r2
 800062a:	3304      	adds	r3, #4
 800062c:	68ba      	ldr	r2, [r7, #8]
 800062e:	601a      	str	r2, [r3, #0]
	web_content[total_content_cnt].content = content;
 8000630:	4b0c      	ldr	r3, [pc, #48]	@ (8000664 <reg_httpServer_webContent+0xbc>)
 8000632:	881b      	ldrh	r3, [r3, #0]
 8000634:	4619      	mov	r1, r3
 8000636:	4a0c      	ldr	r2, [pc, #48]	@ (8000668 <reg_httpServer_webContent+0xc0>)
 8000638:	460b      	mov	r3, r1
 800063a:	005b      	lsls	r3, r3, #1
 800063c:	440b      	add	r3, r1
 800063e:	009b      	lsls	r3, r3, #2
 8000640:	4413      	add	r3, r2
 8000642:	3308      	adds	r3, #8
 8000644:	683a      	ldr	r2, [r7, #0]
 8000646:	601a      	str	r2, [r3, #0]

	total_content_cnt++;
 8000648:	4b06      	ldr	r3, [pc, #24]	@ (8000664 <reg_httpServer_webContent+0xbc>)
 800064a:	881b      	ldrh	r3, [r3, #0]
 800064c:	3301      	adds	r3, #1
 800064e:	b29a      	uxth	r2, r3
 8000650:	4b04      	ldr	r3, [pc, #16]	@ (8000664 <reg_httpServer_webContent+0xbc>)
 8000652:	801a      	strh	r2, [r3, #0]
 8000654:	e002      	b.n	800065c <reg_httpServer_webContent+0xb4>
		return;
 8000656:	bf00      	nop
 8000658:	e000      	b.n	800065c <reg_httpServer_webContent+0xb4>
		return;
 800065a:	bf00      	nop
}
 800065c:	3714      	adds	r7, #20
 800065e:	46bd      	mov	sp, r7
 8000660:	bd90      	pop	{r4, r7, pc}
 8000662:	bf00      	nop
 8000664:	200000e4 	.word	0x200000e4
 8000668:	200000f0 	.word	0x200000f0

0800066c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000672:	f001 fabc 	bl	8001bee <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000676:	f000 f895 	bl	80007a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800067a:	f000 f911 	bl	80008a0 <MX_GPIO_Init>
  MX_SPI1_Init();
 800067e:	f000 f8d1 	bl	8000824 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  reg_wizchip_cs_cbfunc(cs_select, cs_deselect);
 8000682:	4932      	ldr	r1, [pc, #200]	@ (800074c <main+0xe0>)
 8000684:	4832      	ldr	r0, [pc, #200]	@ (8000750 <main+0xe4>)
 8000686:	f000 fd19 	bl	80010bc <reg_wizchip_cs_cbfunc>
  reg_wizchip_spi_cbfunc(spi_readbyte, spi_writebyte);
 800068a:	4932      	ldr	r1, [pc, #200]	@ (8000754 <main+0xe8>)
 800068c:	4832      	ldr	r0, [pc, #200]	@ (8000758 <main+0xec>)
 800068e:	f000 fd3b 	bl	8001108 <reg_wizchip_spi_cbfunc>
  reg_wizchip_cris_cbfunc(cris_enter, cris_exit);
 8000692:	4932      	ldr	r1, [pc, #200]	@ (800075c <main+0xf0>)
 8000694:	4832      	ldr	r0, [pc, #200]	@ (8000760 <main+0xf4>)
 8000696:	f000 fceb 	bl	8001070 <reg_wizchip_cris_cbfunc>
  reg_wizchip_spiburst_cbfunc(spi_readburst, spi_writeburst);
 800069a:	4932      	ldr	r1, [pc, #200]	@ (8000764 <main+0xf8>)
 800069c:	4832      	ldr	r0, [pc, #200]	@ (8000768 <main+0xfc>)
 800069e:	f000 fd5f 	bl	8001160 <reg_wizchip_spiburst_cbfunc>

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80006a2:	2200      	movs	r2, #0
 80006a4:	2180      	movs	r1, #128	@ 0x80
 80006a6:	4831      	ldr	r0, [pc, #196]	@ (800076c <main+0x100>)
 80006a8:	f001 fdb2 	bl	8002210 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80006ac:	2001      	movs	r0, #1
 80006ae:	f001 fb0f 	bl	8001cd0 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 80006b2:	2201      	movs	r2, #1
 80006b4:	2180      	movs	r1, #128	@ 0x80
 80006b6:	482d      	ldr	r0, [pc, #180]	@ (800076c <main+0x100>)
 80006b8:	f001 fdaa 	bl	8002210 <HAL_GPIO_WritePin>
  HAL_Delay(1600);
 80006bc:	f44f 60c8 	mov.w	r0, #1600	@ 0x640
 80006c0:	f001 fb06 	bl	8001cd0 <HAL_Delay>

  ctlnetwork(CN_SET_NETINFO, (void*)&gSetNetInfo);
 80006c4:	492a      	ldr	r1, [pc, #168]	@ (8000770 <main+0x104>)
 80006c6:	2000      	movs	r0, #0
 80006c8:	f000 fe66 	bl	8001398 <ctlnetwork>
  ctlwizchip(CW_INIT_WIZCHIP,(void*)buffer_size_tx_rx);
 80006cc:	4929      	ldr	r1, [pc, #164]	@ (8000774 <main+0x108>)
 80006ce:	2004      	movs	r0, #4
 80006d0:	f000 fd72 	bl	80011b8 <ctlwizchip>

  socket(0,Sn_MR_TCP,5555,SF_TCP_NODELAY | SF_IO_NONBLOCK);
 80006d4:	2321      	movs	r3, #33	@ 0x21
 80006d6:	f241 52b3 	movw	r2, #5555	@ 0x15b3
 80006da:	2101      	movs	r1, #1
 80006dc:	2000      	movs	r0, #0
 80006de:	f000 f9c5 	bl	8000a6c <socket>

  httpServer_init(http_tx_buff,http_rx_buff,5,socknumlist);
 80006e2:	4b25      	ldr	r3, [pc, #148]	@ (8000778 <main+0x10c>)
 80006e4:	2205      	movs	r2, #5
 80006e6:	4925      	ldr	r1, [pc, #148]	@ (800077c <main+0x110>)
 80006e8:	4825      	ldr	r0, [pc, #148]	@ (8000780 <main+0x114>)
 80006ea:	f7ff ff25 	bl	8000538 <httpServer_init>
  reg_httpServer_cbfunc(NULL, NULL);
 80006ee:	2100      	movs	r1, #0
 80006f0:	2000      	movs	r0, #0
 80006f2:	f7ff ff3d 	bl	8000570 <reg_httpServer_cbfunc>
  reg_httpServer_webContent((uint8_t*)"index.html", (uint8_t*)webpage);
 80006f6:	4923      	ldr	r1, [pc, #140]	@ (8000784 <main+0x118>)
 80006f8:	4823      	ldr	r0, [pc, #140]	@ (8000788 <main+0x11c>)
 80006fa:	f7ff ff55 	bl	80005a8 <reg_httpServer_webContent>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_5) != GPIO_PIN_RESET) //Если перемычка установлена
 80006fe:	2120      	movs	r1, #32
 8000700:	481a      	ldr	r0, [pc, #104]	@ (800076c <main+0x100>)
 8000702:	f001 fd6d 	bl	80021e0 <HAL_GPIO_ReadPin>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <main+0xa4>
	  {
	  	//Выполняем основной код загрузчика
		  asm("nop");
 800070c:	bf00      	nop
 800070e:	e7f6      	b.n	80006fe <main+0x92>
	  }
	  else
	  {
	  	//В противном случае переходим к коду основной программы
		if(((*(uint32_t*)APPLICATION_ADDRESS) & 0x2FFE0000) == 0x20020000)
 8000710:	4b1e      	ldr	r3, [pc, #120]	@ (800078c <main+0x120>)
 8000712:	681a      	ldr	r2, [r3, #0]
 8000714:	4b1e      	ldr	r3, [pc, #120]	@ (8000790 <main+0x124>)
 8000716:	4013      	ands	r3, r2
 8000718:	4a1e      	ldr	r2, [pc, #120]	@ (8000794 <main+0x128>)
 800071a:	4293      	cmp	r3, r2
 800071c:	d113      	bne.n	8000746 <main+0xda>
		{
			jump_addr = *(uint32_t *)(APPLICATION_ADDRESS + 4);
 800071e:	4b1e      	ldr	r3, [pc, #120]	@ (8000798 <main+0x12c>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	4a1e      	ldr	r2, [pc, #120]	@ (800079c <main+0x130>)
 8000724:	6013      	str	r3, [r2, #0]
			jump_to_app = (pFunction)jump_addr;
 8000726:	4b1d      	ldr	r3, [pc, #116]	@ (800079c <main+0x130>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	461a      	mov	r2, r3
 800072c:	4b1c      	ldr	r3, [pc, #112]	@ (80007a0 <main+0x134>)
 800072e:	601a      	str	r2, [r3, #0]
			__set_MSP(*(uint32_t *)APPLICATION_ADDRESS);
 8000730:	4b16      	ldr	r3, [pc, #88]	@ (800078c <main+0x120>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	f383 8808 	msr	MSP, r3
}
 800073c:	bf00      	nop
			jump_to_app();
 800073e:	4b18      	ldr	r3, [pc, #96]	@ (80007a0 <main+0x134>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	4798      	blx	r3
 8000744:	e7db      	b.n	80006fe <main+0x92>
		}
		else
		{
			//Здесь можно разместить код, который будет выполняться, если переход
			//к основному приложению не был осуществлён корректно
			asm("nop");
 8000746:	bf00      	nop
	  if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_5) != GPIO_PIN_RESET) //Если перемычка установлена
 8000748:	e7d9      	b.n	80006fe <main+0x92>
 800074a:	bf00      	nop
 800074c:	08000979 	.word	0x08000979
 8000750:	08000961 	.word	0x08000961
 8000754:	080009ed 	.word	0x080009ed
 8000758:	080009cd 	.word	0x080009cd
 800075c:	080009af 	.word	0x080009af
 8000760:	08000991 	.word	0x08000991
 8000764:	08000a39 	.word	0x08000a39
 8000768:	08000a11 	.word	0x08000a11
 800076c:	48000800 	.word	0x48000800
 8000770:	20000008 	.word	0x20000008
 8000774:	20000020 	.word	0x20000020
 8000778:	20000030 	.word	0x20000030
 800077c:	20000244 	.word	0x20000244
 8000780:	20000a44 	.word	0x20000a44
 8000784:	08003e28 	.word	0x08003e28
 8000788:	08003e1c 	.word	0x08003e1c
 800078c:	08040000 	.word	0x08040000
 8000790:	2ffe0000 	.word	0x2ffe0000
 8000794:	20020000 	.word	0x20020000
 8000798:	08040004 	.word	0x08040004
 800079c:	20001244 	.word	0x20001244
 80007a0:	20001248 	.word	0x20001248

080007a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b094      	sub	sp, #80	@ 0x50
 80007a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007aa:	f107 0318 	add.w	r3, r7, #24
 80007ae:	2238      	movs	r2, #56	@ 0x38
 80007b0:	2100      	movs	r1, #0
 80007b2:	4618      	mov	r0, r3
 80007b4:	f003 fada 	bl	8003d6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b8:	1d3b      	adds	r3, r7, #4
 80007ba:	2200      	movs	r2, #0
 80007bc:	601a      	str	r2, [r3, #0]
 80007be:	605a      	str	r2, [r3, #4]
 80007c0:	609a      	str	r2, [r3, #8]
 80007c2:	60da      	str	r2, [r3, #12]
 80007c4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007c6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80007ca:	f001 fd39 	bl	8002240 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007ce:	2302      	movs	r3, #2
 80007d0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007d2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80007d6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007d8:	2340      	movs	r3, #64	@ 0x40
 80007da:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007dc:	2300      	movs	r3, #0
 80007de:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007e0:	f107 0318 	add.w	r3, r7, #24
 80007e4:	4618      	mov	r0, r3
 80007e6:	f001 fddf 	bl	80023a8 <HAL_RCC_OscConfig>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80007f0:	f000 f936 	bl	8000a60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007f4:	230f      	movs	r3, #15
 80007f6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007f8:	2301      	movs	r3, #1
 80007fa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007fc:	2300      	movs	r3, #0
 80007fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000800:	2300      	movs	r3, #0
 8000802:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000804:	2300      	movs	r3, #0
 8000806:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000808:	1d3b      	adds	r3, r7, #4
 800080a:	2100      	movs	r1, #0
 800080c:	4618      	mov	r0, r3
 800080e:	f002 f8dd 	bl	80029cc <HAL_RCC_ClockConfig>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000818:	f000 f922 	bl	8000a60 <Error_Handler>
  }
}
 800081c:	bf00      	nop
 800081e:	3750      	adds	r7, #80	@ 0x50
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}

08000824 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000828:	4b1b      	ldr	r3, [pc, #108]	@ (8000898 <MX_SPI1_Init+0x74>)
 800082a:	4a1c      	ldr	r2, [pc, #112]	@ (800089c <MX_SPI1_Init+0x78>)
 800082c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800082e:	4b1a      	ldr	r3, [pc, #104]	@ (8000898 <MX_SPI1_Init+0x74>)
 8000830:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000834:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000836:	4b18      	ldr	r3, [pc, #96]	@ (8000898 <MX_SPI1_Init+0x74>)
 8000838:	2200      	movs	r2, #0
 800083a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800083c:	4b16      	ldr	r3, [pc, #88]	@ (8000898 <MX_SPI1_Init+0x74>)
 800083e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000842:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000844:	4b14      	ldr	r3, [pc, #80]	@ (8000898 <MX_SPI1_Init+0x74>)
 8000846:	2200      	movs	r2, #0
 8000848:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800084a:	4b13      	ldr	r3, [pc, #76]	@ (8000898 <MX_SPI1_Init+0x74>)
 800084c:	2200      	movs	r2, #0
 800084e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000850:	4b11      	ldr	r3, [pc, #68]	@ (8000898 <MX_SPI1_Init+0x74>)
 8000852:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000856:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000858:	4b0f      	ldr	r3, [pc, #60]	@ (8000898 <MX_SPI1_Init+0x74>)
 800085a:	2200      	movs	r2, #0
 800085c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800085e:	4b0e      	ldr	r3, [pc, #56]	@ (8000898 <MX_SPI1_Init+0x74>)
 8000860:	2200      	movs	r2, #0
 8000862:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000864:	4b0c      	ldr	r3, [pc, #48]	@ (8000898 <MX_SPI1_Init+0x74>)
 8000866:	2200      	movs	r2, #0
 8000868:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800086a:	4b0b      	ldr	r3, [pc, #44]	@ (8000898 <MX_SPI1_Init+0x74>)
 800086c:	2200      	movs	r2, #0
 800086e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000870:	4b09      	ldr	r3, [pc, #36]	@ (8000898 <MX_SPI1_Init+0x74>)
 8000872:	2207      	movs	r2, #7
 8000874:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000876:	4b08      	ldr	r3, [pc, #32]	@ (8000898 <MX_SPI1_Init+0x74>)
 8000878:	2200      	movs	r2, #0
 800087a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800087c:	4b06      	ldr	r3, [pc, #24]	@ (8000898 <MX_SPI1_Init+0x74>)
 800087e:	2208      	movs	r2, #8
 8000880:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000882:	4805      	ldr	r0, [pc, #20]	@ (8000898 <MX_SPI1_Init+0x74>)
 8000884:	f002 fa86 	bl	8002d94 <HAL_SPI_Init>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800088e:	f000 f8e7 	bl	8000a60 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000892:	bf00      	nop
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	200001e0 	.word	0x200001e0
 800089c:	40013000 	.word	0x40013000

080008a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b088      	sub	sp, #32
 80008a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a6:	f107 030c 	add.w	r3, r7, #12
 80008aa:	2200      	movs	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]
 80008ae:	605a      	str	r2, [r3, #4]
 80008b0:	609a      	str	r2, [r3, #8]
 80008b2:	60da      	str	r2, [r3, #12]
 80008b4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b6:	4b27      	ldr	r3, [pc, #156]	@ (8000954 <MX_GPIO_Init+0xb4>)
 80008b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ba:	4a26      	ldr	r2, [pc, #152]	@ (8000954 <MX_GPIO_Init+0xb4>)
 80008bc:	f043 0301 	orr.w	r3, r3, #1
 80008c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008c2:	4b24      	ldr	r3, [pc, #144]	@ (8000954 <MX_GPIO_Init+0xb4>)
 80008c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008c6:	f003 0301 	and.w	r3, r3, #1
 80008ca:	60bb      	str	r3, [r7, #8]
 80008cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ce:	4b21      	ldr	r3, [pc, #132]	@ (8000954 <MX_GPIO_Init+0xb4>)
 80008d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008d2:	4a20      	ldr	r2, [pc, #128]	@ (8000954 <MX_GPIO_Init+0xb4>)
 80008d4:	f043 0304 	orr.w	r3, r3, #4
 80008d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008da:	4b1e      	ldr	r3, [pc, #120]	@ (8000954 <MX_GPIO_Init+0xb4>)
 80008dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008de:	f003 0304 	and.w	r3, r3, #4
 80008e2:	607b      	str	r3, [r7, #4]
 80008e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008e6:	4b1b      	ldr	r3, [pc, #108]	@ (8000954 <MX_GPIO_Init+0xb4>)
 80008e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ea:	4a1a      	ldr	r2, [pc, #104]	@ (8000954 <MX_GPIO_Init+0xb4>)
 80008ec:	f043 0302 	orr.w	r3, r3, #2
 80008f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008f2:	4b18      	ldr	r3, [pc, #96]	@ (8000954 <MX_GPIO_Init+0xb4>)
 80008f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008f6:	f003 0302 	and.w	r3, r3, #2
 80008fa:	603b      	str	r3, [r7, #0]
 80008fc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(W5500_RST_GPIO_Port, W5500_RST_Pin, GPIO_PIN_RESET);
 80008fe:	2200      	movs	r2, #0
 8000900:	2180      	movs	r1, #128	@ 0x80
 8000902:	4815      	ldr	r0, [pc, #84]	@ (8000958 <MX_GPIO_Init+0xb8>)
 8000904:	f001 fc84 	bl	8002210 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000908:	2200      	movs	r2, #0
 800090a:	2140      	movs	r1, #64	@ 0x40
 800090c:	4813      	ldr	r0, [pc, #76]	@ (800095c <MX_GPIO_Init+0xbc>)
 800090e:	f001 fc7f 	bl	8002210 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : W5500_RST_Pin */
  GPIO_InitStruct.Pin = W5500_RST_Pin;
 8000912:	2380      	movs	r3, #128	@ 0x80
 8000914:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000916:	2301      	movs	r3, #1
 8000918:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091a:	2300      	movs	r3, #0
 800091c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091e:	2300      	movs	r3, #0
 8000920:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(W5500_RST_GPIO_Port, &GPIO_InitStruct);
 8000922:	f107 030c 	add.w	r3, r7, #12
 8000926:	4619      	mov	r1, r3
 8000928:	480b      	ldr	r0, [pc, #44]	@ (8000958 <MX_GPIO_Init+0xb8>)
 800092a:	f001 fad7 	bl	8001edc <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 800092e:	2340      	movs	r3, #64	@ 0x40
 8000930:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000932:	2301      	movs	r3, #1
 8000934:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000936:	2300      	movs	r3, #0
 8000938:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093a:	2300      	movs	r3, #0
 800093c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 800093e:	f107 030c 	add.w	r3, r7, #12
 8000942:	4619      	mov	r1, r3
 8000944:	4805      	ldr	r0, [pc, #20]	@ (800095c <MX_GPIO_Init+0xbc>)
 8000946:	f001 fac9 	bl	8001edc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800094a:	bf00      	nop
 800094c:	3720      	adds	r7, #32
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	40021000 	.word	0x40021000
 8000958:	48000800 	.word	0x48000800
 800095c:	48000400 	.word	0x48000400

08000960 <cs_select>:

/* USER CODE BEGIN 4 */
void 	cs_select(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, RESET);
 8000964:	2200      	movs	r2, #0
 8000966:	2140      	movs	r1, #64	@ 0x40
 8000968:	4802      	ldr	r0, [pc, #8]	@ (8000974 <cs_select+0x14>)
 800096a:	f001 fc51 	bl	8002210 <HAL_GPIO_WritePin>
}
 800096e:	bf00      	nop
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	48000400 	.word	0x48000400

08000978 <cs_deselect>:

void 	cs_deselect(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, SET);
 800097c:	2201      	movs	r2, #1
 800097e:	2140      	movs	r1, #64	@ 0x40
 8000980:	4802      	ldr	r0, [pc, #8]	@ (800098c <cs_deselect+0x14>)
 8000982:	f001 fc45 	bl	8002210 <HAL_GPIO_WritePin>
}
 8000986:	bf00      	nop
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	48000400 	.word	0x48000400

08000990 <cris_enter>:

void 	cris_enter(void)
{
 8000990:	b480      	push	{r7}
 8000992:	b083      	sub	sp, #12
 8000994:	af00      	add	r7, sp, #0
 8000996:	2301      	movs	r3, #1
 8000998:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	f383 8810 	msr	PRIMASK, r3
}
 80009a0:	bf00      	nop
	__set_PRIMASK(1);
}
 80009a2:	bf00      	nop
 80009a4:	370c      	adds	r7, #12
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr

080009ae <cris_exit>:

void 	cris_exit(void)
{
 80009ae:	b480      	push	{r7}
 80009b0:	b083      	sub	sp, #12
 80009b2:	af00      	add	r7, sp, #0
 80009b4:	2300      	movs	r3, #0
 80009b6:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	f383 8810 	msr	PRIMASK, r3
}
 80009be:	bf00      	nop
	__set_PRIMASK(0);
}
 80009c0:	bf00      	nop
 80009c2:	370c      	adds	r7, #12
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr

080009cc <spi_readbyte>:

uint8_t spi_readbyte(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
	uint8_t data;
	HAL_SPI_Receive(&hspi1,&data,1,100);
 80009d2:	1df9      	adds	r1, r7, #7
 80009d4:	2364      	movs	r3, #100	@ 0x64
 80009d6:	2201      	movs	r2, #1
 80009d8:	4803      	ldr	r0, [pc, #12]	@ (80009e8 <spi_readbyte+0x1c>)
 80009da:	f002 fbfb 	bl	80031d4 <HAL_SPI_Receive>
	return data;
 80009de:	79fb      	ldrb	r3, [r7, #7]
}
 80009e0:	4618      	mov	r0, r3
 80009e2:	3708      	adds	r7, #8
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	200001e0 	.word	0x200001e0

080009ec <spi_writebyte>:

void 	spi_writebyte(uint8_t wb)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	4603      	mov	r3, r0
 80009f4:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi1,&wb,1,100);
 80009f6:	1df9      	adds	r1, r7, #7
 80009f8:	2364      	movs	r3, #100	@ 0x64
 80009fa:	2201      	movs	r2, #1
 80009fc:	4803      	ldr	r0, [pc, #12]	@ (8000a0c <spi_writebyte+0x20>)
 80009fe:	f002 fa74 	bl	8002eea <HAL_SPI_Transmit>
}
 8000a02:	bf00      	nop
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	200001e0 	.word	0x200001e0

08000a10 <spi_readburst>:

void 	spi_readburst(uint8_t* pBuf, uint16_t len)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
 8000a18:	460b      	mov	r3, r1
 8000a1a:	807b      	strh	r3, [r7, #2]
	HAL_SPI_Receive(&hspi1, pBuf, len, HAL_MAX_DELAY);
 8000a1c:	887a      	ldrh	r2, [r7, #2]
 8000a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a22:	6879      	ldr	r1, [r7, #4]
 8000a24:	4803      	ldr	r0, [pc, #12]	@ (8000a34 <spi_readburst+0x24>)
 8000a26:	f002 fbd5 	bl	80031d4 <HAL_SPI_Receive>
}
 8000a2a:	bf00      	nop
 8000a2c:	3708      	adds	r7, #8
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	200001e0 	.word	0x200001e0

08000a38 <spi_writeburst>:

void 	spi_writeburst(uint8_t* pBuf, uint16_t len)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
 8000a40:	460b      	mov	r3, r1
 8000a42:	807b      	strh	r3, [r7, #2]
	HAL_SPI_Transmit(&hspi1, pBuf, len, HAL_MAX_DELAY);
 8000a44:	887a      	ldrh	r2, [r7, #2]
 8000a46:	f04f 33ff 	mov.w	r3, #4294967295
 8000a4a:	6879      	ldr	r1, [r7, #4]
 8000a4c:	4803      	ldr	r0, [pc, #12]	@ (8000a5c <spi_writeburst+0x24>)
 8000a4e:	f002 fa4c 	bl	8002eea <HAL_SPI_Transmit>
}
 8000a52:	bf00      	nop
 8000a54:	3708      	adds	r7, #8
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	200001e0 	.word	0x200001e0

08000a60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000a64:	b672      	cpsid	i
}
 8000a66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a68:	bf00      	nop
 8000a6a:	e7fd      	b.n	8000a68 <Error_Handler+0x8>

08000a6c <socket>:




int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{ 
 8000a6c:	b590      	push	{r4, r7, lr}
 8000a6e:	b089      	sub	sp, #36	@ 0x24
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	4604      	mov	r4, r0
 8000a74:	4608      	mov	r0, r1
 8000a76:	4611      	mov	r1, r2
 8000a78:	461a      	mov	r2, r3
 8000a7a:	4623      	mov	r3, r4
 8000a7c:	71fb      	strb	r3, [r7, #7]
 8000a7e:	4603      	mov	r3, r0
 8000a80:	71bb      	strb	r3, [r7, #6]
 8000a82:	460b      	mov	r3, r1
 8000a84:	80bb      	strh	r3, [r7, #4]
 8000a86:	4613      	mov	r3, r2
 8000a88:	70fb      	strb	r3, [r7, #3]

   uint8_t taddr[16];
   uint16_t local_port=0;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	83fb      	strh	r3, [r7, #30]
   CHECK_SOCKNUM(); 
 8000a8e:	79fb      	ldrb	r3, [r7, #7]
 8000a90:	2b08      	cmp	r3, #8
 8000a92:	d902      	bls.n	8000a9a <socket+0x2e>
 8000a94:	f04f 33ff 	mov.w	r3, #4294967295
 8000a98:	e103      	b.n	8000ca2 <socket+0x236>
   switch (protocol & 0x0F)
 8000a9a:	79bb      	ldrb	r3, [r7, #6]
 8000a9c:	f003 030f 	and.w	r3, r3, #15
 8000aa0:	3b01      	subs	r3, #1
 8000aa2:	2b0d      	cmp	r3, #13
 8000aa4:	d82c      	bhi.n	8000b00 <socket+0x94>
 8000aa6:	a201      	add	r2, pc, #4	@ (adr r2, 8000aac <socket+0x40>)
 8000aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000aac:	08000ae5 	.word	0x08000ae5
 8000ab0:	08000b07 	.word	0x08000b07
 8000ab4:	08000b07 	.word	0x08000b07
 8000ab8:	08000b07 	.word	0x08000b07
 8000abc:	08000b01 	.word	0x08000b01
 8000ac0:	08000b01 	.word	0x08000b01
 8000ac4:	08000b01 	.word	0x08000b01
 8000ac8:	08000b01 	.word	0x08000b01
 8000acc:	08000b01 	.word	0x08000b01
 8000ad0:	08000b07 	.word	0x08000b07
 8000ad4:	08000b07 	.word	0x08000b07
 8000ad8:	08000b01 	.word	0x08000b01
 8000adc:	08000b01 	.word	0x08000b01
 8000ae0:	08000b07 	.word	0x08000b07
         break;
#else  
         case Sn_MR_TCP :
         {
            uint8_t taddr;
            getSIPR((uint8_t*)&taddr);
 8000ae4:	f107 030b 	add.w	r3, r7, #11
 8000ae8:	2204      	movs	r2, #4
 8000aea:	4619      	mov	r1, r3
 8000aec:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8000af0:	f7ff fc34 	bl	800035c <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8000af4:	7afb      	ldrb	r3, [r7, #11]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d107      	bne.n	8000b0a <socket+0x9e>
 8000afa:	f06f 0302 	mvn.w	r3, #2
 8000afe:	e0d0      	b.n	8000ca2 <socket+0x236>
      case Sn_MR_MACRAW :
      case Sn_MR_IPRAW4 :
      case Sn_MR_IPRAW6 :
         break; 
      default :
        return SOCKERR_SOCKMODE;
 8000b00:	f06f 0304 	mvn.w	r3, #4
 8000b04:	e0cd      	b.n	8000ca2 <socket+0x236>
         break; 
 8000b06:	bf00      	nop
 8000b08:	e000      	b.n	8000b0c <socket+0xa0>
            break;
 8000b0a:	bf00      	nop
   } 

   if((flag & 0x04)) return SOCKERR_SOCKFLAG;
 8000b0c:	78fb      	ldrb	r3, [r7, #3]
 8000b0e:	f003 0304 	and.w	r3, r3, #4
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d002      	beq.n	8000b1c <socket+0xb0>
 8000b16:	f06f 0305 	mvn.w	r3, #5
 8000b1a:	e0c2      	b.n	8000ca2 <socket+0x236>
   if(flag != 0)
 8000b1c:	78fb      	ldrb	r3, [r7, #3]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d028      	beq.n	8000b74 <socket+0x108>
   {
      switch(protocol)
 8000b22:	79bb      	ldrb	r3, [r7, #6]
 8000b24:	2b01      	cmp	r3, #1
 8000b26:	d002      	beq.n	8000b2e <socket+0xc2>
 8000b28:	2b02      	cmp	r3, #2
 8000b2a:	d008      	beq.n	8000b3e <socket+0xd2>
         break;

#endif 

         default:
            break;
 8000b2c:	e022      	b.n	8000b74 <socket+0x108>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 8000b2e:	78fb      	ldrb	r3, [r7, #3]
 8000b30:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d11a      	bne.n	8000b6e <socket+0x102>
 8000b38:	f06f 0305 	mvn.w	r3, #5
 8000b3c:	e0b1      	b.n	8000ca2 <socket+0x236>
   	      if(flag & SF_IGMP_VER2)
 8000b3e:	78fb      	ldrb	r3, [r7, #3]
 8000b40:	f003 0320 	and.w	r3, r3, #32
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d006      	beq.n	8000b56 <socket+0xea>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8000b48:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	db02      	blt.n	8000b56 <socket+0xea>
 8000b50:	f06f 0305 	mvn.w	r3, #5
 8000b54:	e0a5      	b.n	8000ca2 <socket+0x236>
      	      if(flag & SF_UNI_BLOCK)
 8000b56:	78fb      	ldrb	r3, [r7, #3]
 8000b58:	f003 0310 	and.w	r3, r3, #16
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d008      	beq.n	8000b72 <socket+0x106>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8000b60:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	db04      	blt.n	8000b72 <socket+0x106>
 8000b68:	f06f 0305 	mvn.w	r3, #5
 8000b6c:	e099      	b.n	8000ca2 <socket+0x236>
   	      break;
 8000b6e:	bf00      	nop
 8000b70:	e000      	b.n	8000b74 <socket+0x108>
         break;
 8000b72:	bf00      	nop
      }
   }
   close(sn);
 8000b74:	79fb      	ldrb	r3, [r7, #7]
 8000b76:	4618      	mov	r0, r3
 8000b78:	f000 f8a2 	bl	8000cc0 <close>
   setSn_MR(sn,(protocol | (flag & 0xF0)));
 8000b7c:	79fb      	ldrb	r3, [r7, #7]
 8000b7e:	009b      	lsls	r3, r3, #2
 8000b80:	3301      	adds	r3, #1
 8000b82:	00db      	lsls	r3, r3, #3
 8000b84:	4618      	mov	r0, r3
 8000b86:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000b8a:	f023 030f 	bic.w	r3, r3, #15
 8000b8e:	b25a      	sxtb	r2, r3
 8000b90:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000b94:	4313      	orrs	r3, r2
 8000b96:	b25b      	sxtb	r3, r3
 8000b98:	b2db      	uxtb	r3, r3
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	f7ff fb90 	bl	80002c0 <WIZCHIP_WRITE>
#ifdef IPV6_AVAILABLE
   setSn_MR2(sn, flag & 0x03);  
#endif 
   if(!port)
 8000ba0:	88bb      	ldrh	r3, [r7, #4]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d110      	bne.n	8000bc8 <socket+0x15c>
   {
      port = sock_any_port++;
 8000ba6:	4b41      	ldr	r3, [pc, #260]	@ (8000cac <socket+0x240>)
 8000ba8:	881b      	ldrh	r3, [r3, #0]
 8000baa:	1c5a      	adds	r2, r3, #1
 8000bac:	b291      	uxth	r1, r2
 8000bae:	4a3f      	ldr	r2, [pc, #252]	@ (8000cac <socket+0x240>)
 8000bb0:	8011      	strh	r1, [r2, #0]
 8000bb2:	80bb      	strh	r3, [r7, #4]
      if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8000bb4:	4b3d      	ldr	r3, [pc, #244]	@ (8000cac <socket+0x240>)
 8000bb6:	881b      	ldrh	r3, [r3, #0]
 8000bb8:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 8000bbc:	4293      	cmp	r3, r2
 8000bbe:	d103      	bne.n	8000bc8 <socket+0x15c>
 8000bc0:	4b3a      	ldr	r3, [pc, #232]	@ (8000cac <socket+0x240>)
 8000bc2:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8000bc6:	801a      	strh	r2, [r3, #0]
   }
   setSn_PORTR(sn,port);
 8000bc8:	79fb      	ldrb	r3, [r7, #7]
 8000bca:	009b      	lsls	r3, r3, #2
 8000bcc:	3301      	adds	r3, #1
 8000bce:	00db      	lsls	r3, r3, #3
 8000bd0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8000bd4:	461a      	mov	r2, r3
 8000bd6:	88bb      	ldrh	r3, [r7, #4]
 8000bd8:	0a1b      	lsrs	r3, r3, #8
 8000bda:	b29b      	uxth	r3, r3
 8000bdc:	b2db      	uxtb	r3, r3
 8000bde:	4619      	mov	r1, r3
 8000be0:	4610      	mov	r0, r2
 8000be2:	f7ff fb6d 	bl	80002c0 <WIZCHIP_WRITE>
 8000be6:	79fb      	ldrb	r3, [r7, #7]
 8000be8:	009b      	lsls	r3, r3, #2
 8000bea:	3301      	adds	r3, #1
 8000bec:	00db      	lsls	r3, r3, #3
 8000bee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8000bf2:	461a      	mov	r2, r3
 8000bf4:	88bb      	ldrh	r3, [r7, #4]
 8000bf6:	b2db      	uxtb	r3, r3
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	4610      	mov	r0, r2
 8000bfc:	f7ff fb60 	bl	80002c0 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8000c00:	79fb      	ldrb	r3, [r7, #7]
 8000c02:	009b      	lsls	r3, r3, #2
 8000c04:	3301      	adds	r3, #1
 8000c06:	00db      	lsls	r3, r3, #3
 8000c08:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8000c0c:	2101      	movs	r1, #1
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f7ff fb56 	bl	80002c0 <WIZCHIP_WRITE>

   while(getSn_CR(sn));
 8000c14:	bf00      	nop
 8000c16:	79fb      	ldrb	r3, [r7, #7]
 8000c18:	009b      	lsls	r3, r3, #2
 8000c1a:	3301      	adds	r3, #1
 8000c1c:	00db      	lsls	r3, r3, #3
 8000c1e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8000c22:	4618      	mov	r0, r3
 8000c24:	f7ff fb00 	bl	8000228 <WIZCHIP_READ>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d1f3      	bne.n	8000c16 <socket+0x1aa>

   sock_io_mode &= ~(1 <<sn);
 8000c2e:	79fb      	ldrb	r3, [r7, #7]
 8000c30:	2201      	movs	r2, #1
 8000c32:	fa02 f303 	lsl.w	r3, r2, r3
 8000c36:	b21b      	sxth	r3, r3
 8000c38:	43db      	mvns	r3, r3
 8000c3a:	b21a      	sxth	r2, r3
 8000c3c:	4b1c      	ldr	r3, [pc, #112]	@ (8000cb0 <socket+0x244>)
 8000c3e:	881b      	ldrh	r3, [r3, #0]
 8000c40:	b21b      	sxth	r3, r3
 8000c42:	4013      	ands	r3, r2
 8000c44:	b21b      	sxth	r3, r3
 8000c46:	b29a      	uxth	r2, r3
 8000c48:	4b19      	ldr	r3, [pc, #100]	@ (8000cb0 <socket+0x244>)
 8000c4a:	801a      	strh	r2, [r3, #0]
   sock_io_mode |= ((flag & (SF_IO_NONBLOCK>>3)) << sn);
 8000c4c:	4b18      	ldr	r3, [pc, #96]	@ (8000cb0 <socket+0x244>)
 8000c4e:	881a      	ldrh	r2, [r3, #0]
 8000c50:	4b17      	ldr	r3, [pc, #92]	@ (8000cb0 <socket+0x244>)
 8000c52:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8000c54:	79fb      	ldrb	r3, [r7, #7]
 8000c56:	2201      	movs	r2, #1
 8000c58:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5c:	b21b      	sxth	r3, r3
 8000c5e:	43db      	mvns	r3, r3
 8000c60:	b21a      	sxth	r2, r3
 8000c62:	4b14      	ldr	r3, [pc, #80]	@ (8000cb4 <socket+0x248>)
 8000c64:	881b      	ldrh	r3, [r3, #0]
 8000c66:	b21b      	sxth	r3, r3
 8000c68:	4013      	ands	r3, r2
 8000c6a:	b21b      	sxth	r3, r3
 8000c6c:	b29a      	uxth	r2, r3
 8000c6e:	4b11      	ldr	r3, [pc, #68]	@ (8000cb4 <socket+0x248>)
 8000c70:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8000c72:	79fb      	ldrb	r3, [r7, #7]
 8000c74:	4a10      	ldr	r2, [pc, #64]	@ (8000cb8 <socket+0x24c>)
 8000c76:	2100      	movs	r1, #0
 8000c78:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   sock_pack_info[sn] = PACK_NONE;
 8000c7c:	79fb      	ldrb	r3, [r7, #7]
 8000c7e:	4a0f      	ldr	r2, [pc, #60]	@ (8000cbc <socket+0x250>)
 8000c80:	2100      	movs	r1, #0
 8000c82:	54d1      	strb	r1, [r2, r3]

   while(getSn_SR(sn) == SOCK_CLOSED) ;
 8000c84:	bf00      	nop
 8000c86:	79fb      	ldrb	r3, [r7, #7]
 8000c88:	009b      	lsls	r3, r3, #2
 8000c8a:	3301      	adds	r3, #1
 8000c8c:	00db      	lsls	r3, r3, #3
 8000c8e:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8000c92:	4618      	mov	r0, r3
 8000c94:	f7ff fac8 	bl	8000228 <WIZCHIP_READ>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d0f3      	beq.n	8000c86 <socket+0x21a>
//   printf("[%d]%d\r\n", sn, getSn_PORTR(sn));
   return sn;
 8000c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
}  
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	3724      	adds	r7, #36	@ 0x24
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd90      	pop	{r4, r7, pc}
 8000caa:	bf00      	nop
 8000cac:	20000034 	.word	0x20000034
 8000cb0:	2000124c 	.word	0x2000124c
 8000cb4:	2000124e 	.word	0x2000124e
 8000cb8:	20001250 	.word	0x20001250
 8000cbc:	20001260 	.word	0x20001260

08000cc0 <close>:


int8_t close(uint8_t sn)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 8000cca:	79fb      	ldrb	r3, [r7, #7]
 8000ccc:	2b08      	cmp	r3, #8
 8000cce:	d902      	bls.n	8000cd6 <close+0x16>
 8000cd0:	f04f 33ff 	mov.w	r3, #4294967295
 8000cd4:	e055      	b.n	8000d82 <close+0xc2>
   setSn_CR(sn,Sn_CR_CLOSE);
 8000cd6:	79fb      	ldrb	r3, [r7, #7]
 8000cd8:	009b      	lsls	r3, r3, #2
 8000cda:	3301      	adds	r3, #1
 8000cdc:	00db      	lsls	r3, r3, #3
 8000cde:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8000ce2:	2110      	movs	r1, #16
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f7ff faeb 	bl	80002c0 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while( getSn_CR(sn) );
 8000cea:	bf00      	nop
 8000cec:	79fb      	ldrb	r3, [r7, #7]
 8000cee:	009b      	lsls	r3, r3, #2
 8000cf0:	3301      	adds	r3, #1
 8000cf2:	00db      	lsls	r3, r3, #3
 8000cf4:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f7ff fa95 	bl	8000228 <WIZCHIP_READ>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d1f3      	bne.n	8000cec <close+0x2c>
   /* clear all interrupt of SOCKETn. */
   setSn_IR(sn, 0xFF);  	
 8000d04:	79fb      	ldrb	r3, [r7, #7]
 8000d06:	009b      	lsls	r3, r3, #2
 8000d08:	3301      	adds	r3, #1
 8000d0a:	00db      	lsls	r3, r3, #3
 8000d0c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000d10:	211f      	movs	r1, #31
 8000d12:	4618      	mov	r0, r3
 8000d14:	f7ff fad4 	bl	80002c0 <WIZCHIP_WRITE>
   //setSn_IRCLR(sn, 0xFF);  
   /* Release the sock_io_mode of SOCKETn. */
   sock_io_mode &= ~(1<<sn); 
 8000d18:	79fb      	ldrb	r3, [r7, #7]
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d20:	b21b      	sxth	r3, r3
 8000d22:	43db      	mvns	r3, r3
 8000d24:	b21a      	sxth	r2, r3
 8000d26:	4b19      	ldr	r3, [pc, #100]	@ (8000d8c <close+0xcc>)
 8000d28:	881b      	ldrh	r3, [r3, #0]
 8000d2a:	b21b      	sxth	r3, r3
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	b21b      	sxth	r3, r3
 8000d30:	b29a      	uxth	r2, r3
 8000d32:	4b16      	ldr	r3, [pc, #88]	@ (8000d8c <close+0xcc>)
 8000d34:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8000d36:	79fb      	ldrb	r3, [r7, #7]
 8000d38:	4a15      	ldr	r2, [pc, #84]	@ (8000d90 <close+0xd0>)
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   sock_is_sending &= ~(1<<sn);
 8000d40:	79fb      	ldrb	r3, [r7, #7]
 8000d42:	2201      	movs	r2, #1
 8000d44:	fa02 f303 	lsl.w	r3, r2, r3
 8000d48:	b21b      	sxth	r3, r3
 8000d4a:	43db      	mvns	r3, r3
 8000d4c:	b21a      	sxth	r2, r3
 8000d4e:	4b11      	ldr	r3, [pc, #68]	@ (8000d94 <close+0xd4>)
 8000d50:	881b      	ldrh	r3, [r3, #0]
 8000d52:	b21b      	sxth	r3, r3
 8000d54:	4013      	ands	r3, r2
 8000d56:	b21b      	sxth	r3, r3
 8000d58:	b29a      	uxth	r2, r3
 8000d5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000d94 <close+0xd4>)
 8000d5c:	801a      	strh	r2, [r3, #0]
   sock_pack_info[sn] = PACK_NONE;
 8000d5e:	79fb      	ldrb	r3, [r7, #7]
 8000d60:	4a0d      	ldr	r2, [pc, #52]	@ (8000d98 <close+0xd8>)
 8000d62:	2100      	movs	r1, #0
 8000d64:	54d1      	strb	r1, [r2, r3]
   while(getSn_SR(sn) != SOCK_CLOSED);
 8000d66:	bf00      	nop
 8000d68:	79fb      	ldrb	r3, [r7, #7]
 8000d6a:	009b      	lsls	r3, r3, #2
 8000d6c:	3301      	adds	r3, #1
 8000d6e:	00db      	lsls	r3, r3, #3
 8000d70:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8000d74:	4618      	mov	r0, r3
 8000d76:	f7ff fa57 	bl	8000228 <WIZCHIP_READ>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d1f3      	bne.n	8000d68 <close+0xa8>
   return SOCK_OK;
 8000d80:	2301      	movs	r3, #1
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	3708      	adds	r7, #8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	2000124c 	.word	0x2000124c
 8000d90:	20001250 	.word	0x20001250
 8000d94:	2000124e 	.word	0x2000124e
 8000d98:	20001260 	.word	0x20001260

08000d9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000da2:	4b0f      	ldr	r3, [pc, #60]	@ (8000de0 <HAL_MspInit+0x44>)
 8000da4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000da6:	4a0e      	ldr	r2, [pc, #56]	@ (8000de0 <HAL_MspInit+0x44>)
 8000da8:	f043 0301 	orr.w	r3, r3, #1
 8000dac:	6613      	str	r3, [r2, #96]	@ 0x60
 8000dae:	4b0c      	ldr	r3, [pc, #48]	@ (8000de0 <HAL_MspInit+0x44>)
 8000db0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000db2:	f003 0301 	and.w	r3, r3, #1
 8000db6:	607b      	str	r3, [r7, #4]
 8000db8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dba:	4b09      	ldr	r3, [pc, #36]	@ (8000de0 <HAL_MspInit+0x44>)
 8000dbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dbe:	4a08      	ldr	r2, [pc, #32]	@ (8000de0 <HAL_MspInit+0x44>)
 8000dc0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000dc4:	6593      	str	r3, [r2, #88]	@ 0x58
 8000dc6:	4b06      	ldr	r3, [pc, #24]	@ (8000de0 <HAL_MspInit+0x44>)
 8000dc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dce:	603b      	str	r3, [r7, #0]
 8000dd0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000dd2:	f001 fad9 	bl	8002388 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	40021000 	.word	0x40021000

08000de4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b08a      	sub	sp, #40	@ 0x28
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dec:	f107 0314 	add.w	r3, r7, #20
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	605a      	str	r2, [r3, #4]
 8000df6:	609a      	str	r2, [r3, #8]
 8000df8:	60da      	str	r2, [r3, #12]
 8000dfa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a17      	ldr	r2, [pc, #92]	@ (8000e60 <HAL_SPI_MspInit+0x7c>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d128      	bne.n	8000e58 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e06:	4b17      	ldr	r3, [pc, #92]	@ (8000e64 <HAL_SPI_MspInit+0x80>)
 8000e08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e0a:	4a16      	ldr	r2, [pc, #88]	@ (8000e64 <HAL_SPI_MspInit+0x80>)
 8000e0c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000e10:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e12:	4b14      	ldr	r3, [pc, #80]	@ (8000e64 <HAL_SPI_MspInit+0x80>)
 8000e14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e16:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e1a:	613b      	str	r3, [r7, #16]
 8000e1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e1e:	4b11      	ldr	r3, [pc, #68]	@ (8000e64 <HAL_SPI_MspInit+0x80>)
 8000e20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e22:	4a10      	ldr	r2, [pc, #64]	@ (8000e64 <HAL_SPI_MspInit+0x80>)
 8000e24:	f043 0301 	orr.w	r3, r3, #1
 8000e28:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e2a:	4b0e      	ldr	r3, [pc, #56]	@ (8000e64 <HAL_SPI_MspInit+0x80>)
 8000e2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e2e:	f003 0301 	and.w	r3, r3, #1
 8000e32:	60fb      	str	r3, [r7, #12]
 8000e34:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000e36:	23e0      	movs	r3, #224	@ 0xe0
 8000e38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e42:	2300      	movs	r3, #0
 8000e44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e46:	2305      	movs	r3, #5
 8000e48:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e4a:	f107 0314 	add.w	r3, r7, #20
 8000e4e:	4619      	mov	r1, r3
 8000e50:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e54:	f001 f842 	bl	8001edc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000e58:	bf00      	nop
 8000e5a:	3728      	adds	r7, #40	@ 0x28
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	40013000 	.word	0x40013000
 8000e64:	40021000 	.word	0x40021000

08000e68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e6c:	bf00      	nop
 8000e6e:	e7fd      	b.n	8000e6c <NMI_Handler+0x4>

08000e70 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e74:	bf00      	nop
 8000e76:	e7fd      	b.n	8000e74 <HardFault_Handler+0x4>

08000e78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e7c:	bf00      	nop
 8000e7e:	e7fd      	b.n	8000e7c <MemManage_Handler+0x4>

08000e80 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e84:	bf00      	nop
 8000e86:	e7fd      	b.n	8000e84 <BusFault_Handler+0x4>

08000e88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e8c:	bf00      	nop
 8000e8e:	e7fd      	b.n	8000e8c <UsageFault_Handler+0x4>

08000e90 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e94:	bf00      	nop
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr

08000e9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e9e:	b480      	push	{r7}
 8000ea0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ea2:	bf00      	nop
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr

08000eac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eb0:	bf00      	nop
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr

08000eba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eba:	b580      	push	{r7, lr}
 8000ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ebe:	f000 fee9 	bl	8001c94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ec2:	bf00      	nop
 8000ec4:	bd80      	pop	{r7, pc}
	...

08000ec8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b086      	sub	sp, #24
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ed0:	4a14      	ldr	r2, [pc, #80]	@ (8000f24 <_sbrk+0x5c>)
 8000ed2:	4b15      	ldr	r3, [pc, #84]	@ (8000f28 <_sbrk+0x60>)
 8000ed4:	1ad3      	subs	r3, r2, r3
 8000ed6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000edc:	4b13      	ldr	r3, [pc, #76]	@ (8000f2c <_sbrk+0x64>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d102      	bne.n	8000eea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ee4:	4b11      	ldr	r3, [pc, #68]	@ (8000f2c <_sbrk+0x64>)
 8000ee6:	4a12      	ldr	r2, [pc, #72]	@ (8000f30 <_sbrk+0x68>)
 8000ee8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eea:	4b10      	ldr	r3, [pc, #64]	@ (8000f2c <_sbrk+0x64>)
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4413      	add	r3, r2
 8000ef2:	693a      	ldr	r2, [r7, #16]
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	d207      	bcs.n	8000f08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ef8:	f002 ff50 	bl	8003d9c <__errno>
 8000efc:	4603      	mov	r3, r0
 8000efe:	220c      	movs	r2, #12
 8000f00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f02:	f04f 33ff 	mov.w	r3, #4294967295
 8000f06:	e009      	b.n	8000f1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f08:	4b08      	ldr	r3, [pc, #32]	@ (8000f2c <_sbrk+0x64>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f0e:	4b07      	ldr	r3, [pc, #28]	@ (8000f2c <_sbrk+0x64>)
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4413      	add	r3, r2
 8000f16:	4a05      	ldr	r2, [pc, #20]	@ (8000f2c <_sbrk+0x64>)
 8000f18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f1a:	68fb      	ldr	r3, [r7, #12]
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3718      	adds	r7, #24
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	20020000 	.word	0x20020000
 8000f28:	00000400 	.word	0x00000400
 8000f2c:	20001268 	.word	0x20001268
 8000f30:	200013c0 	.word	0x200013c0

08000f34 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f38:	4b06      	ldr	r3, [pc, #24]	@ (8000f54 <SystemInit+0x20>)
 8000f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f3e:	4a05      	ldr	r2, [pc, #20]	@ (8000f54 <SystemInit+0x20>)
 8000f40:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f44:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f48:	bf00      	nop
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	e000ed00 	.word	0xe000ed00

08000f58 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	bf00      	nop
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr

08000f66 <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 8000f66:	b480      	push	{r7}
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	bf00      	nop
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr

08000f74 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	bf00      	nop
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr

08000f82 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8000f82:	b480      	push	{r7}
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	bf00      	nop
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr

08000f90 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	370c      	adds	r7, #12
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr

08000faa <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8000faa:	b480      	push	{r7}
 8000fac:	b083      	sub	sp, #12
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	6078      	str	r0, [r7, #4]
 8000fb2:	460b      	mov	r3, r1
 8000fb4:	70fb      	strb	r3, [r7, #3]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	78fa      	ldrb	r2, [r7, #3]
 8000fba:	701a      	strb	r2, [r3, #0]
 8000fbc:	bf00      	nop
 8000fbe:	370c      	adds	r7, #12
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr

08000fc8 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	2300      	movs	r3, #0
 8000fce:	4618      	mov	r0, r3
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr

08000fd8 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	4603      	mov	r3, r0
 8000fe0:	71fb      	strb	r3, [r7, #7]
 8000fe2:	bf00      	nop
 8000fe4:	370c      	adds	r7, #12
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
	...

08000ff0 <wizchip_spi_readburst>:
 */
//void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}; 
#if 1
// 20231018 taylor
void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len)
{
 8000ff0:	b590      	push	{r4, r7, lr}
 8000ff2:	b085      	sub	sp, #20
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	807b      	strh	r3, [r7, #2]
	for(uint16_t i=0; i<len; i++)
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	81fb      	strh	r3, [r7, #14]
 8001000:	e00a      	b.n	8001018 <wizchip_spi_readburst+0x28>
	{
		*pBuf++ = WIZCHIP.IF.SPI._read_byte();
 8001002:	4b0a      	ldr	r3, [pc, #40]	@ (800102c <wizchip_spi_readburst+0x3c>)
 8001004:	69db      	ldr	r3, [r3, #28]
 8001006:	687c      	ldr	r4, [r7, #4]
 8001008:	1c62      	adds	r2, r4, #1
 800100a:	607a      	str	r2, [r7, #4]
 800100c:	4798      	blx	r3
 800100e:	4603      	mov	r3, r0
 8001010:	7023      	strb	r3, [r4, #0]
	for(uint16_t i=0; i<len; i++)
 8001012:	89fb      	ldrh	r3, [r7, #14]
 8001014:	3301      	adds	r3, #1
 8001016:	81fb      	strh	r3, [r7, #14]
 8001018:	89fa      	ldrh	r2, [r7, #14]
 800101a:	887b      	ldrh	r3, [r7, #2]
 800101c:	429a      	cmp	r2, r3
 800101e:	d3f0      	bcc.n	8001002 <wizchip_spi_readburst+0x12>
	}
}
 8001020:	bf00      	nop
 8001022:	bf00      	nop
 8001024:	3714      	adds	r7, #20
 8001026:	46bd      	mov	sp, r7
 8001028:	bd90      	pop	{r4, r7, pc}
 800102a:	bf00      	nop
 800102c:	2000003c 	.word	0x2000003c

08001030 <wizchip_spi_writeburst>:
 */
//void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
#if 1
// 20231018 taylor
void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	460b      	mov	r3, r1
 800103a:	807b      	strh	r3, [r7, #2]
	for(uint16_t i=0; i<len; i++)
 800103c:	2300      	movs	r3, #0
 800103e:	81fb      	strh	r3, [r7, #14]
 8001040:	e00a      	b.n	8001058 <wizchip_spi_writeburst+0x28>
	{
		WIZCHIP.IF.SPI._write_byte(*pBuf++);
 8001042:	4b0a      	ldr	r3, [pc, #40]	@ (800106c <wizchip_spi_writeburst+0x3c>)
 8001044:	6a1a      	ldr	r2, [r3, #32]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	1c59      	adds	r1, r3, #1
 800104a:	6079      	str	r1, [r7, #4]
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	4618      	mov	r0, r3
 8001050:	4790      	blx	r2
	for(uint16_t i=0; i<len; i++)
 8001052:	89fb      	ldrh	r3, [r7, #14]
 8001054:	3301      	adds	r3, #1
 8001056:	81fb      	strh	r3, [r7, #14]
 8001058:	89fa      	ldrh	r2, [r7, #14]
 800105a:	887b      	ldrh	r3, [r7, #2]
 800105c:	429a      	cmp	r2, r3
 800105e:	d3f0      	bcc.n	8001042 <wizchip_spi_writeburst+0x12>
	}
}
 8001060:	bf00      	nop
 8001062:	bf00      	nop
 8001064:	3710      	adds	r7, #16
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	2000003c 	.word	0x2000003c

08001070 <reg_wizchip_cris_cbfunc>:
static uint8_t      _DNS6_[16];    ///< DSN server IPv6 address
static ipconf_mode  _IPMODE_;      ///< IP configuration mode
#endif

void reg_wizchip_cris_cbfunc(void(*cris_en)(void), void(*cris_ex)(void))
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	6039      	str	r1, [r7, #0]
   if(!cris_en || !cris_ex)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d002      	beq.n	8001086 <reg_wizchip_cris_cbfunc+0x16>
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d106      	bne.n	8001094 <reg_wizchip_cris_cbfunc+0x24>
   {
      WIZCHIP.CRIS._enter = wizchip_cris_enter;
 8001086:	4b0a      	ldr	r3, [pc, #40]	@ (80010b0 <reg_wizchip_cris_cbfunc+0x40>)
 8001088:	4a0a      	ldr	r2, [pc, #40]	@ (80010b4 <reg_wizchip_cris_cbfunc+0x44>)
 800108a:	60da      	str	r2, [r3, #12]
      WIZCHIP.CRIS._exit  = wizchip_cris_exit;
 800108c:	4b08      	ldr	r3, [pc, #32]	@ (80010b0 <reg_wizchip_cris_cbfunc+0x40>)
 800108e:	4a0a      	ldr	r2, [pc, #40]	@ (80010b8 <reg_wizchip_cris_cbfunc+0x48>)
 8001090:	611a      	str	r2, [r3, #16]
 8001092:	e006      	b.n	80010a2 <reg_wizchip_cris_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CRIS._enter = cris_en;
 8001094:	4a06      	ldr	r2, [pc, #24]	@ (80010b0 <reg_wizchip_cris_cbfunc+0x40>)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	60d3      	str	r3, [r2, #12]
      WIZCHIP.CRIS._exit  = cris_ex;
 800109a:	4a05      	ldr	r2, [pc, #20]	@ (80010b0 <reg_wizchip_cris_cbfunc+0x40>)
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	6113      	str	r3, [r2, #16]
   }
}
 80010a0:	bf00      	nop
 80010a2:	bf00      	nop
 80010a4:	370c      	adds	r7, #12
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	2000003c 	.word	0x2000003c
 80010b4:	08000f59 	.word	0x08000f59
 80010b8:	08000f67 	.word	0x08000f67

080010bc <reg_wizchip_cs_cbfunc>:

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d002      	beq.n	80010d2 <reg_wizchip_cs_cbfunc+0x16>
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d106      	bne.n	80010e0 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 80010d2:	4b0a      	ldr	r3, [pc, #40]	@ (80010fc <reg_wizchip_cs_cbfunc+0x40>)
 80010d4:	4a0a      	ldr	r2, [pc, #40]	@ (8001100 <reg_wizchip_cs_cbfunc+0x44>)
 80010d6:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 80010d8:	4b08      	ldr	r3, [pc, #32]	@ (80010fc <reg_wizchip_cs_cbfunc+0x40>)
 80010da:	4a0a      	ldr	r2, [pc, #40]	@ (8001104 <reg_wizchip_cs_cbfunc+0x48>)
 80010dc:	619a      	str	r2, [r3, #24]
 80010de:	e006      	b.n	80010ee <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 80010e0:	4a06      	ldr	r2, [pc, #24]	@ (80010fc <reg_wizchip_cs_cbfunc+0x40>)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 80010e6:	4a05      	ldr	r2, [pc, #20]	@ (80010fc <reg_wizchip_cs_cbfunc+0x40>)
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	6193      	str	r3, [r2, #24]
   }
}
 80010ec:	bf00      	nop
 80010ee:	bf00      	nop
 80010f0:	370c      	adds	r7, #12
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	2000003c 	.word	0x2000003c
 8001100:	08000f75 	.word	0x08000f75
 8001104:	08000f83 	.word	0x08000f83

08001108 <reg_wizchip_spi_cbfunc>:
   else           WIZCHIP.IF.SPI._write_burst = spi_wbuf;
}
#else 

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
 8001110:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8001112:	bf00      	nop
 8001114:	4b0f      	ldr	r3, [pc, #60]	@ (8001154 <reg_wizchip_spi_cbfunc+0x4c>)
 8001116:	881b      	ldrh	r3, [r3, #0]
 8001118:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800111c:	2b00      	cmp	r3, #0
 800111e:	d0f9      	beq.n	8001114 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d002      	beq.n	800112c <reg_wizchip_spi_cbfunc+0x24>
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d106      	bne.n	800113a <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 800112c:	4b09      	ldr	r3, [pc, #36]	@ (8001154 <reg_wizchip_spi_cbfunc+0x4c>)
 800112e:	4a0a      	ldr	r2, [pc, #40]	@ (8001158 <reg_wizchip_spi_cbfunc+0x50>)
 8001130:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 8001132:	4b08      	ldr	r3, [pc, #32]	@ (8001154 <reg_wizchip_spi_cbfunc+0x4c>)
 8001134:	4a09      	ldr	r2, [pc, #36]	@ (800115c <reg_wizchip_spi_cbfunc+0x54>)
 8001136:	621a      	str	r2, [r3, #32]
 8001138:	e006      	b.n	8001148 <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 800113a:	4a06      	ldr	r2, [pc, #24]	@ (8001154 <reg_wizchip_spi_cbfunc+0x4c>)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8001140:	4a04      	ldr	r2, [pc, #16]	@ (8001154 <reg_wizchip_spi_cbfunc+0x4c>)
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	6213      	str	r3, [r2, #32]
   }
}
 8001146:	bf00      	nop
 8001148:	bf00      	nop
 800114a:	370c      	adds	r7, #12
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr
 8001154:	2000003c 	.word	0x2000003c
 8001158:	08000fc9 	.word	0x08000fc9
 800115c:	08000fd9 	.word	0x08000fd9

08001160 <reg_wizchip_spiburst_cbfunc>:
#endif 

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 800116a:	bf00      	nop
 800116c:	4b0f      	ldr	r3, [pc, #60]	@ (80011ac <reg_wizchip_spiburst_cbfunc+0x4c>)
 800116e:	881b      	ldrh	r3, [r3, #0]
 8001170:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001174:	2b00      	cmp	r3, #0
 8001176:	d0f9      	beq.n	800116c <reg_wizchip_spiburst_cbfunc+0xc>

   if(!spi_rb || !spi_wb)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d002      	beq.n	8001184 <reg_wizchip_spiburst_cbfunc+0x24>
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d106      	bne.n	8001192 <reg_wizchip_spiburst_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
 8001184:	4b09      	ldr	r3, [pc, #36]	@ (80011ac <reg_wizchip_spiburst_cbfunc+0x4c>)
 8001186:	4a0a      	ldr	r2, [pc, #40]	@ (80011b0 <reg_wizchip_spiburst_cbfunc+0x50>)
 8001188:	625a      	str	r2, [r3, #36]	@ 0x24
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
 800118a:	4b08      	ldr	r3, [pc, #32]	@ (80011ac <reg_wizchip_spiburst_cbfunc+0x4c>)
 800118c:	4a09      	ldr	r2, [pc, #36]	@ (80011b4 <reg_wizchip_spiburst_cbfunc+0x54>)
 800118e:	629a      	str	r2, [r3, #40]	@ 0x28
 8001190:	e006      	b.n	80011a0 <reg_wizchip_spiburst_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
 8001192:	4a06      	ldr	r2, [pc, #24]	@ (80011ac <reg_wizchip_spiburst_cbfunc+0x4c>)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6253      	str	r3, [r2, #36]	@ 0x24
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
 8001198:	4a04      	ldr	r2, [pc, #16]	@ (80011ac <reg_wizchip_spiburst_cbfunc+0x4c>)
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	6293      	str	r3, [r2, #40]	@ 0x28
   }
}
 800119e:	bf00      	nop
 80011a0:	bf00      	nop
 80011a2:	370c      	adds	r7, #12
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr
 80011ac:	2000003c 	.word	0x2000003c
 80011b0:	08000ff1 	.word	0x08000ff1
 80011b4:	08001031 	.word	0x08001031

080011b8 <ctlwizchip>:
   }
}
#endif

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 80011b8:	b590      	push	{r4, r7, lr}
 80011ba:	b087      	sub	sp, #28
 80011bc:	af00      	add	r7, sp, #0
 80011be:	4603      	mov	r3, r0
 80011c0:	6039      	str	r1, [r7, #0]
 80011c2:	71fb      	strb	r3, [r7, #7]
//teddy 240122
#if	_WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500 || _WIZCHIP_ == W6100 || _WIZCHIP_ == W6300
   uint8_t tmp = *(uint8_t*) arg;
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	75fb      	strb	r3, [r7, #23]
#endif
   uint8_t* ptmp[2] = {0,0};
 80011ca:	2300      	movs	r3, #0
 80011cc:	60fb      	str	r3, [r7, #12]
 80011ce:	2300      	movs	r3, #0
 80011d0:	613b      	str	r3, [r7, #16]
   switch(cwtype)
 80011d2:	79fb      	ldrb	r3, [r7, #7]
 80011d4:	3b03      	subs	r3, #3
 80011d6:	2b14      	cmp	r3, #20
 80011d8:	f200 80d3 	bhi.w	8001382 <ctlwizchip+0x1ca>
 80011dc:	a201      	add	r2, pc, #4	@ (adr r2, 80011e4 <ctlwizchip+0x2c>)
 80011de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011e2:	bf00      	nop
 80011e4:	08001239 	.word	0x08001239
 80011e8:	0800123f 	.word	0x0800123f
 80011ec:	0800126b 	.word	0x0800126b
 80011f0:	0800125f 	.word	0x0800125f
 80011f4:	08001279 	.word	0x08001279
 80011f8:	08001285 	.word	0x08001285
 80011fc:	08001293 	.word	0x08001293
 8001200:	080012b9 	.word	0x080012b9
 8001204:	08001383 	.word	0x08001383
 8001208:	08001383 	.word	0x08001383
 800120c:	080012db 	.word	0x080012db
 8001210:	08001383 	.word	0x08001383
 8001214:	08001383 	.word	0x08001383
 8001218:	08001383 	.word	0x08001383
 800121c:	0800131f 	.word	0x0800131f
 8001220:	08001325 	.word	0x08001325
 8001224:	0800132d 	.word	0x0800132d
 8001228:	08001335 	.word	0x08001335
 800122c:	0800133d 	.word	0x0800133d
 8001230:	0800134b 	.word	0x0800134b
 8001234:	08001367 	.word	0x08001367
      case CW_GET_SYSLOCK:
         *(uint8_t*)arg = getSYSR() >> 5;
         break;
#endif
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 8001238:	f000 f8ec 	bl	8001414 <wizchip_sw_reset>
         break;
 800123c:	e0a4      	b.n	8001388 <ctlwizchip+0x1d0>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d004      	beq.n	800124e <ctlwizchip+0x96>
         {
            ptmp[0] = (uint8_t*)arg;
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	60fb      	str	r3, [r7, #12]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	3308      	adds	r3, #8
 800124c:	613b      	str	r3, [r7, #16]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	693a      	ldr	r2, [r7, #16]
 8001252:	4611      	mov	r1, r2
 8001254:	4618      	mov	r0, r3
 8001256:	f000 f929 	bl	80014ac <wizchip_init>
 800125a:	4603      	mov	r3, r0
 800125c:	e095      	b.n	800138a <ctlwizchip+0x1d2>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	881b      	ldrh	r3, [r3, #0]
 8001262:	4618      	mov	r0, r3
 8001264:	f000 f9ae 	bl	80015c4 <wizchip_clrinterrupt>
         break;
 8001268:	e08e      	b.n	8001388 <ctlwizchip+0x1d0>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 800126a:	f000 f9df 	bl	800162c <wizchip_getinterrupt>
 800126e:	4603      	mov	r3, r0
 8001270:	461a      	mov	r2, r3
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	801a      	strh	r2, [r3, #0]
         break;
 8001276:	e087      	b.n	8001388 <ctlwizchip+0x1d0>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	881b      	ldrh	r3, [r3, #0]
 800127c:	4618      	mov	r0, r3
 800127e:	f000 f9f9 	bl	8001674 <wizchip_setinterruptmask>
         break;         
 8001282:	e081      	b.n	8001388 <ctlwizchip+0x1d0>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 8001284:	f000 fa11 	bl	80016aa <wizchip_getinterruptmask>
 8001288:	4603      	mov	r3, r0
 800128a:	461a      	mov	r2, r3
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	801a      	strh	r2, [r3, #0]
         break;
 8001290:	e07a      	b.n	8001388 <ctlwizchip+0x1d0>
   //M20150601 : This can be supported by W5200, W5500
   //#if _WIZCHIP_ > W5100
   #if (_WIZCHIP_ == W5200 || _WIZCHIP_ == W5500)
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	881b      	ldrh	r3, [r3, #0]
 8001296:	0a1b      	lsrs	r3, r3, #8
 8001298:	b29b      	uxth	r3, r3
 800129a:	b2db      	uxtb	r3, r3
 800129c:	4619      	mov	r1, r3
 800129e:	f44f 5098 	mov.w	r0, #4864	@ 0x1300
 80012a2:	f7ff f80d 	bl	80002c0 <WIZCHIP_WRITE>
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	881b      	ldrh	r3, [r3, #0]
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	4619      	mov	r1, r3
 80012ae:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 80012b2:	f7ff f805 	bl	80002c0 <WIZCHIP_WRITE>
         break;
 80012b6:	e067      	b.n	8001388 <ctlwizchip+0x1d0>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
 80012b8:	f44f 5098 	mov.w	r0, #4864	@ 0x1300
 80012bc:	f7fe ffb4 	bl	8000228 <WIZCHIP_READ>
 80012c0:	4603      	mov	r3, r0
 80012c2:	021b      	lsls	r3, r3, #8
 80012c4:	b29c      	uxth	r4, r3
 80012c6:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 80012ca:	f7fe ffad 	bl	8000228 <WIZCHIP_READ>
 80012ce:	4603      	mov	r3, r0
 80012d0:	4423      	add	r3, r4
 80012d2:	b29a      	uxth	r2, r3
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	801a      	strh	r2, [r3, #0]
         break;
 80012d8:	e056      	b.n	8001388 <ctlwizchip+0x1d0>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTPTMR();
         break;   
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 80012da:	4b2e      	ldr	r3, [pc, #184]	@ (8001394 <ctlwizchip+0x1dc>)
 80012dc:	789a      	ldrb	r2, [r3, #2]
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	3301      	adds	r3, #1
 80012e6:	4a2b      	ldr	r2, [pc, #172]	@ (8001394 <ctlwizchip+0x1dc>)
 80012e8:	78d2      	ldrb	r2, [r2, #3]
 80012ea:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	3302      	adds	r3, #2
 80012f0:	4a28      	ldr	r2, [pc, #160]	@ (8001394 <ctlwizchip+0x1dc>)
 80012f2:	7912      	ldrb	r2, [r2, #4]
 80012f4:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	3303      	adds	r3, #3
 80012fa:	4a26      	ldr	r2, [pc, #152]	@ (8001394 <ctlwizchip+0x1dc>)
 80012fc:	7952      	ldrb	r2, [r2, #5]
 80012fe:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	3304      	adds	r3, #4
 8001304:	4a23      	ldr	r2, [pc, #140]	@ (8001394 <ctlwizchip+0x1dc>)
 8001306:	7992      	ldrb	r2, [r2, #6]
 8001308:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = WIZCHIP.id[5];
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	3305      	adds	r3, #5
 800130e:	4a21      	ldr	r2, [pc, #132]	@ (8001394 <ctlwizchip+0x1dc>)
 8001310:	79d2      	ldrb	r2, [r2, #7]
 8001312:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[6] = 0;
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	3306      	adds	r3, #6
 8001318:	2200      	movs	r2, #0
 800131a:	701a      	strb	r2, [r3, #0]
         break;
 800131c:	e034      	b.n	8001388 <ctlwizchip+0x1d0>
   #endif
#endif
//teddy 240122
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5500 || _WIZCHIP_ == W6100 || _WIZCHIP_ == W6300
      case CW_RESET_PHY:
         wizphy_reset();
 800131e:	f000 fa15 	bl	800174c <wizphy_reset>
         break;
 8001322:	e031      	b.n	8001388 <ctlwizchip+0x1d0>
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
 8001324:	6838      	ldr	r0, [r7, #0]
 8001326:	f000 fa38 	bl	800179a <wizphy_setphyconf>
         break;
 800132a:	e02d      	b.n	8001388 <ctlwizchip+0x1d0>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
 800132c:	6838      	ldr	r0, [r7, #0]
 800132e:	f000 fa77 	bl	8001820 <wizphy_getphyconf>
         break;
 8001332:	e029      	b.n	8001388 <ctlwizchip+0x1d0>
      case CW_GET_PHYSTATUS:
#if 1
    	  // 20231012 taylor
   #if _WIZCHIP_ == W5500
         wizphy_getphystat((wiz_PhyConf*)arg);
 8001334:	6838      	ldr	r0, [r7, #0]
 8001336:	f000 fadd 	bl	80018f4 <wizphy_getphystat>
   #endif
#else
         wizphy_getphystat((wiz_PhyConf*)arg);
#endif
         break;
 800133a:	e025      	b.n	8001388 <ctlwizchip+0x1d0>
	  //teddy 240122
      #if _WIZCHIP_ == W6100 ||_WIZCHIP_ == W6300
        wizphy_setphypmode(*(uint8_t*)arg);
        break;
      #else
         return wizphy_setphypmode(*(uint8_t*)arg);
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	4618      	mov	r0, r3
 8001342:	f000 faf5 	bl	8001930 <wizphy_setphypmode>
 8001346:	4603      	mov	r3, r0
 8001348:	e01f      	b.n	800138a <ctlwizchip+0x1d2>
      #endif
   #endif
   //teddy 240122
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500 || _WIZCHIP_ == W6100 || _WIZCHIP_ == W6300
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
 800134a:	f000 f9e6 	bl	800171a <wizphy_getphypmode>
 800134e:	4603      	mov	r3, r0
 8001350:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8001352:	7dfb      	ldrb	r3, [r7, #23]
 8001354:	2bff      	cmp	r3, #255	@ 0xff
 8001356:	d102      	bne.n	800135e <ctlwizchip+0x1a6>
 8001358:	f04f 33ff 	mov.w	r3, #4294967295
 800135c:	e015      	b.n	800138a <ctlwizchip+0x1d2>
         *(uint8_t*)arg = tmp;
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	7dfa      	ldrb	r2, [r7, #23]
 8001362:	701a      	strb	r2, [r3, #0]
         break;
 8001364:	e010      	b.n	8001388 <ctlwizchip+0x1d0>
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
 8001366:	f000 f9c2 	bl	80016ee <wizphy_getphylink>
 800136a:	4603      	mov	r3, r0
 800136c:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 800136e:	7dfb      	ldrb	r3, [r7, #23]
 8001370:	2bff      	cmp	r3, #255	@ 0xff
 8001372:	d102      	bne.n	800137a <ctlwizchip+0x1c2>
 8001374:	f04f 33ff 	mov.w	r3, #4294967295
 8001378:	e007      	b.n	800138a <ctlwizchip+0x1d2>
         *(uint8_t*)arg = tmp;
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	7dfa      	ldrb	r2, [r7, #23]
 800137e:	701a      	strb	r2, [r3, #0]
         break;
 8001380:	e002      	b.n	8001388 <ctlwizchip+0x1d0>
   #endif      
      default:
         return -1;
 8001382:	f04f 33ff 	mov.w	r3, #4294967295
 8001386:	e000      	b.n	800138a <ctlwizchip+0x1d2>
   }
   return 0;
 8001388:	2300      	movs	r3, #0
}
 800138a:	4618      	mov	r0, r3
 800138c:	371c      	adds	r7, #28
 800138e:	46bd      	mov	sp, r7
 8001390:	bd90      	pop	{r4, r7, pc}
 8001392:	bf00      	nop
 8001394:	2000003c 	.word	0x2000003c

08001398 <ctlnetwork>:


int8_t ctlnetwork(ctlnetwork_type cntype, void* arg)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	4603      	mov	r3, r0
 80013a0:	6039      	str	r1, [r7, #0]
 80013a2:	71fb      	strb	r3, [r7, #7]
   
   switch(cntype)
 80013a4:	79fb      	ldrb	r3, [r7, #7]
 80013a6:	2b05      	cmp	r3, #5
 80013a8:	d82c      	bhi.n	8001404 <ctlnetwork+0x6c>
 80013aa:	a201      	add	r2, pc, #4	@ (adr r2, 80013b0 <ctlnetwork+0x18>)
 80013ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013b0:	080013c9 	.word	0x080013c9
 80013b4:	080013d1 	.word	0x080013d1
 80013b8:	080013d9 	.word	0x080013d9
 80013bc:	080013e7 	.word	0x080013e7
 80013c0:	080013f5 	.word	0x080013f5
 80013c4:	080013fd 	.word	0x080013fd
   {
      case CN_SET_NETINFO:
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 80013c8:	6838      	ldr	r0, [r7, #0]
 80013ca:	f000 fafb 	bl	80019c4 <wizchip_setnetinfo>
         break;
 80013ce:	e01c      	b.n	800140a <ctlnetwork+0x72>
      case CN_GET_NETINFO:
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 80013d0:	6838      	ldr	r0, [r7, #0]
 80013d2:	f000 fb37 	bl	8001a44 <wizchip_getnetinfo>
         break;
 80013d6:	e018      	b.n	800140a <ctlnetwork+0x72>
      case CN_SET_NETMODE:
#if (_WIZCHIP_ == W5100 || _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5300 || _WIZCHIP_ == W5500)
         return wizchip_setnetmode(*(netmode_type*)arg);
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	4618      	mov	r0, r3
 80013de:	f000 fb71 	bl	8001ac4 <wizchip_setnetmode>
 80013e2:	4603      	mov	r3, r0
 80013e4:	e012      	b.n	800140c <ctlnetwork+0x74>
		 //teddy 240122
      #elif ((_WIZCHIP_ == 6100)||(_WIZCHIP_ == W6300))
         wizchip_setnetmode(*(netmode_type*)arg);
      #endif
      case CN_GET_NETMODE:
         *(netmode_type*)arg = wizchip_getnetmode();
 80013e6:	f000 fb8f 	bl	8001b08 <wizchip_getnetmode>
 80013ea:	4603      	mov	r3, r0
 80013ec:	461a      	mov	r2, r3
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	701a      	strb	r2, [r3, #0]
         break;
 80013f2:	e00a      	b.n	800140a <ctlnetwork+0x72>
      case CN_SET_TIMEOUT:
         wizchip_settimeout((wiz_NetTimeout*)arg);
 80013f4:	6838      	ldr	r0, [r7, #0]
 80013f6:	f000 fb8f 	bl	8001b18 <wizchip_settimeout>
         break;
 80013fa:	e006      	b.n	800140a <ctlnetwork+0x72>
      case CN_GET_TIMEOUT:
         wizchip_gettimeout((wiz_NetTimeout*)arg);
 80013fc:	6838      	ldr	r0, [r7, #0]
 80013fe:	f000 fbac 	bl	8001b5a <wizchip_gettimeout>
         break;
 8001402:	e002      	b.n	800140a <ctlnetwork+0x72>
      case CN_GET_PREFER:
    	  *(uint8_t*)arg= getSLPSR();
         break;
#endif   
      default:
         return -1;
 8001404:	f04f 33ff 	mov.w	r3, #4294967295
 8001408:	e000      	b.n	800140c <ctlnetwork+0x74>
   }
   return 0;
 800140a:	2300      	movs	r3, #0
}
 800140c:	4618      	mov	r0, r3
 800140e:	3708      	adds	r7, #8
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}

08001414 <wizchip_sw_reset>:

void wizchip_sw_reset(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b086      	sub	sp, #24
 8001418:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 800141a:	1d3b      	adds	r3, r7, #4
 800141c:	2206      	movs	r2, #6
 800141e:	4619      	mov	r1, r3
 8001420:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8001424:	f7fe ff9a 	bl	800035c <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8001428:	f107 0314 	add.w	r3, r7, #20
 800142c:	2204      	movs	r2, #4
 800142e:	4619      	mov	r1, r3
 8001430:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001434:	f7fe ff92 	bl	800035c <WIZCHIP_READ_BUF>
 8001438:	f107 0310 	add.w	r3, r7, #16
 800143c:	2204      	movs	r2, #4
 800143e:	4619      	mov	r1, r3
 8001440:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8001444:	f7fe ff8a 	bl	800035c <WIZCHIP_READ_BUF>
 8001448:	f107 030c 	add.w	r3, r7, #12
 800144c:	2204      	movs	r2, #4
 800144e:	4619      	mov	r1, r3
 8001450:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8001454:	f7fe ff82 	bl	800035c <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8001458:	2180      	movs	r1, #128	@ 0x80
 800145a:	2000      	movs	r0, #0
 800145c:	f7fe ff30 	bl	80002c0 <WIZCHIP_WRITE>
   getMR(); // for delay
 8001460:	2000      	movs	r0, #0
 8001462:	f7fe fee1 	bl	8000228 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 8001466:	1d3b      	adds	r3, r7, #4
 8001468:	2206      	movs	r2, #6
 800146a:	4619      	mov	r1, r3
 800146c:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8001470:	f7fe ffd4 	bl	800041c <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8001474:	f107 0314 	add.w	r3, r7, #20
 8001478:	2204      	movs	r2, #4
 800147a:	4619      	mov	r1, r3
 800147c:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001480:	f7fe ffcc 	bl	800041c <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8001484:	f107 0310 	add.w	r3, r7, #16
 8001488:	2204      	movs	r2, #4
 800148a:	4619      	mov	r1, r3
 800148c:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8001490:	f7fe ffc4 	bl	800041c <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8001494:	f107 030c 	add.w	r3, r7, #12
 8001498:	2204      	movs	r2, #4
 800149a:	4619      	mov	r1, r3
 800149c:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 80014a0:	f7fe ffbc 	bl	800041c <WIZCHIP_WRITE_BUF>
  setLLAR(lla);
  setGUAR(gua);
  if(islock & SYSR_CHPL) CHIPLOCK();
  if(islock & SYSR_NETL) NETLOCK();
#endif
}
 80014a4:	bf00      	nop
 80014a6:	3718      	adds	r7, #24
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}

080014ac <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b084      	sub	sp, #16
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 80014b6:	2300      	movs	r3, #0
 80014b8:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 80014ba:	f7ff ffab 	bl	8001414 <wizchip_sw_reset>
   if(txsize)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d03b      	beq.n	800153c <wizchip_init+0x90>
   {
      tmp = 0;
 80014c4:	2300      	movs	r3, #0
 80014c6:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80014c8:	2300      	movs	r3, #0
 80014ca:	73fb      	strb	r3, [r7, #15]
 80014cc:	e015      	b.n	80014fa <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 80014ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014d2:	687a      	ldr	r2, [r7, #4]
 80014d4:	4413      	add	r3, r2
 80014d6:	781a      	ldrb	r2, [r3, #0]
 80014d8:	7bbb      	ldrb	r3, [r7, #14]
 80014da:	4413      	add	r3, r2
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#elif  _WIZCHIP_ == W6300
			if(tmp > 32) return -1;
#else
			if(tmp > 16) return -1;
 80014e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80014e4:	2b10      	cmp	r3, #16
 80014e6:	dd02      	ble.n	80014ee <wizchip_init+0x42>
 80014e8:	f04f 33ff 	mov.w	r3, #4294967295
 80014ec:	e066      	b.n	80015bc <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80014ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014f2:	b2db      	uxtb	r3, r3
 80014f4:	3301      	adds	r3, #1
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	73fb      	strb	r3, [r7, #15]
 80014fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014fe:	2b07      	cmp	r3, #7
 8001500:	dde5      	ble.n	80014ce <wizchip_init+0x22>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001502:	2300      	movs	r3, #0
 8001504:	73fb      	strb	r3, [r7, #15]
 8001506:	e015      	b.n	8001534 <wizchip_init+0x88>
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 8001508:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	3301      	adds	r3, #1
 8001510:	00db      	lsls	r3, r3, #3
 8001512:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 8001516:	4618      	mov	r0, r3
 8001518:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800151c:	687a      	ldr	r2, [r7, #4]
 800151e:	4413      	add	r3, r2
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	4619      	mov	r1, r3
 8001524:	f7fe fecc 	bl	80002c0 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001528:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800152c:	b2db      	uxtb	r3, r3
 800152e:	3301      	adds	r3, #1
 8001530:	b2db      	uxtb	r3, r3
 8001532:	73fb      	strb	r3, [r7, #15]
 8001534:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001538:	2b07      	cmp	r3, #7
 800153a:	dde5      	ble.n	8001508 <wizchip_init+0x5c>
#endif
		}	
   }

   if(rxsize)
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d03b      	beq.n	80015ba <wizchip_init+0x10e>
   {
      tmp = 0;
 8001542:	2300      	movs	r3, #0
 8001544:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001546:	2300      	movs	r3, #0
 8001548:	73fb      	strb	r3, [r7, #15]
 800154a:	e015      	b.n	8001578 <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 800154c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001550:	683a      	ldr	r2, [r7, #0]
 8001552:	4413      	add	r3, r2
 8001554:	781a      	ldrb	r2, [r3, #0]
 8001556:	7bbb      	ldrb	r3, [r7, #14]
 8001558:	4413      	add	r3, r2
 800155a:	b2db      	uxtb	r3, r3
 800155c:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#elif  _WIZCHIP_ == W6300
			if(tmp > 32) return -1;
#else
			if(tmp > 16) return -1;
 800155e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001562:	2b10      	cmp	r3, #16
 8001564:	dd02      	ble.n	800156c <wizchip_init+0xc0>
 8001566:	f04f 33ff 	mov.w	r3, #4294967295
 800156a:	e027      	b.n	80015bc <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800156c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001570:	b2db      	uxtb	r3, r3
 8001572:	3301      	adds	r3, #1
 8001574:	b2db      	uxtb	r3, r3
 8001576:	73fb      	strb	r3, [r7, #15]
 8001578:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800157c:	2b07      	cmp	r3, #7
 800157e:	dde5      	ble.n	800154c <wizchip_init+0xa0>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001580:	2300      	movs	r3, #0
 8001582:	73fb      	strb	r3, [r7, #15]
 8001584:	e015      	b.n	80015b2 <wizchip_init+0x106>
#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 8001586:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	3301      	adds	r3, #1
 800158e:	00db      	lsls	r3, r3, #3
 8001590:	f503 53f0 	add.w	r3, r3, #7680	@ 0x1e00
 8001594:	4618      	mov	r0, r3
 8001596:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800159a:	683a      	ldr	r2, [r7, #0]
 800159c:	4413      	add	r3, r2
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	4619      	mov	r1, r3
 80015a2:	f7fe fe8d 	bl	80002c0 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80015a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	3301      	adds	r3, #1
 80015ae:	b2db      	uxtb	r3, r3
 80015b0:	73fb      	strb	r3, [r7, #15]
 80015b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015b6:	2b07      	cmp	r3, #7
 80015b8:	dde5      	ble.n	8001586 <wizchip_init+0xda>
#endif
		}
   }
   return 0;
 80015ba:	2300      	movs	r3, #0
}
 80015bc:	4618      	mov	r0, r3
 80015be:	3710      	adds	r7, #16
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}

080015c4 <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b084      	sub	sp, #16
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	4603      	mov	r3, r0
 80015cc:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 80015ce:	88fb      	ldrh	r3, [r7, #6]
 80015d0:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 80015d2:	88fb      	ldrh	r3, [r7, #6]
 80015d4:	0a1b      	lsrs	r3, r3, #8
 80015d6:	b29b      	uxth	r3, r3
 80015d8:	73bb      	strb	r3, [r7, #14]
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
#else
   setIR(ir);
 80015da:	7bfb      	ldrb	r3, [r7, #15]
 80015dc:	f023 030f 	bic.w	r3, r3, #15
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	4619      	mov	r1, r3
 80015e4:	f44f 50a8 	mov.w	r0, #5376	@ 0x1500
 80015e8:	f7fe fe6a 	bl	80002c0 <WIZCHIP_WRITE>
//M20200227 : For clear
   //setSIR(sir);
   for(ir=0; ir<8; ir++){
 80015ec:	2300      	movs	r3, #0
 80015ee:	73fb      	strb	r3, [r7, #15]
 80015f0:	e014      	b.n	800161c <wizchip_clrinterrupt+0x58>
       if(sir & (0x01 <<ir) ) setSn_IR(ir, 0xff);
 80015f2:	7bba      	ldrb	r2, [r7, #14]
 80015f4:	7bfb      	ldrb	r3, [r7, #15]
 80015f6:	fa42 f303 	asr.w	r3, r2, r3
 80015fa:	f003 0301 	and.w	r3, r3, #1
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d009      	beq.n	8001616 <wizchip_clrinterrupt+0x52>
 8001602:	7bfb      	ldrb	r3, [r7, #15]
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	3301      	adds	r3, #1
 8001608:	00db      	lsls	r3, r3, #3
 800160a:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800160e:	211f      	movs	r1, #31
 8001610:	4618      	mov	r0, r3
 8001612:	f7fe fe55 	bl	80002c0 <WIZCHIP_WRITE>
   for(ir=0; ir<8; ir++){
 8001616:	7bfb      	ldrb	r3, [r7, #15]
 8001618:	3301      	adds	r3, #1
 800161a:	73fb      	strb	r3, [r7, #15]
 800161c:	7bfb      	ldrb	r3, [r7, #15]
 800161e:	2b07      	cmp	r3, #7
 8001620:	d9e7      	bls.n	80015f2 <wizchip_clrinterrupt+0x2e>
   }

#endif   
}
 8001622:	bf00      	nop
 8001624:	bf00      	nop
 8001626:	3710      	adds	r7, #16
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}

0800162c <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 8001632:	2300      	movs	r3, #0
 8001634:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 8001636:	2300      	movs	r3, #0
 8001638:	71bb      	strb	r3, [r7, #6]
   uint32_t ret = 0;
 800163a:	2300      	movs	r3, #0
 800163c:	603b      	str	r3, [r7, #0]
#elif _WIZCHIP_  == W5300
   ret = getIR();
   ir = (uint8_t)(ret >> 8);
   sir = (uint8_t)ret;
#else
   ir  = getIR();
 800163e:	f44f 50a8 	mov.w	r0, #5376	@ 0x1500
 8001642:	f7fe fdf1 	bl	8000228 <WIZCHIP_READ>
 8001646:	4603      	mov	r3, r0
 8001648:	f023 030f 	bic.w	r3, r3, #15
 800164c:	71fb      	strb	r3, [r7, #7]
   sir = getSIR();
 800164e:	f44f 50b8 	mov.w	r0, #5888	@ 0x1700
 8001652:	f7fe fde9 	bl	8000228 <WIZCHIP_READ>
 8001656:	4603      	mov	r3, r0
 8001658:	71bb      	strb	r3, [r7, #6]
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 800165a:	79bb      	ldrb	r3, [r7, #6]
 800165c:	603b      	str	r3, [r7, #0]
  ret = (ret << 8) + ir;
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	021a      	lsls	r2, r3, #8
 8001662:	79fb      	ldrb	r3, [r7, #7]
 8001664:	4413      	add	r3, r2
 8001666:	603b      	str	r3, [r7, #0]
  //teddy 240122
#if _WIZCHIP_ == W6100 || _WIZCHIP_ == W6300
  ret = (((uint32_t)getSLIR())<<16) | ret;
#endif

  return (intr_kind)ret;
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	b29b      	uxth	r3, r3
}
 800166c:	4618      	mov	r0, r3
 800166e:	3708      	adds	r7, #8
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}

08001674 <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b084      	sub	sp, #16
 8001678:	af00      	add	r7, sp, #0
 800167a:	4603      	mov	r3, r0
 800167c:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 800167e:	88fb      	ldrh	r3, [r7, #6]
 8001680:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 8001682:	88fb      	ldrh	r3, [r7, #6]
 8001684:	0a1b      	lsrs	r3, r3, #8
 8001686:	b29b      	uxth	r3, r3
 8001688:	73bb      	strb	r3, [r7, #14]
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
#else
   setIMR(imr);
 800168a:	7bfb      	ldrb	r3, [r7, #15]
 800168c:	4619      	mov	r1, r3
 800168e:	f44f 50b0 	mov.w	r0, #5632	@ 0x1600
 8001692:	f7fe fe15 	bl	80002c0 <WIZCHIP_WRITE>
   setSIMR(simr);
 8001696:	7bbb      	ldrb	r3, [r7, #14]
 8001698:	4619      	mov	r1, r3
 800169a:	f44f 50c0 	mov.w	r0, #6144	@ 0x1800
 800169e:	f7fe fe0f 	bl	80002c0 <WIZCHIP_WRITE>
#if _WIZCHIP_ == W6100 || _WIZCHIP_ == W6300
   uint8_t slimr = (uint8_t)((uint32_t)intr >> 16);
   setSLIMR(slimr);
#endif
#endif   
}
 80016a2:	bf00      	nop
 80016a4:	3710      	adds	r7, #16
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}

080016aa <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 80016aa:	b580      	push	{r7, lr}
 80016ac:	b082      	sub	sp, #8
 80016ae:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 80016b0:	2300      	movs	r3, #0
 80016b2:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 80016b4:	2300      	movs	r3, #0
 80016b6:	71bb      	strb	r3, [r7, #6]
   uint32_t ret = 0;
 80016b8:	2300      	movs	r3, #0
 80016ba:	603b      	str	r3, [r7, #0]
#elif _WIZCHIP_ == W5300
   ret = getIMR();
   imr = (uint8_t)(ret >> 8);
   simr = (uint8_t)ret;
#else
   imr  = getIMR();
 80016bc:	f44f 50b0 	mov.w	r0, #5632	@ 0x1600
 80016c0:	f7fe fdb2 	bl	8000228 <WIZCHIP_READ>
 80016c4:	4603      	mov	r3, r0
 80016c6:	71fb      	strb	r3, [r7, #7]
   simr = getSIMR();
 80016c8:	f44f 50c0 	mov.w	r0, #6144	@ 0x1800
 80016cc:	f7fe fdac 	bl	8000228 <WIZCHIP_READ>
 80016d0:	4603      	mov	r3, r0
 80016d2:	71bb      	strb	r3, [r7, #6]
   imr &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 80016d4:	79bb      	ldrb	r3, [r7, #6]
 80016d6:	603b      	str	r3, [r7, #0]
  ret = (ret << 8) + imr;
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	021a      	lsls	r2, r3, #8
 80016dc:	79fb      	ldrb	r3, [r7, #7]
 80016de:	4413      	add	r3, r2
 80016e0:	603b      	str	r3, [r7, #0]
  //teddy 240122
#if _WIZCHIP_ == W6100 || _WIZCHIP_ == W6300
  ret = (((uint32_t)getSLIMR())<<16) | ret;
#endif
  
  return (intr_kind)ret;
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	b29b      	uxth	r3, r3
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3708      	adds	r7, #8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}

080016ee <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 80016ee:	b580      	push	{r7, lr}
 80016f0:	b082      	sub	sp, #8
 80016f2:	af00      	add	r7, sp, #0
   int8_t tmp = PHY_LINK_OFF;
 80016f4:	2300      	movs	r3, #0
 80016f6:	71fb      	strb	r3, [r7, #7]
	   tmp = PHY_LINK_ON;
#elif   _WIZCHIP_ == W5200
   if(getPHYSTATUS() & PHYSTATUS_LINK)
      tmp = PHY_LINK_ON;
#elif _WIZCHIP_ == W5500
   if(getPHYCFGR() & PHYCFGR_LNK_ON)
 80016f8:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 80016fc:	f7fe fd94 	bl	8000228 <WIZCHIP_READ>
 8001700:	4603      	mov	r3, r0
 8001702:	f003 0301 	and.w	r3, r3, #1
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <wizphy_getphylink+0x20>
      tmp = PHY_LINK_ON;
 800170a:	2301      	movs	r3, #1
 800170c:	71fb      	strb	r3, [r7, #7]
#endif

#else
   tmp = -1;
#endif
   return tmp;
 800170e:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8001712:	4618      	mov	r0, r3
 8001714:	3708      	adds	r7, #8
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}

0800171a <wizphy_getphypmode>:

#if _WIZCHIP_ > W5100

int8_t wizphy_getphypmode(void)
{
 800171a:	b580      	push	{r7, lr}
 800171c:	b082      	sub	sp, #8
 800171e:	af00      	add	r7, sp, #0
   int8_t tmp = 0;
 8001720:	2300      	movs	r3, #0
 8001722:	71fb      	strb	r3, [r7, #7]
      if(getPHYSTATUS() & PHYSTATUS_POWERDOWN)
         tmp = PHY_POWER_DOWN;
      else          
         tmp = PHY_POWER_NORM;
   #elif _WIZCHIP_ == 5500
      if((getPHYCFGR() & PHYCFGR_OPMDC_ALLA) == PHYCFGR_OPMDC_PDOWN)
 8001724:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8001728:	f7fe fd7e 	bl	8000228 <WIZCHIP_READ>
 800172c:	4603      	mov	r3, r0
 800172e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001732:	2b30      	cmp	r3, #48	@ 0x30
 8001734:	d102      	bne.n	800173c <wizphy_getphypmode+0x22>
         tmp = PHY_POWER_DOWN;
 8001736:	2301      	movs	r3, #1
 8001738:	71fb      	strb	r3, [r7, #7]
 800173a:	e001      	b.n	8001740 <wizphy_getphypmode+0x26>
      else 
         tmp = PHY_POWER_NORM;
 800173c:	2300      	movs	r3, #0
 800173e:	71fb      	strb	r3, [r7, #7]
   #endif   
      return PHY_POWER_NORM;
   #else
      tmp = -1;
   #endif
   return tmp;
 8001740:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8001744:	4618      	mov	r0, r3
 8001746:	3708      	adds	r7, #8
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}

0800174c <wizphy_reset>:
   return -1;
}

#elif _WIZCHIP_ == W5500
void wizphy_reset(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
   uint8_t tmp = getPHYCFGR();
 8001752:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8001756:	f7fe fd67 	bl	8000228 <WIZCHIP_READ>
 800175a:	4603      	mov	r3, r0
 800175c:	71fb      	strb	r3, [r7, #7]
   tmp &= PHYCFGR_RST;
 800175e:	79fb      	ldrb	r3, [r7, #7]
 8001760:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001764:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 8001766:	79fb      	ldrb	r3, [r7, #7]
 8001768:	4619      	mov	r1, r3
 800176a:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 800176e:	f7fe fda7 	bl	80002c0 <WIZCHIP_WRITE>
   tmp = getPHYCFGR();
 8001772:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8001776:	f7fe fd57 	bl	8000228 <WIZCHIP_READ>
 800177a:	4603      	mov	r3, r0
 800177c:	71fb      	strb	r3, [r7, #7]
   tmp |= ~PHYCFGR_RST;
 800177e:	79fb      	ldrb	r3, [r7, #7]
 8001780:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001784:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 8001786:	79fb      	ldrb	r3, [r7, #7]
 8001788:	4619      	mov	r1, r3
 800178a:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 800178e:	f7fe fd97 	bl	80002c0 <WIZCHIP_WRITE>
}
 8001792:	bf00      	nop
 8001794:	3708      	adds	r7, #8
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}

0800179a <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 800179a:	b580      	push	{r7, lr}
 800179c:	b084      	sub	sp, #16
 800179e:	af00      	add	r7, sp, #0
 80017a0:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 80017a2:	2300      	movs	r3, #0
 80017a4:	73fb      	strb	r3, [r7, #15]
   if(phyconf->by == PHY_CONFBY_SW)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d104      	bne.n	80017b8 <wizphy_setphyconf+0x1e>
      tmp |= PHYCFGR_OPMD;
 80017ae:	7bfb      	ldrb	r3, [r7, #15]
 80017b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80017b4:	73fb      	strb	r3, [r7, #15]
 80017b6:	e003      	b.n	80017c0 <wizphy_setphyconf+0x26>
   else
      tmp &= ~PHYCFGR_OPMD;
 80017b8:	7bfb      	ldrb	r3, [r7, #15]
 80017ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80017be:	73fb      	strb	r3, [r7, #15]
   if(phyconf->mode == PHY_MODE_AUTONEGO)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	785b      	ldrb	r3, [r3, #1]
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d104      	bne.n	80017d2 <wizphy_setphyconf+0x38>
      tmp |= PHYCFGR_OPMDC_ALLA;
 80017c8:	7bfb      	ldrb	r3, [r7, #15]
 80017ca:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 80017ce:	73fb      	strb	r3, [r7, #15]
 80017d0:	e019      	b.n	8001806 <wizphy_setphyconf+0x6c>
   else
   {
      if(phyconf->duplex == PHY_DUPLEX_FULL)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	78db      	ldrb	r3, [r3, #3]
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d10d      	bne.n	80017f6 <wizphy_setphyconf+0x5c>
      {
         if(phyconf->speed == PHY_SPEED_100)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	789b      	ldrb	r3, [r3, #2]
 80017de:	2b01      	cmp	r3, #1
 80017e0:	d104      	bne.n	80017ec <wizphy_setphyconf+0x52>
            tmp |= PHYCFGR_OPMDC_100F;
 80017e2:	7bfb      	ldrb	r3, [r7, #15]
 80017e4:	f043 0318 	orr.w	r3, r3, #24
 80017e8:	73fb      	strb	r3, [r7, #15]
 80017ea:	e00c      	b.n	8001806 <wizphy_setphyconf+0x6c>
         else
            tmp |= PHYCFGR_OPMDC_10F;
 80017ec:	7bfb      	ldrb	r3, [r7, #15]
 80017ee:	f043 0308 	orr.w	r3, r3, #8
 80017f2:	73fb      	strb	r3, [r7, #15]
 80017f4:	e007      	b.n	8001806 <wizphy_setphyconf+0x6c>
      }   
      else
      {
         if(phyconf->speed == PHY_SPEED_100)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	789b      	ldrb	r3, [r3, #2]
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d103      	bne.n	8001806 <wizphy_setphyconf+0x6c>
            tmp |= PHYCFGR_OPMDC_100H;
 80017fe:	7bfb      	ldrb	r3, [r7, #15]
 8001800:	f043 0310 	orr.w	r3, r3, #16
 8001804:	73fb      	strb	r3, [r7, #15]
         else
            tmp |= PHYCFGR_OPMDC_10H;
      }
   }
   setPHYCFGR(tmp);
 8001806:	7bfb      	ldrb	r3, [r7, #15]
 8001808:	4619      	mov	r1, r3
 800180a:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 800180e:	f7fe fd57 	bl	80002c0 <WIZCHIP_WRITE>
   wizphy_reset();
 8001812:	f7ff ff9b 	bl	800174c <wizphy_reset>
}
 8001816:	bf00      	nop
 8001818:	3710      	adds	r7, #16
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
	...

08001820 <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8001828:	2300      	movs	r3, #0
 800182a:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 800182c:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8001830:	f7fe fcfa 	bl	8000228 <WIZCHIP_READ>
 8001834:	4603      	mov	r3, r0
 8001836:	73fb      	strb	r3, [r7, #15]
   phyconf->by   = (tmp & PHYCFGR_OPMD) ? PHY_CONFBY_SW : PHY_CONFBY_HW;
 8001838:	7bfb      	ldrb	r3, [r7, #15]
 800183a:	119b      	asrs	r3, r3, #6
 800183c:	b2db      	uxtb	r3, r3
 800183e:	f003 0301 	and.w	r3, r3, #1
 8001842:	b2da      	uxtb	r2, r3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	701a      	strb	r2, [r3, #0]
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8001848:	7bfb      	ldrb	r3, [r7, #15]
 800184a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800184e:	2b20      	cmp	r3, #32
 8001850:	d001      	beq.n	8001856 <wizphy_getphyconf+0x36>
 8001852:	2b38      	cmp	r3, #56	@ 0x38
 8001854:	d103      	bne.n	800185e <wizphy_getphyconf+0x3e>
   {
      case PHYCFGR_OPMDC_ALLA:
      case PHYCFGR_OPMDC_100FA: 
         phyconf->mode = PHY_MODE_AUTONEGO;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2201      	movs	r2, #1
 800185a:	705a      	strb	r2, [r3, #1]
         break;
 800185c:	e003      	b.n	8001866 <wizphy_getphyconf+0x46>
      default:
         phyconf->mode = PHY_MODE_MANUAL;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2200      	movs	r2, #0
 8001862:	705a      	strb	r2, [r3, #1]
         break;
 8001864:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8001866:	7bfb      	ldrb	r3, [r7, #15]
 8001868:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800186c:	3b10      	subs	r3, #16
 800186e:	2b10      	cmp	r3, #16
 8001870:	bf8c      	ite	hi
 8001872:	2201      	movhi	r2, #1
 8001874:	2200      	movls	r2, #0
 8001876:	b2d2      	uxtb	r2, r2
 8001878:	2a00      	cmp	r2, #0
 800187a:	d10f      	bne.n	800189c <wizphy_getphyconf+0x7c>
 800187c:	4a1b      	ldr	r2, [pc, #108]	@ (80018ec <wizphy_getphyconf+0xcc>)
 800187e:	fa22 f303 	lsr.w	r3, r2, r3
 8001882:	f003 0301 	and.w	r3, r3, #1
 8001886:	2b00      	cmp	r3, #0
 8001888:	bf14      	ite	ne
 800188a:	2301      	movne	r3, #1
 800188c:	2300      	moveq	r3, #0
 800188e:	b2db      	uxtb	r3, r3
 8001890:	2b00      	cmp	r3, #0
 8001892:	d003      	beq.n	800189c <wizphy_getphyconf+0x7c>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_100H:
         phyconf->speed = PHY_SPEED_100;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2201      	movs	r2, #1
 8001898:	709a      	strb	r2, [r3, #2]
         break;
 800189a:	e003      	b.n	80018a4 <wizphy_getphyconf+0x84>
      default:
         phyconf->speed = PHY_SPEED_10;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2200      	movs	r2, #0
 80018a0:	709a      	strb	r2, [r3, #2]
         break;
 80018a2:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 80018a4:	7bfb      	ldrb	r3, [r7, #15]
 80018a6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80018aa:	3b08      	subs	r3, #8
 80018ac:	2b18      	cmp	r3, #24
 80018ae:	bf8c      	ite	hi
 80018b0:	2201      	movhi	r2, #1
 80018b2:	2200      	movls	r2, #0
 80018b4:	b2d2      	uxtb	r2, r2
 80018b6:	2a00      	cmp	r2, #0
 80018b8:	d10f      	bne.n	80018da <wizphy_getphyconf+0xba>
 80018ba:	4a0d      	ldr	r2, [pc, #52]	@ (80018f0 <wizphy_getphyconf+0xd0>)
 80018bc:	fa22 f303 	lsr.w	r3, r2, r3
 80018c0:	f003 0301 	and.w	r3, r3, #1
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	bf14      	ite	ne
 80018c8:	2301      	movne	r3, #1
 80018ca:	2300      	moveq	r3, #0
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d003      	beq.n	80018da <wizphy_getphyconf+0xba>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_10F:
         phyconf->duplex = PHY_DUPLEX_FULL;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2201      	movs	r2, #1
 80018d6:	70da      	strb	r2, [r3, #3]
         break;
 80018d8:	e003      	b.n	80018e2 <wizphy_getphyconf+0xc2>
      default:
         phyconf->duplex = PHY_DUPLEX_HALF;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2200      	movs	r2, #0
 80018de:	70da      	strb	r2, [r3, #3]
         break;
 80018e0:	bf00      	nop
   }
}
 80018e2:	bf00      	nop
 80018e4:	3710      	adds	r7, #16
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	00010101 	.word	0x00010101
 80018f0:	01010001 	.word	0x01010001

080018f4 <wizphy_getphystat>:

void wizphy_getphystat(wiz_PhyConf* phyconf)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b084      	sub	sp, #16
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
   uint8_t tmp = getPHYCFGR();
 80018fc:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8001900:	f7fe fc92 	bl	8000228 <WIZCHIP_READ>
 8001904:	4603      	mov	r3, r0
 8001906:	73fb      	strb	r3, [r7, #15]
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
 8001908:	7bfb      	ldrb	r3, [r7, #15]
 800190a:	109b      	asrs	r3, r3, #2
 800190c:	b2db      	uxtb	r3, r3
 800190e:	f003 0301 	and.w	r3, r3, #1
 8001912:	b2da      	uxtb	r2, r3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	70da      	strb	r2, [r3, #3]
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
 8001918:	7bfb      	ldrb	r3, [r7, #15]
 800191a:	105b      	asrs	r3, r3, #1
 800191c:	b2db      	uxtb	r3, r3
 800191e:	f003 0301 	and.w	r3, r3, #1
 8001922:	b2da      	uxtb	r2, r3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	709a      	strb	r2, [r3, #2]
}
 8001928:	bf00      	nop
 800192a:	3710      	adds	r7, #16
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}

08001930 <wizphy_setphypmode>:

int8_t wizphy_setphypmode(uint8_t pmode)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b084      	sub	sp, #16
 8001934:	af00      	add	r7, sp, #0
 8001936:	4603      	mov	r3, r0
 8001938:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 800193a:	2300      	movs	r3, #0
 800193c:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 800193e:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8001942:	f7fe fc71 	bl	8000228 <WIZCHIP_READ>
 8001946:	4603      	mov	r3, r0
 8001948:	73fb      	strb	r3, [r7, #15]
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
 800194a:	7bfb      	ldrb	r3, [r7, #15]
 800194c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001950:	2b00      	cmp	r3, #0
 8001952:	d102      	bne.n	800195a <wizphy_setphypmode+0x2a>
 8001954:	f04f 33ff 	mov.w	r3, #4294967295
 8001958:	e030      	b.n	80019bc <wizphy_setphypmode+0x8c>
   tmp &= ~PHYCFGR_OPMDC_ALLA;         
 800195a:	7bfb      	ldrb	r3, [r7, #15]
 800195c:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 8001960:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 8001962:	79fb      	ldrb	r3, [r7, #7]
 8001964:	2b01      	cmp	r3, #1
 8001966:	d104      	bne.n	8001972 <wizphy_setphypmode+0x42>
      tmp |= PHYCFGR_OPMDC_PDOWN;
 8001968:	7bfb      	ldrb	r3, [r7, #15]
 800196a:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 800196e:	73fb      	strb	r3, [r7, #15]
 8001970:	e003      	b.n	800197a <wizphy_setphypmode+0x4a>
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
 8001972:	7bfb      	ldrb	r3, [r7, #15]
 8001974:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 8001978:	73fb      	strb	r3, [r7, #15]
   setPHYCFGR(tmp);
 800197a:	7bfb      	ldrb	r3, [r7, #15]
 800197c:	4619      	mov	r1, r3
 800197e:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8001982:	f7fe fc9d 	bl	80002c0 <WIZCHIP_WRITE>
   wizphy_reset();
 8001986:	f7ff fee1 	bl	800174c <wizphy_reset>
   tmp = getPHYCFGR();
 800198a:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 800198e:	f7fe fc4b 	bl	8000228 <WIZCHIP_READ>
 8001992:	4603      	mov	r3, r0
 8001994:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 8001996:	79fb      	ldrb	r3, [r7, #7]
 8001998:	2b01      	cmp	r3, #1
 800199a:	d106      	bne.n	80019aa <wizphy_setphypmode+0x7a>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
 800199c:	7bfb      	ldrb	r3, [r7, #15]
 800199e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d008      	beq.n	80019b8 <wizphy_setphypmode+0x88>
 80019a6:	2300      	movs	r3, #0
 80019a8:	e008      	b.n	80019bc <wizphy_setphypmode+0x8c>
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
 80019aa:	7bfb      	ldrb	r3, [r7, #15]
 80019ac:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <wizphy_setphypmode+0x88>
 80019b4:	2300      	movs	r3, #0
 80019b6:	e001      	b.n	80019bc <wizphy_setphypmode+0x8c>
   }
   return -1;
 80019b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019bc:	4618      	mov	r0, r3
 80019be:	3710      	adds	r7, #16
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}

080019c4 <wizchip_setnetinfo>:

#endif

#if (_WIZCHIP_ == W5100 || _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5300 || _WIZCHIP_ == W5500)
void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2206      	movs	r2, #6
 80019d0:	4619      	mov	r1, r3
 80019d2:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 80019d6:	f7fe fd21 	bl	800041c <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	330e      	adds	r3, #14
 80019de:	2204      	movs	r2, #4
 80019e0:	4619      	mov	r1, r3
 80019e2:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80019e6:	f7fe fd19 	bl	800041c <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	330a      	adds	r3, #10
 80019ee:	2204      	movs	r2, #4
 80019f0:	4619      	mov	r1, r3
 80019f2:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 80019f6:	f7fe fd11 	bl	800041c <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	3306      	adds	r3, #6
 80019fe:	2204      	movs	r2, #4
 8001a00:	4619      	mov	r1, r3
 8001a02:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8001a06:	f7fe fd09 	bl	800041c <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	7c9a      	ldrb	r2, [r3, #18]
 8001a0e:	4b0b      	ldr	r3, [pc, #44]	@ (8001a3c <wizchip_setnetinfo+0x78>)
 8001a10:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	7cda      	ldrb	r2, [r3, #19]
 8001a16:	4b09      	ldr	r3, [pc, #36]	@ (8001a3c <wizchip_setnetinfo+0x78>)
 8001a18:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	7d1a      	ldrb	r2, [r3, #20]
 8001a1e:	4b07      	ldr	r3, [pc, #28]	@ (8001a3c <wizchip_setnetinfo+0x78>)
 8001a20:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	7d5a      	ldrb	r2, [r3, #21]
 8001a26:	4b05      	ldr	r3, [pc, #20]	@ (8001a3c <wizchip_setnetinfo+0x78>)
 8001a28:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	7d9a      	ldrb	r2, [r3, #22]
 8001a2e:	4b04      	ldr	r3, [pc, #16]	@ (8001a40 <wizchip_setnetinfo+0x7c>)
 8001a30:	701a      	strb	r2, [r3, #0]
}
 8001a32:	bf00      	nop
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	2000126c 	.word	0x2000126c
 8001a40:	20001270 	.word	0x20001270

08001a44 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2206      	movs	r2, #6
 8001a50:	4619      	mov	r1, r3
 8001a52:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8001a56:	f7fe fc81 	bl	800035c <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	330e      	adds	r3, #14
 8001a5e:	2204      	movs	r2, #4
 8001a60:	4619      	mov	r1, r3
 8001a62:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001a66:	f7fe fc79 	bl	800035c <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	330a      	adds	r3, #10
 8001a6e:	2204      	movs	r2, #4
 8001a70:	4619      	mov	r1, r3
 8001a72:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8001a76:	f7fe fc71 	bl	800035c <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	3306      	adds	r3, #6
 8001a7e:	2204      	movs	r2, #4
 8001a80:	4619      	mov	r1, r3
 8001a82:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8001a86:	f7fe fc69 	bl	800035c <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 8001a8a:	4b0c      	ldr	r3, [pc, #48]	@ (8001abc <wizchip_getnetinfo+0x78>)
 8001a8c:	781a      	ldrb	r2, [r3, #0]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 8001a92:	4b0a      	ldr	r3, [pc, #40]	@ (8001abc <wizchip_getnetinfo+0x78>)
 8001a94:	785a      	ldrb	r2, [r3, #1]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 8001a9a:	4b08      	ldr	r3, [pc, #32]	@ (8001abc <wizchip_getnetinfo+0x78>)
 8001a9c:	789a      	ldrb	r2, [r3, #2]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 8001aa2:	4b06      	ldr	r3, [pc, #24]	@ (8001abc <wizchip_getnetinfo+0x78>)
 8001aa4:	78da      	ldrb	r2, [r3, #3]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 8001aaa:	4b05      	ldr	r3, [pc, #20]	@ (8001ac0 <wizchip_getnetinfo+0x7c>)
 8001aac:	781a      	ldrb	r2, [r3, #0]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	759a      	strb	r2, [r3, #22]
}
 8001ab2:	bf00      	nop
 8001ab4:	3708      	adds	r7, #8
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	2000126c 	.word	0x2000126c
 8001ac0:	20001270 	.word	0x20001270

08001ac4 <wizchip_setnetmode>:

int8_t wizchip_setnetmode(netmode_type netmode)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b084      	sub	sp, #16
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	4603      	mov	r3, r0
 8001acc:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ != W5500
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
#else
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
 8001ad2:	79fb      	ldrb	r3, [r7, #7]
 8001ad4:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d002      	beq.n	8001ae2 <wizchip_setnetmode+0x1e>
 8001adc:	f04f 33ff 	mov.w	r3, #4294967295
 8001ae0:	e00e      	b.n	8001b00 <wizchip_setnetmode+0x3c>
#endif      
   tmp = getMR();
 8001ae2:	2000      	movs	r0, #0
 8001ae4:	f7fe fba0 	bl	8000228 <WIZCHIP_READ>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	73fb      	strb	r3, [r7, #15]
   tmp |= (uint8_t)netmode;
 8001aec:	7bfa      	ldrb	r2, [r7, #15]
 8001aee:	79fb      	ldrb	r3, [r7, #7]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	73fb      	strb	r3, [r7, #15]
   setMR(tmp);
 8001af4:	7bfb      	ldrb	r3, [r7, #15]
 8001af6:	4619      	mov	r1, r3
 8001af8:	2000      	movs	r0, #0
 8001afa:	f7fe fbe1 	bl	80002c0 <WIZCHIP_WRITE>
   return 0;
 8001afe:	2300      	movs	r3, #0
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3710      	adds	r7, #16
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}

08001b08 <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
   return (netmode_type) getMR();
 8001b0c:	2000      	movs	r0, #0
 8001b0e:	f7fe fb8b 	bl	8000228 <WIZCHIP_READ>
 8001b12:	4603      	mov	r3, r0
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	bd80      	pop	{r7, pc}

08001b18 <wizchip_settimeout>:

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
   setRCR(nettime->retry_cnt);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	4619      	mov	r1, r3
 8001b26:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 8001b2a:	f7fe fbc9 	bl	80002c0 <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	885b      	ldrh	r3, [r3, #2]
 8001b32:	0a1b      	lsrs	r3, r3, #8
 8001b34:	b29b      	uxth	r3, r3
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	4619      	mov	r1, r3
 8001b3a:	f44f 50c8 	mov.w	r0, #6400	@ 0x1900
 8001b3e:	f7fe fbbf 	bl	80002c0 <WIZCHIP_WRITE>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	885b      	ldrh	r3, [r3, #2]
 8001b46:	b2db      	uxtb	r3, r3
 8001b48:	4619      	mov	r1, r3
 8001b4a:	f44f 50d0 	mov.w	r0, #6656	@ 0x1a00
 8001b4e:	f7fe fbb7 	bl	80002c0 <WIZCHIP_WRITE>
}
 8001b52:	bf00      	nop
 8001b54:	3708      	adds	r7, #8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}

08001b5a <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
 8001b5a:	b590      	push	{r4, r7, lr}
 8001b5c:	b083      	sub	sp, #12
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	6078      	str	r0, [r7, #4]
   nettime->retry_cnt = getRCR();
 8001b62:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 8001b66:	f7fe fb5f 	bl	8000228 <WIZCHIP_READ>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	701a      	strb	r2, [r3, #0]
   nettime->time_100us = getRTR();
 8001b72:	f44f 50c8 	mov.w	r0, #6400	@ 0x1900
 8001b76:	f7fe fb57 	bl	8000228 <WIZCHIP_READ>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	021b      	lsls	r3, r3, #8
 8001b7e:	b29c      	uxth	r4, r3
 8001b80:	f44f 50d0 	mov.w	r0, #6656	@ 0x1a00
 8001b84:	f7fe fb50 	bl	8000228 <WIZCHIP_READ>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	4423      	add	r3, r4
 8001b8c:	b29a      	uxth	r2, r3
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	805a      	strh	r2, [r3, #2]
}
 8001b92:	bf00      	nop
 8001b94:	370c      	adds	r7, #12
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd90      	pop	{r4, r7, pc}
	...

08001b9c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001b9c:	480d      	ldr	r0, [pc, #52]	@ (8001bd4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001b9e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ba0:	f7ff f9c8 	bl	8000f34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ba4:	480c      	ldr	r0, [pc, #48]	@ (8001bd8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001ba6:	490d      	ldr	r1, [pc, #52]	@ (8001bdc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ba8:	4a0d      	ldr	r2, [pc, #52]	@ (8001be0 <LoopForever+0xe>)
  movs r3, #0
 8001baa:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001bac:	e002      	b.n	8001bb4 <LoopCopyDataInit>

08001bae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bb2:	3304      	adds	r3, #4

08001bb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bb8:	d3f9      	bcc.n	8001bae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bba:	4a0a      	ldr	r2, [pc, #40]	@ (8001be4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001bbc:	4c0a      	ldr	r4, [pc, #40]	@ (8001be8 <LoopForever+0x16>)
  movs r3, #0
 8001bbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bc0:	e001      	b.n	8001bc6 <LoopFillZerobss>

08001bc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bc4:	3204      	adds	r2, #4

08001bc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bc8:	d3fb      	bcc.n	8001bc2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bca:	f002 f8ed 	bl	8003da8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001bce:	f7fe fd4d 	bl	800066c <main>

08001bd2 <LoopForever>:

LoopForever:
    b LoopForever
 8001bd2:	e7fe      	b.n	8001bd2 <LoopForever>
  ldr   r0, =_estack
 8001bd4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001bd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bdc:	200000c0 	.word	0x200000c0
  ldr r2, =_sidata
 8001be0:	0800445c 	.word	0x0800445c
  ldr r2, =_sbss
 8001be4:	200000c0 	.word	0x200000c0
  ldr r4, =_ebss
 8001be8:	200013c0 	.word	0x200013c0

08001bec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001bec:	e7fe      	b.n	8001bec <ADC1_2_IRQHandler>

08001bee <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bee:	b580      	push	{r7, lr}
 8001bf0:	b082      	sub	sp, #8
 8001bf2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bf8:	2003      	movs	r0, #3
 8001bfa:	f000 f93d 	bl	8001e78 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001bfe:	200f      	movs	r0, #15
 8001c00:	f000 f80e 	bl	8001c20 <HAL_InitTick>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d002      	beq.n	8001c10 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	71fb      	strb	r3, [r7, #7]
 8001c0e:	e001      	b.n	8001c14 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c10:	f7ff f8c4 	bl	8000d9c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c14:	79fb      	ldrb	r3, [r7, #7]

}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
	...

08001c20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b084      	sub	sp, #16
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001c2c:	4b16      	ldr	r3, [pc, #88]	@ (8001c88 <HAL_InitTick+0x68>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d022      	beq.n	8001c7a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001c34:	4b15      	ldr	r3, [pc, #84]	@ (8001c8c <HAL_InitTick+0x6c>)
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	4b13      	ldr	r3, [pc, #76]	@ (8001c88 <HAL_InitTick+0x68>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001c40:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c44:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f000 f93a 	bl	8001ec2 <HAL_SYSTICK_Config>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d10f      	bne.n	8001c74 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2b0f      	cmp	r3, #15
 8001c58:	d809      	bhi.n	8001c6e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	6879      	ldr	r1, [r7, #4]
 8001c5e:	f04f 30ff 	mov.w	r0, #4294967295
 8001c62:	f000 f914 	bl	8001e8e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c66:	4a0a      	ldr	r2, [pc, #40]	@ (8001c90 <HAL_InitTick+0x70>)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6013      	str	r3, [r2, #0]
 8001c6c:	e007      	b.n	8001c7e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	73fb      	strb	r3, [r7, #15]
 8001c72:	e004      	b.n	8001c7e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	73fb      	strb	r3, [r7, #15]
 8001c78:	e001      	b.n	8001c7e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001c7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3710      	adds	r7, #16
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	2000006c 	.word	0x2000006c
 8001c8c:	20000038 	.word	0x20000038
 8001c90:	20000068 	.word	0x20000068

08001c94 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c98:	4b05      	ldr	r3, [pc, #20]	@ (8001cb0 <HAL_IncTick+0x1c>)
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	4b05      	ldr	r3, [pc, #20]	@ (8001cb4 <HAL_IncTick+0x20>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4413      	add	r3, r2
 8001ca2:	4a03      	ldr	r2, [pc, #12]	@ (8001cb0 <HAL_IncTick+0x1c>)
 8001ca4:	6013      	str	r3, [r2, #0]
}
 8001ca6:	bf00      	nop
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr
 8001cb0:	20001274 	.word	0x20001274
 8001cb4:	2000006c 	.word	0x2000006c

08001cb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  return uwTick;
 8001cbc:	4b03      	ldr	r3, [pc, #12]	@ (8001ccc <HAL_GetTick+0x14>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	20001274 	.word	0x20001274

08001cd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b084      	sub	sp, #16
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cd8:	f7ff ffee 	bl	8001cb8 <HAL_GetTick>
 8001cdc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ce8:	d004      	beq.n	8001cf4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cea:	4b09      	ldr	r3, [pc, #36]	@ (8001d10 <HAL_Delay+0x40>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	68fa      	ldr	r2, [r7, #12]
 8001cf0:	4413      	add	r3, r2
 8001cf2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cf4:	bf00      	nop
 8001cf6:	f7ff ffdf 	bl	8001cb8 <HAL_GetTick>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	1ad3      	subs	r3, r2, r3
 8001d00:	68fa      	ldr	r2, [r7, #12]
 8001d02:	429a      	cmp	r2, r3
 8001d04:	d8f7      	bhi.n	8001cf6 <HAL_Delay+0x26>
  {
  }
}
 8001d06:	bf00      	nop
 8001d08:	bf00      	nop
 8001d0a:	3710      	adds	r7, #16
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	2000006c 	.word	0x2000006c

08001d14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b085      	sub	sp, #20
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	f003 0307 	and.w	r3, r3, #7
 8001d22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d24:	4b0c      	ldr	r3, [pc, #48]	@ (8001d58 <__NVIC_SetPriorityGrouping+0x44>)
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d2a:	68ba      	ldr	r2, [r7, #8]
 8001d2c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d30:	4013      	ands	r3, r2
 8001d32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d3c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d46:	4a04      	ldr	r2, [pc, #16]	@ (8001d58 <__NVIC_SetPriorityGrouping+0x44>)
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	60d3      	str	r3, [r2, #12]
}
 8001d4c:	bf00      	nop
 8001d4e:	3714      	adds	r7, #20
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr
 8001d58:	e000ed00 	.word	0xe000ed00

08001d5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d60:	4b04      	ldr	r3, [pc, #16]	@ (8001d74 <__NVIC_GetPriorityGrouping+0x18>)
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	0a1b      	lsrs	r3, r3, #8
 8001d66:	f003 0307 	and.w	r3, r3, #7
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr
 8001d74:	e000ed00 	.word	0xe000ed00

08001d78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	4603      	mov	r3, r0
 8001d80:	6039      	str	r1, [r7, #0]
 8001d82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	db0a      	blt.n	8001da2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	b2da      	uxtb	r2, r3
 8001d90:	490c      	ldr	r1, [pc, #48]	@ (8001dc4 <__NVIC_SetPriority+0x4c>)
 8001d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d96:	0112      	lsls	r2, r2, #4
 8001d98:	b2d2      	uxtb	r2, r2
 8001d9a:	440b      	add	r3, r1
 8001d9c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001da0:	e00a      	b.n	8001db8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	b2da      	uxtb	r2, r3
 8001da6:	4908      	ldr	r1, [pc, #32]	@ (8001dc8 <__NVIC_SetPriority+0x50>)
 8001da8:	79fb      	ldrb	r3, [r7, #7]
 8001daa:	f003 030f 	and.w	r3, r3, #15
 8001dae:	3b04      	subs	r3, #4
 8001db0:	0112      	lsls	r2, r2, #4
 8001db2:	b2d2      	uxtb	r2, r2
 8001db4:	440b      	add	r3, r1
 8001db6:	761a      	strb	r2, [r3, #24]
}
 8001db8:	bf00      	nop
 8001dba:	370c      	adds	r7, #12
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr
 8001dc4:	e000e100 	.word	0xe000e100
 8001dc8:	e000ed00 	.word	0xe000ed00

08001dcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b089      	sub	sp, #36	@ 0x24
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	60f8      	str	r0, [r7, #12]
 8001dd4:	60b9      	str	r1, [r7, #8]
 8001dd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	f003 0307 	and.w	r3, r3, #7
 8001dde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	f1c3 0307 	rsb	r3, r3, #7
 8001de6:	2b04      	cmp	r3, #4
 8001de8:	bf28      	it	cs
 8001dea:	2304      	movcs	r3, #4
 8001dec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	3304      	adds	r3, #4
 8001df2:	2b06      	cmp	r3, #6
 8001df4:	d902      	bls.n	8001dfc <NVIC_EncodePriority+0x30>
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	3b03      	subs	r3, #3
 8001dfa:	e000      	b.n	8001dfe <NVIC_EncodePriority+0x32>
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e00:	f04f 32ff 	mov.w	r2, #4294967295
 8001e04:	69bb      	ldr	r3, [r7, #24]
 8001e06:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0a:	43da      	mvns	r2, r3
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	401a      	ands	r2, r3
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e14:	f04f 31ff 	mov.w	r1, #4294967295
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e1e:	43d9      	mvns	r1, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e24:	4313      	orrs	r3, r2
         );
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3724      	adds	r7, #36	@ 0x24
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
	...

08001e34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	3b01      	subs	r3, #1
 8001e40:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e44:	d301      	bcc.n	8001e4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e46:	2301      	movs	r3, #1
 8001e48:	e00f      	b.n	8001e6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e4a:	4a0a      	ldr	r2, [pc, #40]	@ (8001e74 <SysTick_Config+0x40>)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	3b01      	subs	r3, #1
 8001e50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e52:	210f      	movs	r1, #15
 8001e54:	f04f 30ff 	mov.w	r0, #4294967295
 8001e58:	f7ff ff8e 	bl	8001d78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e5c:	4b05      	ldr	r3, [pc, #20]	@ (8001e74 <SysTick_Config+0x40>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e62:	4b04      	ldr	r3, [pc, #16]	@ (8001e74 <SysTick_Config+0x40>)
 8001e64:	2207      	movs	r2, #7
 8001e66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e68:	2300      	movs	r3, #0
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3708      	adds	r7, #8
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	e000e010 	.word	0xe000e010

08001e78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f7ff ff47 	bl	8001d14 <__NVIC_SetPriorityGrouping>
}
 8001e86:	bf00      	nop
 8001e88:	3708      	adds	r7, #8
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}

08001e8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e8e:	b580      	push	{r7, lr}
 8001e90:	b086      	sub	sp, #24
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	4603      	mov	r3, r0
 8001e96:	60b9      	str	r1, [r7, #8]
 8001e98:	607a      	str	r2, [r7, #4]
 8001e9a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e9c:	f7ff ff5e 	bl	8001d5c <__NVIC_GetPriorityGrouping>
 8001ea0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	68b9      	ldr	r1, [r7, #8]
 8001ea6:	6978      	ldr	r0, [r7, #20]
 8001ea8:	f7ff ff90 	bl	8001dcc <NVIC_EncodePriority>
 8001eac:	4602      	mov	r2, r0
 8001eae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eb2:	4611      	mov	r1, r2
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f7ff ff5f 	bl	8001d78 <__NVIC_SetPriority>
}
 8001eba:	bf00      	nop
 8001ebc:	3718      	adds	r7, #24
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}

08001ec2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ec2:	b580      	push	{r7, lr}
 8001ec4:	b082      	sub	sp, #8
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f7ff ffb2 	bl	8001e34 <SysTick_Config>
 8001ed0:	4603      	mov	r3, r0
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3708      	adds	r7, #8
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
	...

08001edc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b087      	sub	sp, #28
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001eea:	e15a      	b.n	80021a2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	2101      	movs	r1, #1
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ef8:	4013      	ands	r3, r2
 8001efa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	f000 814c 	beq.w	800219c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f003 0303 	and.w	r3, r3, #3
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d005      	beq.n	8001f1c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001f18:	2b02      	cmp	r3, #2
 8001f1a:	d130      	bne.n	8001f7e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	005b      	lsls	r3, r3, #1
 8001f26:	2203      	movs	r2, #3
 8001f28:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2c:	43db      	mvns	r3, r3
 8001f2e:	693a      	ldr	r2, [r7, #16]
 8001f30:	4013      	ands	r3, r2
 8001f32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	68da      	ldr	r2, [r3, #12]
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	005b      	lsls	r3, r3, #1
 8001f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f40:	693a      	ldr	r2, [r7, #16]
 8001f42:	4313      	orrs	r3, r2
 8001f44:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	693a      	ldr	r2, [r7, #16]
 8001f4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f52:	2201      	movs	r2, #1
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5a:	43db      	mvns	r3, r3
 8001f5c:	693a      	ldr	r2, [r7, #16]
 8001f5e:	4013      	ands	r3, r2
 8001f60:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	091b      	lsrs	r3, r3, #4
 8001f68:	f003 0201 	and.w	r2, r3, #1
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f72:	693a      	ldr	r2, [r7, #16]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	693a      	ldr	r2, [r7, #16]
 8001f7c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	f003 0303 	and.w	r3, r3, #3
 8001f86:	2b03      	cmp	r3, #3
 8001f88:	d017      	beq.n	8001fba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	68db      	ldr	r3, [r3, #12]
 8001f8e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	005b      	lsls	r3, r3, #1
 8001f94:	2203      	movs	r2, #3
 8001f96:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9a:	43db      	mvns	r3, r3
 8001f9c:	693a      	ldr	r2, [r7, #16]
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	689a      	ldr	r2, [r3, #8]
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	005b      	lsls	r3, r3, #1
 8001faa:	fa02 f303 	lsl.w	r3, r2, r3
 8001fae:	693a      	ldr	r2, [r7, #16]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	693a      	ldr	r2, [r7, #16]
 8001fb8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f003 0303 	and.w	r3, r3, #3
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d123      	bne.n	800200e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	08da      	lsrs	r2, r3, #3
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	3208      	adds	r2, #8
 8001fce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fd2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	f003 0307 	and.w	r3, r3, #7
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	220f      	movs	r2, #15
 8001fde:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe2:	43db      	mvns	r3, r3
 8001fe4:	693a      	ldr	r2, [r7, #16]
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	691a      	ldr	r2, [r3, #16]
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	f003 0307 	and.w	r3, r3, #7
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffa:	693a      	ldr	r2, [r7, #16]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	08da      	lsrs	r2, r3, #3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	3208      	adds	r2, #8
 8002008:	6939      	ldr	r1, [r7, #16]
 800200a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	005b      	lsls	r3, r3, #1
 8002018:	2203      	movs	r2, #3
 800201a:	fa02 f303 	lsl.w	r3, r2, r3
 800201e:	43db      	mvns	r3, r3
 8002020:	693a      	ldr	r2, [r7, #16]
 8002022:	4013      	ands	r3, r2
 8002024:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f003 0203 	and.w	r2, r3, #3
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	005b      	lsls	r3, r3, #1
 8002032:	fa02 f303 	lsl.w	r3, r2, r3
 8002036:	693a      	ldr	r2, [r7, #16]
 8002038:	4313      	orrs	r3, r2
 800203a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	693a      	ldr	r2, [r7, #16]
 8002040:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800204a:	2b00      	cmp	r3, #0
 800204c:	f000 80a6 	beq.w	800219c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002050:	4b5b      	ldr	r3, [pc, #364]	@ (80021c0 <HAL_GPIO_Init+0x2e4>)
 8002052:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002054:	4a5a      	ldr	r2, [pc, #360]	@ (80021c0 <HAL_GPIO_Init+0x2e4>)
 8002056:	f043 0301 	orr.w	r3, r3, #1
 800205a:	6613      	str	r3, [r2, #96]	@ 0x60
 800205c:	4b58      	ldr	r3, [pc, #352]	@ (80021c0 <HAL_GPIO_Init+0x2e4>)
 800205e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002060:	f003 0301 	and.w	r3, r3, #1
 8002064:	60bb      	str	r3, [r7, #8]
 8002066:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002068:	4a56      	ldr	r2, [pc, #344]	@ (80021c4 <HAL_GPIO_Init+0x2e8>)
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	089b      	lsrs	r3, r3, #2
 800206e:	3302      	adds	r3, #2
 8002070:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002074:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	f003 0303 	and.w	r3, r3, #3
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	220f      	movs	r2, #15
 8002080:	fa02 f303 	lsl.w	r3, r2, r3
 8002084:	43db      	mvns	r3, r3
 8002086:	693a      	ldr	r2, [r7, #16]
 8002088:	4013      	ands	r3, r2
 800208a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002092:	d01f      	beq.n	80020d4 <HAL_GPIO_Init+0x1f8>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	4a4c      	ldr	r2, [pc, #304]	@ (80021c8 <HAL_GPIO_Init+0x2ec>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d019      	beq.n	80020d0 <HAL_GPIO_Init+0x1f4>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	4a4b      	ldr	r2, [pc, #300]	@ (80021cc <HAL_GPIO_Init+0x2f0>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d013      	beq.n	80020cc <HAL_GPIO_Init+0x1f0>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	4a4a      	ldr	r2, [pc, #296]	@ (80021d0 <HAL_GPIO_Init+0x2f4>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d00d      	beq.n	80020c8 <HAL_GPIO_Init+0x1ec>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	4a49      	ldr	r2, [pc, #292]	@ (80021d4 <HAL_GPIO_Init+0x2f8>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d007      	beq.n	80020c4 <HAL_GPIO_Init+0x1e8>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	4a48      	ldr	r2, [pc, #288]	@ (80021d8 <HAL_GPIO_Init+0x2fc>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d101      	bne.n	80020c0 <HAL_GPIO_Init+0x1e4>
 80020bc:	2305      	movs	r3, #5
 80020be:	e00a      	b.n	80020d6 <HAL_GPIO_Init+0x1fa>
 80020c0:	2306      	movs	r3, #6
 80020c2:	e008      	b.n	80020d6 <HAL_GPIO_Init+0x1fa>
 80020c4:	2304      	movs	r3, #4
 80020c6:	e006      	b.n	80020d6 <HAL_GPIO_Init+0x1fa>
 80020c8:	2303      	movs	r3, #3
 80020ca:	e004      	b.n	80020d6 <HAL_GPIO_Init+0x1fa>
 80020cc:	2302      	movs	r3, #2
 80020ce:	e002      	b.n	80020d6 <HAL_GPIO_Init+0x1fa>
 80020d0:	2301      	movs	r3, #1
 80020d2:	e000      	b.n	80020d6 <HAL_GPIO_Init+0x1fa>
 80020d4:	2300      	movs	r3, #0
 80020d6:	697a      	ldr	r2, [r7, #20]
 80020d8:	f002 0203 	and.w	r2, r2, #3
 80020dc:	0092      	lsls	r2, r2, #2
 80020de:	4093      	lsls	r3, r2
 80020e0:	693a      	ldr	r2, [r7, #16]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020e6:	4937      	ldr	r1, [pc, #220]	@ (80021c4 <HAL_GPIO_Init+0x2e8>)
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	089b      	lsrs	r3, r3, #2
 80020ec:	3302      	adds	r3, #2
 80020ee:	693a      	ldr	r2, [r7, #16]
 80020f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80020f4:	4b39      	ldr	r3, [pc, #228]	@ (80021dc <HAL_GPIO_Init+0x300>)
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	43db      	mvns	r3, r3
 80020fe:	693a      	ldr	r2, [r7, #16]
 8002100:	4013      	ands	r3, r2
 8002102:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800210c:	2b00      	cmp	r3, #0
 800210e:	d003      	beq.n	8002118 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002110:	693a      	ldr	r2, [r7, #16]
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	4313      	orrs	r3, r2
 8002116:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002118:	4a30      	ldr	r2, [pc, #192]	@ (80021dc <HAL_GPIO_Init+0x300>)
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800211e:	4b2f      	ldr	r3, [pc, #188]	@ (80021dc <HAL_GPIO_Init+0x300>)
 8002120:	68db      	ldr	r3, [r3, #12]
 8002122:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	43db      	mvns	r3, r3
 8002128:	693a      	ldr	r2, [r7, #16]
 800212a:	4013      	ands	r3, r2
 800212c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d003      	beq.n	8002142 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800213a:	693a      	ldr	r2, [r7, #16]
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	4313      	orrs	r3, r2
 8002140:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002142:	4a26      	ldr	r2, [pc, #152]	@ (80021dc <HAL_GPIO_Init+0x300>)
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002148:	4b24      	ldr	r3, [pc, #144]	@ (80021dc <HAL_GPIO_Init+0x300>)
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	43db      	mvns	r3, r3
 8002152:	693a      	ldr	r2, [r7, #16]
 8002154:	4013      	ands	r3, r2
 8002156:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002160:	2b00      	cmp	r3, #0
 8002162:	d003      	beq.n	800216c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002164:	693a      	ldr	r2, [r7, #16]
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	4313      	orrs	r3, r2
 800216a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800216c:	4a1b      	ldr	r2, [pc, #108]	@ (80021dc <HAL_GPIO_Init+0x300>)
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002172:	4b1a      	ldr	r3, [pc, #104]	@ (80021dc <HAL_GPIO_Init+0x300>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	43db      	mvns	r3, r3
 800217c:	693a      	ldr	r2, [r7, #16]
 800217e:	4013      	ands	r3, r2
 8002180:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d003      	beq.n	8002196 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800218e:	693a      	ldr	r2, [r7, #16]
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	4313      	orrs	r3, r2
 8002194:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002196:	4a11      	ldr	r2, [pc, #68]	@ (80021dc <HAL_GPIO_Init+0x300>)
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	3301      	adds	r3, #1
 80021a0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	fa22 f303 	lsr.w	r3, r2, r3
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	f47f ae9d 	bne.w	8001eec <HAL_GPIO_Init+0x10>
  }
}
 80021b2:	bf00      	nop
 80021b4:	bf00      	nop
 80021b6:	371c      	adds	r7, #28
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr
 80021c0:	40021000 	.word	0x40021000
 80021c4:	40010000 	.word	0x40010000
 80021c8:	48000400 	.word	0x48000400
 80021cc:	48000800 	.word	0x48000800
 80021d0:	48000c00 	.word	0x48000c00
 80021d4:	48001000 	.word	0x48001000
 80021d8:	48001400 	.word	0x48001400
 80021dc:	40010400 	.word	0x40010400

080021e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b085      	sub	sp, #20
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	460b      	mov	r3, r1
 80021ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	691a      	ldr	r2, [r3, #16]
 80021f0:	887b      	ldrh	r3, [r7, #2]
 80021f2:	4013      	ands	r3, r2
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d002      	beq.n	80021fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80021f8:	2301      	movs	r3, #1
 80021fa:	73fb      	strb	r3, [r7, #15]
 80021fc:	e001      	b.n	8002202 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80021fe:	2300      	movs	r3, #0
 8002200:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002202:	7bfb      	ldrb	r3, [r7, #15]
}
 8002204:	4618      	mov	r0, r3
 8002206:	3714      	adds	r7, #20
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr

08002210 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	460b      	mov	r3, r1
 800221a:	807b      	strh	r3, [r7, #2]
 800221c:	4613      	mov	r3, r2
 800221e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002220:	787b      	ldrb	r3, [r7, #1]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d003      	beq.n	800222e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002226:	887a      	ldrh	r2, [r7, #2]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800222c:	e002      	b.n	8002234 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800222e:	887a      	ldrh	r2, [r7, #2]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002234:	bf00      	nop
 8002236:	370c      	adds	r7, #12
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr

08002240 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002240:	b480      	push	{r7}
 8002242:	b085      	sub	sp, #20
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d141      	bne.n	80022d2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800224e:	4b4b      	ldr	r3, [pc, #300]	@ (800237c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002256:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800225a:	d131      	bne.n	80022c0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800225c:	4b47      	ldr	r3, [pc, #284]	@ (800237c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800225e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002262:	4a46      	ldr	r2, [pc, #280]	@ (800237c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002264:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002268:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800226c:	4b43      	ldr	r3, [pc, #268]	@ (800237c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002274:	4a41      	ldr	r2, [pc, #260]	@ (800237c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002276:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800227a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800227c:	4b40      	ldr	r3, [pc, #256]	@ (8002380 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2232      	movs	r2, #50	@ 0x32
 8002282:	fb02 f303 	mul.w	r3, r2, r3
 8002286:	4a3f      	ldr	r2, [pc, #252]	@ (8002384 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002288:	fba2 2303 	umull	r2, r3, r2, r3
 800228c:	0c9b      	lsrs	r3, r3, #18
 800228e:	3301      	adds	r3, #1
 8002290:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002292:	e002      	b.n	800229a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	3b01      	subs	r3, #1
 8002298:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800229a:	4b38      	ldr	r3, [pc, #224]	@ (800237c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800229c:	695b      	ldr	r3, [r3, #20]
 800229e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022a6:	d102      	bne.n	80022ae <HAL_PWREx_ControlVoltageScaling+0x6e>
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d1f2      	bne.n	8002294 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80022ae:	4b33      	ldr	r3, [pc, #204]	@ (800237c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022b0:	695b      	ldr	r3, [r3, #20]
 80022b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022ba:	d158      	bne.n	800236e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80022bc:	2303      	movs	r3, #3
 80022be:	e057      	b.n	8002370 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80022c0:	4b2e      	ldr	r3, [pc, #184]	@ (800237c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80022c6:	4a2d      	ldr	r2, [pc, #180]	@ (800237c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80022cc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80022d0:	e04d      	b.n	800236e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80022d8:	d141      	bne.n	800235e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80022da:	4b28      	ldr	r3, [pc, #160]	@ (800237c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80022e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022e6:	d131      	bne.n	800234c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80022e8:	4b24      	ldr	r3, [pc, #144]	@ (800237c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80022ee:	4a23      	ldr	r2, [pc, #140]	@ (800237c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022f4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80022f8:	4b20      	ldr	r3, [pc, #128]	@ (800237c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002300:	4a1e      	ldr	r2, [pc, #120]	@ (800237c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002302:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002306:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002308:	4b1d      	ldr	r3, [pc, #116]	@ (8002380 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	2232      	movs	r2, #50	@ 0x32
 800230e:	fb02 f303 	mul.w	r3, r2, r3
 8002312:	4a1c      	ldr	r2, [pc, #112]	@ (8002384 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002314:	fba2 2303 	umull	r2, r3, r2, r3
 8002318:	0c9b      	lsrs	r3, r3, #18
 800231a:	3301      	adds	r3, #1
 800231c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800231e:	e002      	b.n	8002326 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	3b01      	subs	r3, #1
 8002324:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002326:	4b15      	ldr	r3, [pc, #84]	@ (800237c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002328:	695b      	ldr	r3, [r3, #20]
 800232a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800232e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002332:	d102      	bne.n	800233a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d1f2      	bne.n	8002320 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800233a:	4b10      	ldr	r3, [pc, #64]	@ (800237c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800233c:	695b      	ldr	r3, [r3, #20]
 800233e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002342:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002346:	d112      	bne.n	800236e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002348:	2303      	movs	r3, #3
 800234a:	e011      	b.n	8002370 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800234c:	4b0b      	ldr	r3, [pc, #44]	@ (800237c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800234e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002352:	4a0a      	ldr	r2, [pc, #40]	@ (800237c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002354:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002358:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800235c:	e007      	b.n	800236e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800235e:	4b07      	ldr	r3, [pc, #28]	@ (800237c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002366:	4a05      	ldr	r2, [pc, #20]	@ (800237c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002368:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800236c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800236e:	2300      	movs	r3, #0
}
 8002370:	4618      	mov	r0, r3
 8002372:	3714      	adds	r7, #20
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr
 800237c:	40007000 	.word	0x40007000
 8002380:	20000038 	.word	0x20000038
 8002384:	431bde83 	.word	0x431bde83

08002388 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002388:	b480      	push	{r7}
 800238a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800238c:	4b05      	ldr	r3, [pc, #20]	@ (80023a4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	4a04      	ldr	r2, [pc, #16]	@ (80023a4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002392:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002396:	6093      	str	r3, [r2, #8]
}
 8002398:	bf00      	nop
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr
 80023a2:	bf00      	nop
 80023a4:	40007000 	.word	0x40007000

080023a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b088      	sub	sp, #32
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d101      	bne.n	80023ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e2fe      	b.n	80029b8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0301 	and.w	r3, r3, #1
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d075      	beq.n	80024b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023c6:	4b97      	ldr	r3, [pc, #604]	@ (8002624 <HAL_RCC_OscConfig+0x27c>)
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	f003 030c 	and.w	r3, r3, #12
 80023ce:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023d0:	4b94      	ldr	r3, [pc, #592]	@ (8002624 <HAL_RCC_OscConfig+0x27c>)
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	f003 0303 	and.w	r3, r3, #3
 80023d8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80023da:	69bb      	ldr	r3, [r7, #24]
 80023dc:	2b0c      	cmp	r3, #12
 80023de:	d102      	bne.n	80023e6 <HAL_RCC_OscConfig+0x3e>
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	2b03      	cmp	r3, #3
 80023e4:	d002      	beq.n	80023ec <HAL_RCC_OscConfig+0x44>
 80023e6:	69bb      	ldr	r3, [r7, #24]
 80023e8:	2b08      	cmp	r3, #8
 80023ea:	d10b      	bne.n	8002404 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023ec:	4b8d      	ldr	r3, [pc, #564]	@ (8002624 <HAL_RCC_OscConfig+0x27c>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d05b      	beq.n	80024b0 <HAL_RCC_OscConfig+0x108>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d157      	bne.n	80024b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	e2d9      	b.n	80029b8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800240c:	d106      	bne.n	800241c <HAL_RCC_OscConfig+0x74>
 800240e:	4b85      	ldr	r3, [pc, #532]	@ (8002624 <HAL_RCC_OscConfig+0x27c>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a84      	ldr	r2, [pc, #528]	@ (8002624 <HAL_RCC_OscConfig+0x27c>)
 8002414:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002418:	6013      	str	r3, [r2, #0]
 800241a:	e01d      	b.n	8002458 <HAL_RCC_OscConfig+0xb0>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002424:	d10c      	bne.n	8002440 <HAL_RCC_OscConfig+0x98>
 8002426:	4b7f      	ldr	r3, [pc, #508]	@ (8002624 <HAL_RCC_OscConfig+0x27c>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a7e      	ldr	r2, [pc, #504]	@ (8002624 <HAL_RCC_OscConfig+0x27c>)
 800242c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002430:	6013      	str	r3, [r2, #0]
 8002432:	4b7c      	ldr	r3, [pc, #496]	@ (8002624 <HAL_RCC_OscConfig+0x27c>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a7b      	ldr	r2, [pc, #492]	@ (8002624 <HAL_RCC_OscConfig+0x27c>)
 8002438:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800243c:	6013      	str	r3, [r2, #0]
 800243e:	e00b      	b.n	8002458 <HAL_RCC_OscConfig+0xb0>
 8002440:	4b78      	ldr	r3, [pc, #480]	@ (8002624 <HAL_RCC_OscConfig+0x27c>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a77      	ldr	r2, [pc, #476]	@ (8002624 <HAL_RCC_OscConfig+0x27c>)
 8002446:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800244a:	6013      	str	r3, [r2, #0]
 800244c:	4b75      	ldr	r3, [pc, #468]	@ (8002624 <HAL_RCC_OscConfig+0x27c>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a74      	ldr	r2, [pc, #464]	@ (8002624 <HAL_RCC_OscConfig+0x27c>)
 8002452:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002456:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d013      	beq.n	8002488 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002460:	f7ff fc2a 	bl	8001cb8 <HAL_GetTick>
 8002464:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002466:	e008      	b.n	800247a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002468:	f7ff fc26 	bl	8001cb8 <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	2b64      	cmp	r3, #100	@ 0x64
 8002474:	d901      	bls.n	800247a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002476:	2303      	movs	r3, #3
 8002478:	e29e      	b.n	80029b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800247a:	4b6a      	ldr	r3, [pc, #424]	@ (8002624 <HAL_RCC_OscConfig+0x27c>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d0f0      	beq.n	8002468 <HAL_RCC_OscConfig+0xc0>
 8002486:	e014      	b.n	80024b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002488:	f7ff fc16 	bl	8001cb8 <HAL_GetTick>
 800248c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800248e:	e008      	b.n	80024a2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002490:	f7ff fc12 	bl	8001cb8 <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	2b64      	cmp	r3, #100	@ 0x64
 800249c:	d901      	bls.n	80024a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800249e:	2303      	movs	r3, #3
 80024a0:	e28a      	b.n	80029b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024a2:	4b60      	ldr	r3, [pc, #384]	@ (8002624 <HAL_RCC_OscConfig+0x27c>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d1f0      	bne.n	8002490 <HAL_RCC_OscConfig+0xe8>
 80024ae:	e000      	b.n	80024b2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0302 	and.w	r3, r3, #2
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d075      	beq.n	80025aa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024be:	4b59      	ldr	r3, [pc, #356]	@ (8002624 <HAL_RCC_OscConfig+0x27c>)
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	f003 030c 	and.w	r3, r3, #12
 80024c6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024c8:	4b56      	ldr	r3, [pc, #344]	@ (8002624 <HAL_RCC_OscConfig+0x27c>)
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	f003 0303 	and.w	r3, r3, #3
 80024d0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80024d2:	69bb      	ldr	r3, [r7, #24]
 80024d4:	2b0c      	cmp	r3, #12
 80024d6:	d102      	bne.n	80024de <HAL_RCC_OscConfig+0x136>
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d002      	beq.n	80024e4 <HAL_RCC_OscConfig+0x13c>
 80024de:	69bb      	ldr	r3, [r7, #24]
 80024e0:	2b04      	cmp	r3, #4
 80024e2:	d11f      	bne.n	8002524 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024e4:	4b4f      	ldr	r3, [pc, #316]	@ (8002624 <HAL_RCC_OscConfig+0x27c>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d005      	beq.n	80024fc <HAL_RCC_OscConfig+0x154>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d101      	bne.n	80024fc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e25d      	b.n	80029b8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024fc:	4b49      	ldr	r3, [pc, #292]	@ (8002624 <HAL_RCC_OscConfig+0x27c>)
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	691b      	ldr	r3, [r3, #16]
 8002508:	061b      	lsls	r3, r3, #24
 800250a:	4946      	ldr	r1, [pc, #280]	@ (8002624 <HAL_RCC_OscConfig+0x27c>)
 800250c:	4313      	orrs	r3, r2
 800250e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002510:	4b45      	ldr	r3, [pc, #276]	@ (8002628 <HAL_RCC_OscConfig+0x280>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4618      	mov	r0, r3
 8002516:	f7ff fb83 	bl	8001c20 <HAL_InitTick>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d043      	beq.n	80025a8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e249      	b.n	80029b8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d023      	beq.n	8002574 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800252c:	4b3d      	ldr	r3, [pc, #244]	@ (8002624 <HAL_RCC_OscConfig+0x27c>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a3c      	ldr	r2, [pc, #240]	@ (8002624 <HAL_RCC_OscConfig+0x27c>)
 8002532:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002536:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002538:	f7ff fbbe 	bl	8001cb8 <HAL_GetTick>
 800253c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800253e:	e008      	b.n	8002552 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002540:	f7ff fbba 	bl	8001cb8 <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	2b02      	cmp	r3, #2
 800254c:	d901      	bls.n	8002552 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	e232      	b.n	80029b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002552:	4b34      	ldr	r3, [pc, #208]	@ (8002624 <HAL_RCC_OscConfig+0x27c>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800255a:	2b00      	cmp	r3, #0
 800255c:	d0f0      	beq.n	8002540 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800255e:	4b31      	ldr	r3, [pc, #196]	@ (8002624 <HAL_RCC_OscConfig+0x27c>)
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	691b      	ldr	r3, [r3, #16]
 800256a:	061b      	lsls	r3, r3, #24
 800256c:	492d      	ldr	r1, [pc, #180]	@ (8002624 <HAL_RCC_OscConfig+0x27c>)
 800256e:	4313      	orrs	r3, r2
 8002570:	604b      	str	r3, [r1, #4]
 8002572:	e01a      	b.n	80025aa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002574:	4b2b      	ldr	r3, [pc, #172]	@ (8002624 <HAL_RCC_OscConfig+0x27c>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a2a      	ldr	r2, [pc, #168]	@ (8002624 <HAL_RCC_OscConfig+0x27c>)
 800257a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800257e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002580:	f7ff fb9a 	bl	8001cb8 <HAL_GetTick>
 8002584:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002586:	e008      	b.n	800259a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002588:	f7ff fb96 	bl	8001cb8 <HAL_GetTick>
 800258c:	4602      	mov	r2, r0
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	2b02      	cmp	r3, #2
 8002594:	d901      	bls.n	800259a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002596:	2303      	movs	r3, #3
 8002598:	e20e      	b.n	80029b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800259a:	4b22      	ldr	r3, [pc, #136]	@ (8002624 <HAL_RCC_OscConfig+0x27c>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d1f0      	bne.n	8002588 <HAL_RCC_OscConfig+0x1e0>
 80025a6:	e000      	b.n	80025aa <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025a8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0308 	and.w	r3, r3, #8
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d041      	beq.n	800263a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	695b      	ldr	r3, [r3, #20]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d01c      	beq.n	80025f8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025be:	4b19      	ldr	r3, [pc, #100]	@ (8002624 <HAL_RCC_OscConfig+0x27c>)
 80025c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80025c4:	4a17      	ldr	r2, [pc, #92]	@ (8002624 <HAL_RCC_OscConfig+0x27c>)
 80025c6:	f043 0301 	orr.w	r3, r3, #1
 80025ca:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025ce:	f7ff fb73 	bl	8001cb8 <HAL_GetTick>
 80025d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80025d4:	e008      	b.n	80025e8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025d6:	f7ff fb6f 	bl	8001cb8 <HAL_GetTick>
 80025da:	4602      	mov	r2, r0
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	1ad3      	subs	r3, r2, r3
 80025e0:	2b02      	cmp	r3, #2
 80025e2:	d901      	bls.n	80025e8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80025e4:	2303      	movs	r3, #3
 80025e6:	e1e7      	b.n	80029b8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80025e8:	4b0e      	ldr	r3, [pc, #56]	@ (8002624 <HAL_RCC_OscConfig+0x27c>)
 80025ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80025ee:	f003 0302 	and.w	r3, r3, #2
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d0ef      	beq.n	80025d6 <HAL_RCC_OscConfig+0x22e>
 80025f6:	e020      	b.n	800263a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025f8:	4b0a      	ldr	r3, [pc, #40]	@ (8002624 <HAL_RCC_OscConfig+0x27c>)
 80025fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80025fe:	4a09      	ldr	r2, [pc, #36]	@ (8002624 <HAL_RCC_OscConfig+0x27c>)
 8002600:	f023 0301 	bic.w	r3, r3, #1
 8002604:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002608:	f7ff fb56 	bl	8001cb8 <HAL_GetTick>
 800260c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800260e:	e00d      	b.n	800262c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002610:	f7ff fb52 	bl	8001cb8 <HAL_GetTick>
 8002614:	4602      	mov	r2, r0
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	2b02      	cmp	r3, #2
 800261c:	d906      	bls.n	800262c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800261e:	2303      	movs	r3, #3
 8002620:	e1ca      	b.n	80029b8 <HAL_RCC_OscConfig+0x610>
 8002622:	bf00      	nop
 8002624:	40021000 	.word	0x40021000
 8002628:	20000068 	.word	0x20000068
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800262c:	4b8c      	ldr	r3, [pc, #560]	@ (8002860 <HAL_RCC_OscConfig+0x4b8>)
 800262e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002632:	f003 0302 	and.w	r3, r3, #2
 8002636:	2b00      	cmp	r3, #0
 8002638:	d1ea      	bne.n	8002610 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0304 	and.w	r3, r3, #4
 8002642:	2b00      	cmp	r3, #0
 8002644:	f000 80a6 	beq.w	8002794 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002648:	2300      	movs	r3, #0
 800264a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800264c:	4b84      	ldr	r3, [pc, #528]	@ (8002860 <HAL_RCC_OscConfig+0x4b8>)
 800264e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002650:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002654:	2b00      	cmp	r3, #0
 8002656:	d101      	bne.n	800265c <HAL_RCC_OscConfig+0x2b4>
 8002658:	2301      	movs	r3, #1
 800265a:	e000      	b.n	800265e <HAL_RCC_OscConfig+0x2b6>
 800265c:	2300      	movs	r3, #0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d00d      	beq.n	800267e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002662:	4b7f      	ldr	r3, [pc, #508]	@ (8002860 <HAL_RCC_OscConfig+0x4b8>)
 8002664:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002666:	4a7e      	ldr	r2, [pc, #504]	@ (8002860 <HAL_RCC_OscConfig+0x4b8>)
 8002668:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800266c:	6593      	str	r3, [r2, #88]	@ 0x58
 800266e:	4b7c      	ldr	r3, [pc, #496]	@ (8002860 <HAL_RCC_OscConfig+0x4b8>)
 8002670:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002672:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002676:	60fb      	str	r3, [r7, #12]
 8002678:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800267a:	2301      	movs	r3, #1
 800267c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800267e:	4b79      	ldr	r3, [pc, #484]	@ (8002864 <HAL_RCC_OscConfig+0x4bc>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002686:	2b00      	cmp	r3, #0
 8002688:	d118      	bne.n	80026bc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800268a:	4b76      	ldr	r3, [pc, #472]	@ (8002864 <HAL_RCC_OscConfig+0x4bc>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a75      	ldr	r2, [pc, #468]	@ (8002864 <HAL_RCC_OscConfig+0x4bc>)
 8002690:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002694:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002696:	f7ff fb0f 	bl	8001cb8 <HAL_GetTick>
 800269a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800269c:	e008      	b.n	80026b0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800269e:	f7ff fb0b 	bl	8001cb8 <HAL_GetTick>
 80026a2:	4602      	mov	r2, r0
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	2b02      	cmp	r3, #2
 80026aa:	d901      	bls.n	80026b0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80026ac:	2303      	movs	r3, #3
 80026ae:	e183      	b.n	80029b8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026b0:	4b6c      	ldr	r3, [pc, #432]	@ (8002864 <HAL_RCC_OscConfig+0x4bc>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d0f0      	beq.n	800269e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d108      	bne.n	80026d6 <HAL_RCC_OscConfig+0x32e>
 80026c4:	4b66      	ldr	r3, [pc, #408]	@ (8002860 <HAL_RCC_OscConfig+0x4b8>)
 80026c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026ca:	4a65      	ldr	r2, [pc, #404]	@ (8002860 <HAL_RCC_OscConfig+0x4b8>)
 80026cc:	f043 0301 	orr.w	r3, r3, #1
 80026d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80026d4:	e024      	b.n	8002720 <HAL_RCC_OscConfig+0x378>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	2b05      	cmp	r3, #5
 80026dc:	d110      	bne.n	8002700 <HAL_RCC_OscConfig+0x358>
 80026de:	4b60      	ldr	r3, [pc, #384]	@ (8002860 <HAL_RCC_OscConfig+0x4b8>)
 80026e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026e4:	4a5e      	ldr	r2, [pc, #376]	@ (8002860 <HAL_RCC_OscConfig+0x4b8>)
 80026e6:	f043 0304 	orr.w	r3, r3, #4
 80026ea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80026ee:	4b5c      	ldr	r3, [pc, #368]	@ (8002860 <HAL_RCC_OscConfig+0x4b8>)
 80026f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026f4:	4a5a      	ldr	r2, [pc, #360]	@ (8002860 <HAL_RCC_OscConfig+0x4b8>)
 80026f6:	f043 0301 	orr.w	r3, r3, #1
 80026fa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80026fe:	e00f      	b.n	8002720 <HAL_RCC_OscConfig+0x378>
 8002700:	4b57      	ldr	r3, [pc, #348]	@ (8002860 <HAL_RCC_OscConfig+0x4b8>)
 8002702:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002706:	4a56      	ldr	r2, [pc, #344]	@ (8002860 <HAL_RCC_OscConfig+0x4b8>)
 8002708:	f023 0301 	bic.w	r3, r3, #1
 800270c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002710:	4b53      	ldr	r3, [pc, #332]	@ (8002860 <HAL_RCC_OscConfig+0x4b8>)
 8002712:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002716:	4a52      	ldr	r2, [pc, #328]	@ (8002860 <HAL_RCC_OscConfig+0x4b8>)
 8002718:	f023 0304 	bic.w	r3, r3, #4
 800271c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d016      	beq.n	8002756 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002728:	f7ff fac6 	bl	8001cb8 <HAL_GetTick>
 800272c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800272e:	e00a      	b.n	8002746 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002730:	f7ff fac2 	bl	8001cb8 <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800273e:	4293      	cmp	r3, r2
 8002740:	d901      	bls.n	8002746 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e138      	b.n	80029b8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002746:	4b46      	ldr	r3, [pc, #280]	@ (8002860 <HAL_RCC_OscConfig+0x4b8>)
 8002748:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800274c:	f003 0302 	and.w	r3, r3, #2
 8002750:	2b00      	cmp	r3, #0
 8002752:	d0ed      	beq.n	8002730 <HAL_RCC_OscConfig+0x388>
 8002754:	e015      	b.n	8002782 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002756:	f7ff faaf 	bl	8001cb8 <HAL_GetTick>
 800275a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800275c:	e00a      	b.n	8002774 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800275e:	f7ff faab 	bl	8001cb8 <HAL_GetTick>
 8002762:	4602      	mov	r2, r0
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	1ad3      	subs	r3, r2, r3
 8002768:	f241 3288 	movw	r2, #5000	@ 0x1388
 800276c:	4293      	cmp	r3, r2
 800276e:	d901      	bls.n	8002774 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002770:	2303      	movs	r3, #3
 8002772:	e121      	b.n	80029b8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002774:	4b3a      	ldr	r3, [pc, #232]	@ (8002860 <HAL_RCC_OscConfig+0x4b8>)
 8002776:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800277a:	f003 0302 	and.w	r3, r3, #2
 800277e:	2b00      	cmp	r3, #0
 8002780:	d1ed      	bne.n	800275e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002782:	7ffb      	ldrb	r3, [r7, #31]
 8002784:	2b01      	cmp	r3, #1
 8002786:	d105      	bne.n	8002794 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002788:	4b35      	ldr	r3, [pc, #212]	@ (8002860 <HAL_RCC_OscConfig+0x4b8>)
 800278a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800278c:	4a34      	ldr	r2, [pc, #208]	@ (8002860 <HAL_RCC_OscConfig+0x4b8>)
 800278e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002792:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0320 	and.w	r3, r3, #32
 800279c:	2b00      	cmp	r3, #0
 800279e:	d03c      	beq.n	800281a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	699b      	ldr	r3, [r3, #24]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d01c      	beq.n	80027e2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80027a8:	4b2d      	ldr	r3, [pc, #180]	@ (8002860 <HAL_RCC_OscConfig+0x4b8>)
 80027aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80027ae:	4a2c      	ldr	r2, [pc, #176]	@ (8002860 <HAL_RCC_OscConfig+0x4b8>)
 80027b0:	f043 0301 	orr.w	r3, r3, #1
 80027b4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027b8:	f7ff fa7e 	bl	8001cb8 <HAL_GetTick>
 80027bc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80027be:	e008      	b.n	80027d2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80027c0:	f7ff fa7a 	bl	8001cb8 <HAL_GetTick>
 80027c4:	4602      	mov	r2, r0
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d901      	bls.n	80027d2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80027ce:	2303      	movs	r3, #3
 80027d0:	e0f2      	b.n	80029b8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80027d2:	4b23      	ldr	r3, [pc, #140]	@ (8002860 <HAL_RCC_OscConfig+0x4b8>)
 80027d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80027d8:	f003 0302 	and.w	r3, r3, #2
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d0ef      	beq.n	80027c0 <HAL_RCC_OscConfig+0x418>
 80027e0:	e01b      	b.n	800281a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80027e2:	4b1f      	ldr	r3, [pc, #124]	@ (8002860 <HAL_RCC_OscConfig+0x4b8>)
 80027e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80027e8:	4a1d      	ldr	r2, [pc, #116]	@ (8002860 <HAL_RCC_OscConfig+0x4b8>)
 80027ea:	f023 0301 	bic.w	r3, r3, #1
 80027ee:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027f2:	f7ff fa61 	bl	8001cb8 <HAL_GetTick>
 80027f6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80027f8:	e008      	b.n	800280c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80027fa:	f7ff fa5d 	bl	8001cb8 <HAL_GetTick>
 80027fe:	4602      	mov	r2, r0
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	2b02      	cmp	r3, #2
 8002806:	d901      	bls.n	800280c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002808:	2303      	movs	r3, #3
 800280a:	e0d5      	b.n	80029b8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800280c:	4b14      	ldr	r3, [pc, #80]	@ (8002860 <HAL_RCC_OscConfig+0x4b8>)
 800280e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002812:	f003 0302 	and.w	r3, r3, #2
 8002816:	2b00      	cmp	r3, #0
 8002818:	d1ef      	bne.n	80027fa <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	69db      	ldr	r3, [r3, #28]
 800281e:	2b00      	cmp	r3, #0
 8002820:	f000 80c9 	beq.w	80029b6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002824:	4b0e      	ldr	r3, [pc, #56]	@ (8002860 <HAL_RCC_OscConfig+0x4b8>)
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	f003 030c 	and.w	r3, r3, #12
 800282c:	2b0c      	cmp	r3, #12
 800282e:	f000 8083 	beq.w	8002938 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	69db      	ldr	r3, [r3, #28]
 8002836:	2b02      	cmp	r3, #2
 8002838:	d15e      	bne.n	80028f8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800283a:	4b09      	ldr	r3, [pc, #36]	@ (8002860 <HAL_RCC_OscConfig+0x4b8>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a08      	ldr	r2, [pc, #32]	@ (8002860 <HAL_RCC_OscConfig+0x4b8>)
 8002840:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002844:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002846:	f7ff fa37 	bl	8001cb8 <HAL_GetTick>
 800284a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800284c:	e00c      	b.n	8002868 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800284e:	f7ff fa33 	bl	8001cb8 <HAL_GetTick>
 8002852:	4602      	mov	r2, r0
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	1ad3      	subs	r3, r2, r3
 8002858:	2b02      	cmp	r3, #2
 800285a:	d905      	bls.n	8002868 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800285c:	2303      	movs	r3, #3
 800285e:	e0ab      	b.n	80029b8 <HAL_RCC_OscConfig+0x610>
 8002860:	40021000 	.word	0x40021000
 8002864:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002868:	4b55      	ldr	r3, [pc, #340]	@ (80029c0 <HAL_RCC_OscConfig+0x618>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002870:	2b00      	cmp	r3, #0
 8002872:	d1ec      	bne.n	800284e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002874:	4b52      	ldr	r3, [pc, #328]	@ (80029c0 <HAL_RCC_OscConfig+0x618>)
 8002876:	68da      	ldr	r2, [r3, #12]
 8002878:	4b52      	ldr	r3, [pc, #328]	@ (80029c4 <HAL_RCC_OscConfig+0x61c>)
 800287a:	4013      	ands	r3, r2
 800287c:	687a      	ldr	r2, [r7, #4]
 800287e:	6a11      	ldr	r1, [r2, #32]
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002884:	3a01      	subs	r2, #1
 8002886:	0112      	lsls	r2, r2, #4
 8002888:	4311      	orrs	r1, r2
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800288e:	0212      	lsls	r2, r2, #8
 8002890:	4311      	orrs	r1, r2
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002896:	0852      	lsrs	r2, r2, #1
 8002898:	3a01      	subs	r2, #1
 800289a:	0552      	lsls	r2, r2, #21
 800289c:	4311      	orrs	r1, r2
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80028a2:	0852      	lsrs	r2, r2, #1
 80028a4:	3a01      	subs	r2, #1
 80028a6:	0652      	lsls	r2, r2, #25
 80028a8:	4311      	orrs	r1, r2
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80028ae:	06d2      	lsls	r2, r2, #27
 80028b0:	430a      	orrs	r2, r1
 80028b2:	4943      	ldr	r1, [pc, #268]	@ (80029c0 <HAL_RCC_OscConfig+0x618>)
 80028b4:	4313      	orrs	r3, r2
 80028b6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028b8:	4b41      	ldr	r3, [pc, #260]	@ (80029c0 <HAL_RCC_OscConfig+0x618>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a40      	ldr	r2, [pc, #256]	@ (80029c0 <HAL_RCC_OscConfig+0x618>)
 80028be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80028c2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80028c4:	4b3e      	ldr	r3, [pc, #248]	@ (80029c0 <HAL_RCC_OscConfig+0x618>)
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	4a3d      	ldr	r2, [pc, #244]	@ (80029c0 <HAL_RCC_OscConfig+0x618>)
 80028ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80028ce:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d0:	f7ff f9f2 	bl	8001cb8 <HAL_GetTick>
 80028d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028d6:	e008      	b.n	80028ea <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028d8:	f7ff f9ee 	bl	8001cb8 <HAL_GetTick>
 80028dc:	4602      	mov	r2, r0
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	2b02      	cmp	r3, #2
 80028e4:	d901      	bls.n	80028ea <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80028e6:	2303      	movs	r3, #3
 80028e8:	e066      	b.n	80029b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028ea:	4b35      	ldr	r3, [pc, #212]	@ (80029c0 <HAL_RCC_OscConfig+0x618>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d0f0      	beq.n	80028d8 <HAL_RCC_OscConfig+0x530>
 80028f6:	e05e      	b.n	80029b6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028f8:	4b31      	ldr	r3, [pc, #196]	@ (80029c0 <HAL_RCC_OscConfig+0x618>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a30      	ldr	r2, [pc, #192]	@ (80029c0 <HAL_RCC_OscConfig+0x618>)
 80028fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002902:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002904:	f7ff f9d8 	bl	8001cb8 <HAL_GetTick>
 8002908:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800290a:	e008      	b.n	800291e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800290c:	f7ff f9d4 	bl	8001cb8 <HAL_GetTick>
 8002910:	4602      	mov	r2, r0
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	2b02      	cmp	r3, #2
 8002918:	d901      	bls.n	800291e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	e04c      	b.n	80029b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800291e:	4b28      	ldr	r3, [pc, #160]	@ (80029c0 <HAL_RCC_OscConfig+0x618>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d1f0      	bne.n	800290c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800292a:	4b25      	ldr	r3, [pc, #148]	@ (80029c0 <HAL_RCC_OscConfig+0x618>)
 800292c:	68da      	ldr	r2, [r3, #12]
 800292e:	4924      	ldr	r1, [pc, #144]	@ (80029c0 <HAL_RCC_OscConfig+0x618>)
 8002930:	4b25      	ldr	r3, [pc, #148]	@ (80029c8 <HAL_RCC_OscConfig+0x620>)
 8002932:	4013      	ands	r3, r2
 8002934:	60cb      	str	r3, [r1, #12]
 8002936:	e03e      	b.n	80029b6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	69db      	ldr	r3, [r3, #28]
 800293c:	2b01      	cmp	r3, #1
 800293e:	d101      	bne.n	8002944 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e039      	b.n	80029b8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002944:	4b1e      	ldr	r3, [pc, #120]	@ (80029c0 <HAL_RCC_OscConfig+0x618>)
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	f003 0203 	and.w	r2, r3, #3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6a1b      	ldr	r3, [r3, #32]
 8002954:	429a      	cmp	r2, r3
 8002956:	d12c      	bne.n	80029b2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002962:	3b01      	subs	r3, #1
 8002964:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002966:	429a      	cmp	r2, r3
 8002968:	d123      	bne.n	80029b2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002974:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002976:	429a      	cmp	r2, r3
 8002978:	d11b      	bne.n	80029b2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002984:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002986:	429a      	cmp	r2, r3
 8002988:	d113      	bne.n	80029b2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002994:	085b      	lsrs	r3, r3, #1
 8002996:	3b01      	subs	r3, #1
 8002998:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800299a:	429a      	cmp	r2, r3
 800299c:	d109      	bne.n	80029b2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029a8:	085b      	lsrs	r3, r3, #1
 80029aa:	3b01      	subs	r3, #1
 80029ac:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d001      	beq.n	80029b6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e000      	b.n	80029b8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80029b6:	2300      	movs	r3, #0
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3720      	adds	r7, #32
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	40021000 	.word	0x40021000
 80029c4:	019f800c 	.word	0x019f800c
 80029c8:	feeefffc 	.word	0xfeeefffc

080029cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b086      	sub	sp, #24
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80029d6:	2300      	movs	r3, #0
 80029d8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d101      	bne.n	80029e4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e11e      	b.n	8002c22 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029e4:	4b91      	ldr	r3, [pc, #580]	@ (8002c2c <HAL_RCC_ClockConfig+0x260>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 030f 	and.w	r3, r3, #15
 80029ec:	683a      	ldr	r2, [r7, #0]
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d910      	bls.n	8002a14 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029f2:	4b8e      	ldr	r3, [pc, #568]	@ (8002c2c <HAL_RCC_ClockConfig+0x260>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f023 020f 	bic.w	r2, r3, #15
 80029fa:	498c      	ldr	r1, [pc, #560]	@ (8002c2c <HAL_RCC_ClockConfig+0x260>)
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	4313      	orrs	r3, r2
 8002a00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a02:	4b8a      	ldr	r3, [pc, #552]	@ (8002c2c <HAL_RCC_ClockConfig+0x260>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 030f 	and.w	r3, r3, #15
 8002a0a:	683a      	ldr	r2, [r7, #0]
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d001      	beq.n	8002a14 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e106      	b.n	8002c22 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0301 	and.w	r3, r3, #1
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d073      	beq.n	8002b08 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	2b03      	cmp	r3, #3
 8002a26:	d129      	bne.n	8002a7c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a28:	4b81      	ldr	r3, [pc, #516]	@ (8002c30 <HAL_RCC_ClockConfig+0x264>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d101      	bne.n	8002a38 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e0f4      	b.n	8002c22 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002a38:	f000 f966 	bl	8002d08 <RCC_GetSysClockFreqFromPLLSource>
 8002a3c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	4a7c      	ldr	r2, [pc, #496]	@ (8002c34 <HAL_RCC_ClockConfig+0x268>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d93f      	bls.n	8002ac6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002a46:	4b7a      	ldr	r3, [pc, #488]	@ (8002c30 <HAL_RCC_ClockConfig+0x264>)
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d009      	beq.n	8002a66 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d033      	beq.n	8002ac6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d12f      	bne.n	8002ac6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002a66:	4b72      	ldr	r3, [pc, #456]	@ (8002c30 <HAL_RCC_ClockConfig+0x264>)
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002a6e:	4a70      	ldr	r2, [pc, #448]	@ (8002c30 <HAL_RCC_ClockConfig+0x264>)
 8002a70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a74:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002a76:	2380      	movs	r3, #128	@ 0x80
 8002a78:	617b      	str	r3, [r7, #20]
 8002a7a:	e024      	b.n	8002ac6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	d107      	bne.n	8002a94 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a84:	4b6a      	ldr	r3, [pc, #424]	@ (8002c30 <HAL_RCC_ClockConfig+0x264>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d109      	bne.n	8002aa4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e0c6      	b.n	8002c22 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a94:	4b66      	ldr	r3, [pc, #408]	@ (8002c30 <HAL_RCC_ClockConfig+0x264>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d101      	bne.n	8002aa4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e0be      	b.n	8002c22 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002aa4:	f000 f8ce 	bl	8002c44 <HAL_RCC_GetSysClockFreq>
 8002aa8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	4a61      	ldr	r2, [pc, #388]	@ (8002c34 <HAL_RCC_ClockConfig+0x268>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d909      	bls.n	8002ac6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002ab2:	4b5f      	ldr	r3, [pc, #380]	@ (8002c30 <HAL_RCC_ClockConfig+0x264>)
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002aba:	4a5d      	ldr	r2, [pc, #372]	@ (8002c30 <HAL_RCC_ClockConfig+0x264>)
 8002abc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ac0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002ac2:	2380      	movs	r3, #128	@ 0x80
 8002ac4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002ac6:	4b5a      	ldr	r3, [pc, #360]	@ (8002c30 <HAL_RCC_ClockConfig+0x264>)
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	f023 0203 	bic.w	r2, r3, #3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	4957      	ldr	r1, [pc, #348]	@ (8002c30 <HAL_RCC_ClockConfig+0x264>)
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ad8:	f7ff f8ee 	bl	8001cb8 <HAL_GetTick>
 8002adc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ade:	e00a      	b.n	8002af6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ae0:	f7ff f8ea 	bl	8001cb8 <HAL_GetTick>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d901      	bls.n	8002af6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002af2:	2303      	movs	r3, #3
 8002af4:	e095      	b.n	8002c22 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002af6:	4b4e      	ldr	r3, [pc, #312]	@ (8002c30 <HAL_RCC_ClockConfig+0x264>)
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	f003 020c 	and.w	r2, r3, #12
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d1eb      	bne.n	8002ae0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0302 	and.w	r3, r3, #2
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d023      	beq.n	8002b5c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0304 	and.w	r3, r3, #4
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d005      	beq.n	8002b2c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b20:	4b43      	ldr	r3, [pc, #268]	@ (8002c30 <HAL_RCC_ClockConfig+0x264>)
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	4a42      	ldr	r2, [pc, #264]	@ (8002c30 <HAL_RCC_ClockConfig+0x264>)
 8002b26:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002b2a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0308 	and.w	r3, r3, #8
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d007      	beq.n	8002b48 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002b38:	4b3d      	ldr	r3, [pc, #244]	@ (8002c30 <HAL_RCC_ClockConfig+0x264>)
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002b40:	4a3b      	ldr	r2, [pc, #236]	@ (8002c30 <HAL_RCC_ClockConfig+0x264>)
 8002b42:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002b46:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b48:	4b39      	ldr	r3, [pc, #228]	@ (8002c30 <HAL_RCC_ClockConfig+0x264>)
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	4936      	ldr	r1, [pc, #216]	@ (8002c30 <HAL_RCC_ClockConfig+0x264>)
 8002b56:	4313      	orrs	r3, r2
 8002b58:	608b      	str	r3, [r1, #8]
 8002b5a:	e008      	b.n	8002b6e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	2b80      	cmp	r3, #128	@ 0x80
 8002b60:	d105      	bne.n	8002b6e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002b62:	4b33      	ldr	r3, [pc, #204]	@ (8002c30 <HAL_RCC_ClockConfig+0x264>)
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	4a32      	ldr	r2, [pc, #200]	@ (8002c30 <HAL_RCC_ClockConfig+0x264>)
 8002b68:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002b6c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b6e:	4b2f      	ldr	r3, [pc, #188]	@ (8002c2c <HAL_RCC_ClockConfig+0x260>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 030f 	and.w	r3, r3, #15
 8002b76:	683a      	ldr	r2, [r7, #0]
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d21d      	bcs.n	8002bb8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b7c:	4b2b      	ldr	r3, [pc, #172]	@ (8002c2c <HAL_RCC_ClockConfig+0x260>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f023 020f 	bic.w	r2, r3, #15
 8002b84:	4929      	ldr	r1, [pc, #164]	@ (8002c2c <HAL_RCC_ClockConfig+0x260>)
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002b8c:	f7ff f894 	bl	8001cb8 <HAL_GetTick>
 8002b90:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b92:	e00a      	b.n	8002baa <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b94:	f7ff f890 	bl	8001cb8 <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d901      	bls.n	8002baa <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	e03b      	b.n	8002c22 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002baa:	4b20      	ldr	r3, [pc, #128]	@ (8002c2c <HAL_RCC_ClockConfig+0x260>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 030f 	and.w	r3, r3, #15
 8002bb2:	683a      	ldr	r2, [r7, #0]
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d1ed      	bne.n	8002b94 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 0304 	and.w	r3, r3, #4
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d008      	beq.n	8002bd6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bc4:	4b1a      	ldr	r3, [pc, #104]	@ (8002c30 <HAL_RCC_ClockConfig+0x264>)
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	4917      	ldr	r1, [pc, #92]	@ (8002c30 <HAL_RCC_ClockConfig+0x264>)
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0308 	and.w	r3, r3, #8
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d009      	beq.n	8002bf6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002be2:	4b13      	ldr	r3, [pc, #76]	@ (8002c30 <HAL_RCC_ClockConfig+0x264>)
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	691b      	ldr	r3, [r3, #16]
 8002bee:	00db      	lsls	r3, r3, #3
 8002bf0:	490f      	ldr	r1, [pc, #60]	@ (8002c30 <HAL_RCC_ClockConfig+0x264>)
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002bf6:	f000 f825 	bl	8002c44 <HAL_RCC_GetSysClockFreq>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	4b0c      	ldr	r3, [pc, #48]	@ (8002c30 <HAL_RCC_ClockConfig+0x264>)
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	091b      	lsrs	r3, r3, #4
 8002c02:	f003 030f 	and.w	r3, r3, #15
 8002c06:	490c      	ldr	r1, [pc, #48]	@ (8002c38 <HAL_RCC_ClockConfig+0x26c>)
 8002c08:	5ccb      	ldrb	r3, [r1, r3]
 8002c0a:	f003 031f 	and.w	r3, r3, #31
 8002c0e:	fa22 f303 	lsr.w	r3, r2, r3
 8002c12:	4a0a      	ldr	r2, [pc, #40]	@ (8002c3c <HAL_RCC_ClockConfig+0x270>)
 8002c14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002c16:	4b0a      	ldr	r3, [pc, #40]	@ (8002c40 <HAL_RCC_ClockConfig+0x274>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f7ff f800 	bl	8001c20 <HAL_InitTick>
 8002c20:	4603      	mov	r3, r0
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3718      	adds	r7, #24
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	40022000 	.word	0x40022000
 8002c30:	40021000 	.word	0x40021000
 8002c34:	04c4b400 	.word	0x04c4b400
 8002c38:	0800443c 	.word	0x0800443c
 8002c3c:	20000038 	.word	0x20000038
 8002c40:	20000068 	.word	0x20000068

08002c44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b087      	sub	sp, #28
 8002c48:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002c4a:	4b2c      	ldr	r3, [pc, #176]	@ (8002cfc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	f003 030c 	and.w	r3, r3, #12
 8002c52:	2b04      	cmp	r3, #4
 8002c54:	d102      	bne.n	8002c5c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002c56:	4b2a      	ldr	r3, [pc, #168]	@ (8002d00 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002c58:	613b      	str	r3, [r7, #16]
 8002c5a:	e047      	b.n	8002cec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002c5c:	4b27      	ldr	r3, [pc, #156]	@ (8002cfc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	f003 030c 	and.w	r3, r3, #12
 8002c64:	2b08      	cmp	r3, #8
 8002c66:	d102      	bne.n	8002c6e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002c68:	4b26      	ldr	r3, [pc, #152]	@ (8002d04 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002c6a:	613b      	str	r3, [r7, #16]
 8002c6c:	e03e      	b.n	8002cec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002c6e:	4b23      	ldr	r3, [pc, #140]	@ (8002cfc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	f003 030c 	and.w	r3, r3, #12
 8002c76:	2b0c      	cmp	r3, #12
 8002c78:	d136      	bne.n	8002ce8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002c7a:	4b20      	ldr	r3, [pc, #128]	@ (8002cfc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c7c:	68db      	ldr	r3, [r3, #12]
 8002c7e:	f003 0303 	and.w	r3, r3, #3
 8002c82:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c84:	4b1d      	ldr	r3, [pc, #116]	@ (8002cfc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	091b      	lsrs	r3, r3, #4
 8002c8a:	f003 030f 	and.w	r3, r3, #15
 8002c8e:	3301      	adds	r3, #1
 8002c90:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2b03      	cmp	r3, #3
 8002c96:	d10c      	bne.n	8002cb2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002c98:	4a1a      	ldr	r2, [pc, #104]	@ (8002d04 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ca0:	4a16      	ldr	r2, [pc, #88]	@ (8002cfc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ca2:	68d2      	ldr	r2, [r2, #12]
 8002ca4:	0a12      	lsrs	r2, r2, #8
 8002ca6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002caa:	fb02 f303 	mul.w	r3, r2, r3
 8002cae:	617b      	str	r3, [r7, #20]
      break;
 8002cb0:	e00c      	b.n	8002ccc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002cb2:	4a13      	ldr	r2, [pc, #76]	@ (8002d00 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cba:	4a10      	ldr	r2, [pc, #64]	@ (8002cfc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002cbc:	68d2      	ldr	r2, [r2, #12]
 8002cbe:	0a12      	lsrs	r2, r2, #8
 8002cc0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002cc4:	fb02 f303 	mul.w	r3, r2, r3
 8002cc8:	617b      	str	r3, [r7, #20]
      break;
 8002cca:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002ccc:	4b0b      	ldr	r3, [pc, #44]	@ (8002cfc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	0e5b      	lsrs	r3, r3, #25
 8002cd2:	f003 0303 	and.w	r3, r3, #3
 8002cd6:	3301      	adds	r3, #1
 8002cd8:	005b      	lsls	r3, r3, #1
 8002cda:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002cdc:	697a      	ldr	r2, [r7, #20]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ce4:	613b      	str	r3, [r7, #16]
 8002ce6:	e001      	b.n	8002cec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002cec:	693b      	ldr	r3, [r7, #16]
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	371c      	adds	r7, #28
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr
 8002cfa:	bf00      	nop
 8002cfc:	40021000 	.word	0x40021000
 8002d00:	00f42400 	.word	0x00f42400
 8002d04:	007a1200 	.word	0x007a1200

08002d08 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b087      	sub	sp, #28
 8002d0c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002d0e:	4b1e      	ldr	r3, [pc, #120]	@ (8002d88 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002d10:	68db      	ldr	r3, [r3, #12]
 8002d12:	f003 0303 	and.w	r3, r3, #3
 8002d16:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002d18:	4b1b      	ldr	r3, [pc, #108]	@ (8002d88 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	091b      	lsrs	r3, r3, #4
 8002d1e:	f003 030f 	and.w	r3, r3, #15
 8002d22:	3301      	adds	r3, #1
 8002d24:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	2b03      	cmp	r3, #3
 8002d2a:	d10c      	bne.n	8002d46 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002d2c:	4a17      	ldr	r2, [pc, #92]	@ (8002d8c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d34:	4a14      	ldr	r2, [pc, #80]	@ (8002d88 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002d36:	68d2      	ldr	r2, [r2, #12]
 8002d38:	0a12      	lsrs	r2, r2, #8
 8002d3a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002d3e:	fb02 f303 	mul.w	r3, r2, r3
 8002d42:	617b      	str	r3, [r7, #20]
    break;
 8002d44:	e00c      	b.n	8002d60 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002d46:	4a12      	ldr	r2, [pc, #72]	@ (8002d90 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d4e:	4a0e      	ldr	r2, [pc, #56]	@ (8002d88 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002d50:	68d2      	ldr	r2, [r2, #12]
 8002d52:	0a12      	lsrs	r2, r2, #8
 8002d54:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002d58:	fb02 f303 	mul.w	r3, r2, r3
 8002d5c:	617b      	str	r3, [r7, #20]
    break;
 8002d5e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002d60:	4b09      	ldr	r3, [pc, #36]	@ (8002d88 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	0e5b      	lsrs	r3, r3, #25
 8002d66:	f003 0303 	and.w	r3, r3, #3
 8002d6a:	3301      	adds	r3, #1
 8002d6c:	005b      	lsls	r3, r3, #1
 8002d6e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002d70:	697a      	ldr	r2, [r7, #20]
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d78:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002d7a:	687b      	ldr	r3, [r7, #4]
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	371c      	adds	r7, #28
 8002d80:	46bd      	mov	sp, r7
 8002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d86:	4770      	bx	lr
 8002d88:	40021000 	.word	0x40021000
 8002d8c:	007a1200 	.word	0x007a1200
 8002d90:	00f42400 	.word	0x00f42400

08002d94 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b084      	sub	sp, #16
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d101      	bne.n	8002da6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e09d      	b.n	8002ee2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d108      	bne.n	8002dc0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002db6:	d009      	beq.n	8002dcc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	61da      	str	r2, [r3, #28]
 8002dbe:	e005      	b.n	8002dcc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d106      	bne.n	8002dec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2200      	movs	r2, #0
 8002de2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f7fd fffc 	bl	8000de4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2202      	movs	r2, #2
 8002df0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002e02:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002e0c:	d902      	bls.n	8002e14 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	60fb      	str	r3, [r7, #12]
 8002e12:	e002      	b.n	8002e1a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002e14:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002e18:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	68db      	ldr	r3, [r3, #12]
 8002e1e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002e22:	d007      	beq.n	8002e34 <HAL_SPI_Init+0xa0>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002e2c:	d002      	beq.n	8002e34 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2200      	movs	r2, #0
 8002e32:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002e44:	431a      	orrs	r2, r3
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	691b      	ldr	r3, [r3, #16]
 8002e4a:	f003 0302 	and.w	r3, r3, #2
 8002e4e:	431a      	orrs	r2, r3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	695b      	ldr	r3, [r3, #20]
 8002e54:	f003 0301 	and.w	r3, r3, #1
 8002e58:	431a      	orrs	r2, r3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	699b      	ldr	r3, [r3, #24]
 8002e5e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e62:	431a      	orrs	r2, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	69db      	ldr	r3, [r3, #28]
 8002e68:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002e6c:	431a      	orrs	r2, r3
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6a1b      	ldr	r3, [r3, #32]
 8002e72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e76:	ea42 0103 	orr.w	r1, r2, r3
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e7e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	430a      	orrs	r2, r1
 8002e88:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	699b      	ldr	r3, [r3, #24]
 8002e8e:	0c1b      	lsrs	r3, r3, #16
 8002e90:	f003 0204 	and.w	r2, r3, #4
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e98:	f003 0310 	and.w	r3, r3, #16
 8002e9c:	431a      	orrs	r2, r3
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ea2:	f003 0308 	and.w	r3, r3, #8
 8002ea6:	431a      	orrs	r2, r3
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002eb0:	ea42 0103 	orr.w	r1, r2, r3
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	430a      	orrs	r2, r1
 8002ec0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	69da      	ldr	r2, [r3, #28]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ed0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002ee0:	2300      	movs	r3, #0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3710      	adds	r7, #16
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}

08002eea <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002eea:	b580      	push	{r7, lr}
 8002eec:	b088      	sub	sp, #32
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	60f8      	str	r0, [r7, #12]
 8002ef2:	60b9      	str	r1, [r7, #8]
 8002ef4:	603b      	str	r3, [r7, #0]
 8002ef6:	4613      	mov	r3, r2
 8002ef8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002efa:	2300      	movs	r3, #0
 8002efc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d101      	bne.n	8002f0c <HAL_SPI_Transmit+0x22>
 8002f08:	2302      	movs	r3, #2
 8002f0a:	e15f      	b.n	80031cc <HAL_SPI_Transmit+0x2e2>
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002f14:	f7fe fed0 	bl	8001cb8 <HAL_GetTick>
 8002f18:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002f1a:	88fb      	ldrh	r3, [r7, #6]
 8002f1c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d002      	beq.n	8002f30 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002f2a:	2302      	movs	r3, #2
 8002f2c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002f2e:	e148      	b.n	80031c2 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d002      	beq.n	8002f3c <HAL_SPI_Transmit+0x52>
 8002f36:	88fb      	ldrh	r3, [r7, #6]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d102      	bne.n	8002f42 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002f40:	e13f      	b.n	80031c2 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2203      	movs	r2, #3
 8002f46:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	68ba      	ldr	r2, [r7, #8]
 8002f54:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	88fa      	ldrh	r2, [r7, #6]
 8002f5a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	88fa      	ldrh	r2, [r7, #6]
 8002f60:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2200      	movs	r2, #0
 8002f66:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2200      	movs	r2, #0
 8002f74:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2200      	movs	r2, #0
 8002f82:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f8c:	d10f      	bne.n	8002fae <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002f9c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002fac:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fb8:	2b40      	cmp	r3, #64	@ 0x40
 8002fba:	d007      	beq.n	8002fcc <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002fca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002fd4:	d94f      	bls.n	8003076 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d002      	beq.n	8002fe4 <HAL_SPI_Transmit+0xfa>
 8002fde:	8afb      	ldrh	r3, [r7, #22]
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d142      	bne.n	800306a <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fe8:	881a      	ldrh	r2, [r3, #0]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ff4:	1c9a      	adds	r2, r3, #2
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	3b01      	subs	r3, #1
 8003002:	b29a      	uxth	r2, r3
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003008:	e02f      	b.n	800306a <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	f003 0302 	and.w	r3, r3, #2
 8003014:	2b02      	cmp	r3, #2
 8003016:	d112      	bne.n	800303e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800301c:	881a      	ldrh	r2, [r3, #0]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003028:	1c9a      	adds	r2, r3, #2
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003032:	b29b      	uxth	r3, r3
 8003034:	3b01      	subs	r3, #1
 8003036:	b29a      	uxth	r2, r3
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800303c:	e015      	b.n	800306a <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800303e:	f7fe fe3b 	bl	8001cb8 <HAL_GetTick>
 8003042:	4602      	mov	r2, r0
 8003044:	69bb      	ldr	r3, [r7, #24]
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	683a      	ldr	r2, [r7, #0]
 800304a:	429a      	cmp	r2, r3
 800304c:	d803      	bhi.n	8003056 <HAL_SPI_Transmit+0x16c>
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003054:	d102      	bne.n	800305c <HAL_SPI_Transmit+0x172>
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d106      	bne.n	800306a <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 800305c:	2303      	movs	r3, #3
 800305e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2201      	movs	r2, #1
 8003064:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003068:	e0ab      	b.n	80031c2 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800306e:	b29b      	uxth	r3, r3
 8003070:	2b00      	cmp	r3, #0
 8003072:	d1ca      	bne.n	800300a <HAL_SPI_Transmit+0x120>
 8003074:	e080      	b.n	8003178 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d002      	beq.n	8003084 <HAL_SPI_Transmit+0x19a>
 800307e:	8afb      	ldrh	r3, [r7, #22]
 8003080:	2b01      	cmp	r3, #1
 8003082:	d174      	bne.n	800316e <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003088:	b29b      	uxth	r3, r3
 800308a:	2b01      	cmp	r3, #1
 800308c:	d912      	bls.n	80030b4 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003092:	881a      	ldrh	r2, [r3, #0]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800309e:	1c9a      	adds	r2, r3, #2
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	3b02      	subs	r3, #2
 80030ac:	b29a      	uxth	r2, r3
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80030b2:	e05c      	b.n	800316e <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	330c      	adds	r3, #12
 80030be:	7812      	ldrb	r2, [r2, #0]
 80030c0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030c6:	1c5a      	adds	r2, r3, #1
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	3b01      	subs	r3, #1
 80030d4:	b29a      	uxth	r2, r3
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80030da:	e048      	b.n	800316e <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	f003 0302 	and.w	r3, r3, #2
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	d12b      	bne.n	8003142 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d912      	bls.n	800311a <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030f8:	881a      	ldrh	r2, [r3, #0]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003104:	1c9a      	adds	r2, r3, #2
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800310e:	b29b      	uxth	r3, r3
 8003110:	3b02      	subs	r3, #2
 8003112:	b29a      	uxth	r2, r3
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003118:	e029      	b.n	800316e <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	330c      	adds	r3, #12
 8003124:	7812      	ldrb	r2, [r2, #0]
 8003126:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800312c:	1c5a      	adds	r2, r3, #1
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003136:	b29b      	uxth	r3, r3
 8003138:	3b01      	subs	r3, #1
 800313a:	b29a      	uxth	r2, r3
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003140:	e015      	b.n	800316e <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003142:	f7fe fdb9 	bl	8001cb8 <HAL_GetTick>
 8003146:	4602      	mov	r2, r0
 8003148:	69bb      	ldr	r3, [r7, #24]
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	683a      	ldr	r2, [r7, #0]
 800314e:	429a      	cmp	r2, r3
 8003150:	d803      	bhi.n	800315a <HAL_SPI_Transmit+0x270>
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003158:	d102      	bne.n	8003160 <HAL_SPI_Transmit+0x276>
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d106      	bne.n	800316e <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8003160:	2303      	movs	r3, #3
 8003162:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2201      	movs	r2, #1
 8003168:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800316c:	e029      	b.n	80031c2 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003172:	b29b      	uxth	r3, r3
 8003174:	2b00      	cmp	r3, #0
 8003176:	d1b1      	bne.n	80030dc <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003178:	69ba      	ldr	r2, [r7, #24]
 800317a:	6839      	ldr	r1, [r7, #0]
 800317c:	68f8      	ldr	r0, [r7, #12]
 800317e:	f000 fcf9 	bl	8003b74 <SPI_EndRxTxTransaction>
 8003182:	4603      	mov	r3, r0
 8003184:	2b00      	cmp	r3, #0
 8003186:	d002      	beq.n	800318e <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2220      	movs	r2, #32
 800318c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d10a      	bne.n	80031ac <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003196:	2300      	movs	r3, #0
 8003198:	613b      	str	r3, [r7, #16]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	613b      	str	r3, [r7, #16]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	613b      	str	r3, [r7, #16]
 80031aa:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d002      	beq.n	80031ba <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	77fb      	strb	r3, [r7, #31]
 80031b8:	e003      	b.n	80031c2 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2201      	movs	r2, #1
 80031be:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2200      	movs	r2, #0
 80031c6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80031ca:	7ffb      	ldrb	r3, [r7, #31]
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3720      	adds	r7, #32
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}

080031d4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b088      	sub	sp, #32
 80031d8:	af02      	add	r7, sp, #8
 80031da:	60f8      	str	r0, [r7, #12]
 80031dc:	60b9      	str	r1, [r7, #8]
 80031de:	603b      	str	r3, [r7, #0]
 80031e0:	4613      	mov	r3, r2
 80031e2:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80031e4:	2300      	movs	r3, #0
 80031e6:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d002      	beq.n	80031fa <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 80031f4:	2302      	movs	r3, #2
 80031f6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80031f8:	e11a      	b.n	8003430 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003202:	d112      	bne.n	800322a <HAL_SPI_Receive+0x56>
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d10e      	bne.n	800322a <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2204      	movs	r2, #4
 8003210:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003214:	88fa      	ldrh	r2, [r7, #6]
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	9300      	str	r3, [sp, #0]
 800321a:	4613      	mov	r3, r2
 800321c:	68ba      	ldr	r2, [r7, #8]
 800321e:	68b9      	ldr	r1, [r7, #8]
 8003220:	68f8      	ldr	r0, [r7, #12]
 8003222:	f000 f90e 	bl	8003442 <HAL_SPI_TransmitReceive>
 8003226:	4603      	mov	r3, r0
 8003228:	e107      	b.n	800343a <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003230:	2b01      	cmp	r3, #1
 8003232:	d101      	bne.n	8003238 <HAL_SPI_Receive+0x64>
 8003234:	2302      	movs	r3, #2
 8003236:	e100      	b.n	800343a <HAL_SPI_Receive+0x266>
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2201      	movs	r2, #1
 800323c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003240:	f7fe fd3a 	bl	8001cb8 <HAL_GetTick>
 8003244:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d002      	beq.n	8003252 <HAL_SPI_Receive+0x7e>
 800324c:	88fb      	ldrh	r3, [r7, #6]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d102      	bne.n	8003258 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003256:	e0eb      	b.n	8003430 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2204      	movs	r2, #4
 800325c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2200      	movs	r2, #0
 8003264:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	68ba      	ldr	r2, [r7, #8]
 800326a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	88fa      	ldrh	r2, [r7, #6]
 8003270:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	88fa      	ldrh	r2, [r7, #6]
 8003278:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2200      	movs	r2, #0
 8003280:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2200      	movs	r2, #0
 8003286:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2200      	movs	r2, #0
 800328c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2200      	movs	r2, #0
 8003292:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2200      	movs	r2, #0
 8003298:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	68db      	ldr	r3, [r3, #12]
 800329e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80032a2:	d908      	bls.n	80032b6 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	685a      	ldr	r2, [r3, #4]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80032b2:	605a      	str	r2, [r3, #4]
 80032b4:	e007      	b.n	80032c6 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	685a      	ldr	r2, [r3, #4]
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80032c4:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80032ce:	d10f      	bne.n	80032f0 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80032de:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80032ee:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032fa:	2b40      	cmp	r3, #64	@ 0x40
 80032fc:	d007      	beq.n	800330e <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800330c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003316:	d86f      	bhi.n	80033f8 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003318:	e034      	b.n	8003384 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	f003 0301 	and.w	r3, r3, #1
 8003324:	2b01      	cmp	r3, #1
 8003326:	d117      	bne.n	8003358 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f103 020c 	add.w	r2, r3, #12
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003334:	7812      	ldrb	r2, [r2, #0]
 8003336:	b2d2      	uxtb	r2, r2
 8003338:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800333e:	1c5a      	adds	r2, r3, #1
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800334a:	b29b      	uxth	r3, r3
 800334c:	3b01      	subs	r3, #1
 800334e:	b29a      	uxth	r2, r3
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8003356:	e015      	b.n	8003384 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003358:	f7fe fcae 	bl	8001cb8 <HAL_GetTick>
 800335c:	4602      	mov	r2, r0
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	683a      	ldr	r2, [r7, #0]
 8003364:	429a      	cmp	r2, r3
 8003366:	d803      	bhi.n	8003370 <HAL_SPI_Receive+0x19c>
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800336e:	d102      	bne.n	8003376 <HAL_SPI_Receive+0x1a2>
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d106      	bne.n	8003384 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2201      	movs	r2, #1
 800337e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003382:	e055      	b.n	8003430 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800338a:	b29b      	uxth	r3, r3
 800338c:	2b00      	cmp	r3, #0
 800338e:	d1c4      	bne.n	800331a <HAL_SPI_Receive+0x146>
 8003390:	e038      	b.n	8003404 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	f003 0301 	and.w	r3, r3, #1
 800339c:	2b01      	cmp	r3, #1
 800339e:	d115      	bne.n	80033cc <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	68da      	ldr	r2, [r3, #12]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033aa:	b292      	uxth	r2, r2
 80033ac:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033b2:	1c9a      	adds	r2, r3, #2
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80033be:	b29b      	uxth	r3, r3
 80033c0:	3b01      	subs	r3, #1
 80033c2:	b29a      	uxth	r2, r3
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80033ca:	e015      	b.n	80033f8 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80033cc:	f7fe fc74 	bl	8001cb8 <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	683a      	ldr	r2, [r7, #0]
 80033d8:	429a      	cmp	r2, r3
 80033da:	d803      	bhi.n	80033e4 <HAL_SPI_Receive+0x210>
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033e2:	d102      	bne.n	80033ea <HAL_SPI_Receive+0x216>
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d106      	bne.n	80033f8 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 80033ea:	2303      	movs	r3, #3
 80033ec:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2201      	movs	r2, #1
 80033f2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80033f6:	e01b      	b.n	8003430 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80033fe:	b29b      	uxth	r3, r3
 8003400:	2b00      	cmp	r3, #0
 8003402:	d1c6      	bne.n	8003392 <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003404:	693a      	ldr	r2, [r7, #16]
 8003406:	6839      	ldr	r1, [r7, #0]
 8003408:	68f8      	ldr	r0, [r7, #12]
 800340a:	f000 fb5b 	bl	8003ac4 <SPI_EndRxTransaction>
 800340e:	4603      	mov	r3, r0
 8003410:	2b00      	cmp	r3, #0
 8003412:	d002      	beq.n	800341a <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2220      	movs	r2, #32
 8003418:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800341e:	2b00      	cmp	r3, #0
 8003420:	d002      	beq.n	8003428 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	75fb      	strb	r3, [r7, #23]
 8003426:	e003      	b.n	8003430 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2201      	movs	r2, #1
 800342c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2200      	movs	r2, #0
 8003434:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8003438:	7dfb      	ldrb	r3, [r7, #23]
}
 800343a:	4618      	mov	r0, r3
 800343c:	3718      	adds	r7, #24
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}

08003442 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003442:	b580      	push	{r7, lr}
 8003444:	b08a      	sub	sp, #40	@ 0x28
 8003446:	af00      	add	r7, sp, #0
 8003448:	60f8      	str	r0, [r7, #12]
 800344a:	60b9      	str	r1, [r7, #8]
 800344c:	607a      	str	r2, [r7, #4]
 800344e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003450:	2301      	movs	r3, #1
 8003452:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003454:	2300      	movs	r3, #0
 8003456:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003460:	2b01      	cmp	r3, #1
 8003462:	d101      	bne.n	8003468 <HAL_SPI_TransmitReceive+0x26>
 8003464:	2302      	movs	r3, #2
 8003466:	e20a      	b.n	800387e <HAL_SPI_TransmitReceive+0x43c>
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2201      	movs	r2, #1
 800346c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003470:	f7fe fc22 	bl	8001cb8 <HAL_GetTick>
 8003474:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800347c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003484:	887b      	ldrh	r3, [r7, #2]
 8003486:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003488:	887b      	ldrh	r3, [r7, #2]
 800348a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800348c:	7efb      	ldrb	r3, [r7, #27]
 800348e:	2b01      	cmp	r3, #1
 8003490:	d00e      	beq.n	80034b0 <HAL_SPI_TransmitReceive+0x6e>
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003498:	d106      	bne.n	80034a8 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d102      	bne.n	80034a8 <HAL_SPI_TransmitReceive+0x66>
 80034a2:	7efb      	ldrb	r3, [r7, #27]
 80034a4:	2b04      	cmp	r3, #4
 80034a6:	d003      	beq.n	80034b0 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80034a8:	2302      	movs	r3, #2
 80034aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80034ae:	e1e0      	b.n	8003872 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d005      	beq.n	80034c2 <HAL_SPI_TransmitReceive+0x80>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d002      	beq.n	80034c2 <HAL_SPI_TransmitReceive+0x80>
 80034bc:	887b      	ldrh	r3, [r7, #2]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d103      	bne.n	80034ca <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80034c8:	e1d3      	b.n	8003872 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	2b04      	cmp	r3, #4
 80034d4:	d003      	beq.n	80034de <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2205      	movs	r2, #5
 80034da:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2200      	movs	r2, #0
 80034e2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	687a      	ldr	r2, [r7, #4]
 80034e8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	887a      	ldrh	r2, [r7, #2]
 80034ee:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	887a      	ldrh	r2, [r7, #2]
 80034f6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	68ba      	ldr	r2, [r7, #8]
 80034fe:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	887a      	ldrh	r2, [r7, #2]
 8003504:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	887a      	ldrh	r2, [r7, #2]
 800350a:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2200      	movs	r2, #0
 8003510:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2200      	movs	r2, #0
 8003516:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003520:	d802      	bhi.n	8003528 <HAL_SPI_TransmitReceive+0xe6>
 8003522:	8a3b      	ldrh	r3, [r7, #16]
 8003524:	2b01      	cmp	r3, #1
 8003526:	d908      	bls.n	800353a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	685a      	ldr	r2, [r3, #4]
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003536:	605a      	str	r2, [r3, #4]
 8003538:	e007      	b.n	800354a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	685a      	ldr	r2, [r3, #4]
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003548:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003554:	2b40      	cmp	r3, #64	@ 0x40
 8003556:	d007      	beq.n	8003568 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003566:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003570:	f240 8081 	bls.w	8003676 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d002      	beq.n	8003582 <HAL_SPI_TransmitReceive+0x140>
 800357c:	8a7b      	ldrh	r3, [r7, #18]
 800357e:	2b01      	cmp	r3, #1
 8003580:	d16d      	bne.n	800365e <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003586:	881a      	ldrh	r2, [r3, #0]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003592:	1c9a      	adds	r2, r3, #2
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800359c:	b29b      	uxth	r3, r3
 800359e:	3b01      	subs	r3, #1
 80035a0:	b29a      	uxth	r2, r3
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80035a6:	e05a      	b.n	800365e <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	f003 0302 	and.w	r3, r3, #2
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d11b      	bne.n	80035ee <HAL_SPI_TransmitReceive+0x1ac>
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035ba:	b29b      	uxth	r3, r3
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d016      	beq.n	80035ee <HAL_SPI_TransmitReceive+0x1ac>
 80035c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d113      	bne.n	80035ee <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035ca:	881a      	ldrh	r2, [r3, #0]
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035d6:	1c9a      	adds	r2, r3, #2
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035e0:	b29b      	uxth	r3, r3
 80035e2:	3b01      	subs	r3, #1
 80035e4:	b29a      	uxth	r2, r3
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80035ea:	2300      	movs	r3, #0
 80035ec:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	f003 0301 	and.w	r3, r3, #1
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d11c      	bne.n	8003636 <HAL_SPI_TransmitReceive+0x1f4>
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003602:	b29b      	uxth	r3, r3
 8003604:	2b00      	cmp	r3, #0
 8003606:	d016      	beq.n	8003636 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	68da      	ldr	r2, [r3, #12]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003612:	b292      	uxth	r2, r2
 8003614:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800361a:	1c9a      	adds	r2, r3, #2
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003626:	b29b      	uxth	r3, r3
 8003628:	3b01      	subs	r3, #1
 800362a:	b29a      	uxth	r2, r3
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003632:	2301      	movs	r3, #1
 8003634:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003636:	f7fe fb3f 	bl	8001cb8 <HAL_GetTick>
 800363a:	4602      	mov	r2, r0
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	1ad3      	subs	r3, r2, r3
 8003640:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003642:	429a      	cmp	r2, r3
 8003644:	d80b      	bhi.n	800365e <HAL_SPI_TransmitReceive+0x21c>
 8003646:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800364c:	d007      	beq.n	800365e <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 800364e:	2303      	movs	r3, #3
 8003650:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2201      	movs	r2, #1
 8003658:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800365c:	e109      	b.n	8003872 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003662:	b29b      	uxth	r3, r3
 8003664:	2b00      	cmp	r3, #0
 8003666:	d19f      	bne.n	80035a8 <HAL_SPI_TransmitReceive+0x166>
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800366e:	b29b      	uxth	r3, r3
 8003670:	2b00      	cmp	r3, #0
 8003672:	d199      	bne.n	80035a8 <HAL_SPI_TransmitReceive+0x166>
 8003674:	e0e3      	b.n	800383e <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d003      	beq.n	8003686 <HAL_SPI_TransmitReceive+0x244>
 800367e:	8a7b      	ldrh	r3, [r7, #18]
 8003680:	2b01      	cmp	r3, #1
 8003682:	f040 80cf 	bne.w	8003824 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800368a:	b29b      	uxth	r3, r3
 800368c:	2b01      	cmp	r3, #1
 800368e:	d912      	bls.n	80036b6 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003694:	881a      	ldrh	r2, [r3, #0]
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036a0:	1c9a      	adds	r2, r3, #2
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036aa:	b29b      	uxth	r3, r3
 80036ac:	3b02      	subs	r3, #2
 80036ae:	b29a      	uxth	r2, r3
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80036b4:	e0b6      	b.n	8003824 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	330c      	adds	r3, #12
 80036c0:	7812      	ldrb	r2, [r2, #0]
 80036c2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036c8:	1c5a      	adds	r2, r3, #1
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036d2:	b29b      	uxth	r3, r3
 80036d4:	3b01      	subs	r3, #1
 80036d6:	b29a      	uxth	r2, r3
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80036dc:	e0a2      	b.n	8003824 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	f003 0302 	and.w	r3, r3, #2
 80036e8:	2b02      	cmp	r3, #2
 80036ea:	d134      	bne.n	8003756 <HAL_SPI_TransmitReceive+0x314>
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036f0:	b29b      	uxth	r3, r3
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d02f      	beq.n	8003756 <HAL_SPI_TransmitReceive+0x314>
 80036f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d12c      	bne.n	8003756 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003700:	b29b      	uxth	r3, r3
 8003702:	2b01      	cmp	r3, #1
 8003704:	d912      	bls.n	800372c <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800370a:	881a      	ldrh	r2, [r3, #0]
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003716:	1c9a      	adds	r2, r3, #2
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003720:	b29b      	uxth	r3, r3
 8003722:	3b02      	subs	r3, #2
 8003724:	b29a      	uxth	r2, r3
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800372a:	e012      	b.n	8003752 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	330c      	adds	r3, #12
 8003736:	7812      	ldrb	r2, [r2, #0]
 8003738:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800373e:	1c5a      	adds	r2, r3, #1
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003748:	b29b      	uxth	r3, r3
 800374a:	3b01      	subs	r3, #1
 800374c:	b29a      	uxth	r2, r3
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003752:	2300      	movs	r3, #0
 8003754:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	f003 0301 	and.w	r3, r3, #1
 8003760:	2b01      	cmp	r3, #1
 8003762:	d148      	bne.n	80037f6 <HAL_SPI_TransmitReceive+0x3b4>
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800376a:	b29b      	uxth	r3, r3
 800376c:	2b00      	cmp	r3, #0
 800376e:	d042      	beq.n	80037f6 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003776:	b29b      	uxth	r3, r3
 8003778:	2b01      	cmp	r3, #1
 800377a:	d923      	bls.n	80037c4 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	68da      	ldr	r2, [r3, #12]
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003786:	b292      	uxth	r2, r2
 8003788:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800378e:	1c9a      	adds	r2, r3, #2
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800379a:	b29b      	uxth	r3, r3
 800379c:	3b02      	subs	r3, #2
 800379e:	b29a      	uxth	r2, r3
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80037ac:	b29b      	uxth	r3, r3
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d81f      	bhi.n	80037f2 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	685a      	ldr	r2, [r3, #4]
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80037c0:	605a      	str	r2, [r3, #4]
 80037c2:	e016      	b.n	80037f2 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f103 020c 	add.w	r2, r3, #12
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037d0:	7812      	ldrb	r2, [r2, #0]
 80037d2:	b2d2      	uxtb	r2, r2
 80037d4:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037da:	1c5a      	adds	r2, r3, #1
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	3b01      	subs	r3, #1
 80037ea:	b29a      	uxth	r2, r3
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80037f2:	2301      	movs	r3, #1
 80037f4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80037f6:	f7fe fa5f 	bl	8001cb8 <HAL_GetTick>
 80037fa:	4602      	mov	r2, r0
 80037fc:	69fb      	ldr	r3, [r7, #28]
 80037fe:	1ad3      	subs	r3, r2, r3
 8003800:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003802:	429a      	cmp	r2, r3
 8003804:	d803      	bhi.n	800380e <HAL_SPI_TransmitReceive+0x3cc>
 8003806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800380c:	d102      	bne.n	8003814 <HAL_SPI_TransmitReceive+0x3d2>
 800380e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003810:	2b00      	cmp	r3, #0
 8003812:	d107      	bne.n	8003824 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8003814:	2303      	movs	r3, #3
 8003816:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2201      	movs	r2, #1
 800381e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8003822:	e026      	b.n	8003872 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003828:	b29b      	uxth	r3, r3
 800382a:	2b00      	cmp	r3, #0
 800382c:	f47f af57 	bne.w	80036de <HAL_SPI_TransmitReceive+0x29c>
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003836:	b29b      	uxth	r3, r3
 8003838:	2b00      	cmp	r3, #0
 800383a:	f47f af50 	bne.w	80036de <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800383e:	69fa      	ldr	r2, [r7, #28]
 8003840:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003842:	68f8      	ldr	r0, [r7, #12]
 8003844:	f000 f996 	bl	8003b74 <SPI_EndRxTxTransaction>
 8003848:	4603      	mov	r3, r0
 800384a:	2b00      	cmp	r3, #0
 800384c:	d005      	beq.n	800385a <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2220      	movs	r2, #32
 8003858:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800385e:	2b00      	cmp	r3, #0
 8003860:	d003      	beq.n	800386a <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003868:	e003      	b.n	8003872 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2201      	movs	r2, #1
 800386e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2200      	movs	r2, #0
 8003876:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800387a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 800387e:	4618      	mov	r0, r3
 8003880:	3728      	adds	r7, #40	@ 0x28
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
	...

08003888 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b088      	sub	sp, #32
 800388c:	af00      	add	r7, sp, #0
 800388e:	60f8      	str	r0, [r7, #12]
 8003890:	60b9      	str	r1, [r7, #8]
 8003892:	603b      	str	r3, [r7, #0]
 8003894:	4613      	mov	r3, r2
 8003896:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003898:	f7fe fa0e 	bl	8001cb8 <HAL_GetTick>
 800389c:	4602      	mov	r2, r0
 800389e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038a0:	1a9b      	subs	r3, r3, r2
 80038a2:	683a      	ldr	r2, [r7, #0]
 80038a4:	4413      	add	r3, r2
 80038a6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80038a8:	f7fe fa06 	bl	8001cb8 <HAL_GetTick>
 80038ac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80038ae:	4b39      	ldr	r3, [pc, #228]	@ (8003994 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	015b      	lsls	r3, r3, #5
 80038b4:	0d1b      	lsrs	r3, r3, #20
 80038b6:	69fa      	ldr	r2, [r7, #28]
 80038b8:	fb02 f303 	mul.w	r3, r2, r3
 80038bc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80038be:	e054      	b.n	800396a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038c6:	d050      	beq.n	800396a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80038c8:	f7fe f9f6 	bl	8001cb8 <HAL_GetTick>
 80038cc:	4602      	mov	r2, r0
 80038ce:	69bb      	ldr	r3, [r7, #24]
 80038d0:	1ad3      	subs	r3, r2, r3
 80038d2:	69fa      	ldr	r2, [r7, #28]
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d902      	bls.n	80038de <SPI_WaitFlagStateUntilTimeout+0x56>
 80038d8:	69fb      	ldr	r3, [r7, #28]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d13d      	bne.n	800395a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	685a      	ldr	r2, [r3, #4]
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80038ec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80038f6:	d111      	bne.n	800391c <SPI_WaitFlagStateUntilTimeout+0x94>
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003900:	d004      	beq.n	800390c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800390a:	d107      	bne.n	800391c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800391a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003920:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003924:	d10f      	bne.n	8003946 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003934:	601a      	str	r2, [r3, #0]
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003944:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2201      	movs	r2, #1
 800394a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2200      	movs	r2, #0
 8003952:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003956:	2303      	movs	r3, #3
 8003958:	e017      	b.n	800398a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d101      	bne.n	8003964 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003960:	2300      	movs	r3, #0
 8003962:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	3b01      	subs	r3, #1
 8003968:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	689a      	ldr	r2, [r3, #8]
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	4013      	ands	r3, r2
 8003974:	68ba      	ldr	r2, [r7, #8]
 8003976:	429a      	cmp	r2, r3
 8003978:	bf0c      	ite	eq
 800397a:	2301      	moveq	r3, #1
 800397c:	2300      	movne	r3, #0
 800397e:	b2db      	uxtb	r3, r3
 8003980:	461a      	mov	r2, r3
 8003982:	79fb      	ldrb	r3, [r7, #7]
 8003984:	429a      	cmp	r2, r3
 8003986:	d19b      	bne.n	80038c0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003988:	2300      	movs	r3, #0
}
 800398a:	4618      	mov	r0, r3
 800398c:	3720      	adds	r7, #32
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	20000038 	.word	0x20000038

08003998 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b08a      	sub	sp, #40	@ 0x28
 800399c:	af00      	add	r7, sp, #0
 800399e:	60f8      	str	r0, [r7, #12]
 80039a0:	60b9      	str	r1, [r7, #8]
 80039a2:	607a      	str	r2, [r7, #4]
 80039a4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80039a6:	2300      	movs	r3, #0
 80039a8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80039aa:	f7fe f985 	bl	8001cb8 <HAL_GetTick>
 80039ae:	4602      	mov	r2, r0
 80039b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039b2:	1a9b      	subs	r3, r3, r2
 80039b4:	683a      	ldr	r2, [r7, #0]
 80039b6:	4413      	add	r3, r2
 80039b8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80039ba:	f7fe f97d 	bl	8001cb8 <HAL_GetTick>
 80039be:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	330c      	adds	r3, #12
 80039c6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80039c8:	4b3d      	ldr	r3, [pc, #244]	@ (8003ac0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	4613      	mov	r3, r2
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	4413      	add	r3, r2
 80039d2:	00da      	lsls	r2, r3, #3
 80039d4:	1ad3      	subs	r3, r2, r3
 80039d6:	0d1b      	lsrs	r3, r3, #20
 80039d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039da:	fb02 f303 	mul.w	r3, r2, r3
 80039de:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80039e0:	e060      	b.n	8003aa4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80039e8:	d107      	bne.n	80039fa <SPI_WaitFifoStateUntilTimeout+0x62>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d104      	bne.n	80039fa <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80039f0:	69fb      	ldr	r3, [r7, #28]
 80039f2:	781b      	ldrb	r3, [r3, #0]
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80039f8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a00:	d050      	beq.n	8003aa4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003a02:	f7fe f959 	bl	8001cb8 <HAL_GetTick>
 8003a06:	4602      	mov	r2, r0
 8003a08:	6a3b      	ldr	r3, [r7, #32]
 8003a0a:	1ad3      	subs	r3, r2, r3
 8003a0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	d902      	bls.n	8003a18 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d13d      	bne.n	8003a94 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	685a      	ldr	r2, [r3, #4]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003a26:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003a30:	d111      	bne.n	8003a56 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a3a:	d004      	beq.n	8003a46 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a44:	d107      	bne.n	8003a56 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003a54:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a5a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a5e:	d10f      	bne.n	8003a80 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003a6e:	601a      	str	r2, [r3, #0]
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003a7e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2201      	movs	r2, #1
 8003a84:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003a90:	2303      	movs	r3, #3
 8003a92:	e010      	b.n	8003ab6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003a94:	69bb      	ldr	r3, [r7, #24]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d101      	bne.n	8003a9e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003a9e:	69bb      	ldr	r3, [r7, #24]
 8003aa0:	3b01      	subs	r3, #1
 8003aa2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	689a      	ldr	r2, [r3, #8]
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	4013      	ands	r3, r2
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d196      	bne.n	80039e2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003ab4:	2300      	movs	r3, #0
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3728      	adds	r7, #40	@ 0x28
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}
 8003abe:	bf00      	nop
 8003ac0:	20000038 	.word	0x20000038

08003ac4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b086      	sub	sp, #24
 8003ac8:	af02      	add	r7, sp, #8
 8003aca:	60f8      	str	r0, [r7, #12]
 8003acc:	60b9      	str	r1, [r7, #8]
 8003ace:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003ad8:	d111      	bne.n	8003afe <SPI_EndRxTransaction+0x3a>
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ae2:	d004      	beq.n	8003aee <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003aec:	d107      	bne.n	8003afe <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003afc:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	9300      	str	r3, [sp, #0]
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	2200      	movs	r2, #0
 8003b06:	2180      	movs	r1, #128	@ 0x80
 8003b08:	68f8      	ldr	r0, [r7, #12]
 8003b0a:	f7ff febd 	bl	8003888 <SPI_WaitFlagStateUntilTimeout>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d007      	beq.n	8003b24 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b18:	f043 0220 	orr.w	r2, r3, #32
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003b20:	2303      	movs	r3, #3
 8003b22:	e023      	b.n	8003b6c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003b2c:	d11d      	bne.n	8003b6a <SPI_EndRxTransaction+0xa6>
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b36:	d004      	beq.n	8003b42 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b40:	d113      	bne.n	8003b6a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	9300      	str	r3, [sp, #0]
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003b4e:	68f8      	ldr	r0, [r7, #12]
 8003b50:	f7ff ff22 	bl	8003998 <SPI_WaitFifoStateUntilTimeout>
 8003b54:	4603      	mov	r3, r0
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d007      	beq.n	8003b6a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b5e:	f043 0220 	orr.w	r2, r3, #32
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8003b66:	2303      	movs	r3, #3
 8003b68:	e000      	b.n	8003b6c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8003b6a:	2300      	movs	r3, #0
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3710      	adds	r7, #16
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}

08003b74 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b086      	sub	sp, #24
 8003b78:	af02      	add	r7, sp, #8
 8003b7a:	60f8      	str	r0, [r7, #12]
 8003b7c:	60b9      	str	r1, [r7, #8]
 8003b7e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	9300      	str	r3, [sp, #0]
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	2200      	movs	r2, #0
 8003b88:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003b8c:	68f8      	ldr	r0, [r7, #12]
 8003b8e:	f7ff ff03 	bl	8003998 <SPI_WaitFifoStateUntilTimeout>
 8003b92:	4603      	mov	r3, r0
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d007      	beq.n	8003ba8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b9c:	f043 0220 	orr.w	r2, r3, #32
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003ba4:	2303      	movs	r3, #3
 8003ba6:	e027      	b.n	8003bf8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	9300      	str	r3, [sp, #0]
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	2180      	movs	r1, #128	@ 0x80
 8003bb2:	68f8      	ldr	r0, [r7, #12]
 8003bb4:	f7ff fe68 	bl	8003888 <SPI_WaitFlagStateUntilTimeout>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d007      	beq.n	8003bce <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bc2:	f043 0220 	orr.w	r2, r3, #32
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e014      	b.n	8003bf8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	9300      	str	r3, [sp, #0]
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003bda:	68f8      	ldr	r0, [r7, #12]
 8003bdc:	f7ff fedc 	bl	8003998 <SPI_WaitFifoStateUntilTimeout>
 8003be0:	4603      	mov	r3, r0
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d007      	beq.n	8003bf6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bea:	f043 0220 	orr.w	r2, r3, #32
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003bf2:	2303      	movs	r3, #3
 8003bf4:	e000      	b.n	8003bf8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003bf6:	2300      	movs	r3, #0
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	3710      	adds	r7, #16
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}

08003c00 <malloc>:
 8003c00:	4b02      	ldr	r3, [pc, #8]	@ (8003c0c <malloc+0xc>)
 8003c02:	4601      	mov	r1, r0
 8003c04:	6818      	ldr	r0, [r3, #0]
 8003c06:	f000 b825 	b.w	8003c54 <_malloc_r>
 8003c0a:	bf00      	nop
 8003c0c:	20000070 	.word	0x20000070

08003c10 <sbrk_aligned>:
 8003c10:	b570      	push	{r4, r5, r6, lr}
 8003c12:	4e0f      	ldr	r6, [pc, #60]	@ (8003c50 <sbrk_aligned+0x40>)
 8003c14:	460c      	mov	r4, r1
 8003c16:	6831      	ldr	r1, [r6, #0]
 8003c18:	4605      	mov	r5, r0
 8003c1a:	b911      	cbnz	r1, 8003c22 <sbrk_aligned+0x12>
 8003c1c:	f000 f8ae 	bl	8003d7c <_sbrk_r>
 8003c20:	6030      	str	r0, [r6, #0]
 8003c22:	4621      	mov	r1, r4
 8003c24:	4628      	mov	r0, r5
 8003c26:	f000 f8a9 	bl	8003d7c <_sbrk_r>
 8003c2a:	1c43      	adds	r3, r0, #1
 8003c2c:	d103      	bne.n	8003c36 <sbrk_aligned+0x26>
 8003c2e:	f04f 34ff 	mov.w	r4, #4294967295
 8003c32:	4620      	mov	r0, r4
 8003c34:	bd70      	pop	{r4, r5, r6, pc}
 8003c36:	1cc4      	adds	r4, r0, #3
 8003c38:	f024 0403 	bic.w	r4, r4, #3
 8003c3c:	42a0      	cmp	r0, r4
 8003c3e:	d0f8      	beq.n	8003c32 <sbrk_aligned+0x22>
 8003c40:	1a21      	subs	r1, r4, r0
 8003c42:	4628      	mov	r0, r5
 8003c44:	f000 f89a 	bl	8003d7c <_sbrk_r>
 8003c48:	3001      	adds	r0, #1
 8003c4a:	d1f2      	bne.n	8003c32 <sbrk_aligned+0x22>
 8003c4c:	e7ef      	b.n	8003c2e <sbrk_aligned+0x1e>
 8003c4e:	bf00      	nop
 8003c50:	20001278 	.word	0x20001278

08003c54 <_malloc_r>:
 8003c54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c58:	1ccd      	adds	r5, r1, #3
 8003c5a:	f025 0503 	bic.w	r5, r5, #3
 8003c5e:	3508      	adds	r5, #8
 8003c60:	2d0c      	cmp	r5, #12
 8003c62:	bf38      	it	cc
 8003c64:	250c      	movcc	r5, #12
 8003c66:	2d00      	cmp	r5, #0
 8003c68:	4606      	mov	r6, r0
 8003c6a:	db01      	blt.n	8003c70 <_malloc_r+0x1c>
 8003c6c:	42a9      	cmp	r1, r5
 8003c6e:	d904      	bls.n	8003c7a <_malloc_r+0x26>
 8003c70:	230c      	movs	r3, #12
 8003c72:	6033      	str	r3, [r6, #0]
 8003c74:	2000      	movs	r0, #0
 8003c76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003c7a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003d50 <_malloc_r+0xfc>
 8003c7e:	f000 f869 	bl	8003d54 <__malloc_lock>
 8003c82:	f8d8 3000 	ldr.w	r3, [r8]
 8003c86:	461c      	mov	r4, r3
 8003c88:	bb44      	cbnz	r4, 8003cdc <_malloc_r+0x88>
 8003c8a:	4629      	mov	r1, r5
 8003c8c:	4630      	mov	r0, r6
 8003c8e:	f7ff ffbf 	bl	8003c10 <sbrk_aligned>
 8003c92:	1c43      	adds	r3, r0, #1
 8003c94:	4604      	mov	r4, r0
 8003c96:	d158      	bne.n	8003d4a <_malloc_r+0xf6>
 8003c98:	f8d8 4000 	ldr.w	r4, [r8]
 8003c9c:	4627      	mov	r7, r4
 8003c9e:	2f00      	cmp	r7, #0
 8003ca0:	d143      	bne.n	8003d2a <_malloc_r+0xd6>
 8003ca2:	2c00      	cmp	r4, #0
 8003ca4:	d04b      	beq.n	8003d3e <_malloc_r+0xea>
 8003ca6:	6823      	ldr	r3, [r4, #0]
 8003ca8:	4639      	mov	r1, r7
 8003caa:	4630      	mov	r0, r6
 8003cac:	eb04 0903 	add.w	r9, r4, r3
 8003cb0:	f000 f864 	bl	8003d7c <_sbrk_r>
 8003cb4:	4581      	cmp	r9, r0
 8003cb6:	d142      	bne.n	8003d3e <_malloc_r+0xea>
 8003cb8:	6821      	ldr	r1, [r4, #0]
 8003cba:	1a6d      	subs	r5, r5, r1
 8003cbc:	4629      	mov	r1, r5
 8003cbe:	4630      	mov	r0, r6
 8003cc0:	f7ff ffa6 	bl	8003c10 <sbrk_aligned>
 8003cc4:	3001      	adds	r0, #1
 8003cc6:	d03a      	beq.n	8003d3e <_malloc_r+0xea>
 8003cc8:	6823      	ldr	r3, [r4, #0]
 8003cca:	442b      	add	r3, r5
 8003ccc:	6023      	str	r3, [r4, #0]
 8003cce:	f8d8 3000 	ldr.w	r3, [r8]
 8003cd2:	685a      	ldr	r2, [r3, #4]
 8003cd4:	bb62      	cbnz	r2, 8003d30 <_malloc_r+0xdc>
 8003cd6:	f8c8 7000 	str.w	r7, [r8]
 8003cda:	e00f      	b.n	8003cfc <_malloc_r+0xa8>
 8003cdc:	6822      	ldr	r2, [r4, #0]
 8003cde:	1b52      	subs	r2, r2, r5
 8003ce0:	d420      	bmi.n	8003d24 <_malloc_r+0xd0>
 8003ce2:	2a0b      	cmp	r2, #11
 8003ce4:	d917      	bls.n	8003d16 <_malloc_r+0xc2>
 8003ce6:	1961      	adds	r1, r4, r5
 8003ce8:	42a3      	cmp	r3, r4
 8003cea:	6025      	str	r5, [r4, #0]
 8003cec:	bf18      	it	ne
 8003cee:	6059      	strne	r1, [r3, #4]
 8003cf0:	6863      	ldr	r3, [r4, #4]
 8003cf2:	bf08      	it	eq
 8003cf4:	f8c8 1000 	streq.w	r1, [r8]
 8003cf8:	5162      	str	r2, [r4, r5]
 8003cfa:	604b      	str	r3, [r1, #4]
 8003cfc:	4630      	mov	r0, r6
 8003cfe:	f000 f82f 	bl	8003d60 <__malloc_unlock>
 8003d02:	f104 000b 	add.w	r0, r4, #11
 8003d06:	1d23      	adds	r3, r4, #4
 8003d08:	f020 0007 	bic.w	r0, r0, #7
 8003d0c:	1ac2      	subs	r2, r0, r3
 8003d0e:	bf1c      	itt	ne
 8003d10:	1a1b      	subne	r3, r3, r0
 8003d12:	50a3      	strne	r3, [r4, r2]
 8003d14:	e7af      	b.n	8003c76 <_malloc_r+0x22>
 8003d16:	6862      	ldr	r2, [r4, #4]
 8003d18:	42a3      	cmp	r3, r4
 8003d1a:	bf0c      	ite	eq
 8003d1c:	f8c8 2000 	streq.w	r2, [r8]
 8003d20:	605a      	strne	r2, [r3, #4]
 8003d22:	e7eb      	b.n	8003cfc <_malloc_r+0xa8>
 8003d24:	4623      	mov	r3, r4
 8003d26:	6864      	ldr	r4, [r4, #4]
 8003d28:	e7ae      	b.n	8003c88 <_malloc_r+0x34>
 8003d2a:	463c      	mov	r4, r7
 8003d2c:	687f      	ldr	r7, [r7, #4]
 8003d2e:	e7b6      	b.n	8003c9e <_malloc_r+0x4a>
 8003d30:	461a      	mov	r2, r3
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	42a3      	cmp	r3, r4
 8003d36:	d1fb      	bne.n	8003d30 <_malloc_r+0xdc>
 8003d38:	2300      	movs	r3, #0
 8003d3a:	6053      	str	r3, [r2, #4]
 8003d3c:	e7de      	b.n	8003cfc <_malloc_r+0xa8>
 8003d3e:	230c      	movs	r3, #12
 8003d40:	6033      	str	r3, [r6, #0]
 8003d42:	4630      	mov	r0, r6
 8003d44:	f000 f80c 	bl	8003d60 <__malloc_unlock>
 8003d48:	e794      	b.n	8003c74 <_malloc_r+0x20>
 8003d4a:	6005      	str	r5, [r0, #0]
 8003d4c:	e7d6      	b.n	8003cfc <_malloc_r+0xa8>
 8003d4e:	bf00      	nop
 8003d50:	2000127c 	.word	0x2000127c

08003d54 <__malloc_lock>:
 8003d54:	4801      	ldr	r0, [pc, #4]	@ (8003d5c <__malloc_lock+0x8>)
 8003d56:	f000 b84b 	b.w	8003df0 <__retarget_lock_acquire_recursive>
 8003d5a:	bf00      	nop
 8003d5c:	200013bc 	.word	0x200013bc

08003d60 <__malloc_unlock>:
 8003d60:	4801      	ldr	r0, [pc, #4]	@ (8003d68 <__malloc_unlock+0x8>)
 8003d62:	f000 b846 	b.w	8003df2 <__retarget_lock_release_recursive>
 8003d66:	bf00      	nop
 8003d68:	200013bc 	.word	0x200013bc

08003d6c <memset>:
 8003d6c:	4402      	add	r2, r0
 8003d6e:	4603      	mov	r3, r0
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d100      	bne.n	8003d76 <memset+0xa>
 8003d74:	4770      	bx	lr
 8003d76:	f803 1b01 	strb.w	r1, [r3], #1
 8003d7a:	e7f9      	b.n	8003d70 <memset+0x4>

08003d7c <_sbrk_r>:
 8003d7c:	b538      	push	{r3, r4, r5, lr}
 8003d7e:	4d06      	ldr	r5, [pc, #24]	@ (8003d98 <_sbrk_r+0x1c>)
 8003d80:	2300      	movs	r3, #0
 8003d82:	4604      	mov	r4, r0
 8003d84:	4608      	mov	r0, r1
 8003d86:	602b      	str	r3, [r5, #0]
 8003d88:	f7fd f89e 	bl	8000ec8 <_sbrk>
 8003d8c:	1c43      	adds	r3, r0, #1
 8003d8e:	d102      	bne.n	8003d96 <_sbrk_r+0x1a>
 8003d90:	682b      	ldr	r3, [r5, #0]
 8003d92:	b103      	cbz	r3, 8003d96 <_sbrk_r+0x1a>
 8003d94:	6023      	str	r3, [r4, #0]
 8003d96:	bd38      	pop	{r3, r4, r5, pc}
 8003d98:	200013b8 	.word	0x200013b8

08003d9c <__errno>:
 8003d9c:	4b01      	ldr	r3, [pc, #4]	@ (8003da4 <__errno+0x8>)
 8003d9e:	6818      	ldr	r0, [r3, #0]
 8003da0:	4770      	bx	lr
 8003da2:	bf00      	nop
 8003da4:	20000070 	.word	0x20000070

08003da8 <__libc_init_array>:
 8003da8:	b570      	push	{r4, r5, r6, lr}
 8003daa:	4d0d      	ldr	r5, [pc, #52]	@ (8003de0 <__libc_init_array+0x38>)
 8003dac:	4c0d      	ldr	r4, [pc, #52]	@ (8003de4 <__libc_init_array+0x3c>)
 8003dae:	1b64      	subs	r4, r4, r5
 8003db0:	10a4      	asrs	r4, r4, #2
 8003db2:	2600      	movs	r6, #0
 8003db4:	42a6      	cmp	r6, r4
 8003db6:	d109      	bne.n	8003dcc <__libc_init_array+0x24>
 8003db8:	4d0b      	ldr	r5, [pc, #44]	@ (8003de8 <__libc_init_array+0x40>)
 8003dba:	4c0c      	ldr	r4, [pc, #48]	@ (8003dec <__libc_init_array+0x44>)
 8003dbc:	f000 f822 	bl	8003e04 <_init>
 8003dc0:	1b64      	subs	r4, r4, r5
 8003dc2:	10a4      	asrs	r4, r4, #2
 8003dc4:	2600      	movs	r6, #0
 8003dc6:	42a6      	cmp	r6, r4
 8003dc8:	d105      	bne.n	8003dd6 <__libc_init_array+0x2e>
 8003dca:	bd70      	pop	{r4, r5, r6, pc}
 8003dcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003dd0:	4798      	blx	r3
 8003dd2:	3601      	adds	r6, #1
 8003dd4:	e7ee      	b.n	8003db4 <__libc_init_array+0xc>
 8003dd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003dda:	4798      	blx	r3
 8003ddc:	3601      	adds	r6, #1
 8003dde:	e7f2      	b.n	8003dc6 <__libc_init_array+0x1e>
 8003de0:	08004454 	.word	0x08004454
 8003de4:	08004454 	.word	0x08004454
 8003de8:	08004454 	.word	0x08004454
 8003dec:	08004458 	.word	0x08004458

08003df0 <__retarget_lock_acquire_recursive>:
 8003df0:	4770      	bx	lr

08003df2 <__retarget_lock_release_recursive>:
 8003df2:	4770      	bx	lr

08003df4 <strcpy>:
 8003df4:	4603      	mov	r3, r0
 8003df6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003dfa:	f803 2b01 	strb.w	r2, [r3], #1
 8003dfe:	2a00      	cmp	r2, #0
 8003e00:	d1f9      	bne.n	8003df6 <strcpy+0x2>
 8003e02:	4770      	bx	lr

08003e04 <_init>:
 8003e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e06:	bf00      	nop
 8003e08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e0a:	bc08      	pop	{r3}
 8003e0c:	469e      	mov	lr, r3
 8003e0e:	4770      	bx	lr

08003e10 <_fini>:
 8003e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e12:	bf00      	nop
 8003e14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e16:	bc08      	pop	{r3}
 8003e18:	469e      	mov	lr, r3
 8003e1a:	4770      	bx	lr


web_bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003be8  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000630  08003dc0  08003dc0  00004dc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080043f0  080043f0  000060c0  2**0
                  CONTENTS
  4 .ARM          00000008  080043f0  080043f0  000053f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080043f8  080043f8  000060c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080043f8  080043f8  000053f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080043fc  080043fc  000053fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000c0  20000000  08004400  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012f8  200000c0  080044c0  000060c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200013b8  080044c0  000063b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000060c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009dcb  00000000  00000000  000060f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000203a  00000000  00000000  0000febb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b08  00000000  00000000  00011ef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000855  00000000  00000000  00012a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000245ec  00000000  00000000  00013255  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b43e  00000000  00000000  00037841  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ea0ab  00000000  00000000  00042c7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012cd2a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ee0  00000000  00000000  0012cd70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004d  00000000  00000000  0012fc50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200000c0 	.word	0x200000c0
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08003da8 	.word	0x08003da8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200000c4 	.word	0x200000c4
 8000214:	08003da8 	.word	0x08003da8

08000218 <strlen>:
 8000218:	4603      	mov	r3, r0
 800021a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800021e:	2a00      	cmp	r2, #0
 8000220:	d1fb      	bne.n	800021a <strlen+0x2>
 8000222:	1a18      	subs	r0, r3, r0
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr

08000228 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b084      	sub	sp, #16
 800022c:	af00      	add	r7, sp, #0
 800022e:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8000230:	4b22      	ldr	r3, [pc, #136]	@ (80002bc <WIZCHIP_READ+0x94>)
 8000232:	68db      	ldr	r3, [r3, #12]
 8000234:	4798      	blx	r3
   WIZCHIP.CS._select();
 8000236:	4b21      	ldr	r3, [pc, #132]	@ (80002bc <WIZCHIP_READ+0x94>)
 8000238:	695b      	ldr	r3, [r3, #20]
 800023a:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800023c:	4b1f      	ldr	r3, [pc, #124]	@ (80002bc <WIZCHIP_READ+0x94>)
 800023e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000240:	2b00      	cmp	r3, #0
 8000242:	d003      	beq.n	800024c <WIZCHIP_READ+0x24>
 8000244:	4b1d      	ldr	r3, [pc, #116]	@ (80002bc <WIZCHIP_READ+0x94>)
 8000246:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000248:	2b00      	cmp	r3, #0
 800024a:	d114      	bne.n	8000276 <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800024c:	4b1b      	ldr	r3, [pc, #108]	@ (80002bc <WIZCHIP_READ+0x94>)
 800024e:	6a1b      	ldr	r3, [r3, #32]
 8000250:	687a      	ldr	r2, [r7, #4]
 8000252:	0c12      	lsrs	r2, r2, #16
 8000254:	b2d2      	uxtb	r2, r2
 8000256:	4610      	mov	r0, r2
 8000258:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800025a:	4b18      	ldr	r3, [pc, #96]	@ (80002bc <WIZCHIP_READ+0x94>)
 800025c:	6a1b      	ldr	r3, [r3, #32]
 800025e:	687a      	ldr	r2, [r7, #4]
 8000260:	0a12      	lsrs	r2, r2, #8
 8000262:	b2d2      	uxtb	r2, r2
 8000264:	4610      	mov	r0, r2
 8000266:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8000268:	4b14      	ldr	r3, [pc, #80]	@ (80002bc <WIZCHIP_READ+0x94>)
 800026a:	6a1b      	ldr	r3, [r3, #32]
 800026c:	687a      	ldr	r2, [r7, #4]
 800026e:	b2d2      	uxtb	r2, r2
 8000270:	4610      	mov	r0, r2
 8000272:	4798      	blx	r3
 8000274:	e011      	b.n	800029a <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	0c1b      	lsrs	r3, r3, #16
 800027a:	b2db      	uxtb	r3, r3
 800027c:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	0a1b      	lsrs	r3, r3, #8
 8000282:	b2db      	uxtb	r3, r3
 8000284:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	b2db      	uxtb	r3, r3
 800028a:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 800028c:	4b0b      	ldr	r3, [pc, #44]	@ (80002bc <WIZCHIP_READ+0x94>)
 800028e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000290:	f107 020c 	add.w	r2, r7, #12
 8000294:	2103      	movs	r1, #3
 8000296:	4610      	mov	r0, r2
 8000298:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 800029a:	4b08      	ldr	r3, [pc, #32]	@ (80002bc <WIZCHIP_READ+0x94>)
 800029c:	69db      	ldr	r3, [r3, #28]
 800029e:	4798      	blx	r3
 80002a0:	4603      	mov	r3, r0
 80002a2:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 80002a4:	4b05      	ldr	r3, [pc, #20]	@ (80002bc <WIZCHIP_READ+0x94>)
 80002a6:	699b      	ldr	r3, [r3, #24]
 80002a8:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80002aa:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <WIZCHIP_READ+0x94>)
 80002ac:	691b      	ldr	r3, [r3, #16]
 80002ae:	4798      	blx	r3
   return ret;
 80002b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80002b2:	4618      	mov	r0, r3
 80002b4:	3710      	adds	r7, #16
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bd80      	pop	{r7, pc}
 80002ba:	bf00      	nop
 80002bc:	2000003c 	.word	0x2000003c

080002c0 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b084      	sub	sp, #16
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
 80002c8:	460b      	mov	r3, r1
 80002ca:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 80002cc:	4b22      	ldr	r3, [pc, #136]	@ (8000358 <WIZCHIP_WRITE+0x98>)
 80002ce:	68db      	ldr	r3, [r3, #12]
 80002d0:	4798      	blx	r3
   WIZCHIP.CS._select();
 80002d2:	4b21      	ldr	r3, [pc, #132]	@ (8000358 <WIZCHIP_WRITE+0x98>)
 80002d4:	695b      	ldr	r3, [r3, #20]
 80002d6:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	f043 0304 	orr.w	r3, r3, #4
 80002de:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80002e0:	4b1d      	ldr	r3, [pc, #116]	@ (8000358 <WIZCHIP_WRITE+0x98>)
 80002e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d119      	bne.n	800031c <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80002e8:	4b1b      	ldr	r3, [pc, #108]	@ (8000358 <WIZCHIP_WRITE+0x98>)
 80002ea:	6a1b      	ldr	r3, [r3, #32]
 80002ec:	687a      	ldr	r2, [r7, #4]
 80002ee:	0c12      	lsrs	r2, r2, #16
 80002f0:	b2d2      	uxtb	r2, r2
 80002f2:	4610      	mov	r0, r2
 80002f4:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80002f6:	4b18      	ldr	r3, [pc, #96]	@ (8000358 <WIZCHIP_WRITE+0x98>)
 80002f8:	6a1b      	ldr	r3, [r3, #32]
 80002fa:	687a      	ldr	r2, [r7, #4]
 80002fc:	0a12      	lsrs	r2, r2, #8
 80002fe:	b2d2      	uxtb	r2, r2
 8000300:	4610      	mov	r0, r2
 8000302:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8000304:	4b14      	ldr	r3, [pc, #80]	@ (8000358 <WIZCHIP_WRITE+0x98>)
 8000306:	6a1b      	ldr	r3, [r3, #32]
 8000308:	687a      	ldr	r2, [r7, #4]
 800030a:	b2d2      	uxtb	r2, r2
 800030c:	4610      	mov	r0, r2
 800030e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 8000310:	4b11      	ldr	r3, [pc, #68]	@ (8000358 <WIZCHIP_WRITE+0x98>)
 8000312:	6a1b      	ldr	r3, [r3, #32]
 8000314:	78fa      	ldrb	r2, [r7, #3]
 8000316:	4610      	mov	r0, r2
 8000318:	4798      	blx	r3
 800031a:	e013      	b.n	8000344 <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	0c1b      	lsrs	r3, r3, #16
 8000320:	b2db      	uxtb	r3, r3
 8000322:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	0a1b      	lsrs	r3, r3, #8
 8000328:	b2db      	uxtb	r3, r3
 800032a:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	b2db      	uxtb	r3, r3
 8000330:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 8000332:	78fb      	ldrb	r3, [r7, #3]
 8000334:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 8000336:	4b08      	ldr	r3, [pc, #32]	@ (8000358 <WIZCHIP_WRITE+0x98>)
 8000338:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800033a:	f107 020c 	add.w	r2, r7, #12
 800033e:	2104      	movs	r1, #4
 8000340:	4610      	mov	r0, r2
 8000342:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8000344:	4b04      	ldr	r3, [pc, #16]	@ (8000358 <WIZCHIP_WRITE+0x98>)
 8000346:	699b      	ldr	r3, [r3, #24]
 8000348:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800034a:	4b03      	ldr	r3, [pc, #12]	@ (8000358 <WIZCHIP_WRITE+0x98>)
 800034c:	691b      	ldr	r3, [r3, #16]
 800034e:	4798      	blx	r3
}
 8000350:	bf00      	nop
 8000352:	3710      	adds	r7, #16
 8000354:	46bd      	mov	sp, r7
 8000356:	bd80      	pop	{r7, pc}
 8000358:	2000003c 	.word	0x2000003c

0800035c <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 800035c:	b590      	push	{r4, r7, lr}
 800035e:	b087      	sub	sp, #28
 8000360:	af00      	add	r7, sp, #0
 8000362:	60f8      	str	r0, [r7, #12]
 8000364:	60b9      	str	r1, [r7, #8]
 8000366:	4613      	mov	r3, r2
 8000368:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 800036a:	4b2b      	ldr	r3, [pc, #172]	@ (8000418 <WIZCHIP_READ_BUF+0xbc>)
 800036c:	68db      	ldr	r3, [r3, #12]
 800036e:	4798      	blx	r3
   WIZCHIP.CS._select();
 8000370:	4b29      	ldr	r3, [pc, #164]	@ (8000418 <WIZCHIP_READ_BUF+0xbc>)
 8000372:	695b      	ldr	r3, [r3, #20]
 8000374:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8000376:	4b28      	ldr	r3, [pc, #160]	@ (8000418 <WIZCHIP_READ_BUF+0xbc>)
 8000378:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800037a:	2b00      	cmp	r3, #0
 800037c:	d003      	beq.n	8000386 <WIZCHIP_READ_BUF+0x2a>
 800037e:	4b26      	ldr	r3, [pc, #152]	@ (8000418 <WIZCHIP_READ_BUF+0xbc>)
 8000380:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000382:	2b00      	cmp	r3, #0
 8000384:	d126      	bne.n	80003d4 <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8000386:	4b24      	ldr	r3, [pc, #144]	@ (8000418 <WIZCHIP_READ_BUF+0xbc>)
 8000388:	6a1b      	ldr	r3, [r3, #32]
 800038a:	68fa      	ldr	r2, [r7, #12]
 800038c:	0c12      	lsrs	r2, r2, #16
 800038e:	b2d2      	uxtb	r2, r2
 8000390:	4610      	mov	r0, r2
 8000392:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8000394:	4b20      	ldr	r3, [pc, #128]	@ (8000418 <WIZCHIP_READ_BUF+0xbc>)
 8000396:	6a1b      	ldr	r3, [r3, #32]
 8000398:	68fa      	ldr	r2, [r7, #12]
 800039a:	0a12      	lsrs	r2, r2, #8
 800039c:	b2d2      	uxtb	r2, r2
 800039e:	4610      	mov	r0, r2
 80003a0:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80003a2:	4b1d      	ldr	r3, [pc, #116]	@ (8000418 <WIZCHIP_READ_BUF+0xbc>)
 80003a4:	6a1b      	ldr	r3, [r3, #32]
 80003a6:	68fa      	ldr	r2, [r7, #12]
 80003a8:	b2d2      	uxtb	r2, r2
 80003aa:	4610      	mov	r0, r2
 80003ac:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80003ae:	2300      	movs	r3, #0
 80003b0:	82fb      	strh	r3, [r7, #22]
 80003b2:	e00a      	b.n	80003ca <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 80003b4:	4b18      	ldr	r3, [pc, #96]	@ (8000418 <WIZCHIP_READ_BUF+0xbc>)
 80003b6:	69db      	ldr	r3, [r3, #28]
 80003b8:	8afa      	ldrh	r2, [r7, #22]
 80003ba:	68b9      	ldr	r1, [r7, #8]
 80003bc:	188c      	adds	r4, r1, r2
 80003be:	4798      	blx	r3
 80003c0:	4603      	mov	r3, r0
 80003c2:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 80003c4:	8afb      	ldrh	r3, [r7, #22]
 80003c6:	3301      	adds	r3, #1
 80003c8:	82fb      	strh	r3, [r7, #22]
 80003ca:	8afa      	ldrh	r2, [r7, #22]
 80003cc:	88fb      	ldrh	r3, [r7, #6]
 80003ce:	429a      	cmp	r2, r3
 80003d0:	d3f0      	bcc.n	80003b4 <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80003d2:	e017      	b.n	8000404 <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80003d4:	68fb      	ldr	r3, [r7, #12]
 80003d6:	0c1b      	lsrs	r3, r3, #16
 80003d8:	b2db      	uxtb	r3, r3
 80003da:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80003dc:	68fb      	ldr	r3, [r7, #12]
 80003de:	0a1b      	lsrs	r3, r3, #8
 80003e0:	b2db      	uxtb	r3, r3
 80003e2:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80003e4:	68fb      	ldr	r3, [r7, #12]
 80003e6:	b2db      	uxtb	r3, r3
 80003e8:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80003ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000418 <WIZCHIP_READ_BUF+0xbc>)
 80003ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80003ee:	f107 0210 	add.w	r2, r7, #16
 80003f2:	2103      	movs	r1, #3
 80003f4:	4610      	mov	r0, r2
 80003f6:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 80003f8:	4b07      	ldr	r3, [pc, #28]	@ (8000418 <WIZCHIP_READ_BUF+0xbc>)
 80003fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80003fc:	88fa      	ldrh	r2, [r7, #6]
 80003fe:	4611      	mov	r1, r2
 8000400:	68b8      	ldr	r0, [r7, #8]
 8000402:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8000404:	4b04      	ldr	r3, [pc, #16]	@ (8000418 <WIZCHIP_READ_BUF+0xbc>)
 8000406:	699b      	ldr	r3, [r3, #24]
 8000408:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800040a:	4b03      	ldr	r3, [pc, #12]	@ (8000418 <WIZCHIP_READ_BUF+0xbc>)
 800040c:	691b      	ldr	r3, [r3, #16]
 800040e:	4798      	blx	r3
}
 8000410:	bf00      	nop
 8000412:	371c      	adds	r7, #28
 8000414:	46bd      	mov	sp, r7
 8000416:	bd90      	pop	{r4, r7, pc}
 8000418:	2000003c 	.word	0x2000003c

0800041c <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b086      	sub	sp, #24
 8000420:	af00      	add	r7, sp, #0
 8000422:	60f8      	str	r0, [r7, #12]
 8000424:	60b9      	str	r1, [r7, #8]
 8000426:	4613      	mov	r3, r2
 8000428:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 800042a:	4b2b      	ldr	r3, [pc, #172]	@ (80004d8 <WIZCHIP_WRITE_BUF+0xbc>)
 800042c:	68db      	ldr	r3, [r3, #12]
 800042e:	4798      	blx	r3
   WIZCHIP.CS._select();
 8000430:	4b29      	ldr	r3, [pc, #164]	@ (80004d8 <WIZCHIP_WRITE_BUF+0xbc>)
 8000432:	695b      	ldr	r3, [r3, #20]
 8000434:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8000436:	68fb      	ldr	r3, [r7, #12]
 8000438:	f043 0304 	orr.w	r3, r3, #4
 800043c:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800043e:	4b26      	ldr	r3, [pc, #152]	@ (80004d8 <WIZCHIP_WRITE_BUF+0xbc>)
 8000440:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000442:	2b00      	cmp	r3, #0
 8000444:	d126      	bne.n	8000494 <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8000446:	4b24      	ldr	r3, [pc, #144]	@ (80004d8 <WIZCHIP_WRITE_BUF+0xbc>)
 8000448:	6a1b      	ldr	r3, [r3, #32]
 800044a:	68fa      	ldr	r2, [r7, #12]
 800044c:	0c12      	lsrs	r2, r2, #16
 800044e:	b2d2      	uxtb	r2, r2
 8000450:	4610      	mov	r0, r2
 8000452:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8000454:	4b20      	ldr	r3, [pc, #128]	@ (80004d8 <WIZCHIP_WRITE_BUF+0xbc>)
 8000456:	6a1b      	ldr	r3, [r3, #32]
 8000458:	68fa      	ldr	r2, [r7, #12]
 800045a:	0a12      	lsrs	r2, r2, #8
 800045c:	b2d2      	uxtb	r2, r2
 800045e:	4610      	mov	r0, r2
 8000460:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8000462:	4b1d      	ldr	r3, [pc, #116]	@ (80004d8 <WIZCHIP_WRITE_BUF+0xbc>)
 8000464:	6a1b      	ldr	r3, [r3, #32]
 8000466:	68fa      	ldr	r2, [r7, #12]
 8000468:	b2d2      	uxtb	r2, r2
 800046a:	4610      	mov	r0, r2
 800046c:	4798      	blx	r3
		for(i = 0; i < len; i++)
 800046e:	2300      	movs	r3, #0
 8000470:	82fb      	strh	r3, [r7, #22]
 8000472:	e00a      	b.n	800048a <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8000474:	4b18      	ldr	r3, [pc, #96]	@ (80004d8 <WIZCHIP_WRITE_BUF+0xbc>)
 8000476:	6a1b      	ldr	r3, [r3, #32]
 8000478:	8afa      	ldrh	r2, [r7, #22]
 800047a:	68b9      	ldr	r1, [r7, #8]
 800047c:	440a      	add	r2, r1
 800047e:	7812      	ldrb	r2, [r2, #0]
 8000480:	4610      	mov	r0, r2
 8000482:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8000484:	8afb      	ldrh	r3, [r7, #22]
 8000486:	3301      	adds	r3, #1
 8000488:	82fb      	strh	r3, [r7, #22]
 800048a:	8afa      	ldrh	r2, [r7, #22]
 800048c:	88fb      	ldrh	r3, [r7, #6]
 800048e:	429a      	cmp	r2, r3
 8000490:	d3f0      	bcc.n	8000474 <WIZCHIP_WRITE_BUF+0x58>
 8000492:	e017      	b.n	80004c4 <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8000494:	68fb      	ldr	r3, [r7, #12]
 8000496:	0c1b      	lsrs	r3, r3, #16
 8000498:	b2db      	uxtb	r3, r3
 800049a:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 800049c:	68fb      	ldr	r3, [r7, #12]
 800049e:	0a1b      	lsrs	r3, r3, #8
 80004a0:	b2db      	uxtb	r3, r3
 80004a2:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80004a4:	68fb      	ldr	r3, [r7, #12]
 80004a6:	b2db      	uxtb	r3, r3
 80004a8:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80004aa:	4b0b      	ldr	r3, [pc, #44]	@ (80004d8 <WIZCHIP_WRITE_BUF+0xbc>)
 80004ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80004ae:	f107 0210 	add.w	r2, r7, #16
 80004b2:	2103      	movs	r1, #3
 80004b4:	4610      	mov	r0, r2
 80004b6:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 80004b8:	4b07      	ldr	r3, [pc, #28]	@ (80004d8 <WIZCHIP_WRITE_BUF+0xbc>)
 80004ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80004bc:	88fa      	ldrh	r2, [r7, #6]
 80004be:	4611      	mov	r1, r2
 80004c0:	68b8      	ldr	r0, [r7, #8]
 80004c2:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 80004c4:	4b04      	ldr	r3, [pc, #16]	@ (80004d8 <WIZCHIP_WRITE_BUF+0xbc>)
 80004c6:	699b      	ldr	r3, [r3, #24]
 80004c8:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80004ca:	4b03      	ldr	r3, [pc, #12]	@ (80004d8 <WIZCHIP_WRITE_BUF+0xbc>)
 80004cc:	691b      	ldr	r3, [r3, #16]
 80004ce:	4798      	blx	r3
}
 80004d0:	bf00      	nop
 80004d2:	3718      	adds	r7, #24
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bd80      	pop	{r7, pc}
 80004d8:	2000003c 	.word	0x2000003c

080004dc <default_mcu_reset>:

/*****************************************************************************
 * Public functions
 ****************************************************************************/
// Callback functions definition: MCU Reset / WDT Reset
void default_mcu_reset(void) {;}
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
 80004e0:	bf00      	nop
 80004e2:	46bd      	mov	sp, r7
 80004e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e8:	4770      	bx	lr

080004ea <default_wdt_reset>:
void default_wdt_reset(void) {;}
 80004ea:	b480      	push	{r7}
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	bf00      	nop
 80004f0:	46bd      	mov	sp, r7
 80004f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f6:	4770      	bx	lr

080004f8 <httpServer_Sockinit>:
void (*HTTPServer_ReStart)(void) = default_mcu_reset;
void (*HTTPServer_WDT_Reset)(void) = default_wdt_reset;

void httpServer_Sockinit(uint8_t cnt, uint8_t * socklist)
{
 80004f8:	b480      	push	{r7}
 80004fa:	b085      	sub	sp, #20
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	4603      	mov	r3, r0
 8000500:	6039      	str	r1, [r7, #0]
 8000502:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	for(i = 0; i < cnt; i++)
 8000504:	2300      	movs	r3, #0
 8000506:	73fb      	strb	r3, [r7, #15]
 8000508:	e009      	b.n	800051e <httpServer_Sockinit+0x26>
	{
		// Mapping the H/W socket numbers to the sequential index numbers
		HTTPSock_Num[i] = socklist[i];
 800050a:	7bfb      	ldrb	r3, [r7, #15]
 800050c:	683a      	ldr	r2, [r7, #0]
 800050e:	441a      	add	r2, r3
 8000510:	7bfb      	ldrb	r3, [r7, #15]
 8000512:	7811      	ldrb	r1, [r2, #0]
 8000514:	4a07      	ldr	r2, [pc, #28]	@ (8000534 <httpServer_Sockinit+0x3c>)
 8000516:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < cnt; i++)
 8000518:	7bfb      	ldrb	r3, [r7, #15]
 800051a:	3301      	adds	r3, #1
 800051c:	73fb      	strb	r3, [r7, #15]
 800051e:	7bfa      	ldrb	r2, [r7, #15]
 8000520:	79fb      	ldrb	r3, [r7, #7]
 8000522:	429a      	cmp	r2, r3
 8000524:	d3f1      	bcc.n	800050a <httpServer_Sockinit+0x12>
	}
}
 8000526:	bf00      	nop
 8000528:	bf00      	nop
 800052a:	3714      	adds	r7, #20
 800052c:	46bd      	mov	sp, r7
 800052e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000532:	4770      	bx	lr
 8000534:	200000dc 	.word	0x200000dc

08000538 <httpServer_init>:

	return -1;
}

void httpServer_init(uint8_t * tx_buf, uint8_t * rx_buf, uint8_t cnt, uint8_t * socklist)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b084      	sub	sp, #16
 800053c:	af00      	add	r7, sp, #0
 800053e:	60f8      	str	r0, [r7, #12]
 8000540:	60b9      	str	r1, [r7, #8]
 8000542:	603b      	str	r3, [r7, #0]
 8000544:	4613      	mov	r3, r2
 8000546:	71fb      	strb	r3, [r7, #7]
	// User's shared buffer
	pHTTP_TX = tx_buf;
 8000548:	4a07      	ldr	r2, [pc, #28]	@ (8000568 <httpServer_init+0x30>)
 800054a:	68fb      	ldr	r3, [r7, #12]
 800054c:	6013      	str	r3, [r2, #0]
	pHTTP_RX = rx_buf;
 800054e:	4a07      	ldr	r2, [pc, #28]	@ (800056c <httpServer_init+0x34>)
 8000550:	68bb      	ldr	r3, [r7, #8]
 8000552:	6013      	str	r3, [r2, #0]

	// H/W Socket number mapping
	httpServer_Sockinit(cnt, socklist);
 8000554:	79fb      	ldrb	r3, [r7, #7]
 8000556:	6839      	ldr	r1, [r7, #0]
 8000558:	4618      	mov	r0, r3
 800055a:	f7ff ffcd 	bl	80004f8 <httpServer_Sockinit>
}
 800055e:	bf00      	nop
 8000560:	3710      	adds	r7, #16
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	200000e8 	.word	0x200000e8
 800056c:	200000ec 	.word	0x200000ec

08000570 <reg_httpServer_cbfunc>:


/* Register the call back functions for HTTP Server */
void reg_httpServer_cbfunc(void(*mcu_reset)(void), void(*wdt_reset)(void))
{
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
 8000578:	6039      	str	r1, [r7, #0]
	// Callback: HW Reset and WDT reset function for each MCU platforms
	if(mcu_reset) HTTPServer_ReStart = mcu_reset;
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	2b00      	cmp	r3, #0
 800057e:	d002      	beq.n	8000586 <reg_httpServer_cbfunc+0x16>
 8000580:	4a07      	ldr	r2, [pc, #28]	@ (80005a0 <reg_httpServer_cbfunc+0x30>)
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	6013      	str	r3, [r2, #0]
	if(wdt_reset) HTTPServer_WDT_Reset = wdt_reset;
 8000586:	683b      	ldr	r3, [r7, #0]
 8000588:	2b00      	cmp	r3, #0
 800058a:	d002      	beq.n	8000592 <reg_httpServer_cbfunc+0x22>
 800058c:	4a05      	ldr	r2, [pc, #20]	@ (80005a4 <reg_httpServer_cbfunc+0x34>)
 800058e:	683b      	ldr	r3, [r7, #0]
 8000590:	6013      	str	r3, [r2, #0]
}
 8000592:	bf00      	nop
 8000594:	370c      	adds	r7, #12
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop
 80005a0:	20000000 	.word	0x20000000
 80005a4:	20000004 	.word	0x20000004

080005a8 <reg_httpServer_webContent>:
{
	return httpServer_tick_1s;
}

void reg_httpServer_webContent(uint8_t * content_name, uint8_t * content)
{
 80005a8:	b590      	push	{r4, r7, lr}
 80005aa:	b085      	sub	sp, #20
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
 80005b0:	6039      	str	r1, [r7, #0]
	uint16_t name_len;
	uint32_t content_len;

	if(content_name == NULL || content == NULL)
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d04e      	beq.n	8000656 <reg_httpServer_webContent+0xae>
 80005b8:	683b      	ldr	r3, [r7, #0]
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d04b      	beq.n	8000656 <reg_httpServer_webContent+0xae>
	{
		return;
	}
	else if(total_content_cnt >= MAX_CONTENT_CALLBACK)
 80005be:	4b29      	ldr	r3, [pc, #164]	@ (8000664 <reg_httpServer_webContent+0xbc>)
 80005c0:	881b      	ldrh	r3, [r3, #0]
 80005c2:	2b13      	cmp	r3, #19
 80005c4:	d849      	bhi.n	800065a <reg_httpServer_webContent+0xb2>
	{
		return;
	}

	name_len = strlen((char *)content_name);
 80005c6:	6878      	ldr	r0, [r7, #4]
 80005c8:	f7ff fe26 	bl	8000218 <strlen>
 80005cc:	4603      	mov	r3, r0
 80005ce:	81fb      	strh	r3, [r7, #14]
	content_len = strlen((char *)content);
 80005d0:	6838      	ldr	r0, [r7, #0]
 80005d2:	f7ff fe21 	bl	8000218 <strlen>
 80005d6:	60b8      	str	r0, [r7, #8]

	web_content[total_content_cnt].content_name = malloc(name_len+1);
 80005d8:	89fb      	ldrh	r3, [r7, #14]
 80005da:	3301      	adds	r3, #1
 80005dc:	461a      	mov	r2, r3
 80005de:	4b21      	ldr	r3, [pc, #132]	@ (8000664 <reg_httpServer_webContent+0xbc>)
 80005e0:	881b      	ldrh	r3, [r3, #0]
 80005e2:	461c      	mov	r4, r3
 80005e4:	4610      	mov	r0, r2
 80005e6:	f003 fadd 	bl	8003ba4 <malloc>
 80005ea:	4603      	mov	r3, r0
 80005ec:	4619      	mov	r1, r3
 80005ee:	4a1e      	ldr	r2, [pc, #120]	@ (8000668 <reg_httpServer_webContent+0xc0>)
 80005f0:	4623      	mov	r3, r4
 80005f2:	005b      	lsls	r3, r3, #1
 80005f4:	4423      	add	r3, r4
 80005f6:	009b      	lsls	r3, r3, #2
 80005f8:	4413      	add	r3, r2
 80005fa:	6019      	str	r1, [r3, #0]
	strcpy((char *)web_content[total_content_cnt].content_name, (const char *)content_name);
 80005fc:	4b19      	ldr	r3, [pc, #100]	@ (8000664 <reg_httpServer_webContent+0xbc>)
 80005fe:	881b      	ldrh	r3, [r3, #0]
 8000600:	4619      	mov	r1, r3
 8000602:	4a19      	ldr	r2, [pc, #100]	@ (8000668 <reg_httpServer_webContent+0xc0>)
 8000604:	460b      	mov	r3, r1
 8000606:	005b      	lsls	r3, r3, #1
 8000608:	440b      	add	r3, r1
 800060a:	009b      	lsls	r3, r3, #2
 800060c:	4413      	add	r3, r2
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	6879      	ldr	r1, [r7, #4]
 8000612:	4618      	mov	r0, r3
 8000614:	f003 fbc0 	bl	8003d98 <strcpy>
	web_content[total_content_cnt].content_len = content_len;
 8000618:	4b12      	ldr	r3, [pc, #72]	@ (8000664 <reg_httpServer_webContent+0xbc>)
 800061a:	881b      	ldrh	r3, [r3, #0]
 800061c:	4619      	mov	r1, r3
 800061e:	4a12      	ldr	r2, [pc, #72]	@ (8000668 <reg_httpServer_webContent+0xc0>)
 8000620:	460b      	mov	r3, r1
 8000622:	005b      	lsls	r3, r3, #1
 8000624:	440b      	add	r3, r1
 8000626:	009b      	lsls	r3, r3, #2
 8000628:	4413      	add	r3, r2
 800062a:	3304      	adds	r3, #4
 800062c:	68ba      	ldr	r2, [r7, #8]
 800062e:	601a      	str	r2, [r3, #0]
	web_content[total_content_cnt].content = content;
 8000630:	4b0c      	ldr	r3, [pc, #48]	@ (8000664 <reg_httpServer_webContent+0xbc>)
 8000632:	881b      	ldrh	r3, [r3, #0]
 8000634:	4619      	mov	r1, r3
 8000636:	4a0c      	ldr	r2, [pc, #48]	@ (8000668 <reg_httpServer_webContent+0xc0>)
 8000638:	460b      	mov	r3, r1
 800063a:	005b      	lsls	r3, r3, #1
 800063c:	440b      	add	r3, r1
 800063e:	009b      	lsls	r3, r3, #2
 8000640:	4413      	add	r3, r2
 8000642:	3308      	adds	r3, #8
 8000644:	683a      	ldr	r2, [r7, #0]
 8000646:	601a      	str	r2, [r3, #0]

	total_content_cnt++;
 8000648:	4b06      	ldr	r3, [pc, #24]	@ (8000664 <reg_httpServer_webContent+0xbc>)
 800064a:	881b      	ldrh	r3, [r3, #0]
 800064c:	3301      	adds	r3, #1
 800064e:	b29a      	uxth	r2, r3
 8000650:	4b04      	ldr	r3, [pc, #16]	@ (8000664 <reg_httpServer_webContent+0xbc>)
 8000652:	801a      	strh	r2, [r3, #0]
 8000654:	e002      	b.n	800065c <reg_httpServer_webContent+0xb4>
		return;
 8000656:	bf00      	nop
 8000658:	e000      	b.n	800065c <reg_httpServer_webContent+0xb4>
		return;
 800065a:	bf00      	nop
}
 800065c:	3714      	adds	r7, #20
 800065e:	46bd      	mov	sp, r7
 8000660:	bd90      	pop	{r4, r7, pc}
 8000662:	bf00      	nop
 8000664:	200000e4 	.word	0x200000e4
 8000668:	200000f0 	.word	0x200000f0

0800066c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000670:	f001 fa8f 	bl	8001b92 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000674:	f000 f868 	bl	8000748 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000678:	f000 f8e4 	bl	8000844 <MX_GPIO_Init>
  MX_SPI1_Init();
 800067c:	f000 f8a4 	bl	80007c8 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  reg_wizchip_cs_cbfunc(cs_select, cs_deselect);
 8000680:	4921      	ldr	r1, [pc, #132]	@ (8000708 <main+0x9c>)
 8000682:	4822      	ldr	r0, [pc, #136]	@ (800070c <main+0xa0>)
 8000684:	f000 fcec 	bl	8001060 <reg_wizchip_cs_cbfunc>
  reg_wizchip_spi_cbfunc(spi_readbyte, spi_writebyte);
 8000688:	4921      	ldr	r1, [pc, #132]	@ (8000710 <main+0xa4>)
 800068a:	4822      	ldr	r0, [pc, #136]	@ (8000714 <main+0xa8>)
 800068c:	f000 fd0e 	bl	80010ac <reg_wizchip_spi_cbfunc>
  reg_wizchip_cris_cbfunc(cris_enter, cris_exit);
 8000690:	4921      	ldr	r1, [pc, #132]	@ (8000718 <main+0xac>)
 8000692:	4822      	ldr	r0, [pc, #136]	@ (800071c <main+0xb0>)
 8000694:	f000 fcbe 	bl	8001014 <reg_wizchip_cris_cbfunc>
  reg_wizchip_spiburst_cbfunc(spi_readburst, spi_writeburst);
 8000698:	4921      	ldr	r1, [pc, #132]	@ (8000720 <main+0xb4>)
 800069a:	4822      	ldr	r0, [pc, #136]	@ (8000724 <main+0xb8>)
 800069c:	f000 fd32 	bl	8001104 <reg_wizchip_spiburst_cbfunc>

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80006a0:	2200      	movs	r2, #0
 80006a2:	2180      	movs	r1, #128	@ 0x80
 80006a4:	4820      	ldr	r0, [pc, #128]	@ (8000728 <main+0xbc>)
 80006a6:	f001 fd85 	bl	80021b4 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80006aa:	2001      	movs	r0, #1
 80006ac:	f001 fae2 	bl	8001c74 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 80006b0:	2201      	movs	r2, #1
 80006b2:	2180      	movs	r1, #128	@ 0x80
 80006b4:	481c      	ldr	r0, [pc, #112]	@ (8000728 <main+0xbc>)
 80006b6:	f001 fd7d 	bl	80021b4 <HAL_GPIO_WritePin>
  HAL_Delay(1600);
 80006ba:	f44f 60c8 	mov.w	r0, #1600	@ 0x640
 80006be:	f001 fad9 	bl	8001c74 <HAL_Delay>

  ctlnetwork(CN_SET_NETINFO, (void*)&gSetNetInfo);
 80006c2:	491a      	ldr	r1, [pc, #104]	@ (800072c <main+0xc0>)
 80006c4:	2000      	movs	r0, #0
 80006c6:	f000 fe39 	bl	800133c <ctlnetwork>
  ctlwizchip(CW_INIT_WIZCHIP,(void*)buffer_size_tx_rx);
 80006ca:	4919      	ldr	r1, [pc, #100]	@ (8000730 <main+0xc4>)
 80006cc:	2004      	movs	r0, #4
 80006ce:	f000 fd45 	bl	800115c <ctlwizchip>

  socket(0,Sn_MR_TCP,5555,SF_TCP_NODELAY | SF_IO_NONBLOCK);
 80006d2:	2321      	movs	r3, #33	@ 0x21
 80006d4:	f241 52b3 	movw	r2, #5555	@ 0x15b3
 80006d8:	2101      	movs	r1, #1
 80006da:	2000      	movs	r0, #0
 80006dc:	f000 f998 	bl	8000a10 <socket>

  httpServer_init(http_tx_buff,http_rx_buff,5,socknumlist);
 80006e0:	4b14      	ldr	r3, [pc, #80]	@ (8000734 <main+0xc8>)
 80006e2:	2205      	movs	r2, #5
 80006e4:	4914      	ldr	r1, [pc, #80]	@ (8000738 <main+0xcc>)
 80006e6:	4815      	ldr	r0, [pc, #84]	@ (800073c <main+0xd0>)
 80006e8:	f7ff ff26 	bl	8000538 <httpServer_init>
  reg_httpServer_cbfunc(NULL, NULL);
 80006ec:	2100      	movs	r1, #0
 80006ee:	2000      	movs	r0, #0
 80006f0:	f7ff ff3e 	bl	8000570 <reg_httpServer_cbfunc>
  reg_httpServer_webContent((uint8_t*)"index.html", (uint8_t*)webpage);
 80006f4:	4912      	ldr	r1, [pc, #72]	@ (8000740 <main+0xd4>)
 80006f6:	4813      	ldr	r0, [pc, #76]	@ (8000744 <main+0xd8>)
 80006f8:	f7ff ff56 	bl	80005a8 <reg_httpServer_webContent>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_5) == GPIO_PIN_RESET) //Если перемычка установлена
 80006fc:	2120      	movs	r1, #32
 80006fe:	480a      	ldr	r0, [pc, #40]	@ (8000728 <main+0xbc>)
 8000700:	f001 fd40 	bl	8002184 <HAL_GPIO_ReadPin>
 8000704:	e7fa      	b.n	80006fc <main+0x90>
 8000706:	bf00      	nop
 8000708:	0800091d 	.word	0x0800091d
 800070c:	08000905 	.word	0x08000905
 8000710:	08000991 	.word	0x08000991
 8000714:	08000971 	.word	0x08000971
 8000718:	08000953 	.word	0x08000953
 800071c:	08000935 	.word	0x08000935
 8000720:	080009dd 	.word	0x080009dd
 8000724:	080009b5 	.word	0x080009b5
 8000728:	48000800 	.word	0x48000800
 800072c:	20000008 	.word	0x20000008
 8000730:	20000020 	.word	0x20000020
 8000734:	20000030 	.word	0x20000030
 8000738:	20000244 	.word	0x20000244
 800073c:	20000a44 	.word	0x20000a44
 8000740:	08003dcc 	.word	0x08003dcc
 8000744:	08003dc0 	.word	0x08003dc0

08000748 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b094      	sub	sp, #80	@ 0x50
 800074c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800074e:	f107 0318 	add.w	r3, r7, #24
 8000752:	2238      	movs	r2, #56	@ 0x38
 8000754:	2100      	movs	r1, #0
 8000756:	4618      	mov	r0, r3
 8000758:	f003 fada 	bl	8003d10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800075c:	1d3b      	adds	r3, r7, #4
 800075e:	2200      	movs	r2, #0
 8000760:	601a      	str	r2, [r3, #0]
 8000762:	605a      	str	r2, [r3, #4]
 8000764:	609a      	str	r2, [r3, #8]
 8000766:	60da      	str	r2, [r3, #12]
 8000768:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800076a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800076e:	f001 fd39 	bl	80021e4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000772:	2302      	movs	r3, #2
 8000774:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000776:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800077a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800077c:	2340      	movs	r3, #64	@ 0x40
 800077e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000780:	2300      	movs	r3, #0
 8000782:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000784:	f107 0318 	add.w	r3, r7, #24
 8000788:	4618      	mov	r0, r3
 800078a:	f001 fddf 	bl	800234c <HAL_RCC_OscConfig>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000794:	f000 f936 	bl	8000a04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000798:	230f      	movs	r3, #15
 800079a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800079c:	2301      	movs	r3, #1
 800079e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007a0:	2300      	movs	r3, #0
 80007a2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007a4:	2300      	movs	r3, #0
 80007a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007a8:	2300      	movs	r3, #0
 80007aa:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007ac:	1d3b      	adds	r3, r7, #4
 80007ae:	2100      	movs	r1, #0
 80007b0:	4618      	mov	r0, r3
 80007b2:	f002 f8dd 	bl	8002970 <HAL_RCC_ClockConfig>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80007bc:	f000 f922 	bl	8000a04 <Error_Handler>
  }
}
 80007c0:	bf00      	nop
 80007c2:	3750      	adds	r7, #80	@ 0x50
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}

080007c8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007cc:	4b1b      	ldr	r3, [pc, #108]	@ (800083c <MX_SPI1_Init+0x74>)
 80007ce:	4a1c      	ldr	r2, [pc, #112]	@ (8000840 <MX_SPI1_Init+0x78>)
 80007d0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007d2:	4b1a      	ldr	r3, [pc, #104]	@ (800083c <MX_SPI1_Init+0x74>)
 80007d4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80007d8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007da:	4b18      	ldr	r3, [pc, #96]	@ (800083c <MX_SPI1_Init+0x74>)
 80007dc:	2200      	movs	r2, #0
 80007de:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007e0:	4b16      	ldr	r3, [pc, #88]	@ (800083c <MX_SPI1_Init+0x74>)
 80007e2:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80007e6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007e8:	4b14      	ldr	r3, [pc, #80]	@ (800083c <MX_SPI1_Init+0x74>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007ee:	4b13      	ldr	r3, [pc, #76]	@ (800083c <MX_SPI1_Init+0x74>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007f4:	4b11      	ldr	r3, [pc, #68]	@ (800083c <MX_SPI1_Init+0x74>)
 80007f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007fa:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007fc:	4b0f      	ldr	r3, [pc, #60]	@ (800083c <MX_SPI1_Init+0x74>)
 80007fe:	2200      	movs	r2, #0
 8000800:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000802:	4b0e      	ldr	r3, [pc, #56]	@ (800083c <MX_SPI1_Init+0x74>)
 8000804:	2200      	movs	r2, #0
 8000806:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000808:	4b0c      	ldr	r3, [pc, #48]	@ (800083c <MX_SPI1_Init+0x74>)
 800080a:	2200      	movs	r2, #0
 800080c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800080e:	4b0b      	ldr	r3, [pc, #44]	@ (800083c <MX_SPI1_Init+0x74>)
 8000810:	2200      	movs	r2, #0
 8000812:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000814:	4b09      	ldr	r3, [pc, #36]	@ (800083c <MX_SPI1_Init+0x74>)
 8000816:	2207      	movs	r2, #7
 8000818:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800081a:	4b08      	ldr	r3, [pc, #32]	@ (800083c <MX_SPI1_Init+0x74>)
 800081c:	2200      	movs	r2, #0
 800081e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000820:	4b06      	ldr	r3, [pc, #24]	@ (800083c <MX_SPI1_Init+0x74>)
 8000822:	2208      	movs	r2, #8
 8000824:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000826:	4805      	ldr	r0, [pc, #20]	@ (800083c <MX_SPI1_Init+0x74>)
 8000828:	f002 fa86 	bl	8002d38 <HAL_SPI_Init>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000832:	f000 f8e7 	bl	8000a04 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000836:	bf00      	nop
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	200001e0 	.word	0x200001e0
 8000840:	40013000 	.word	0x40013000

08000844 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b088      	sub	sp, #32
 8000848:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084a:	f107 030c 	add.w	r3, r7, #12
 800084e:	2200      	movs	r2, #0
 8000850:	601a      	str	r2, [r3, #0]
 8000852:	605a      	str	r2, [r3, #4]
 8000854:	609a      	str	r2, [r3, #8]
 8000856:	60da      	str	r2, [r3, #12]
 8000858:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800085a:	4b27      	ldr	r3, [pc, #156]	@ (80008f8 <MX_GPIO_Init+0xb4>)
 800085c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800085e:	4a26      	ldr	r2, [pc, #152]	@ (80008f8 <MX_GPIO_Init+0xb4>)
 8000860:	f043 0301 	orr.w	r3, r3, #1
 8000864:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000866:	4b24      	ldr	r3, [pc, #144]	@ (80008f8 <MX_GPIO_Init+0xb4>)
 8000868:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800086a:	f003 0301 	and.w	r3, r3, #1
 800086e:	60bb      	str	r3, [r7, #8]
 8000870:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000872:	4b21      	ldr	r3, [pc, #132]	@ (80008f8 <MX_GPIO_Init+0xb4>)
 8000874:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000876:	4a20      	ldr	r2, [pc, #128]	@ (80008f8 <MX_GPIO_Init+0xb4>)
 8000878:	f043 0304 	orr.w	r3, r3, #4
 800087c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800087e:	4b1e      	ldr	r3, [pc, #120]	@ (80008f8 <MX_GPIO_Init+0xb4>)
 8000880:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000882:	f003 0304 	and.w	r3, r3, #4
 8000886:	607b      	str	r3, [r7, #4]
 8000888:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800088a:	4b1b      	ldr	r3, [pc, #108]	@ (80008f8 <MX_GPIO_Init+0xb4>)
 800088c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800088e:	4a1a      	ldr	r2, [pc, #104]	@ (80008f8 <MX_GPIO_Init+0xb4>)
 8000890:	f043 0302 	orr.w	r3, r3, #2
 8000894:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000896:	4b18      	ldr	r3, [pc, #96]	@ (80008f8 <MX_GPIO_Init+0xb4>)
 8000898:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800089a:	f003 0302 	and.w	r3, r3, #2
 800089e:	603b      	str	r3, [r7, #0]
 80008a0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(W5500_RST_GPIO_Port, W5500_RST_Pin, GPIO_PIN_RESET);
 80008a2:	2200      	movs	r2, #0
 80008a4:	2180      	movs	r1, #128	@ 0x80
 80008a6:	4815      	ldr	r0, [pc, #84]	@ (80008fc <MX_GPIO_Init+0xb8>)
 80008a8:	f001 fc84 	bl	80021b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80008ac:	2200      	movs	r2, #0
 80008ae:	2140      	movs	r1, #64	@ 0x40
 80008b0:	4813      	ldr	r0, [pc, #76]	@ (8000900 <MX_GPIO_Init+0xbc>)
 80008b2:	f001 fc7f 	bl	80021b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : W5500_RST_Pin */
  GPIO_InitStruct.Pin = W5500_RST_Pin;
 80008b6:	2380      	movs	r3, #128	@ 0x80
 80008b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ba:	2301      	movs	r3, #1
 80008bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008be:	2300      	movs	r3, #0
 80008c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c2:	2300      	movs	r3, #0
 80008c4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(W5500_RST_GPIO_Port, &GPIO_InitStruct);
 80008c6:	f107 030c 	add.w	r3, r7, #12
 80008ca:	4619      	mov	r1, r3
 80008cc:	480b      	ldr	r0, [pc, #44]	@ (80008fc <MX_GPIO_Init+0xb8>)
 80008ce:	f001 fad7 	bl	8001e80 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 80008d2:	2340      	movs	r3, #64	@ 0x40
 80008d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d6:	2301      	movs	r3, #1
 80008d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008da:	2300      	movs	r3, #0
 80008dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008de:	2300      	movs	r3, #0
 80008e0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80008e2:	f107 030c 	add.w	r3, r7, #12
 80008e6:	4619      	mov	r1, r3
 80008e8:	4805      	ldr	r0, [pc, #20]	@ (8000900 <MX_GPIO_Init+0xbc>)
 80008ea:	f001 fac9 	bl	8001e80 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008ee:	bf00      	nop
 80008f0:	3720      	adds	r7, #32
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	40021000 	.word	0x40021000
 80008fc:	48000800 	.word	0x48000800
 8000900:	48000400 	.word	0x48000400

08000904 <cs_select>:

/* USER CODE BEGIN 4 */
void 	cs_select(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, RESET);
 8000908:	2200      	movs	r2, #0
 800090a:	2140      	movs	r1, #64	@ 0x40
 800090c:	4802      	ldr	r0, [pc, #8]	@ (8000918 <cs_select+0x14>)
 800090e:	f001 fc51 	bl	80021b4 <HAL_GPIO_WritePin>
}
 8000912:	bf00      	nop
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	48000400 	.word	0x48000400

0800091c <cs_deselect>:

void 	cs_deselect(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, SET);
 8000920:	2201      	movs	r2, #1
 8000922:	2140      	movs	r1, #64	@ 0x40
 8000924:	4802      	ldr	r0, [pc, #8]	@ (8000930 <cs_deselect+0x14>)
 8000926:	f001 fc45 	bl	80021b4 <HAL_GPIO_WritePin>
}
 800092a:	bf00      	nop
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	48000400 	.word	0x48000400

08000934 <cris_enter>:

void 	cris_enter(void)
{
 8000934:	b480      	push	{r7}
 8000936:	b083      	sub	sp, #12
 8000938:	af00      	add	r7, sp, #0
 800093a:	2301      	movs	r3, #1
 800093c:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	f383 8810 	msr	PRIMASK, r3
}
 8000944:	bf00      	nop
	__set_PRIMASK(1);
}
 8000946:	bf00      	nop
 8000948:	370c      	adds	r7, #12
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr

08000952 <cris_exit>:

void 	cris_exit(void)
{
 8000952:	b480      	push	{r7}
 8000954:	b083      	sub	sp, #12
 8000956:	af00      	add	r7, sp, #0
 8000958:	2300      	movs	r3, #0
 800095a:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	f383 8810 	msr	PRIMASK, r3
}
 8000962:	bf00      	nop
	__set_PRIMASK(0);
}
 8000964:	bf00      	nop
 8000966:	370c      	adds	r7, #12
 8000968:	46bd      	mov	sp, r7
 800096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096e:	4770      	bx	lr

08000970 <spi_readbyte>:

uint8_t spi_readbyte(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
	uint8_t data;
	HAL_SPI_Receive(&hspi1,&data,1,100);
 8000976:	1df9      	adds	r1, r7, #7
 8000978:	2364      	movs	r3, #100	@ 0x64
 800097a:	2201      	movs	r2, #1
 800097c:	4803      	ldr	r0, [pc, #12]	@ (800098c <spi_readbyte+0x1c>)
 800097e:	f002 fbfb 	bl	8003178 <HAL_SPI_Receive>
	return data;
 8000982:	79fb      	ldrb	r3, [r7, #7]
}
 8000984:	4618      	mov	r0, r3
 8000986:	3708      	adds	r7, #8
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	200001e0 	.word	0x200001e0

08000990 <spi_writebyte>:

void 	spi_writebyte(uint8_t wb)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
 8000996:	4603      	mov	r3, r0
 8000998:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi1,&wb,1,100);
 800099a:	1df9      	adds	r1, r7, #7
 800099c:	2364      	movs	r3, #100	@ 0x64
 800099e:	2201      	movs	r2, #1
 80009a0:	4803      	ldr	r0, [pc, #12]	@ (80009b0 <spi_writebyte+0x20>)
 80009a2:	f002 fa74 	bl	8002e8e <HAL_SPI_Transmit>
}
 80009a6:	bf00      	nop
 80009a8:	3708      	adds	r7, #8
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	200001e0 	.word	0x200001e0

080009b4 <spi_readburst>:

void 	spi_readburst(uint8_t* pBuf, uint16_t len)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
 80009bc:	460b      	mov	r3, r1
 80009be:	807b      	strh	r3, [r7, #2]
	HAL_SPI_Receive(&hspi1, pBuf, len, HAL_MAX_DELAY);
 80009c0:	887a      	ldrh	r2, [r7, #2]
 80009c2:	f04f 33ff 	mov.w	r3, #4294967295
 80009c6:	6879      	ldr	r1, [r7, #4]
 80009c8:	4803      	ldr	r0, [pc, #12]	@ (80009d8 <spi_readburst+0x24>)
 80009ca:	f002 fbd5 	bl	8003178 <HAL_SPI_Receive>
}
 80009ce:	bf00      	nop
 80009d0:	3708      	adds	r7, #8
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	200001e0 	.word	0x200001e0

080009dc <spi_writeburst>:

void 	spi_writeburst(uint8_t* pBuf, uint16_t len)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
 80009e4:	460b      	mov	r3, r1
 80009e6:	807b      	strh	r3, [r7, #2]
	HAL_SPI_Transmit(&hspi1, pBuf, len, HAL_MAX_DELAY);
 80009e8:	887a      	ldrh	r2, [r7, #2]
 80009ea:	f04f 33ff 	mov.w	r3, #4294967295
 80009ee:	6879      	ldr	r1, [r7, #4]
 80009f0:	4803      	ldr	r0, [pc, #12]	@ (8000a00 <spi_writeburst+0x24>)
 80009f2:	f002 fa4c 	bl	8002e8e <HAL_SPI_Transmit>
}
 80009f6:	bf00      	nop
 80009f8:	3708      	adds	r7, #8
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	200001e0 	.word	0x200001e0

08000a04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000a08:	b672      	cpsid	i
}
 8000a0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a0c:	bf00      	nop
 8000a0e:	e7fd      	b.n	8000a0c <Error_Handler+0x8>

08000a10 <socket>:




int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{ 
 8000a10:	b590      	push	{r4, r7, lr}
 8000a12:	b089      	sub	sp, #36	@ 0x24
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	4604      	mov	r4, r0
 8000a18:	4608      	mov	r0, r1
 8000a1a:	4611      	mov	r1, r2
 8000a1c:	461a      	mov	r2, r3
 8000a1e:	4623      	mov	r3, r4
 8000a20:	71fb      	strb	r3, [r7, #7]
 8000a22:	4603      	mov	r3, r0
 8000a24:	71bb      	strb	r3, [r7, #6]
 8000a26:	460b      	mov	r3, r1
 8000a28:	80bb      	strh	r3, [r7, #4]
 8000a2a:	4613      	mov	r3, r2
 8000a2c:	70fb      	strb	r3, [r7, #3]

   uint8_t taddr[16];
   uint16_t local_port=0;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	83fb      	strh	r3, [r7, #30]
   CHECK_SOCKNUM(); 
 8000a32:	79fb      	ldrb	r3, [r7, #7]
 8000a34:	2b08      	cmp	r3, #8
 8000a36:	d902      	bls.n	8000a3e <socket+0x2e>
 8000a38:	f04f 33ff 	mov.w	r3, #4294967295
 8000a3c:	e103      	b.n	8000c46 <socket+0x236>
   switch (protocol & 0x0F)
 8000a3e:	79bb      	ldrb	r3, [r7, #6]
 8000a40:	f003 030f 	and.w	r3, r3, #15
 8000a44:	3b01      	subs	r3, #1
 8000a46:	2b0d      	cmp	r3, #13
 8000a48:	d82c      	bhi.n	8000aa4 <socket+0x94>
 8000a4a:	a201      	add	r2, pc, #4	@ (adr r2, 8000a50 <socket+0x40>)
 8000a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a50:	08000a89 	.word	0x08000a89
 8000a54:	08000aab 	.word	0x08000aab
 8000a58:	08000aab 	.word	0x08000aab
 8000a5c:	08000aab 	.word	0x08000aab
 8000a60:	08000aa5 	.word	0x08000aa5
 8000a64:	08000aa5 	.word	0x08000aa5
 8000a68:	08000aa5 	.word	0x08000aa5
 8000a6c:	08000aa5 	.word	0x08000aa5
 8000a70:	08000aa5 	.word	0x08000aa5
 8000a74:	08000aab 	.word	0x08000aab
 8000a78:	08000aab 	.word	0x08000aab
 8000a7c:	08000aa5 	.word	0x08000aa5
 8000a80:	08000aa5 	.word	0x08000aa5
 8000a84:	08000aab 	.word	0x08000aab
         break;
#else  
         case Sn_MR_TCP :
         {
            uint8_t taddr;
            getSIPR((uint8_t*)&taddr);
 8000a88:	f107 030b 	add.w	r3, r7, #11
 8000a8c:	2204      	movs	r2, #4
 8000a8e:	4619      	mov	r1, r3
 8000a90:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8000a94:	f7ff fc62 	bl	800035c <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8000a98:	7afb      	ldrb	r3, [r7, #11]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d107      	bne.n	8000aae <socket+0x9e>
 8000a9e:	f06f 0302 	mvn.w	r3, #2
 8000aa2:	e0d0      	b.n	8000c46 <socket+0x236>
      case Sn_MR_MACRAW :
      case Sn_MR_IPRAW4 :
      case Sn_MR_IPRAW6 :
         break; 
      default :
        return SOCKERR_SOCKMODE;
 8000aa4:	f06f 0304 	mvn.w	r3, #4
 8000aa8:	e0cd      	b.n	8000c46 <socket+0x236>
         break; 
 8000aaa:	bf00      	nop
 8000aac:	e000      	b.n	8000ab0 <socket+0xa0>
            break;
 8000aae:	bf00      	nop
   } 

   if((flag & 0x04)) return SOCKERR_SOCKFLAG;
 8000ab0:	78fb      	ldrb	r3, [r7, #3]
 8000ab2:	f003 0304 	and.w	r3, r3, #4
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d002      	beq.n	8000ac0 <socket+0xb0>
 8000aba:	f06f 0305 	mvn.w	r3, #5
 8000abe:	e0c2      	b.n	8000c46 <socket+0x236>
   if(flag != 0)
 8000ac0:	78fb      	ldrb	r3, [r7, #3]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d028      	beq.n	8000b18 <socket+0x108>
   {
      switch(protocol)
 8000ac6:	79bb      	ldrb	r3, [r7, #6]
 8000ac8:	2b01      	cmp	r3, #1
 8000aca:	d002      	beq.n	8000ad2 <socket+0xc2>
 8000acc:	2b02      	cmp	r3, #2
 8000ace:	d008      	beq.n	8000ae2 <socket+0xd2>
         break;

#endif 

         default:
            break;
 8000ad0:	e022      	b.n	8000b18 <socket+0x108>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 8000ad2:	78fb      	ldrb	r3, [r7, #3]
 8000ad4:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d11a      	bne.n	8000b12 <socket+0x102>
 8000adc:	f06f 0305 	mvn.w	r3, #5
 8000ae0:	e0b1      	b.n	8000c46 <socket+0x236>
   	      if(flag & SF_IGMP_VER2)
 8000ae2:	78fb      	ldrb	r3, [r7, #3]
 8000ae4:	f003 0320 	and.w	r3, r3, #32
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d006      	beq.n	8000afa <socket+0xea>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8000aec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	db02      	blt.n	8000afa <socket+0xea>
 8000af4:	f06f 0305 	mvn.w	r3, #5
 8000af8:	e0a5      	b.n	8000c46 <socket+0x236>
      	      if(flag & SF_UNI_BLOCK)
 8000afa:	78fb      	ldrb	r3, [r7, #3]
 8000afc:	f003 0310 	and.w	r3, r3, #16
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d008      	beq.n	8000b16 <socket+0x106>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8000b04:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	db04      	blt.n	8000b16 <socket+0x106>
 8000b0c:	f06f 0305 	mvn.w	r3, #5
 8000b10:	e099      	b.n	8000c46 <socket+0x236>
   	      break;
 8000b12:	bf00      	nop
 8000b14:	e000      	b.n	8000b18 <socket+0x108>
         break;
 8000b16:	bf00      	nop
      }
   }
   close(sn);
 8000b18:	79fb      	ldrb	r3, [r7, #7]
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f000 f8a2 	bl	8000c64 <close>
   setSn_MR(sn,(protocol | (flag & 0xF0)));
 8000b20:	79fb      	ldrb	r3, [r7, #7]
 8000b22:	009b      	lsls	r3, r3, #2
 8000b24:	3301      	adds	r3, #1
 8000b26:	00db      	lsls	r3, r3, #3
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000b2e:	f023 030f 	bic.w	r3, r3, #15
 8000b32:	b25a      	sxtb	r2, r3
 8000b34:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000b38:	4313      	orrs	r3, r2
 8000b3a:	b25b      	sxtb	r3, r3
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	4619      	mov	r1, r3
 8000b40:	f7ff fbbe 	bl	80002c0 <WIZCHIP_WRITE>
#ifdef IPV6_AVAILABLE
   setSn_MR2(sn, flag & 0x03);  
#endif 
   if(!port)
 8000b44:	88bb      	ldrh	r3, [r7, #4]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d110      	bne.n	8000b6c <socket+0x15c>
   {
      port = sock_any_port++;
 8000b4a:	4b41      	ldr	r3, [pc, #260]	@ (8000c50 <socket+0x240>)
 8000b4c:	881b      	ldrh	r3, [r3, #0]
 8000b4e:	1c5a      	adds	r2, r3, #1
 8000b50:	b291      	uxth	r1, r2
 8000b52:	4a3f      	ldr	r2, [pc, #252]	@ (8000c50 <socket+0x240>)
 8000b54:	8011      	strh	r1, [r2, #0]
 8000b56:	80bb      	strh	r3, [r7, #4]
      if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8000b58:	4b3d      	ldr	r3, [pc, #244]	@ (8000c50 <socket+0x240>)
 8000b5a:	881b      	ldrh	r3, [r3, #0]
 8000b5c:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 8000b60:	4293      	cmp	r3, r2
 8000b62:	d103      	bne.n	8000b6c <socket+0x15c>
 8000b64:	4b3a      	ldr	r3, [pc, #232]	@ (8000c50 <socket+0x240>)
 8000b66:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8000b6a:	801a      	strh	r2, [r3, #0]
   }
   setSn_PORTR(sn,port);
 8000b6c:	79fb      	ldrb	r3, [r7, #7]
 8000b6e:	009b      	lsls	r3, r3, #2
 8000b70:	3301      	adds	r3, #1
 8000b72:	00db      	lsls	r3, r3, #3
 8000b74:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8000b78:	461a      	mov	r2, r3
 8000b7a:	88bb      	ldrh	r3, [r7, #4]
 8000b7c:	0a1b      	lsrs	r3, r3, #8
 8000b7e:	b29b      	uxth	r3, r3
 8000b80:	b2db      	uxtb	r3, r3
 8000b82:	4619      	mov	r1, r3
 8000b84:	4610      	mov	r0, r2
 8000b86:	f7ff fb9b 	bl	80002c0 <WIZCHIP_WRITE>
 8000b8a:	79fb      	ldrb	r3, [r7, #7]
 8000b8c:	009b      	lsls	r3, r3, #2
 8000b8e:	3301      	adds	r3, #1
 8000b90:	00db      	lsls	r3, r3, #3
 8000b92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8000b96:	461a      	mov	r2, r3
 8000b98:	88bb      	ldrh	r3, [r7, #4]
 8000b9a:	b2db      	uxtb	r3, r3
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	4610      	mov	r0, r2
 8000ba0:	f7ff fb8e 	bl	80002c0 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8000ba4:	79fb      	ldrb	r3, [r7, #7]
 8000ba6:	009b      	lsls	r3, r3, #2
 8000ba8:	3301      	adds	r3, #1
 8000baa:	00db      	lsls	r3, r3, #3
 8000bac:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8000bb0:	2101      	movs	r1, #1
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f7ff fb84 	bl	80002c0 <WIZCHIP_WRITE>

   while(getSn_CR(sn));
 8000bb8:	bf00      	nop
 8000bba:	79fb      	ldrb	r3, [r7, #7]
 8000bbc:	009b      	lsls	r3, r3, #2
 8000bbe:	3301      	adds	r3, #1
 8000bc0:	00db      	lsls	r3, r3, #3
 8000bc2:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f7ff fb2e 	bl	8000228 <WIZCHIP_READ>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d1f3      	bne.n	8000bba <socket+0x1aa>

   sock_io_mode &= ~(1 <<sn);
 8000bd2:	79fb      	ldrb	r3, [r7, #7]
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bda:	b21b      	sxth	r3, r3
 8000bdc:	43db      	mvns	r3, r3
 8000bde:	b21a      	sxth	r2, r3
 8000be0:	4b1c      	ldr	r3, [pc, #112]	@ (8000c54 <socket+0x244>)
 8000be2:	881b      	ldrh	r3, [r3, #0]
 8000be4:	b21b      	sxth	r3, r3
 8000be6:	4013      	ands	r3, r2
 8000be8:	b21b      	sxth	r3, r3
 8000bea:	b29a      	uxth	r2, r3
 8000bec:	4b19      	ldr	r3, [pc, #100]	@ (8000c54 <socket+0x244>)
 8000bee:	801a      	strh	r2, [r3, #0]
   sock_io_mode |= ((flag & (SF_IO_NONBLOCK>>3)) << sn);
 8000bf0:	4b18      	ldr	r3, [pc, #96]	@ (8000c54 <socket+0x244>)
 8000bf2:	881a      	ldrh	r2, [r3, #0]
 8000bf4:	4b17      	ldr	r3, [pc, #92]	@ (8000c54 <socket+0x244>)
 8000bf6:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8000bf8:	79fb      	ldrb	r3, [r7, #7]
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000c00:	b21b      	sxth	r3, r3
 8000c02:	43db      	mvns	r3, r3
 8000c04:	b21a      	sxth	r2, r3
 8000c06:	4b14      	ldr	r3, [pc, #80]	@ (8000c58 <socket+0x248>)
 8000c08:	881b      	ldrh	r3, [r3, #0]
 8000c0a:	b21b      	sxth	r3, r3
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	b21b      	sxth	r3, r3
 8000c10:	b29a      	uxth	r2, r3
 8000c12:	4b11      	ldr	r3, [pc, #68]	@ (8000c58 <socket+0x248>)
 8000c14:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8000c16:	79fb      	ldrb	r3, [r7, #7]
 8000c18:	4a10      	ldr	r2, [pc, #64]	@ (8000c5c <socket+0x24c>)
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   sock_pack_info[sn] = PACK_NONE;
 8000c20:	79fb      	ldrb	r3, [r7, #7]
 8000c22:	4a0f      	ldr	r2, [pc, #60]	@ (8000c60 <socket+0x250>)
 8000c24:	2100      	movs	r1, #0
 8000c26:	54d1      	strb	r1, [r2, r3]

   while(getSn_SR(sn) == SOCK_CLOSED) ;
 8000c28:	bf00      	nop
 8000c2a:	79fb      	ldrb	r3, [r7, #7]
 8000c2c:	009b      	lsls	r3, r3, #2
 8000c2e:	3301      	adds	r3, #1
 8000c30:	00db      	lsls	r3, r3, #3
 8000c32:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8000c36:	4618      	mov	r0, r3
 8000c38:	f7ff faf6 	bl	8000228 <WIZCHIP_READ>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d0f3      	beq.n	8000c2a <socket+0x21a>
//   printf("[%d]%d\r\n", sn, getSn_PORTR(sn));
   return sn;
 8000c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
}  
 8000c46:	4618      	mov	r0, r3
 8000c48:	3724      	adds	r7, #36	@ 0x24
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd90      	pop	{r4, r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	20000034 	.word	0x20000034
 8000c54:	20001244 	.word	0x20001244
 8000c58:	20001246 	.word	0x20001246
 8000c5c:	20001248 	.word	0x20001248
 8000c60:	20001258 	.word	0x20001258

08000c64 <close>:


int8_t close(uint8_t sn)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 8000c6e:	79fb      	ldrb	r3, [r7, #7]
 8000c70:	2b08      	cmp	r3, #8
 8000c72:	d902      	bls.n	8000c7a <close+0x16>
 8000c74:	f04f 33ff 	mov.w	r3, #4294967295
 8000c78:	e055      	b.n	8000d26 <close+0xc2>
   setSn_CR(sn,Sn_CR_CLOSE);
 8000c7a:	79fb      	ldrb	r3, [r7, #7]
 8000c7c:	009b      	lsls	r3, r3, #2
 8000c7e:	3301      	adds	r3, #1
 8000c80:	00db      	lsls	r3, r3, #3
 8000c82:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8000c86:	2110      	movs	r1, #16
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f7ff fb19 	bl	80002c0 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while( getSn_CR(sn) );
 8000c8e:	bf00      	nop
 8000c90:	79fb      	ldrb	r3, [r7, #7]
 8000c92:	009b      	lsls	r3, r3, #2
 8000c94:	3301      	adds	r3, #1
 8000c96:	00db      	lsls	r3, r3, #3
 8000c98:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f7ff fac3 	bl	8000228 <WIZCHIP_READ>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d1f3      	bne.n	8000c90 <close+0x2c>
   /* clear all interrupt of SOCKETn. */
   setSn_IR(sn, 0xFF);  	
 8000ca8:	79fb      	ldrb	r3, [r7, #7]
 8000caa:	009b      	lsls	r3, r3, #2
 8000cac:	3301      	adds	r3, #1
 8000cae:	00db      	lsls	r3, r3, #3
 8000cb0:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000cb4:	211f      	movs	r1, #31
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f7ff fb02 	bl	80002c0 <WIZCHIP_WRITE>
   //setSn_IRCLR(sn, 0xFF);  
   /* Release the sock_io_mode of SOCKETn. */
   sock_io_mode &= ~(1<<sn); 
 8000cbc:	79fb      	ldrb	r3, [r7, #7]
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc4:	b21b      	sxth	r3, r3
 8000cc6:	43db      	mvns	r3, r3
 8000cc8:	b21a      	sxth	r2, r3
 8000cca:	4b19      	ldr	r3, [pc, #100]	@ (8000d30 <close+0xcc>)
 8000ccc:	881b      	ldrh	r3, [r3, #0]
 8000cce:	b21b      	sxth	r3, r3
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	b21b      	sxth	r3, r3
 8000cd4:	b29a      	uxth	r2, r3
 8000cd6:	4b16      	ldr	r3, [pc, #88]	@ (8000d30 <close+0xcc>)
 8000cd8:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8000cda:	79fb      	ldrb	r3, [r7, #7]
 8000cdc:	4a15      	ldr	r2, [pc, #84]	@ (8000d34 <close+0xd0>)
 8000cde:	2100      	movs	r1, #0
 8000ce0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   sock_is_sending &= ~(1<<sn);
 8000ce4:	79fb      	ldrb	r3, [r7, #7]
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cec:	b21b      	sxth	r3, r3
 8000cee:	43db      	mvns	r3, r3
 8000cf0:	b21a      	sxth	r2, r3
 8000cf2:	4b11      	ldr	r3, [pc, #68]	@ (8000d38 <close+0xd4>)
 8000cf4:	881b      	ldrh	r3, [r3, #0]
 8000cf6:	b21b      	sxth	r3, r3
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	b21b      	sxth	r3, r3
 8000cfc:	b29a      	uxth	r2, r3
 8000cfe:	4b0e      	ldr	r3, [pc, #56]	@ (8000d38 <close+0xd4>)
 8000d00:	801a      	strh	r2, [r3, #0]
   sock_pack_info[sn] = PACK_NONE;
 8000d02:	79fb      	ldrb	r3, [r7, #7]
 8000d04:	4a0d      	ldr	r2, [pc, #52]	@ (8000d3c <close+0xd8>)
 8000d06:	2100      	movs	r1, #0
 8000d08:	54d1      	strb	r1, [r2, r3]
   while(getSn_SR(sn) != SOCK_CLOSED);
 8000d0a:	bf00      	nop
 8000d0c:	79fb      	ldrb	r3, [r7, #7]
 8000d0e:	009b      	lsls	r3, r3, #2
 8000d10:	3301      	adds	r3, #1
 8000d12:	00db      	lsls	r3, r3, #3
 8000d14:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f7ff fa85 	bl	8000228 <WIZCHIP_READ>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d1f3      	bne.n	8000d0c <close+0xa8>
   return SOCK_OK;
 8000d24:	2301      	movs	r3, #1
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	3708      	adds	r7, #8
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	20001244 	.word	0x20001244
 8000d34:	20001248 	.word	0x20001248
 8000d38:	20001246 	.word	0x20001246
 8000d3c:	20001258 	.word	0x20001258

08000d40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d46:	4b0f      	ldr	r3, [pc, #60]	@ (8000d84 <HAL_MspInit+0x44>)
 8000d48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d4a:	4a0e      	ldr	r2, [pc, #56]	@ (8000d84 <HAL_MspInit+0x44>)
 8000d4c:	f043 0301 	orr.w	r3, r3, #1
 8000d50:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d52:	4b0c      	ldr	r3, [pc, #48]	@ (8000d84 <HAL_MspInit+0x44>)
 8000d54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d56:	f003 0301 	and.w	r3, r3, #1
 8000d5a:	607b      	str	r3, [r7, #4]
 8000d5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d5e:	4b09      	ldr	r3, [pc, #36]	@ (8000d84 <HAL_MspInit+0x44>)
 8000d60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d62:	4a08      	ldr	r2, [pc, #32]	@ (8000d84 <HAL_MspInit+0x44>)
 8000d64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d68:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d6a:	4b06      	ldr	r3, [pc, #24]	@ (8000d84 <HAL_MspInit+0x44>)
 8000d6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d72:	603b      	str	r3, [r7, #0]
 8000d74:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000d76:	f001 fad9 	bl	800232c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d7a:	bf00      	nop
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	40021000 	.word	0x40021000

08000d88 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b08a      	sub	sp, #40	@ 0x28
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d90:	f107 0314 	add.w	r3, r7, #20
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
 8000d98:	605a      	str	r2, [r3, #4]
 8000d9a:	609a      	str	r2, [r3, #8]
 8000d9c:	60da      	str	r2, [r3, #12]
 8000d9e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a17      	ldr	r2, [pc, #92]	@ (8000e04 <HAL_SPI_MspInit+0x7c>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d128      	bne.n	8000dfc <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000daa:	4b17      	ldr	r3, [pc, #92]	@ (8000e08 <HAL_SPI_MspInit+0x80>)
 8000dac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000dae:	4a16      	ldr	r2, [pc, #88]	@ (8000e08 <HAL_SPI_MspInit+0x80>)
 8000db0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000db4:	6613      	str	r3, [r2, #96]	@ 0x60
 8000db6:	4b14      	ldr	r3, [pc, #80]	@ (8000e08 <HAL_SPI_MspInit+0x80>)
 8000db8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000dba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000dbe:	613b      	str	r3, [r7, #16]
 8000dc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc2:	4b11      	ldr	r3, [pc, #68]	@ (8000e08 <HAL_SPI_MspInit+0x80>)
 8000dc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dc6:	4a10      	ldr	r2, [pc, #64]	@ (8000e08 <HAL_SPI_MspInit+0x80>)
 8000dc8:	f043 0301 	orr.w	r3, r3, #1
 8000dcc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dce:	4b0e      	ldr	r3, [pc, #56]	@ (8000e08 <HAL_SPI_MspInit+0x80>)
 8000dd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dd2:	f003 0301 	and.w	r3, r3, #1
 8000dd6:	60fb      	str	r3, [r7, #12]
 8000dd8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000dda:	23e0      	movs	r3, #224	@ 0xe0
 8000ddc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dde:	2302      	movs	r3, #2
 8000de0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de2:	2300      	movs	r3, #0
 8000de4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de6:	2300      	movs	r3, #0
 8000de8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000dea:	2305      	movs	r3, #5
 8000dec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dee:	f107 0314 	add.w	r3, r7, #20
 8000df2:	4619      	mov	r1, r3
 8000df4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000df8:	f001 f842 	bl	8001e80 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000dfc:	bf00      	nop
 8000dfe:	3728      	adds	r7, #40	@ 0x28
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	40013000 	.word	0x40013000
 8000e08:	40021000 	.word	0x40021000

08000e0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e10:	bf00      	nop
 8000e12:	e7fd      	b.n	8000e10 <NMI_Handler+0x4>

08000e14 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e18:	bf00      	nop
 8000e1a:	e7fd      	b.n	8000e18 <HardFault_Handler+0x4>

08000e1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e20:	bf00      	nop
 8000e22:	e7fd      	b.n	8000e20 <MemManage_Handler+0x4>

08000e24 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e28:	bf00      	nop
 8000e2a:	e7fd      	b.n	8000e28 <BusFault_Handler+0x4>

08000e2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e30:	bf00      	nop
 8000e32:	e7fd      	b.n	8000e30 <UsageFault_Handler+0x4>

08000e34 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e38:	bf00      	nop
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr

08000e42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e42:	b480      	push	{r7}
 8000e44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e46:	bf00      	nop
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr

08000e50 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e54:	bf00      	nop
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr

08000e5e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e5e:	b580      	push	{r7, lr}
 8000e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e62:	f000 fee9 	bl	8001c38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e66:	bf00      	nop
 8000e68:	bd80      	pop	{r7, pc}
	...

08000e6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b086      	sub	sp, #24
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e74:	4a14      	ldr	r2, [pc, #80]	@ (8000ec8 <_sbrk+0x5c>)
 8000e76:	4b15      	ldr	r3, [pc, #84]	@ (8000ecc <_sbrk+0x60>)
 8000e78:	1ad3      	subs	r3, r2, r3
 8000e7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e80:	4b13      	ldr	r3, [pc, #76]	@ (8000ed0 <_sbrk+0x64>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d102      	bne.n	8000e8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e88:	4b11      	ldr	r3, [pc, #68]	@ (8000ed0 <_sbrk+0x64>)
 8000e8a:	4a12      	ldr	r2, [pc, #72]	@ (8000ed4 <_sbrk+0x68>)
 8000e8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e8e:	4b10      	ldr	r3, [pc, #64]	@ (8000ed0 <_sbrk+0x64>)
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4413      	add	r3, r2
 8000e96:	693a      	ldr	r2, [r7, #16]
 8000e98:	429a      	cmp	r2, r3
 8000e9a:	d207      	bcs.n	8000eac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e9c:	f002 ff50 	bl	8003d40 <__errno>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	220c      	movs	r2, #12
 8000ea4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ea6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eaa:	e009      	b.n	8000ec0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000eac:	4b08      	ldr	r3, [pc, #32]	@ (8000ed0 <_sbrk+0x64>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000eb2:	4b07      	ldr	r3, [pc, #28]	@ (8000ed0 <_sbrk+0x64>)
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4413      	add	r3, r2
 8000eba:	4a05      	ldr	r2, [pc, #20]	@ (8000ed0 <_sbrk+0x64>)
 8000ebc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ebe:	68fb      	ldr	r3, [r7, #12]
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	3718      	adds	r7, #24
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	20020000 	.word	0x20020000
 8000ecc:	00000400 	.word	0x00000400
 8000ed0:	20001260 	.word	0x20001260
 8000ed4:	200013b8 	.word	0x200013b8

08000ed8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000edc:	4b06      	ldr	r3, [pc, #24]	@ (8000ef8 <SystemInit+0x20>)
 8000ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ee2:	4a05      	ldr	r2, [pc, #20]	@ (8000ef8 <SystemInit+0x20>)
 8000ee4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ee8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000eec:	bf00      	nop
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	e000ed00 	.word	0xe000ed00

08000efc <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	bf00      	nop
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr

08000f0a <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 8000f0a:	b480      	push	{r7}
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	bf00      	nop
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr

08000f18 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	bf00      	nop
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr

08000f26 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8000f26:	b480      	push	{r7}
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	bf00      	nop
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr

08000f34 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	4618      	mov	r0, r3
 8000f44:	370c      	adds	r7, #12
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr

08000f4e <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8000f4e:	b480      	push	{r7}
 8000f50:	b083      	sub	sp, #12
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	6078      	str	r0, [r7, #4]
 8000f56:	460b      	mov	r3, r1
 8000f58:	70fb      	strb	r3, [r7, #3]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	78fa      	ldrb	r2, [r7, #3]
 8000f5e:	701a      	strb	r2, [r3, #0]
 8000f60:	bf00      	nop
 8000f62:	370c      	adds	r7, #12
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr

08000f6c <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	2300      	movs	r3, #0
 8000f72:	4618      	mov	r0, r3
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr

08000f7c <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4603      	mov	r3, r0
 8000f84:	71fb      	strb	r3, [r7, #7]
 8000f86:	bf00      	nop
 8000f88:	370c      	adds	r7, #12
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
	...

08000f94 <wizchip_spi_readburst>:
 */
//void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}; 
#if 1
// 20231018 taylor
void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len)
{
 8000f94:	b590      	push	{r4, r7, lr}
 8000f96:	b085      	sub	sp, #20
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
 8000f9c:	460b      	mov	r3, r1
 8000f9e:	807b      	strh	r3, [r7, #2]
	for(uint16_t i=0; i<len; i++)
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	81fb      	strh	r3, [r7, #14]
 8000fa4:	e00a      	b.n	8000fbc <wizchip_spi_readburst+0x28>
	{
		*pBuf++ = WIZCHIP.IF.SPI._read_byte();
 8000fa6:	4b0a      	ldr	r3, [pc, #40]	@ (8000fd0 <wizchip_spi_readburst+0x3c>)
 8000fa8:	69db      	ldr	r3, [r3, #28]
 8000faa:	687c      	ldr	r4, [r7, #4]
 8000fac:	1c62      	adds	r2, r4, #1
 8000fae:	607a      	str	r2, [r7, #4]
 8000fb0:	4798      	blx	r3
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	7023      	strb	r3, [r4, #0]
	for(uint16_t i=0; i<len; i++)
 8000fb6:	89fb      	ldrh	r3, [r7, #14]
 8000fb8:	3301      	adds	r3, #1
 8000fba:	81fb      	strh	r3, [r7, #14]
 8000fbc:	89fa      	ldrh	r2, [r7, #14]
 8000fbe:	887b      	ldrh	r3, [r7, #2]
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	d3f0      	bcc.n	8000fa6 <wizchip_spi_readburst+0x12>
	}
}
 8000fc4:	bf00      	nop
 8000fc6:	bf00      	nop
 8000fc8:	3714      	adds	r7, #20
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd90      	pop	{r4, r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	2000003c 	.word	0x2000003c

08000fd4 <wizchip_spi_writeburst>:
 */
//void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
#if 1
// 20231018 taylor
void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b084      	sub	sp, #16
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
 8000fdc:	460b      	mov	r3, r1
 8000fde:	807b      	strh	r3, [r7, #2]
	for(uint16_t i=0; i<len; i++)
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	81fb      	strh	r3, [r7, #14]
 8000fe4:	e00a      	b.n	8000ffc <wizchip_spi_writeburst+0x28>
	{
		WIZCHIP.IF.SPI._write_byte(*pBuf++);
 8000fe6:	4b0a      	ldr	r3, [pc, #40]	@ (8001010 <wizchip_spi_writeburst+0x3c>)
 8000fe8:	6a1a      	ldr	r2, [r3, #32]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	1c59      	adds	r1, r3, #1
 8000fee:	6079      	str	r1, [r7, #4]
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	4790      	blx	r2
	for(uint16_t i=0; i<len; i++)
 8000ff6:	89fb      	ldrh	r3, [r7, #14]
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	81fb      	strh	r3, [r7, #14]
 8000ffc:	89fa      	ldrh	r2, [r7, #14]
 8000ffe:	887b      	ldrh	r3, [r7, #2]
 8001000:	429a      	cmp	r2, r3
 8001002:	d3f0      	bcc.n	8000fe6 <wizchip_spi_writeburst+0x12>
	}
}
 8001004:	bf00      	nop
 8001006:	bf00      	nop
 8001008:	3710      	adds	r7, #16
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	2000003c 	.word	0x2000003c

08001014 <reg_wizchip_cris_cbfunc>:
static uint8_t      _DNS6_[16];    ///< DSN server IPv6 address
static ipconf_mode  _IPMODE_;      ///< IP configuration mode
#endif

void reg_wizchip_cris_cbfunc(void(*cris_en)(void), void(*cris_ex)(void))
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
 800101c:	6039      	str	r1, [r7, #0]
   if(!cris_en || !cris_ex)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d002      	beq.n	800102a <reg_wizchip_cris_cbfunc+0x16>
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d106      	bne.n	8001038 <reg_wizchip_cris_cbfunc+0x24>
   {
      WIZCHIP.CRIS._enter = wizchip_cris_enter;
 800102a:	4b0a      	ldr	r3, [pc, #40]	@ (8001054 <reg_wizchip_cris_cbfunc+0x40>)
 800102c:	4a0a      	ldr	r2, [pc, #40]	@ (8001058 <reg_wizchip_cris_cbfunc+0x44>)
 800102e:	60da      	str	r2, [r3, #12]
      WIZCHIP.CRIS._exit  = wizchip_cris_exit;
 8001030:	4b08      	ldr	r3, [pc, #32]	@ (8001054 <reg_wizchip_cris_cbfunc+0x40>)
 8001032:	4a0a      	ldr	r2, [pc, #40]	@ (800105c <reg_wizchip_cris_cbfunc+0x48>)
 8001034:	611a      	str	r2, [r3, #16]
 8001036:	e006      	b.n	8001046 <reg_wizchip_cris_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CRIS._enter = cris_en;
 8001038:	4a06      	ldr	r2, [pc, #24]	@ (8001054 <reg_wizchip_cris_cbfunc+0x40>)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	60d3      	str	r3, [r2, #12]
      WIZCHIP.CRIS._exit  = cris_ex;
 800103e:	4a05      	ldr	r2, [pc, #20]	@ (8001054 <reg_wizchip_cris_cbfunc+0x40>)
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	6113      	str	r3, [r2, #16]
   }
}
 8001044:	bf00      	nop
 8001046:	bf00      	nop
 8001048:	370c      	adds	r7, #12
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	2000003c 	.word	0x2000003c
 8001058:	08000efd 	.word	0x08000efd
 800105c:	08000f0b 	.word	0x08000f0b

08001060 <reg_wizchip_cs_cbfunc>:

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d002      	beq.n	8001076 <reg_wizchip_cs_cbfunc+0x16>
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d106      	bne.n	8001084 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 8001076:	4b0a      	ldr	r3, [pc, #40]	@ (80010a0 <reg_wizchip_cs_cbfunc+0x40>)
 8001078:	4a0a      	ldr	r2, [pc, #40]	@ (80010a4 <reg_wizchip_cs_cbfunc+0x44>)
 800107a:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 800107c:	4b08      	ldr	r3, [pc, #32]	@ (80010a0 <reg_wizchip_cs_cbfunc+0x40>)
 800107e:	4a0a      	ldr	r2, [pc, #40]	@ (80010a8 <reg_wizchip_cs_cbfunc+0x48>)
 8001080:	619a      	str	r2, [r3, #24]
 8001082:	e006      	b.n	8001092 <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8001084:	4a06      	ldr	r2, [pc, #24]	@ (80010a0 <reg_wizchip_cs_cbfunc+0x40>)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 800108a:	4a05      	ldr	r2, [pc, #20]	@ (80010a0 <reg_wizchip_cs_cbfunc+0x40>)
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	6193      	str	r3, [r2, #24]
   }
}
 8001090:	bf00      	nop
 8001092:	bf00      	nop
 8001094:	370c      	adds	r7, #12
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	2000003c 	.word	0x2000003c
 80010a4:	08000f19 	.word	0x08000f19
 80010a8:	08000f27 	.word	0x08000f27

080010ac <reg_wizchip_spi_cbfunc>:
   else           WIZCHIP.IF.SPI._write_burst = spi_wbuf;
}
#else 

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 80010b6:	bf00      	nop
 80010b8:	4b0f      	ldr	r3, [pc, #60]	@ (80010f8 <reg_wizchip_spi_cbfunc+0x4c>)
 80010ba:	881b      	ldrh	r3, [r3, #0]
 80010bc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d0f9      	beq.n	80010b8 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d002      	beq.n	80010d0 <reg_wizchip_spi_cbfunc+0x24>
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d106      	bne.n	80010de <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 80010d0:	4b09      	ldr	r3, [pc, #36]	@ (80010f8 <reg_wizchip_spi_cbfunc+0x4c>)
 80010d2:	4a0a      	ldr	r2, [pc, #40]	@ (80010fc <reg_wizchip_spi_cbfunc+0x50>)
 80010d4:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 80010d6:	4b08      	ldr	r3, [pc, #32]	@ (80010f8 <reg_wizchip_spi_cbfunc+0x4c>)
 80010d8:	4a09      	ldr	r2, [pc, #36]	@ (8001100 <reg_wizchip_spi_cbfunc+0x54>)
 80010da:	621a      	str	r2, [r3, #32]
 80010dc:	e006      	b.n	80010ec <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 80010de:	4a06      	ldr	r2, [pc, #24]	@ (80010f8 <reg_wizchip_spi_cbfunc+0x4c>)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 80010e4:	4a04      	ldr	r2, [pc, #16]	@ (80010f8 <reg_wizchip_spi_cbfunc+0x4c>)
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	6213      	str	r3, [r2, #32]
   }
}
 80010ea:	bf00      	nop
 80010ec:	bf00      	nop
 80010ee:	370c      	adds	r7, #12
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr
 80010f8:	2000003c 	.word	0x2000003c
 80010fc:	08000f6d 	.word	0x08000f6d
 8001100:	08000f7d 	.word	0x08000f7d

08001104 <reg_wizchip_spiburst_cbfunc>:
#endif 

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 800110e:	bf00      	nop
 8001110:	4b0f      	ldr	r3, [pc, #60]	@ (8001150 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8001112:	881b      	ldrh	r3, [r3, #0]
 8001114:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001118:	2b00      	cmp	r3, #0
 800111a:	d0f9      	beq.n	8001110 <reg_wizchip_spiburst_cbfunc+0xc>

   if(!spi_rb || !spi_wb)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d002      	beq.n	8001128 <reg_wizchip_spiburst_cbfunc+0x24>
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d106      	bne.n	8001136 <reg_wizchip_spiburst_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
 8001128:	4b09      	ldr	r3, [pc, #36]	@ (8001150 <reg_wizchip_spiburst_cbfunc+0x4c>)
 800112a:	4a0a      	ldr	r2, [pc, #40]	@ (8001154 <reg_wizchip_spiburst_cbfunc+0x50>)
 800112c:	625a      	str	r2, [r3, #36]	@ 0x24
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
 800112e:	4b08      	ldr	r3, [pc, #32]	@ (8001150 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8001130:	4a09      	ldr	r2, [pc, #36]	@ (8001158 <reg_wizchip_spiburst_cbfunc+0x54>)
 8001132:	629a      	str	r2, [r3, #40]	@ 0x28
 8001134:	e006      	b.n	8001144 <reg_wizchip_spiburst_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
 8001136:	4a06      	ldr	r2, [pc, #24]	@ (8001150 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6253      	str	r3, [r2, #36]	@ 0x24
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
 800113c:	4a04      	ldr	r2, [pc, #16]	@ (8001150 <reg_wizchip_spiburst_cbfunc+0x4c>)
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	6293      	str	r3, [r2, #40]	@ 0x28
   }
}
 8001142:	bf00      	nop
 8001144:	bf00      	nop
 8001146:	370c      	adds	r7, #12
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr
 8001150:	2000003c 	.word	0x2000003c
 8001154:	08000f95 	.word	0x08000f95
 8001158:	08000fd5 	.word	0x08000fd5

0800115c <ctlwizchip>:
   }
}
#endif

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 800115c:	b590      	push	{r4, r7, lr}
 800115e:	b087      	sub	sp, #28
 8001160:	af00      	add	r7, sp, #0
 8001162:	4603      	mov	r3, r0
 8001164:	6039      	str	r1, [r7, #0]
 8001166:	71fb      	strb	r3, [r7, #7]
//teddy 240122
#if	_WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500 || _WIZCHIP_ == W6100 || _WIZCHIP_ == W6300
   uint8_t tmp = *(uint8_t*) arg;
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	75fb      	strb	r3, [r7, #23]
#endif
   uint8_t* ptmp[2] = {0,0};
 800116e:	2300      	movs	r3, #0
 8001170:	60fb      	str	r3, [r7, #12]
 8001172:	2300      	movs	r3, #0
 8001174:	613b      	str	r3, [r7, #16]
   switch(cwtype)
 8001176:	79fb      	ldrb	r3, [r7, #7]
 8001178:	3b03      	subs	r3, #3
 800117a:	2b14      	cmp	r3, #20
 800117c:	f200 80d3 	bhi.w	8001326 <ctlwizchip+0x1ca>
 8001180:	a201      	add	r2, pc, #4	@ (adr r2, 8001188 <ctlwizchip+0x2c>)
 8001182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001186:	bf00      	nop
 8001188:	080011dd 	.word	0x080011dd
 800118c:	080011e3 	.word	0x080011e3
 8001190:	0800120f 	.word	0x0800120f
 8001194:	08001203 	.word	0x08001203
 8001198:	0800121d 	.word	0x0800121d
 800119c:	08001229 	.word	0x08001229
 80011a0:	08001237 	.word	0x08001237
 80011a4:	0800125d 	.word	0x0800125d
 80011a8:	08001327 	.word	0x08001327
 80011ac:	08001327 	.word	0x08001327
 80011b0:	0800127f 	.word	0x0800127f
 80011b4:	08001327 	.word	0x08001327
 80011b8:	08001327 	.word	0x08001327
 80011bc:	08001327 	.word	0x08001327
 80011c0:	080012c3 	.word	0x080012c3
 80011c4:	080012c9 	.word	0x080012c9
 80011c8:	080012d1 	.word	0x080012d1
 80011cc:	080012d9 	.word	0x080012d9
 80011d0:	080012e1 	.word	0x080012e1
 80011d4:	080012ef 	.word	0x080012ef
 80011d8:	0800130b 	.word	0x0800130b
      case CW_GET_SYSLOCK:
         *(uint8_t*)arg = getSYSR() >> 5;
         break;
#endif
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 80011dc:	f000 f8ec 	bl	80013b8 <wizchip_sw_reset>
         break;
 80011e0:	e0a4      	b.n	800132c <ctlwizchip+0x1d0>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d004      	beq.n	80011f2 <ctlwizchip+0x96>
         {
            ptmp[0] = (uint8_t*)arg;
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	60fb      	str	r3, [r7, #12]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	3308      	adds	r3, #8
 80011f0:	613b      	str	r3, [r7, #16]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	693a      	ldr	r2, [r7, #16]
 80011f6:	4611      	mov	r1, r2
 80011f8:	4618      	mov	r0, r3
 80011fa:	f000 f929 	bl	8001450 <wizchip_init>
 80011fe:	4603      	mov	r3, r0
 8001200:	e095      	b.n	800132e <ctlwizchip+0x1d2>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	881b      	ldrh	r3, [r3, #0]
 8001206:	4618      	mov	r0, r3
 8001208:	f000 f9ae 	bl	8001568 <wizchip_clrinterrupt>
         break;
 800120c:	e08e      	b.n	800132c <ctlwizchip+0x1d0>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 800120e:	f000 f9df 	bl	80015d0 <wizchip_getinterrupt>
 8001212:	4603      	mov	r3, r0
 8001214:	461a      	mov	r2, r3
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	801a      	strh	r2, [r3, #0]
         break;
 800121a:	e087      	b.n	800132c <ctlwizchip+0x1d0>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	881b      	ldrh	r3, [r3, #0]
 8001220:	4618      	mov	r0, r3
 8001222:	f000 f9f9 	bl	8001618 <wizchip_setinterruptmask>
         break;         
 8001226:	e081      	b.n	800132c <ctlwizchip+0x1d0>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 8001228:	f000 fa11 	bl	800164e <wizchip_getinterruptmask>
 800122c:	4603      	mov	r3, r0
 800122e:	461a      	mov	r2, r3
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	801a      	strh	r2, [r3, #0]
         break;
 8001234:	e07a      	b.n	800132c <ctlwizchip+0x1d0>
   //M20150601 : This can be supported by W5200, W5500
   //#if _WIZCHIP_ > W5100
   #if (_WIZCHIP_ == W5200 || _WIZCHIP_ == W5500)
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	881b      	ldrh	r3, [r3, #0]
 800123a:	0a1b      	lsrs	r3, r3, #8
 800123c:	b29b      	uxth	r3, r3
 800123e:	b2db      	uxtb	r3, r3
 8001240:	4619      	mov	r1, r3
 8001242:	f44f 5098 	mov.w	r0, #4864	@ 0x1300
 8001246:	f7ff f83b 	bl	80002c0 <WIZCHIP_WRITE>
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	881b      	ldrh	r3, [r3, #0]
 800124e:	b2db      	uxtb	r3, r3
 8001250:	4619      	mov	r1, r3
 8001252:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 8001256:	f7ff f833 	bl	80002c0 <WIZCHIP_WRITE>
         break;
 800125a:	e067      	b.n	800132c <ctlwizchip+0x1d0>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
 800125c:	f44f 5098 	mov.w	r0, #4864	@ 0x1300
 8001260:	f7fe ffe2 	bl	8000228 <WIZCHIP_READ>
 8001264:	4603      	mov	r3, r0
 8001266:	021b      	lsls	r3, r3, #8
 8001268:	b29c      	uxth	r4, r3
 800126a:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 800126e:	f7fe ffdb 	bl	8000228 <WIZCHIP_READ>
 8001272:	4603      	mov	r3, r0
 8001274:	4423      	add	r3, r4
 8001276:	b29a      	uxth	r2, r3
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	801a      	strh	r2, [r3, #0]
         break;
 800127c:	e056      	b.n	800132c <ctlwizchip+0x1d0>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTPTMR();
         break;   
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 800127e:	4b2e      	ldr	r3, [pc, #184]	@ (8001338 <ctlwizchip+0x1dc>)
 8001280:	789a      	ldrb	r2, [r3, #2]
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	3301      	adds	r3, #1
 800128a:	4a2b      	ldr	r2, [pc, #172]	@ (8001338 <ctlwizchip+0x1dc>)
 800128c:	78d2      	ldrb	r2, [r2, #3]
 800128e:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	3302      	adds	r3, #2
 8001294:	4a28      	ldr	r2, [pc, #160]	@ (8001338 <ctlwizchip+0x1dc>)
 8001296:	7912      	ldrb	r2, [r2, #4]
 8001298:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	3303      	adds	r3, #3
 800129e:	4a26      	ldr	r2, [pc, #152]	@ (8001338 <ctlwizchip+0x1dc>)
 80012a0:	7952      	ldrb	r2, [r2, #5]
 80012a2:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	3304      	adds	r3, #4
 80012a8:	4a23      	ldr	r2, [pc, #140]	@ (8001338 <ctlwizchip+0x1dc>)
 80012aa:	7992      	ldrb	r2, [r2, #6]
 80012ac:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = WIZCHIP.id[5];
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	3305      	adds	r3, #5
 80012b2:	4a21      	ldr	r2, [pc, #132]	@ (8001338 <ctlwizchip+0x1dc>)
 80012b4:	79d2      	ldrb	r2, [r2, #7]
 80012b6:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[6] = 0;
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	3306      	adds	r3, #6
 80012bc:	2200      	movs	r2, #0
 80012be:	701a      	strb	r2, [r3, #0]
         break;
 80012c0:	e034      	b.n	800132c <ctlwizchip+0x1d0>
   #endif
#endif
//teddy 240122
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5500 || _WIZCHIP_ == W6100 || _WIZCHIP_ == W6300
      case CW_RESET_PHY:
         wizphy_reset();
 80012c2:	f000 fa15 	bl	80016f0 <wizphy_reset>
         break;
 80012c6:	e031      	b.n	800132c <ctlwizchip+0x1d0>
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
 80012c8:	6838      	ldr	r0, [r7, #0]
 80012ca:	f000 fa38 	bl	800173e <wizphy_setphyconf>
         break;
 80012ce:	e02d      	b.n	800132c <ctlwizchip+0x1d0>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
 80012d0:	6838      	ldr	r0, [r7, #0]
 80012d2:	f000 fa77 	bl	80017c4 <wizphy_getphyconf>
         break;
 80012d6:	e029      	b.n	800132c <ctlwizchip+0x1d0>
      case CW_GET_PHYSTATUS:
#if 1
    	  // 20231012 taylor
   #if _WIZCHIP_ == W5500
         wizphy_getphystat((wiz_PhyConf*)arg);
 80012d8:	6838      	ldr	r0, [r7, #0]
 80012da:	f000 fadd 	bl	8001898 <wizphy_getphystat>
   #endif
#else
         wizphy_getphystat((wiz_PhyConf*)arg);
#endif
         break;
 80012de:	e025      	b.n	800132c <ctlwizchip+0x1d0>
	  //teddy 240122
      #if _WIZCHIP_ == W6100 ||_WIZCHIP_ == W6300
        wizphy_setphypmode(*(uint8_t*)arg);
        break;
      #else
         return wizphy_setphypmode(*(uint8_t*)arg);
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	4618      	mov	r0, r3
 80012e6:	f000 faf5 	bl	80018d4 <wizphy_setphypmode>
 80012ea:	4603      	mov	r3, r0
 80012ec:	e01f      	b.n	800132e <ctlwizchip+0x1d2>
      #endif
   #endif
   //teddy 240122
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500 || _WIZCHIP_ == W6100 || _WIZCHIP_ == W6300
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
 80012ee:	f000 f9e6 	bl	80016be <wizphy_getphypmode>
 80012f2:	4603      	mov	r3, r0
 80012f4:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 80012f6:	7dfb      	ldrb	r3, [r7, #23]
 80012f8:	2bff      	cmp	r3, #255	@ 0xff
 80012fa:	d102      	bne.n	8001302 <ctlwizchip+0x1a6>
 80012fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001300:	e015      	b.n	800132e <ctlwizchip+0x1d2>
         *(uint8_t*)arg = tmp;
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	7dfa      	ldrb	r2, [r7, #23]
 8001306:	701a      	strb	r2, [r3, #0]
         break;
 8001308:	e010      	b.n	800132c <ctlwizchip+0x1d0>
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
 800130a:	f000 f9c2 	bl	8001692 <wizphy_getphylink>
 800130e:	4603      	mov	r3, r0
 8001310:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8001312:	7dfb      	ldrb	r3, [r7, #23]
 8001314:	2bff      	cmp	r3, #255	@ 0xff
 8001316:	d102      	bne.n	800131e <ctlwizchip+0x1c2>
 8001318:	f04f 33ff 	mov.w	r3, #4294967295
 800131c:	e007      	b.n	800132e <ctlwizchip+0x1d2>
         *(uint8_t*)arg = tmp;
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	7dfa      	ldrb	r2, [r7, #23]
 8001322:	701a      	strb	r2, [r3, #0]
         break;
 8001324:	e002      	b.n	800132c <ctlwizchip+0x1d0>
   #endif      
      default:
         return -1;
 8001326:	f04f 33ff 	mov.w	r3, #4294967295
 800132a:	e000      	b.n	800132e <ctlwizchip+0x1d2>
   }
   return 0;
 800132c:	2300      	movs	r3, #0
}
 800132e:	4618      	mov	r0, r3
 8001330:	371c      	adds	r7, #28
 8001332:	46bd      	mov	sp, r7
 8001334:	bd90      	pop	{r4, r7, pc}
 8001336:	bf00      	nop
 8001338:	2000003c 	.word	0x2000003c

0800133c <ctlnetwork>:


int8_t ctlnetwork(ctlnetwork_type cntype, void* arg)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	4603      	mov	r3, r0
 8001344:	6039      	str	r1, [r7, #0]
 8001346:	71fb      	strb	r3, [r7, #7]
   
   switch(cntype)
 8001348:	79fb      	ldrb	r3, [r7, #7]
 800134a:	2b05      	cmp	r3, #5
 800134c:	d82c      	bhi.n	80013a8 <ctlnetwork+0x6c>
 800134e:	a201      	add	r2, pc, #4	@ (adr r2, 8001354 <ctlnetwork+0x18>)
 8001350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001354:	0800136d 	.word	0x0800136d
 8001358:	08001375 	.word	0x08001375
 800135c:	0800137d 	.word	0x0800137d
 8001360:	0800138b 	.word	0x0800138b
 8001364:	08001399 	.word	0x08001399
 8001368:	080013a1 	.word	0x080013a1
   {
      case CN_SET_NETINFO:
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 800136c:	6838      	ldr	r0, [r7, #0]
 800136e:	f000 fafb 	bl	8001968 <wizchip_setnetinfo>
         break;
 8001372:	e01c      	b.n	80013ae <ctlnetwork+0x72>
      case CN_GET_NETINFO:
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 8001374:	6838      	ldr	r0, [r7, #0]
 8001376:	f000 fb37 	bl	80019e8 <wizchip_getnetinfo>
         break;
 800137a:	e018      	b.n	80013ae <ctlnetwork+0x72>
      case CN_SET_NETMODE:
#if (_WIZCHIP_ == W5100 || _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5300 || _WIZCHIP_ == W5500)
         return wizchip_setnetmode(*(netmode_type*)arg);
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	4618      	mov	r0, r3
 8001382:	f000 fb71 	bl	8001a68 <wizchip_setnetmode>
 8001386:	4603      	mov	r3, r0
 8001388:	e012      	b.n	80013b0 <ctlnetwork+0x74>
		 //teddy 240122
      #elif ((_WIZCHIP_ == 6100)||(_WIZCHIP_ == W6300))
         wizchip_setnetmode(*(netmode_type*)arg);
      #endif
      case CN_GET_NETMODE:
         *(netmode_type*)arg = wizchip_getnetmode();
 800138a:	f000 fb8f 	bl	8001aac <wizchip_getnetmode>
 800138e:	4603      	mov	r3, r0
 8001390:	461a      	mov	r2, r3
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	701a      	strb	r2, [r3, #0]
         break;
 8001396:	e00a      	b.n	80013ae <ctlnetwork+0x72>
      case CN_SET_TIMEOUT:
         wizchip_settimeout((wiz_NetTimeout*)arg);
 8001398:	6838      	ldr	r0, [r7, #0]
 800139a:	f000 fb8f 	bl	8001abc <wizchip_settimeout>
         break;
 800139e:	e006      	b.n	80013ae <ctlnetwork+0x72>
      case CN_GET_TIMEOUT:
         wizchip_gettimeout((wiz_NetTimeout*)arg);
 80013a0:	6838      	ldr	r0, [r7, #0]
 80013a2:	f000 fbac 	bl	8001afe <wizchip_gettimeout>
         break;
 80013a6:	e002      	b.n	80013ae <ctlnetwork+0x72>
      case CN_GET_PREFER:
    	  *(uint8_t*)arg= getSLPSR();
         break;
#endif   
      default:
         return -1;
 80013a8:	f04f 33ff 	mov.w	r3, #4294967295
 80013ac:	e000      	b.n	80013b0 <ctlnetwork+0x74>
   }
   return 0;
 80013ae:	2300      	movs	r3, #0
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3708      	adds	r7, #8
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}

080013b8 <wizchip_sw_reset>:

void wizchip_sw_reset(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b086      	sub	sp, #24
 80013bc:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 80013be:	1d3b      	adds	r3, r7, #4
 80013c0:	2206      	movs	r2, #6
 80013c2:	4619      	mov	r1, r3
 80013c4:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 80013c8:	f7fe ffc8 	bl	800035c <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 80013cc:	f107 0314 	add.w	r3, r7, #20
 80013d0:	2204      	movs	r2, #4
 80013d2:	4619      	mov	r1, r3
 80013d4:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80013d8:	f7fe ffc0 	bl	800035c <WIZCHIP_READ_BUF>
 80013dc:	f107 0310 	add.w	r3, r7, #16
 80013e0:	2204      	movs	r2, #4
 80013e2:	4619      	mov	r1, r3
 80013e4:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 80013e8:	f7fe ffb8 	bl	800035c <WIZCHIP_READ_BUF>
 80013ec:	f107 030c 	add.w	r3, r7, #12
 80013f0:	2204      	movs	r2, #4
 80013f2:	4619      	mov	r1, r3
 80013f4:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 80013f8:	f7fe ffb0 	bl	800035c <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 80013fc:	2180      	movs	r1, #128	@ 0x80
 80013fe:	2000      	movs	r0, #0
 8001400:	f7fe ff5e 	bl	80002c0 <WIZCHIP_WRITE>
   getMR(); // for delay
 8001404:	2000      	movs	r0, #0
 8001406:	f7fe ff0f 	bl	8000228 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 800140a:	1d3b      	adds	r3, r7, #4
 800140c:	2206      	movs	r2, #6
 800140e:	4619      	mov	r1, r3
 8001410:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8001414:	f7ff f802 	bl	800041c <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8001418:	f107 0314 	add.w	r3, r7, #20
 800141c:	2204      	movs	r2, #4
 800141e:	4619      	mov	r1, r3
 8001420:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001424:	f7fe fffa 	bl	800041c <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8001428:	f107 0310 	add.w	r3, r7, #16
 800142c:	2204      	movs	r2, #4
 800142e:	4619      	mov	r1, r3
 8001430:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8001434:	f7fe fff2 	bl	800041c <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8001438:	f107 030c 	add.w	r3, r7, #12
 800143c:	2204      	movs	r2, #4
 800143e:	4619      	mov	r1, r3
 8001440:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8001444:	f7fe ffea 	bl	800041c <WIZCHIP_WRITE_BUF>
  setLLAR(lla);
  setGUAR(gua);
  if(islock & SYSR_CHPL) CHIPLOCK();
  if(islock & SYSR_NETL) NETLOCK();
#endif
}
 8001448:	bf00      	nop
 800144a:	3718      	adds	r7, #24
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}

08001450 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b084      	sub	sp, #16
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 800145a:	2300      	movs	r3, #0
 800145c:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 800145e:	f7ff ffab 	bl	80013b8 <wizchip_sw_reset>
   if(txsize)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d03b      	beq.n	80014e0 <wizchip_init+0x90>
   {
      tmp = 0;
 8001468:	2300      	movs	r3, #0
 800146a:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800146c:	2300      	movs	r3, #0
 800146e:	73fb      	strb	r3, [r7, #15]
 8001470:	e015      	b.n	800149e <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 8001472:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001476:	687a      	ldr	r2, [r7, #4]
 8001478:	4413      	add	r3, r2
 800147a:	781a      	ldrb	r2, [r3, #0]
 800147c:	7bbb      	ldrb	r3, [r7, #14]
 800147e:	4413      	add	r3, r2
 8001480:	b2db      	uxtb	r3, r3
 8001482:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#elif  _WIZCHIP_ == W6300
			if(tmp > 32) return -1;
#else
			if(tmp > 16) return -1;
 8001484:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001488:	2b10      	cmp	r3, #16
 800148a:	dd02      	ble.n	8001492 <wizchip_init+0x42>
 800148c:	f04f 33ff 	mov.w	r3, #4294967295
 8001490:	e066      	b.n	8001560 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001492:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001496:	b2db      	uxtb	r3, r3
 8001498:	3301      	adds	r3, #1
 800149a:	b2db      	uxtb	r3, r3
 800149c:	73fb      	strb	r3, [r7, #15]
 800149e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014a2:	2b07      	cmp	r3, #7
 80014a4:	dde5      	ble.n	8001472 <wizchip_init+0x22>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80014a6:	2300      	movs	r3, #0
 80014a8:	73fb      	strb	r3, [r7, #15]
 80014aa:	e015      	b.n	80014d8 <wizchip_init+0x88>
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 80014ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	3301      	adds	r3, #1
 80014b4:	00db      	lsls	r3, r3, #3
 80014b6:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 80014ba:	4618      	mov	r0, r3
 80014bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014c0:	687a      	ldr	r2, [r7, #4]
 80014c2:	4413      	add	r3, r2
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	4619      	mov	r1, r3
 80014c8:	f7fe fefa 	bl	80002c0 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80014cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	3301      	adds	r3, #1
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	73fb      	strb	r3, [r7, #15]
 80014d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014dc:	2b07      	cmp	r3, #7
 80014de:	dde5      	ble.n	80014ac <wizchip_init+0x5c>
#endif
		}	
   }

   if(rxsize)
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d03b      	beq.n	800155e <wizchip_init+0x10e>
   {
      tmp = 0;
 80014e6:	2300      	movs	r3, #0
 80014e8:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80014ea:	2300      	movs	r3, #0
 80014ec:	73fb      	strb	r3, [r7, #15]
 80014ee:	e015      	b.n	800151c <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 80014f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014f4:	683a      	ldr	r2, [r7, #0]
 80014f6:	4413      	add	r3, r2
 80014f8:	781a      	ldrb	r2, [r3, #0]
 80014fa:	7bbb      	ldrb	r3, [r7, #14]
 80014fc:	4413      	add	r3, r2
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#elif  _WIZCHIP_ == W6300
			if(tmp > 32) return -1;
#else
			if(tmp > 16) return -1;
 8001502:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001506:	2b10      	cmp	r3, #16
 8001508:	dd02      	ble.n	8001510 <wizchip_init+0xc0>
 800150a:	f04f 33ff 	mov.w	r3, #4294967295
 800150e:	e027      	b.n	8001560 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001510:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001514:	b2db      	uxtb	r3, r3
 8001516:	3301      	adds	r3, #1
 8001518:	b2db      	uxtb	r3, r3
 800151a:	73fb      	strb	r3, [r7, #15]
 800151c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001520:	2b07      	cmp	r3, #7
 8001522:	dde5      	ble.n	80014f0 <wizchip_init+0xa0>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001524:	2300      	movs	r3, #0
 8001526:	73fb      	strb	r3, [r7, #15]
 8001528:	e015      	b.n	8001556 <wizchip_init+0x106>
#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 800152a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	3301      	adds	r3, #1
 8001532:	00db      	lsls	r3, r3, #3
 8001534:	f503 53f0 	add.w	r3, r3, #7680	@ 0x1e00
 8001538:	4618      	mov	r0, r3
 800153a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800153e:	683a      	ldr	r2, [r7, #0]
 8001540:	4413      	add	r3, r2
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	4619      	mov	r1, r3
 8001546:	f7fe febb 	bl	80002c0 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800154a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800154e:	b2db      	uxtb	r3, r3
 8001550:	3301      	adds	r3, #1
 8001552:	b2db      	uxtb	r3, r3
 8001554:	73fb      	strb	r3, [r7, #15]
 8001556:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800155a:	2b07      	cmp	r3, #7
 800155c:	dde5      	ble.n	800152a <wizchip_init+0xda>
#endif
		}
   }
   return 0;
 800155e:	2300      	movs	r3, #0
}
 8001560:	4618      	mov	r0, r3
 8001562:	3710      	adds	r7, #16
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}

08001568 <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af00      	add	r7, sp, #0
 800156e:	4603      	mov	r3, r0
 8001570:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 8001572:	88fb      	ldrh	r3, [r7, #6]
 8001574:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 8001576:	88fb      	ldrh	r3, [r7, #6]
 8001578:	0a1b      	lsrs	r3, r3, #8
 800157a:	b29b      	uxth	r3, r3
 800157c:	73bb      	strb	r3, [r7, #14]
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
#else
   setIR(ir);
 800157e:	7bfb      	ldrb	r3, [r7, #15]
 8001580:	f023 030f 	bic.w	r3, r3, #15
 8001584:	b2db      	uxtb	r3, r3
 8001586:	4619      	mov	r1, r3
 8001588:	f44f 50a8 	mov.w	r0, #5376	@ 0x1500
 800158c:	f7fe fe98 	bl	80002c0 <WIZCHIP_WRITE>
//M20200227 : For clear
   //setSIR(sir);
   for(ir=0; ir<8; ir++){
 8001590:	2300      	movs	r3, #0
 8001592:	73fb      	strb	r3, [r7, #15]
 8001594:	e014      	b.n	80015c0 <wizchip_clrinterrupt+0x58>
       if(sir & (0x01 <<ir) ) setSn_IR(ir, 0xff);
 8001596:	7bba      	ldrb	r2, [r7, #14]
 8001598:	7bfb      	ldrb	r3, [r7, #15]
 800159a:	fa42 f303 	asr.w	r3, r2, r3
 800159e:	f003 0301 	and.w	r3, r3, #1
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d009      	beq.n	80015ba <wizchip_clrinterrupt+0x52>
 80015a6:	7bfb      	ldrb	r3, [r7, #15]
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	3301      	adds	r3, #1
 80015ac:	00db      	lsls	r3, r3, #3
 80015ae:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80015b2:	211f      	movs	r1, #31
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7fe fe83 	bl	80002c0 <WIZCHIP_WRITE>
   for(ir=0; ir<8; ir++){
 80015ba:	7bfb      	ldrb	r3, [r7, #15]
 80015bc:	3301      	adds	r3, #1
 80015be:	73fb      	strb	r3, [r7, #15]
 80015c0:	7bfb      	ldrb	r3, [r7, #15]
 80015c2:	2b07      	cmp	r3, #7
 80015c4:	d9e7      	bls.n	8001596 <wizchip_clrinterrupt+0x2e>
   }

#endif   
}
 80015c6:	bf00      	nop
 80015c8:	bf00      	nop
 80015ca:	3710      	adds	r7, #16
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}

080015d0 <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 80015d6:	2300      	movs	r3, #0
 80015d8:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 80015da:	2300      	movs	r3, #0
 80015dc:	71bb      	strb	r3, [r7, #6]
   uint32_t ret = 0;
 80015de:	2300      	movs	r3, #0
 80015e0:	603b      	str	r3, [r7, #0]
#elif _WIZCHIP_  == W5300
   ret = getIR();
   ir = (uint8_t)(ret >> 8);
   sir = (uint8_t)ret;
#else
   ir  = getIR();
 80015e2:	f44f 50a8 	mov.w	r0, #5376	@ 0x1500
 80015e6:	f7fe fe1f 	bl	8000228 <WIZCHIP_READ>
 80015ea:	4603      	mov	r3, r0
 80015ec:	f023 030f 	bic.w	r3, r3, #15
 80015f0:	71fb      	strb	r3, [r7, #7]
   sir = getSIR();
 80015f2:	f44f 50b8 	mov.w	r0, #5888	@ 0x1700
 80015f6:	f7fe fe17 	bl	8000228 <WIZCHIP_READ>
 80015fa:	4603      	mov	r3, r0
 80015fc:	71bb      	strb	r3, [r7, #6]
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 80015fe:	79bb      	ldrb	r3, [r7, #6]
 8001600:	603b      	str	r3, [r7, #0]
  ret = (ret << 8) + ir;
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	021a      	lsls	r2, r3, #8
 8001606:	79fb      	ldrb	r3, [r7, #7]
 8001608:	4413      	add	r3, r2
 800160a:	603b      	str	r3, [r7, #0]
  //teddy 240122
#if _WIZCHIP_ == W6100 || _WIZCHIP_ == W6300
  ret = (((uint32_t)getSLIR())<<16) | ret;
#endif

  return (intr_kind)ret;
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	b29b      	uxth	r3, r3
}
 8001610:	4618      	mov	r0, r3
 8001612:	3708      	adds	r7, #8
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}

08001618 <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af00      	add	r7, sp, #0
 800161e:	4603      	mov	r3, r0
 8001620:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 8001622:	88fb      	ldrh	r3, [r7, #6]
 8001624:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 8001626:	88fb      	ldrh	r3, [r7, #6]
 8001628:	0a1b      	lsrs	r3, r3, #8
 800162a:	b29b      	uxth	r3, r3
 800162c:	73bb      	strb	r3, [r7, #14]
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
#else
   setIMR(imr);
 800162e:	7bfb      	ldrb	r3, [r7, #15]
 8001630:	4619      	mov	r1, r3
 8001632:	f44f 50b0 	mov.w	r0, #5632	@ 0x1600
 8001636:	f7fe fe43 	bl	80002c0 <WIZCHIP_WRITE>
   setSIMR(simr);
 800163a:	7bbb      	ldrb	r3, [r7, #14]
 800163c:	4619      	mov	r1, r3
 800163e:	f44f 50c0 	mov.w	r0, #6144	@ 0x1800
 8001642:	f7fe fe3d 	bl	80002c0 <WIZCHIP_WRITE>
#if _WIZCHIP_ == W6100 || _WIZCHIP_ == W6300
   uint8_t slimr = (uint8_t)((uint32_t)intr >> 16);
   setSLIMR(slimr);
#endif
#endif   
}
 8001646:	bf00      	nop
 8001648:	3710      	adds	r7, #16
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}

0800164e <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 800164e:	b580      	push	{r7, lr}
 8001650:	b082      	sub	sp, #8
 8001652:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 8001654:	2300      	movs	r3, #0
 8001656:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 8001658:	2300      	movs	r3, #0
 800165a:	71bb      	strb	r3, [r7, #6]
   uint32_t ret = 0;
 800165c:	2300      	movs	r3, #0
 800165e:	603b      	str	r3, [r7, #0]
#elif _WIZCHIP_ == W5300
   ret = getIMR();
   imr = (uint8_t)(ret >> 8);
   simr = (uint8_t)ret;
#else
   imr  = getIMR();
 8001660:	f44f 50b0 	mov.w	r0, #5632	@ 0x1600
 8001664:	f7fe fde0 	bl	8000228 <WIZCHIP_READ>
 8001668:	4603      	mov	r3, r0
 800166a:	71fb      	strb	r3, [r7, #7]
   simr = getSIMR();
 800166c:	f44f 50c0 	mov.w	r0, #6144	@ 0x1800
 8001670:	f7fe fdda 	bl	8000228 <WIZCHIP_READ>
 8001674:	4603      	mov	r3, r0
 8001676:	71bb      	strb	r3, [r7, #6]
   imr &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 8001678:	79bb      	ldrb	r3, [r7, #6]
 800167a:	603b      	str	r3, [r7, #0]
  ret = (ret << 8) + imr;
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	021a      	lsls	r2, r3, #8
 8001680:	79fb      	ldrb	r3, [r7, #7]
 8001682:	4413      	add	r3, r2
 8001684:	603b      	str	r3, [r7, #0]
  //teddy 240122
#if _WIZCHIP_ == W6100 || _WIZCHIP_ == W6300
  ret = (((uint32_t)getSLIMR())<<16) | ret;
#endif
  
  return (intr_kind)ret;
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	b29b      	uxth	r3, r3
}
 800168a:	4618      	mov	r0, r3
 800168c:	3708      	adds	r7, #8
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}

08001692 <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 8001692:	b580      	push	{r7, lr}
 8001694:	b082      	sub	sp, #8
 8001696:	af00      	add	r7, sp, #0
   int8_t tmp = PHY_LINK_OFF;
 8001698:	2300      	movs	r3, #0
 800169a:	71fb      	strb	r3, [r7, #7]
	   tmp = PHY_LINK_ON;
#elif   _WIZCHIP_ == W5200
   if(getPHYSTATUS() & PHYSTATUS_LINK)
      tmp = PHY_LINK_ON;
#elif _WIZCHIP_ == W5500
   if(getPHYCFGR() & PHYCFGR_LNK_ON)
 800169c:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 80016a0:	f7fe fdc2 	bl	8000228 <WIZCHIP_READ>
 80016a4:	4603      	mov	r3, r0
 80016a6:	f003 0301 	and.w	r3, r3, #1
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <wizphy_getphylink+0x20>
      tmp = PHY_LINK_ON;
 80016ae:	2301      	movs	r3, #1
 80016b0:	71fb      	strb	r3, [r7, #7]
#endif

#else
   tmp = -1;
#endif
   return tmp;
 80016b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3708      	adds	r7, #8
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}

080016be <wizphy_getphypmode>:

#if _WIZCHIP_ > W5100

int8_t wizphy_getphypmode(void)
{
 80016be:	b580      	push	{r7, lr}
 80016c0:	b082      	sub	sp, #8
 80016c2:	af00      	add	r7, sp, #0
   int8_t tmp = 0;
 80016c4:	2300      	movs	r3, #0
 80016c6:	71fb      	strb	r3, [r7, #7]
      if(getPHYSTATUS() & PHYSTATUS_POWERDOWN)
         tmp = PHY_POWER_DOWN;
      else          
         tmp = PHY_POWER_NORM;
   #elif _WIZCHIP_ == 5500
      if((getPHYCFGR() & PHYCFGR_OPMDC_ALLA) == PHYCFGR_OPMDC_PDOWN)
 80016c8:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 80016cc:	f7fe fdac 	bl	8000228 <WIZCHIP_READ>
 80016d0:	4603      	mov	r3, r0
 80016d2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80016d6:	2b30      	cmp	r3, #48	@ 0x30
 80016d8:	d102      	bne.n	80016e0 <wizphy_getphypmode+0x22>
         tmp = PHY_POWER_DOWN;
 80016da:	2301      	movs	r3, #1
 80016dc:	71fb      	strb	r3, [r7, #7]
 80016de:	e001      	b.n	80016e4 <wizphy_getphypmode+0x26>
      else 
         tmp = PHY_POWER_NORM;
 80016e0:	2300      	movs	r3, #0
 80016e2:	71fb      	strb	r3, [r7, #7]
   #endif   
      return PHY_POWER_NORM;
   #else
      tmp = -1;
   #endif
   return tmp;
 80016e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3708      	adds	r7, #8
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}

080016f0 <wizphy_reset>:
   return -1;
}

#elif _WIZCHIP_ == W5500
void wizphy_reset(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
   uint8_t tmp = getPHYCFGR();
 80016f6:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 80016fa:	f7fe fd95 	bl	8000228 <WIZCHIP_READ>
 80016fe:	4603      	mov	r3, r0
 8001700:	71fb      	strb	r3, [r7, #7]
   tmp &= PHYCFGR_RST;
 8001702:	79fb      	ldrb	r3, [r7, #7]
 8001704:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001708:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 800170a:	79fb      	ldrb	r3, [r7, #7]
 800170c:	4619      	mov	r1, r3
 800170e:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8001712:	f7fe fdd5 	bl	80002c0 <WIZCHIP_WRITE>
   tmp = getPHYCFGR();
 8001716:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 800171a:	f7fe fd85 	bl	8000228 <WIZCHIP_READ>
 800171e:	4603      	mov	r3, r0
 8001720:	71fb      	strb	r3, [r7, #7]
   tmp |= ~PHYCFGR_RST;
 8001722:	79fb      	ldrb	r3, [r7, #7]
 8001724:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001728:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 800172a:	79fb      	ldrb	r3, [r7, #7]
 800172c:	4619      	mov	r1, r3
 800172e:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8001732:	f7fe fdc5 	bl	80002c0 <WIZCHIP_WRITE>
}
 8001736:	bf00      	nop
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}

0800173e <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 800173e:	b580      	push	{r7, lr}
 8001740:	b084      	sub	sp, #16
 8001742:	af00      	add	r7, sp, #0
 8001744:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8001746:	2300      	movs	r3, #0
 8001748:	73fb      	strb	r3, [r7, #15]
   if(phyconf->by == PHY_CONFBY_SW)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	2b01      	cmp	r3, #1
 8001750:	d104      	bne.n	800175c <wizphy_setphyconf+0x1e>
      tmp |= PHYCFGR_OPMD;
 8001752:	7bfb      	ldrb	r3, [r7, #15]
 8001754:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001758:	73fb      	strb	r3, [r7, #15]
 800175a:	e003      	b.n	8001764 <wizphy_setphyconf+0x26>
   else
      tmp &= ~PHYCFGR_OPMD;
 800175c:	7bfb      	ldrb	r3, [r7, #15]
 800175e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001762:	73fb      	strb	r3, [r7, #15]
   if(phyconf->mode == PHY_MODE_AUTONEGO)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	785b      	ldrb	r3, [r3, #1]
 8001768:	2b01      	cmp	r3, #1
 800176a:	d104      	bne.n	8001776 <wizphy_setphyconf+0x38>
      tmp |= PHYCFGR_OPMDC_ALLA;
 800176c:	7bfb      	ldrb	r3, [r7, #15]
 800176e:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 8001772:	73fb      	strb	r3, [r7, #15]
 8001774:	e019      	b.n	80017aa <wizphy_setphyconf+0x6c>
   else
   {
      if(phyconf->duplex == PHY_DUPLEX_FULL)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	78db      	ldrb	r3, [r3, #3]
 800177a:	2b01      	cmp	r3, #1
 800177c:	d10d      	bne.n	800179a <wizphy_setphyconf+0x5c>
      {
         if(phyconf->speed == PHY_SPEED_100)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	789b      	ldrb	r3, [r3, #2]
 8001782:	2b01      	cmp	r3, #1
 8001784:	d104      	bne.n	8001790 <wizphy_setphyconf+0x52>
            tmp |= PHYCFGR_OPMDC_100F;
 8001786:	7bfb      	ldrb	r3, [r7, #15]
 8001788:	f043 0318 	orr.w	r3, r3, #24
 800178c:	73fb      	strb	r3, [r7, #15]
 800178e:	e00c      	b.n	80017aa <wizphy_setphyconf+0x6c>
         else
            tmp |= PHYCFGR_OPMDC_10F;
 8001790:	7bfb      	ldrb	r3, [r7, #15]
 8001792:	f043 0308 	orr.w	r3, r3, #8
 8001796:	73fb      	strb	r3, [r7, #15]
 8001798:	e007      	b.n	80017aa <wizphy_setphyconf+0x6c>
      }   
      else
      {
         if(phyconf->speed == PHY_SPEED_100)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	789b      	ldrb	r3, [r3, #2]
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d103      	bne.n	80017aa <wizphy_setphyconf+0x6c>
            tmp |= PHYCFGR_OPMDC_100H;
 80017a2:	7bfb      	ldrb	r3, [r7, #15]
 80017a4:	f043 0310 	orr.w	r3, r3, #16
 80017a8:	73fb      	strb	r3, [r7, #15]
         else
            tmp |= PHYCFGR_OPMDC_10H;
      }
   }
   setPHYCFGR(tmp);
 80017aa:	7bfb      	ldrb	r3, [r7, #15]
 80017ac:	4619      	mov	r1, r3
 80017ae:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 80017b2:	f7fe fd85 	bl	80002c0 <WIZCHIP_WRITE>
   wizphy_reset();
 80017b6:	f7ff ff9b 	bl	80016f0 <wizphy_reset>
}
 80017ba:	bf00      	nop
 80017bc:	3710      	adds	r7, #16
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
	...

080017c4 <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b084      	sub	sp, #16
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 80017cc:	2300      	movs	r3, #0
 80017ce:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 80017d0:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 80017d4:	f7fe fd28 	bl	8000228 <WIZCHIP_READ>
 80017d8:	4603      	mov	r3, r0
 80017da:	73fb      	strb	r3, [r7, #15]
   phyconf->by   = (tmp & PHYCFGR_OPMD) ? PHY_CONFBY_SW : PHY_CONFBY_HW;
 80017dc:	7bfb      	ldrb	r3, [r7, #15]
 80017de:	119b      	asrs	r3, r3, #6
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	f003 0301 	and.w	r3, r3, #1
 80017e6:	b2da      	uxtb	r2, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	701a      	strb	r2, [r3, #0]
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 80017ec:	7bfb      	ldrb	r3, [r7, #15]
 80017ee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80017f2:	2b20      	cmp	r3, #32
 80017f4:	d001      	beq.n	80017fa <wizphy_getphyconf+0x36>
 80017f6:	2b38      	cmp	r3, #56	@ 0x38
 80017f8:	d103      	bne.n	8001802 <wizphy_getphyconf+0x3e>
   {
      case PHYCFGR_OPMDC_ALLA:
      case PHYCFGR_OPMDC_100FA: 
         phyconf->mode = PHY_MODE_AUTONEGO;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2201      	movs	r2, #1
 80017fe:	705a      	strb	r2, [r3, #1]
         break;
 8001800:	e003      	b.n	800180a <wizphy_getphyconf+0x46>
      default:
         phyconf->mode = PHY_MODE_MANUAL;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2200      	movs	r2, #0
 8001806:	705a      	strb	r2, [r3, #1]
         break;
 8001808:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 800180a:	7bfb      	ldrb	r3, [r7, #15]
 800180c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001810:	3b10      	subs	r3, #16
 8001812:	2b10      	cmp	r3, #16
 8001814:	bf8c      	ite	hi
 8001816:	2201      	movhi	r2, #1
 8001818:	2200      	movls	r2, #0
 800181a:	b2d2      	uxtb	r2, r2
 800181c:	2a00      	cmp	r2, #0
 800181e:	d10f      	bne.n	8001840 <wizphy_getphyconf+0x7c>
 8001820:	4a1b      	ldr	r2, [pc, #108]	@ (8001890 <wizphy_getphyconf+0xcc>)
 8001822:	fa22 f303 	lsr.w	r3, r2, r3
 8001826:	f003 0301 	and.w	r3, r3, #1
 800182a:	2b00      	cmp	r3, #0
 800182c:	bf14      	ite	ne
 800182e:	2301      	movne	r3, #1
 8001830:	2300      	moveq	r3, #0
 8001832:	b2db      	uxtb	r3, r3
 8001834:	2b00      	cmp	r3, #0
 8001836:	d003      	beq.n	8001840 <wizphy_getphyconf+0x7c>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_100H:
         phyconf->speed = PHY_SPEED_100;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2201      	movs	r2, #1
 800183c:	709a      	strb	r2, [r3, #2]
         break;
 800183e:	e003      	b.n	8001848 <wizphy_getphyconf+0x84>
      default:
         phyconf->speed = PHY_SPEED_10;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2200      	movs	r2, #0
 8001844:	709a      	strb	r2, [r3, #2]
         break;
 8001846:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8001848:	7bfb      	ldrb	r3, [r7, #15]
 800184a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800184e:	3b08      	subs	r3, #8
 8001850:	2b18      	cmp	r3, #24
 8001852:	bf8c      	ite	hi
 8001854:	2201      	movhi	r2, #1
 8001856:	2200      	movls	r2, #0
 8001858:	b2d2      	uxtb	r2, r2
 800185a:	2a00      	cmp	r2, #0
 800185c:	d10f      	bne.n	800187e <wizphy_getphyconf+0xba>
 800185e:	4a0d      	ldr	r2, [pc, #52]	@ (8001894 <wizphy_getphyconf+0xd0>)
 8001860:	fa22 f303 	lsr.w	r3, r2, r3
 8001864:	f003 0301 	and.w	r3, r3, #1
 8001868:	2b00      	cmp	r3, #0
 800186a:	bf14      	ite	ne
 800186c:	2301      	movne	r3, #1
 800186e:	2300      	moveq	r3, #0
 8001870:	b2db      	uxtb	r3, r3
 8001872:	2b00      	cmp	r3, #0
 8001874:	d003      	beq.n	800187e <wizphy_getphyconf+0xba>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_10F:
         phyconf->duplex = PHY_DUPLEX_FULL;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2201      	movs	r2, #1
 800187a:	70da      	strb	r2, [r3, #3]
         break;
 800187c:	e003      	b.n	8001886 <wizphy_getphyconf+0xc2>
      default:
         phyconf->duplex = PHY_DUPLEX_HALF;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2200      	movs	r2, #0
 8001882:	70da      	strb	r2, [r3, #3]
         break;
 8001884:	bf00      	nop
   }
}
 8001886:	bf00      	nop
 8001888:	3710      	adds	r7, #16
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	00010101 	.word	0x00010101
 8001894:	01010001 	.word	0x01010001

08001898 <wizphy_getphystat>:

void wizphy_getphystat(wiz_PhyConf* phyconf)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
   uint8_t tmp = getPHYCFGR();
 80018a0:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 80018a4:	f7fe fcc0 	bl	8000228 <WIZCHIP_READ>
 80018a8:	4603      	mov	r3, r0
 80018aa:	73fb      	strb	r3, [r7, #15]
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
 80018ac:	7bfb      	ldrb	r3, [r7, #15]
 80018ae:	109b      	asrs	r3, r3, #2
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	f003 0301 	and.w	r3, r3, #1
 80018b6:	b2da      	uxtb	r2, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	70da      	strb	r2, [r3, #3]
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
 80018bc:	7bfb      	ldrb	r3, [r7, #15]
 80018be:	105b      	asrs	r3, r3, #1
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	f003 0301 	and.w	r3, r3, #1
 80018c6:	b2da      	uxtb	r2, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	709a      	strb	r2, [r3, #2]
}
 80018cc:	bf00      	nop
 80018ce:	3710      	adds	r7, #16
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}

080018d4 <wizphy_setphypmode>:

int8_t wizphy_setphypmode(uint8_t pmode)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0
 80018da:	4603      	mov	r3, r0
 80018dc:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 80018de:	2300      	movs	r3, #0
 80018e0:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 80018e2:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 80018e6:	f7fe fc9f 	bl	8000228 <WIZCHIP_READ>
 80018ea:	4603      	mov	r3, r0
 80018ec:	73fb      	strb	r3, [r7, #15]
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
 80018ee:	7bfb      	ldrb	r3, [r7, #15]
 80018f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d102      	bne.n	80018fe <wizphy_setphypmode+0x2a>
 80018f8:	f04f 33ff 	mov.w	r3, #4294967295
 80018fc:	e030      	b.n	8001960 <wizphy_setphypmode+0x8c>
   tmp &= ~PHYCFGR_OPMDC_ALLA;         
 80018fe:	7bfb      	ldrb	r3, [r7, #15]
 8001900:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 8001904:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 8001906:	79fb      	ldrb	r3, [r7, #7]
 8001908:	2b01      	cmp	r3, #1
 800190a:	d104      	bne.n	8001916 <wizphy_setphypmode+0x42>
      tmp |= PHYCFGR_OPMDC_PDOWN;
 800190c:	7bfb      	ldrb	r3, [r7, #15]
 800190e:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8001912:	73fb      	strb	r3, [r7, #15]
 8001914:	e003      	b.n	800191e <wizphy_setphypmode+0x4a>
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
 8001916:	7bfb      	ldrb	r3, [r7, #15]
 8001918:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 800191c:	73fb      	strb	r3, [r7, #15]
   setPHYCFGR(tmp);
 800191e:	7bfb      	ldrb	r3, [r7, #15]
 8001920:	4619      	mov	r1, r3
 8001922:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8001926:	f7fe fccb 	bl	80002c0 <WIZCHIP_WRITE>
   wizphy_reset();
 800192a:	f7ff fee1 	bl	80016f0 <wizphy_reset>
   tmp = getPHYCFGR();
 800192e:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8001932:	f7fe fc79 	bl	8000228 <WIZCHIP_READ>
 8001936:	4603      	mov	r3, r0
 8001938:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 800193a:	79fb      	ldrb	r3, [r7, #7]
 800193c:	2b01      	cmp	r3, #1
 800193e:	d106      	bne.n	800194e <wizphy_setphypmode+0x7a>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
 8001940:	7bfb      	ldrb	r3, [r7, #15]
 8001942:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8001946:	2b00      	cmp	r3, #0
 8001948:	d008      	beq.n	800195c <wizphy_setphypmode+0x88>
 800194a:	2300      	movs	r3, #0
 800194c:	e008      	b.n	8001960 <wizphy_setphypmode+0x8c>
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
 800194e:	7bfb      	ldrb	r3, [r7, #15]
 8001950:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001954:	2b00      	cmp	r3, #0
 8001956:	d001      	beq.n	800195c <wizphy_setphypmode+0x88>
 8001958:	2300      	movs	r3, #0
 800195a:	e001      	b.n	8001960 <wizphy_setphypmode+0x8c>
   }
   return -1;
 800195c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001960:	4618      	mov	r0, r3
 8001962:	3710      	adds	r7, #16
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}

08001968 <wizchip_setnetinfo>:

#endif

#if (_WIZCHIP_ == W5100 || _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5300 || _WIZCHIP_ == W5500)
void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2206      	movs	r2, #6
 8001974:	4619      	mov	r1, r3
 8001976:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 800197a:	f7fe fd4f 	bl	800041c <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	330e      	adds	r3, #14
 8001982:	2204      	movs	r2, #4
 8001984:	4619      	mov	r1, r3
 8001986:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800198a:	f7fe fd47 	bl	800041c <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	330a      	adds	r3, #10
 8001992:	2204      	movs	r2, #4
 8001994:	4619      	mov	r1, r3
 8001996:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 800199a:	f7fe fd3f 	bl	800041c <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	3306      	adds	r3, #6
 80019a2:	2204      	movs	r2, #4
 80019a4:	4619      	mov	r1, r3
 80019a6:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 80019aa:	f7fe fd37 	bl	800041c <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	7c9a      	ldrb	r2, [r3, #18]
 80019b2:	4b0b      	ldr	r3, [pc, #44]	@ (80019e0 <wizchip_setnetinfo+0x78>)
 80019b4:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	7cda      	ldrb	r2, [r3, #19]
 80019ba:	4b09      	ldr	r3, [pc, #36]	@ (80019e0 <wizchip_setnetinfo+0x78>)
 80019bc:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	7d1a      	ldrb	r2, [r3, #20]
 80019c2:	4b07      	ldr	r3, [pc, #28]	@ (80019e0 <wizchip_setnetinfo+0x78>)
 80019c4:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	7d5a      	ldrb	r2, [r3, #21]
 80019ca:	4b05      	ldr	r3, [pc, #20]	@ (80019e0 <wizchip_setnetinfo+0x78>)
 80019cc:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	7d9a      	ldrb	r2, [r3, #22]
 80019d2:	4b04      	ldr	r3, [pc, #16]	@ (80019e4 <wizchip_setnetinfo+0x7c>)
 80019d4:	701a      	strb	r2, [r3, #0]
}
 80019d6:	bf00      	nop
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	20001264 	.word	0x20001264
 80019e4:	20001268 	.word	0x20001268

080019e8 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2206      	movs	r2, #6
 80019f4:	4619      	mov	r1, r3
 80019f6:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 80019fa:	f7fe fcaf 	bl	800035c <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	330e      	adds	r3, #14
 8001a02:	2204      	movs	r2, #4
 8001a04:	4619      	mov	r1, r3
 8001a06:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001a0a:	f7fe fca7 	bl	800035c <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	330a      	adds	r3, #10
 8001a12:	2204      	movs	r2, #4
 8001a14:	4619      	mov	r1, r3
 8001a16:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8001a1a:	f7fe fc9f 	bl	800035c <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	3306      	adds	r3, #6
 8001a22:	2204      	movs	r2, #4
 8001a24:	4619      	mov	r1, r3
 8001a26:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8001a2a:	f7fe fc97 	bl	800035c <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 8001a2e:	4b0c      	ldr	r3, [pc, #48]	@ (8001a60 <wizchip_getnetinfo+0x78>)
 8001a30:	781a      	ldrb	r2, [r3, #0]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 8001a36:	4b0a      	ldr	r3, [pc, #40]	@ (8001a60 <wizchip_getnetinfo+0x78>)
 8001a38:	785a      	ldrb	r2, [r3, #1]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 8001a3e:	4b08      	ldr	r3, [pc, #32]	@ (8001a60 <wizchip_getnetinfo+0x78>)
 8001a40:	789a      	ldrb	r2, [r3, #2]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 8001a46:	4b06      	ldr	r3, [pc, #24]	@ (8001a60 <wizchip_getnetinfo+0x78>)
 8001a48:	78da      	ldrb	r2, [r3, #3]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 8001a4e:	4b05      	ldr	r3, [pc, #20]	@ (8001a64 <wizchip_getnetinfo+0x7c>)
 8001a50:	781a      	ldrb	r2, [r3, #0]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	759a      	strb	r2, [r3, #22]
}
 8001a56:	bf00      	nop
 8001a58:	3708      	adds	r7, #8
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	20001264 	.word	0x20001264
 8001a64:	20001268 	.word	0x20001268

08001a68 <wizchip_setnetmode>:

int8_t wizchip_setnetmode(netmode_type netmode)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	4603      	mov	r3, r0
 8001a70:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 8001a72:	2300      	movs	r3, #0
 8001a74:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ != W5500
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
#else
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
 8001a76:	79fb      	ldrb	r3, [r7, #7]
 8001a78:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d002      	beq.n	8001a86 <wizchip_setnetmode+0x1e>
 8001a80:	f04f 33ff 	mov.w	r3, #4294967295
 8001a84:	e00e      	b.n	8001aa4 <wizchip_setnetmode+0x3c>
#endif      
   tmp = getMR();
 8001a86:	2000      	movs	r0, #0
 8001a88:	f7fe fbce 	bl	8000228 <WIZCHIP_READ>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	73fb      	strb	r3, [r7, #15]
   tmp |= (uint8_t)netmode;
 8001a90:	7bfa      	ldrb	r2, [r7, #15]
 8001a92:	79fb      	ldrb	r3, [r7, #7]
 8001a94:	4313      	orrs	r3, r2
 8001a96:	73fb      	strb	r3, [r7, #15]
   setMR(tmp);
 8001a98:	7bfb      	ldrb	r3, [r7, #15]
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	2000      	movs	r0, #0
 8001a9e:	f7fe fc0f 	bl	80002c0 <WIZCHIP_WRITE>
   return 0;
 8001aa2:	2300      	movs	r3, #0
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	3710      	adds	r7, #16
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}

08001aac <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
   return (netmode_type) getMR();
 8001ab0:	2000      	movs	r0, #0
 8001ab2:	f7fe fbb9 	bl	8000228 <WIZCHIP_READ>
 8001ab6:	4603      	mov	r3, r0
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	bd80      	pop	{r7, pc}

08001abc <wizchip_settimeout>:

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
   setRCR(nettime->retry_cnt);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	4619      	mov	r1, r3
 8001aca:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 8001ace:	f7fe fbf7 	bl	80002c0 <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	885b      	ldrh	r3, [r3, #2]
 8001ad6:	0a1b      	lsrs	r3, r3, #8
 8001ad8:	b29b      	uxth	r3, r3
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	4619      	mov	r1, r3
 8001ade:	f44f 50c8 	mov.w	r0, #6400	@ 0x1900
 8001ae2:	f7fe fbed 	bl	80002c0 <WIZCHIP_WRITE>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	885b      	ldrh	r3, [r3, #2]
 8001aea:	b2db      	uxtb	r3, r3
 8001aec:	4619      	mov	r1, r3
 8001aee:	f44f 50d0 	mov.w	r0, #6656	@ 0x1a00
 8001af2:	f7fe fbe5 	bl	80002c0 <WIZCHIP_WRITE>
}
 8001af6:	bf00      	nop
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}

08001afe <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
 8001afe:	b590      	push	{r4, r7, lr}
 8001b00:	b083      	sub	sp, #12
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]
   nettime->retry_cnt = getRCR();
 8001b06:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 8001b0a:	f7fe fb8d 	bl	8000228 <WIZCHIP_READ>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	461a      	mov	r2, r3
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	701a      	strb	r2, [r3, #0]
   nettime->time_100us = getRTR();
 8001b16:	f44f 50c8 	mov.w	r0, #6400	@ 0x1900
 8001b1a:	f7fe fb85 	bl	8000228 <WIZCHIP_READ>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	021b      	lsls	r3, r3, #8
 8001b22:	b29c      	uxth	r4, r3
 8001b24:	f44f 50d0 	mov.w	r0, #6656	@ 0x1a00
 8001b28:	f7fe fb7e 	bl	8000228 <WIZCHIP_READ>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	4423      	add	r3, r4
 8001b30:	b29a      	uxth	r2, r3
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	805a      	strh	r2, [r3, #2]
}
 8001b36:	bf00      	nop
 8001b38:	370c      	adds	r7, #12
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd90      	pop	{r4, r7, pc}
	...

08001b40 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001b40:	480d      	ldr	r0, [pc, #52]	@ (8001b78 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001b42:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b44:	f7ff f9c8 	bl	8000ed8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b48:	480c      	ldr	r0, [pc, #48]	@ (8001b7c <LoopForever+0x6>)
  ldr r1, =_edata
 8001b4a:	490d      	ldr	r1, [pc, #52]	@ (8001b80 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b4c:	4a0d      	ldr	r2, [pc, #52]	@ (8001b84 <LoopForever+0xe>)
  movs r3, #0
 8001b4e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001b50:	e002      	b.n	8001b58 <LoopCopyDataInit>

08001b52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b56:	3304      	adds	r3, #4

08001b58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b5c:	d3f9      	bcc.n	8001b52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b5e:	4a0a      	ldr	r2, [pc, #40]	@ (8001b88 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b60:	4c0a      	ldr	r4, [pc, #40]	@ (8001b8c <LoopForever+0x16>)
  movs r3, #0
 8001b62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b64:	e001      	b.n	8001b6a <LoopFillZerobss>

08001b66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b68:	3204      	adds	r2, #4

08001b6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b6c:	d3fb      	bcc.n	8001b66 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b6e:	f002 f8ed 	bl	8003d4c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b72:	f7fe fd7b 	bl	800066c <main>

08001b76 <LoopForever>:

LoopForever:
    b LoopForever
 8001b76:	e7fe      	b.n	8001b76 <LoopForever>
  ldr   r0, =_estack
 8001b78:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b80:	200000c0 	.word	0x200000c0
  ldr r2, =_sidata
 8001b84:	08004400 	.word	0x08004400
  ldr r2, =_sbss
 8001b88:	200000c0 	.word	0x200000c0
  ldr r4, =_ebss
 8001b8c:	200013b8 	.word	0x200013b8

08001b90 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b90:	e7fe      	b.n	8001b90 <ADC1_2_IRQHandler>

08001b92 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b92:	b580      	push	{r7, lr}
 8001b94:	b082      	sub	sp, #8
 8001b96:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b9c:	2003      	movs	r0, #3
 8001b9e:	f000 f93d 	bl	8001e1c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ba2:	200f      	movs	r0, #15
 8001ba4:	f000 f80e 	bl	8001bc4 <HAL_InitTick>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d002      	beq.n	8001bb4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	71fb      	strb	r3, [r7, #7]
 8001bb2:	e001      	b.n	8001bb8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001bb4:	f7ff f8c4 	bl	8000d40 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001bb8:	79fb      	ldrb	r3, [r7, #7]

}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3708      	adds	r7, #8
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
	...

08001bc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001bd0:	4b16      	ldr	r3, [pc, #88]	@ (8001c2c <HAL_InitTick+0x68>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d022      	beq.n	8001c1e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001bd8:	4b15      	ldr	r3, [pc, #84]	@ (8001c30 <HAL_InitTick+0x6c>)
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	4b13      	ldr	r3, [pc, #76]	@ (8001c2c <HAL_InitTick+0x68>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001be4:	fbb1 f3f3 	udiv	r3, r1, r3
 8001be8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bec:	4618      	mov	r0, r3
 8001bee:	f000 f93a 	bl	8001e66 <HAL_SYSTICK_Config>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d10f      	bne.n	8001c18 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2b0f      	cmp	r3, #15
 8001bfc:	d809      	bhi.n	8001c12 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bfe:	2200      	movs	r2, #0
 8001c00:	6879      	ldr	r1, [r7, #4]
 8001c02:	f04f 30ff 	mov.w	r0, #4294967295
 8001c06:	f000 f914 	bl	8001e32 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c0a:	4a0a      	ldr	r2, [pc, #40]	@ (8001c34 <HAL_InitTick+0x70>)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6013      	str	r3, [r2, #0]
 8001c10:	e007      	b.n	8001c22 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	73fb      	strb	r3, [r7, #15]
 8001c16:	e004      	b.n	8001c22 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	73fb      	strb	r3, [r7, #15]
 8001c1c:	e001      	b.n	8001c22 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001c22:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3710      	adds	r7, #16
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	2000006c 	.word	0x2000006c
 8001c30:	20000038 	.word	0x20000038
 8001c34:	20000068 	.word	0x20000068

08001c38 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c3c:	4b05      	ldr	r3, [pc, #20]	@ (8001c54 <HAL_IncTick+0x1c>)
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	4b05      	ldr	r3, [pc, #20]	@ (8001c58 <HAL_IncTick+0x20>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4413      	add	r3, r2
 8001c46:	4a03      	ldr	r2, [pc, #12]	@ (8001c54 <HAL_IncTick+0x1c>)
 8001c48:	6013      	str	r3, [r2, #0]
}
 8001c4a:	bf00      	nop
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr
 8001c54:	2000126c 	.word	0x2000126c
 8001c58:	2000006c 	.word	0x2000006c

08001c5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c60:	4b03      	ldr	r3, [pc, #12]	@ (8001c70 <HAL_GetTick+0x14>)
 8001c62:	681b      	ldr	r3, [r3, #0]
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	2000126c 	.word	0x2000126c

08001c74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b084      	sub	sp, #16
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c7c:	f7ff ffee 	bl	8001c5c <HAL_GetTick>
 8001c80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c8c:	d004      	beq.n	8001c98 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c8e:	4b09      	ldr	r3, [pc, #36]	@ (8001cb4 <HAL_Delay+0x40>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	68fa      	ldr	r2, [r7, #12]
 8001c94:	4413      	add	r3, r2
 8001c96:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c98:	bf00      	nop
 8001c9a:	f7ff ffdf 	bl	8001c5c <HAL_GetTick>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	1ad3      	subs	r3, r2, r3
 8001ca4:	68fa      	ldr	r2, [r7, #12]
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d8f7      	bhi.n	8001c9a <HAL_Delay+0x26>
  {
  }
}
 8001caa:	bf00      	nop
 8001cac:	bf00      	nop
 8001cae:	3710      	adds	r7, #16
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	2000006c 	.word	0x2000006c

08001cb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b085      	sub	sp, #20
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	f003 0307 	and.w	r3, r3, #7
 8001cc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cc8:	4b0c      	ldr	r3, [pc, #48]	@ (8001cfc <__NVIC_SetPriorityGrouping+0x44>)
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cce:	68ba      	ldr	r2, [r7, #8]
 8001cd0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ce0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ce4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ce8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cea:	4a04      	ldr	r2, [pc, #16]	@ (8001cfc <__NVIC_SetPriorityGrouping+0x44>)
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	60d3      	str	r3, [r2, #12]
}
 8001cf0:	bf00      	nop
 8001cf2:	3714      	adds	r7, #20
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr
 8001cfc:	e000ed00 	.word	0xe000ed00

08001d00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d04:	4b04      	ldr	r3, [pc, #16]	@ (8001d18 <__NVIC_GetPriorityGrouping+0x18>)
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	0a1b      	lsrs	r3, r3, #8
 8001d0a:	f003 0307 	and.w	r3, r3, #7
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr
 8001d18:	e000ed00 	.word	0xe000ed00

08001d1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	4603      	mov	r3, r0
 8001d24:	6039      	str	r1, [r7, #0]
 8001d26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	db0a      	blt.n	8001d46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	b2da      	uxtb	r2, r3
 8001d34:	490c      	ldr	r1, [pc, #48]	@ (8001d68 <__NVIC_SetPriority+0x4c>)
 8001d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d3a:	0112      	lsls	r2, r2, #4
 8001d3c:	b2d2      	uxtb	r2, r2
 8001d3e:	440b      	add	r3, r1
 8001d40:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d44:	e00a      	b.n	8001d5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	b2da      	uxtb	r2, r3
 8001d4a:	4908      	ldr	r1, [pc, #32]	@ (8001d6c <__NVIC_SetPriority+0x50>)
 8001d4c:	79fb      	ldrb	r3, [r7, #7]
 8001d4e:	f003 030f 	and.w	r3, r3, #15
 8001d52:	3b04      	subs	r3, #4
 8001d54:	0112      	lsls	r2, r2, #4
 8001d56:	b2d2      	uxtb	r2, r2
 8001d58:	440b      	add	r3, r1
 8001d5a:	761a      	strb	r2, [r3, #24]
}
 8001d5c:	bf00      	nop
 8001d5e:	370c      	adds	r7, #12
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr
 8001d68:	e000e100 	.word	0xe000e100
 8001d6c:	e000ed00 	.word	0xe000ed00

08001d70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b089      	sub	sp, #36	@ 0x24
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	60f8      	str	r0, [r7, #12]
 8001d78:	60b9      	str	r1, [r7, #8]
 8001d7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	f003 0307 	and.w	r3, r3, #7
 8001d82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d84:	69fb      	ldr	r3, [r7, #28]
 8001d86:	f1c3 0307 	rsb	r3, r3, #7
 8001d8a:	2b04      	cmp	r3, #4
 8001d8c:	bf28      	it	cs
 8001d8e:	2304      	movcs	r3, #4
 8001d90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	3304      	adds	r3, #4
 8001d96:	2b06      	cmp	r3, #6
 8001d98:	d902      	bls.n	8001da0 <NVIC_EncodePriority+0x30>
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	3b03      	subs	r3, #3
 8001d9e:	e000      	b.n	8001da2 <NVIC_EncodePriority+0x32>
 8001da0:	2300      	movs	r3, #0
 8001da2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001da4:	f04f 32ff 	mov.w	r2, #4294967295
 8001da8:	69bb      	ldr	r3, [r7, #24]
 8001daa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dae:	43da      	mvns	r2, r3
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	401a      	ands	r2, r3
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001db8:	f04f 31ff 	mov.w	r1, #4294967295
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	fa01 f303 	lsl.w	r3, r1, r3
 8001dc2:	43d9      	mvns	r1, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dc8:	4313      	orrs	r3, r2
         );
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3724      	adds	r7, #36	@ 0x24
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
	...

08001dd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	3b01      	subs	r3, #1
 8001de4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001de8:	d301      	bcc.n	8001dee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dea:	2301      	movs	r3, #1
 8001dec:	e00f      	b.n	8001e0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dee:	4a0a      	ldr	r2, [pc, #40]	@ (8001e18 <SysTick_Config+0x40>)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	3b01      	subs	r3, #1
 8001df4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001df6:	210f      	movs	r1, #15
 8001df8:	f04f 30ff 	mov.w	r0, #4294967295
 8001dfc:	f7ff ff8e 	bl	8001d1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e00:	4b05      	ldr	r3, [pc, #20]	@ (8001e18 <SysTick_Config+0x40>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e06:	4b04      	ldr	r3, [pc, #16]	@ (8001e18 <SysTick_Config+0x40>)
 8001e08:	2207      	movs	r2, #7
 8001e0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e0c:	2300      	movs	r3, #0
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3708      	adds	r7, #8
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	e000e010 	.word	0xe000e010

08001e1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	f7ff ff47 	bl	8001cb8 <__NVIC_SetPriorityGrouping>
}
 8001e2a:	bf00      	nop
 8001e2c:	3708      	adds	r7, #8
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}

08001e32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e32:	b580      	push	{r7, lr}
 8001e34:	b086      	sub	sp, #24
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	4603      	mov	r3, r0
 8001e3a:	60b9      	str	r1, [r7, #8]
 8001e3c:	607a      	str	r2, [r7, #4]
 8001e3e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e40:	f7ff ff5e 	bl	8001d00 <__NVIC_GetPriorityGrouping>
 8001e44:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	68b9      	ldr	r1, [r7, #8]
 8001e4a:	6978      	ldr	r0, [r7, #20]
 8001e4c:	f7ff ff90 	bl	8001d70 <NVIC_EncodePriority>
 8001e50:	4602      	mov	r2, r0
 8001e52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e56:	4611      	mov	r1, r2
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f7ff ff5f 	bl	8001d1c <__NVIC_SetPriority>
}
 8001e5e:	bf00      	nop
 8001e60:	3718      	adds	r7, #24
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}

08001e66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e66:	b580      	push	{r7, lr}
 8001e68:	b082      	sub	sp, #8
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f7ff ffb2 	bl	8001dd8 <SysTick_Config>
 8001e74:	4603      	mov	r3, r0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3708      	adds	r7, #8
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
	...

08001e80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b087      	sub	sp, #28
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001e8e:	e15a      	b.n	8002146 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	2101      	movs	r1, #1
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	fa01 f303 	lsl.w	r3, r1, r3
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	f000 814c 	beq.w	8002140 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f003 0303 	and.w	r3, r3, #3
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d005      	beq.n	8001ec0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001ebc:	2b02      	cmp	r3, #2
 8001ebe:	d130      	bne.n	8001f22 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	005b      	lsls	r3, r3, #1
 8001eca:	2203      	movs	r2, #3
 8001ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed0:	43db      	mvns	r3, r3
 8001ed2:	693a      	ldr	r2, [r7, #16]
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	68da      	ldr	r2, [r3, #12]
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	005b      	lsls	r3, r3, #1
 8001ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee4:	693a      	ldr	r2, [r7, #16]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	693a      	ldr	r2, [r7, #16]
 8001eee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	fa02 f303 	lsl.w	r3, r2, r3
 8001efe:	43db      	mvns	r3, r3
 8001f00:	693a      	ldr	r2, [r7, #16]
 8001f02:	4013      	ands	r3, r2
 8001f04:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	091b      	lsrs	r3, r3, #4
 8001f0c:	f003 0201 	and.w	r2, r3, #1
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	fa02 f303 	lsl.w	r3, r2, r3
 8001f16:	693a      	ldr	r2, [r7, #16]
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	693a      	ldr	r2, [r7, #16]
 8001f20:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	f003 0303 	and.w	r3, r3, #3
 8001f2a:	2b03      	cmp	r3, #3
 8001f2c:	d017      	beq.n	8001f5e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	68db      	ldr	r3, [r3, #12]
 8001f32:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	005b      	lsls	r3, r3, #1
 8001f38:	2203      	movs	r2, #3
 8001f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3e:	43db      	mvns	r3, r3
 8001f40:	693a      	ldr	r2, [r7, #16]
 8001f42:	4013      	ands	r3, r2
 8001f44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	689a      	ldr	r2, [r3, #8]
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	005b      	lsls	r3, r3, #1
 8001f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f52:	693a      	ldr	r2, [r7, #16]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	693a      	ldr	r2, [r7, #16]
 8001f5c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	f003 0303 	and.w	r3, r3, #3
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d123      	bne.n	8001fb2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	08da      	lsrs	r2, r3, #3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	3208      	adds	r2, #8
 8001f72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f76:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	f003 0307 	and.w	r3, r3, #7
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	220f      	movs	r2, #15
 8001f82:	fa02 f303 	lsl.w	r3, r2, r3
 8001f86:	43db      	mvns	r3, r3
 8001f88:	693a      	ldr	r2, [r7, #16]
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	691a      	ldr	r2, [r3, #16]
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	f003 0307 	and.w	r3, r3, #7
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9e:	693a      	ldr	r2, [r7, #16]
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	08da      	lsrs	r2, r3, #3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	3208      	adds	r2, #8
 8001fac:	6939      	ldr	r1, [r7, #16]
 8001fae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	005b      	lsls	r3, r3, #1
 8001fbc:	2203      	movs	r2, #3
 8001fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc2:	43db      	mvns	r3, r3
 8001fc4:	693a      	ldr	r2, [r7, #16]
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	f003 0203 	and.w	r2, r3, #3
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	005b      	lsls	r3, r3, #1
 8001fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fda:	693a      	ldr	r2, [r7, #16]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	693a      	ldr	r2, [r7, #16]
 8001fe4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	f000 80a6 	beq.w	8002140 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ff4:	4b5b      	ldr	r3, [pc, #364]	@ (8002164 <HAL_GPIO_Init+0x2e4>)
 8001ff6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ff8:	4a5a      	ldr	r2, [pc, #360]	@ (8002164 <HAL_GPIO_Init+0x2e4>)
 8001ffa:	f043 0301 	orr.w	r3, r3, #1
 8001ffe:	6613      	str	r3, [r2, #96]	@ 0x60
 8002000:	4b58      	ldr	r3, [pc, #352]	@ (8002164 <HAL_GPIO_Init+0x2e4>)
 8002002:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002004:	f003 0301 	and.w	r3, r3, #1
 8002008:	60bb      	str	r3, [r7, #8]
 800200a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800200c:	4a56      	ldr	r2, [pc, #344]	@ (8002168 <HAL_GPIO_Init+0x2e8>)
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	089b      	lsrs	r3, r3, #2
 8002012:	3302      	adds	r3, #2
 8002014:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002018:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	f003 0303 	and.w	r3, r3, #3
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	220f      	movs	r2, #15
 8002024:	fa02 f303 	lsl.w	r3, r2, r3
 8002028:	43db      	mvns	r3, r3
 800202a:	693a      	ldr	r2, [r7, #16]
 800202c:	4013      	ands	r3, r2
 800202e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002036:	d01f      	beq.n	8002078 <HAL_GPIO_Init+0x1f8>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	4a4c      	ldr	r2, [pc, #304]	@ (800216c <HAL_GPIO_Init+0x2ec>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d019      	beq.n	8002074 <HAL_GPIO_Init+0x1f4>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	4a4b      	ldr	r2, [pc, #300]	@ (8002170 <HAL_GPIO_Init+0x2f0>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d013      	beq.n	8002070 <HAL_GPIO_Init+0x1f0>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	4a4a      	ldr	r2, [pc, #296]	@ (8002174 <HAL_GPIO_Init+0x2f4>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d00d      	beq.n	800206c <HAL_GPIO_Init+0x1ec>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	4a49      	ldr	r2, [pc, #292]	@ (8002178 <HAL_GPIO_Init+0x2f8>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d007      	beq.n	8002068 <HAL_GPIO_Init+0x1e8>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	4a48      	ldr	r2, [pc, #288]	@ (800217c <HAL_GPIO_Init+0x2fc>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d101      	bne.n	8002064 <HAL_GPIO_Init+0x1e4>
 8002060:	2305      	movs	r3, #5
 8002062:	e00a      	b.n	800207a <HAL_GPIO_Init+0x1fa>
 8002064:	2306      	movs	r3, #6
 8002066:	e008      	b.n	800207a <HAL_GPIO_Init+0x1fa>
 8002068:	2304      	movs	r3, #4
 800206a:	e006      	b.n	800207a <HAL_GPIO_Init+0x1fa>
 800206c:	2303      	movs	r3, #3
 800206e:	e004      	b.n	800207a <HAL_GPIO_Init+0x1fa>
 8002070:	2302      	movs	r3, #2
 8002072:	e002      	b.n	800207a <HAL_GPIO_Init+0x1fa>
 8002074:	2301      	movs	r3, #1
 8002076:	e000      	b.n	800207a <HAL_GPIO_Init+0x1fa>
 8002078:	2300      	movs	r3, #0
 800207a:	697a      	ldr	r2, [r7, #20]
 800207c:	f002 0203 	and.w	r2, r2, #3
 8002080:	0092      	lsls	r2, r2, #2
 8002082:	4093      	lsls	r3, r2
 8002084:	693a      	ldr	r2, [r7, #16]
 8002086:	4313      	orrs	r3, r2
 8002088:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800208a:	4937      	ldr	r1, [pc, #220]	@ (8002168 <HAL_GPIO_Init+0x2e8>)
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	089b      	lsrs	r3, r3, #2
 8002090:	3302      	adds	r3, #2
 8002092:	693a      	ldr	r2, [r7, #16]
 8002094:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002098:	4b39      	ldr	r3, [pc, #228]	@ (8002180 <HAL_GPIO_Init+0x300>)
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	43db      	mvns	r3, r3
 80020a2:	693a      	ldr	r2, [r7, #16]
 80020a4:	4013      	ands	r3, r2
 80020a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d003      	beq.n	80020bc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80020b4:	693a      	ldr	r2, [r7, #16]
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80020bc:	4a30      	ldr	r2, [pc, #192]	@ (8002180 <HAL_GPIO_Init+0x300>)
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80020c2:	4b2f      	ldr	r3, [pc, #188]	@ (8002180 <HAL_GPIO_Init+0x300>)
 80020c4:	68db      	ldr	r3, [r3, #12]
 80020c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	43db      	mvns	r3, r3
 80020cc:	693a      	ldr	r2, [r7, #16]
 80020ce:	4013      	ands	r3, r2
 80020d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d003      	beq.n	80020e6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80020de:	693a      	ldr	r2, [r7, #16]
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80020e6:	4a26      	ldr	r2, [pc, #152]	@ (8002180 <HAL_GPIO_Init+0x300>)
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80020ec:	4b24      	ldr	r3, [pc, #144]	@ (8002180 <HAL_GPIO_Init+0x300>)
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	43db      	mvns	r3, r3
 80020f6:	693a      	ldr	r2, [r7, #16]
 80020f8:	4013      	ands	r3, r2
 80020fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d003      	beq.n	8002110 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002108:	693a      	ldr	r2, [r7, #16]
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	4313      	orrs	r3, r2
 800210e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002110:	4a1b      	ldr	r2, [pc, #108]	@ (8002180 <HAL_GPIO_Init+0x300>)
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002116:	4b1a      	ldr	r3, [pc, #104]	@ (8002180 <HAL_GPIO_Init+0x300>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	43db      	mvns	r3, r3
 8002120:	693a      	ldr	r2, [r7, #16]
 8002122:	4013      	ands	r3, r2
 8002124:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d003      	beq.n	800213a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002132:	693a      	ldr	r2, [r7, #16]
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	4313      	orrs	r3, r2
 8002138:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800213a:	4a11      	ldr	r2, [pc, #68]	@ (8002180 <HAL_GPIO_Init+0x300>)
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	3301      	adds	r3, #1
 8002144:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	fa22 f303 	lsr.w	r3, r2, r3
 8002150:	2b00      	cmp	r3, #0
 8002152:	f47f ae9d 	bne.w	8001e90 <HAL_GPIO_Init+0x10>
  }
}
 8002156:	bf00      	nop
 8002158:	bf00      	nop
 800215a:	371c      	adds	r7, #28
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr
 8002164:	40021000 	.word	0x40021000
 8002168:	40010000 	.word	0x40010000
 800216c:	48000400 	.word	0x48000400
 8002170:	48000800 	.word	0x48000800
 8002174:	48000c00 	.word	0x48000c00
 8002178:	48001000 	.word	0x48001000
 800217c:	48001400 	.word	0x48001400
 8002180:	40010400 	.word	0x40010400

08002184 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002184:	b480      	push	{r7}
 8002186:	b085      	sub	sp, #20
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	460b      	mov	r3, r1
 800218e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	691a      	ldr	r2, [r3, #16]
 8002194:	887b      	ldrh	r3, [r7, #2]
 8002196:	4013      	ands	r3, r2
 8002198:	2b00      	cmp	r3, #0
 800219a:	d002      	beq.n	80021a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800219c:	2301      	movs	r3, #1
 800219e:	73fb      	strb	r3, [r7, #15]
 80021a0:	e001      	b.n	80021a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80021a2:	2300      	movs	r3, #0
 80021a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80021a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3714      	adds	r7, #20
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr

080021b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	460b      	mov	r3, r1
 80021be:	807b      	strh	r3, [r7, #2]
 80021c0:	4613      	mov	r3, r2
 80021c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021c4:	787b      	ldrb	r3, [r7, #1]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d003      	beq.n	80021d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80021ca:	887a      	ldrh	r2, [r7, #2]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80021d0:	e002      	b.n	80021d8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80021d2:	887a      	ldrh	r2, [r7, #2]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80021d8:	bf00      	nop
 80021da:	370c      	adds	r7, #12
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr

080021e4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b085      	sub	sp, #20
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d141      	bne.n	8002276 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80021f2:	4b4b      	ldr	r3, [pc, #300]	@ (8002320 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80021fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021fe:	d131      	bne.n	8002264 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002200:	4b47      	ldr	r3, [pc, #284]	@ (8002320 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002202:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002206:	4a46      	ldr	r2, [pc, #280]	@ (8002320 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002208:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800220c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002210:	4b43      	ldr	r3, [pc, #268]	@ (8002320 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002218:	4a41      	ldr	r2, [pc, #260]	@ (8002320 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800221a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800221e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002220:	4b40      	ldr	r3, [pc, #256]	@ (8002324 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	2232      	movs	r2, #50	@ 0x32
 8002226:	fb02 f303 	mul.w	r3, r2, r3
 800222a:	4a3f      	ldr	r2, [pc, #252]	@ (8002328 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800222c:	fba2 2303 	umull	r2, r3, r2, r3
 8002230:	0c9b      	lsrs	r3, r3, #18
 8002232:	3301      	adds	r3, #1
 8002234:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002236:	e002      	b.n	800223e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	3b01      	subs	r3, #1
 800223c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800223e:	4b38      	ldr	r3, [pc, #224]	@ (8002320 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002240:	695b      	ldr	r3, [r3, #20]
 8002242:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002246:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800224a:	d102      	bne.n	8002252 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d1f2      	bne.n	8002238 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002252:	4b33      	ldr	r3, [pc, #204]	@ (8002320 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002254:	695b      	ldr	r3, [r3, #20]
 8002256:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800225a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800225e:	d158      	bne.n	8002312 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002260:	2303      	movs	r3, #3
 8002262:	e057      	b.n	8002314 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002264:	4b2e      	ldr	r3, [pc, #184]	@ (8002320 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002266:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800226a:	4a2d      	ldr	r2, [pc, #180]	@ (8002320 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800226c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002270:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002274:	e04d      	b.n	8002312 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800227c:	d141      	bne.n	8002302 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800227e:	4b28      	ldr	r3, [pc, #160]	@ (8002320 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002286:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800228a:	d131      	bne.n	80022f0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800228c:	4b24      	ldr	r3, [pc, #144]	@ (8002320 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800228e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002292:	4a23      	ldr	r2, [pc, #140]	@ (8002320 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002294:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002298:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800229c:	4b20      	ldr	r3, [pc, #128]	@ (8002320 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80022a4:	4a1e      	ldr	r2, [pc, #120]	@ (8002320 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80022aa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80022ac:	4b1d      	ldr	r3, [pc, #116]	@ (8002324 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	2232      	movs	r2, #50	@ 0x32
 80022b2:	fb02 f303 	mul.w	r3, r2, r3
 80022b6:	4a1c      	ldr	r2, [pc, #112]	@ (8002328 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80022b8:	fba2 2303 	umull	r2, r3, r2, r3
 80022bc:	0c9b      	lsrs	r3, r3, #18
 80022be:	3301      	adds	r3, #1
 80022c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022c2:	e002      	b.n	80022ca <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	3b01      	subs	r3, #1
 80022c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022ca:	4b15      	ldr	r3, [pc, #84]	@ (8002320 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022cc:	695b      	ldr	r3, [r3, #20]
 80022ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022d6:	d102      	bne.n	80022de <HAL_PWREx_ControlVoltageScaling+0xfa>
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d1f2      	bne.n	80022c4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80022de:	4b10      	ldr	r3, [pc, #64]	@ (8002320 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022e0:	695b      	ldr	r3, [r3, #20]
 80022e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022ea:	d112      	bne.n	8002312 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80022ec:	2303      	movs	r3, #3
 80022ee:	e011      	b.n	8002314 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80022f0:	4b0b      	ldr	r3, [pc, #44]	@ (8002320 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80022f6:	4a0a      	ldr	r2, [pc, #40]	@ (8002320 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022fc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002300:	e007      	b.n	8002312 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002302:	4b07      	ldr	r3, [pc, #28]	@ (8002320 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800230a:	4a05      	ldr	r2, [pc, #20]	@ (8002320 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800230c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002310:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002312:	2300      	movs	r3, #0
}
 8002314:	4618      	mov	r0, r3
 8002316:	3714      	adds	r7, #20
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr
 8002320:	40007000 	.word	0x40007000
 8002324:	20000038 	.word	0x20000038
 8002328:	431bde83 	.word	0x431bde83

0800232c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800232c:	b480      	push	{r7}
 800232e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002330:	4b05      	ldr	r3, [pc, #20]	@ (8002348 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	4a04      	ldr	r2, [pc, #16]	@ (8002348 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002336:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800233a:	6093      	str	r3, [r2, #8]
}
 800233c:	bf00      	nop
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr
 8002346:	bf00      	nop
 8002348:	40007000 	.word	0x40007000

0800234c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b088      	sub	sp, #32
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d101      	bne.n	800235e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e2fe      	b.n	800295c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0301 	and.w	r3, r3, #1
 8002366:	2b00      	cmp	r3, #0
 8002368:	d075      	beq.n	8002456 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800236a:	4b97      	ldr	r3, [pc, #604]	@ (80025c8 <HAL_RCC_OscConfig+0x27c>)
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	f003 030c 	and.w	r3, r3, #12
 8002372:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002374:	4b94      	ldr	r3, [pc, #592]	@ (80025c8 <HAL_RCC_OscConfig+0x27c>)
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	f003 0303 	and.w	r3, r3, #3
 800237c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800237e:	69bb      	ldr	r3, [r7, #24]
 8002380:	2b0c      	cmp	r3, #12
 8002382:	d102      	bne.n	800238a <HAL_RCC_OscConfig+0x3e>
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	2b03      	cmp	r3, #3
 8002388:	d002      	beq.n	8002390 <HAL_RCC_OscConfig+0x44>
 800238a:	69bb      	ldr	r3, [r7, #24]
 800238c:	2b08      	cmp	r3, #8
 800238e:	d10b      	bne.n	80023a8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002390:	4b8d      	ldr	r3, [pc, #564]	@ (80025c8 <HAL_RCC_OscConfig+0x27c>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002398:	2b00      	cmp	r3, #0
 800239a:	d05b      	beq.n	8002454 <HAL_RCC_OscConfig+0x108>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d157      	bne.n	8002454 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e2d9      	b.n	800295c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023b0:	d106      	bne.n	80023c0 <HAL_RCC_OscConfig+0x74>
 80023b2:	4b85      	ldr	r3, [pc, #532]	@ (80025c8 <HAL_RCC_OscConfig+0x27c>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a84      	ldr	r2, [pc, #528]	@ (80025c8 <HAL_RCC_OscConfig+0x27c>)
 80023b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023bc:	6013      	str	r3, [r2, #0]
 80023be:	e01d      	b.n	80023fc <HAL_RCC_OscConfig+0xb0>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80023c8:	d10c      	bne.n	80023e4 <HAL_RCC_OscConfig+0x98>
 80023ca:	4b7f      	ldr	r3, [pc, #508]	@ (80025c8 <HAL_RCC_OscConfig+0x27c>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a7e      	ldr	r2, [pc, #504]	@ (80025c8 <HAL_RCC_OscConfig+0x27c>)
 80023d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80023d4:	6013      	str	r3, [r2, #0]
 80023d6:	4b7c      	ldr	r3, [pc, #496]	@ (80025c8 <HAL_RCC_OscConfig+0x27c>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a7b      	ldr	r2, [pc, #492]	@ (80025c8 <HAL_RCC_OscConfig+0x27c>)
 80023dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023e0:	6013      	str	r3, [r2, #0]
 80023e2:	e00b      	b.n	80023fc <HAL_RCC_OscConfig+0xb0>
 80023e4:	4b78      	ldr	r3, [pc, #480]	@ (80025c8 <HAL_RCC_OscConfig+0x27c>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a77      	ldr	r2, [pc, #476]	@ (80025c8 <HAL_RCC_OscConfig+0x27c>)
 80023ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023ee:	6013      	str	r3, [r2, #0]
 80023f0:	4b75      	ldr	r3, [pc, #468]	@ (80025c8 <HAL_RCC_OscConfig+0x27c>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a74      	ldr	r2, [pc, #464]	@ (80025c8 <HAL_RCC_OscConfig+0x27c>)
 80023f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80023fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d013      	beq.n	800242c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002404:	f7ff fc2a 	bl	8001c5c <HAL_GetTick>
 8002408:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800240a:	e008      	b.n	800241e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800240c:	f7ff fc26 	bl	8001c5c <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	2b64      	cmp	r3, #100	@ 0x64
 8002418:	d901      	bls.n	800241e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	e29e      	b.n	800295c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800241e:	4b6a      	ldr	r3, [pc, #424]	@ (80025c8 <HAL_RCC_OscConfig+0x27c>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d0f0      	beq.n	800240c <HAL_RCC_OscConfig+0xc0>
 800242a:	e014      	b.n	8002456 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800242c:	f7ff fc16 	bl	8001c5c <HAL_GetTick>
 8002430:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002432:	e008      	b.n	8002446 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002434:	f7ff fc12 	bl	8001c5c <HAL_GetTick>
 8002438:	4602      	mov	r2, r0
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	2b64      	cmp	r3, #100	@ 0x64
 8002440:	d901      	bls.n	8002446 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002442:	2303      	movs	r3, #3
 8002444:	e28a      	b.n	800295c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002446:	4b60      	ldr	r3, [pc, #384]	@ (80025c8 <HAL_RCC_OscConfig+0x27c>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d1f0      	bne.n	8002434 <HAL_RCC_OscConfig+0xe8>
 8002452:	e000      	b.n	8002456 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002454:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0302 	and.w	r3, r3, #2
 800245e:	2b00      	cmp	r3, #0
 8002460:	d075      	beq.n	800254e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002462:	4b59      	ldr	r3, [pc, #356]	@ (80025c8 <HAL_RCC_OscConfig+0x27c>)
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	f003 030c 	and.w	r3, r3, #12
 800246a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800246c:	4b56      	ldr	r3, [pc, #344]	@ (80025c8 <HAL_RCC_OscConfig+0x27c>)
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	f003 0303 	and.w	r3, r3, #3
 8002474:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002476:	69bb      	ldr	r3, [r7, #24]
 8002478:	2b0c      	cmp	r3, #12
 800247a:	d102      	bne.n	8002482 <HAL_RCC_OscConfig+0x136>
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	2b02      	cmp	r3, #2
 8002480:	d002      	beq.n	8002488 <HAL_RCC_OscConfig+0x13c>
 8002482:	69bb      	ldr	r3, [r7, #24]
 8002484:	2b04      	cmp	r3, #4
 8002486:	d11f      	bne.n	80024c8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002488:	4b4f      	ldr	r3, [pc, #316]	@ (80025c8 <HAL_RCC_OscConfig+0x27c>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002490:	2b00      	cmp	r3, #0
 8002492:	d005      	beq.n	80024a0 <HAL_RCC_OscConfig+0x154>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d101      	bne.n	80024a0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e25d      	b.n	800295c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024a0:	4b49      	ldr	r3, [pc, #292]	@ (80025c8 <HAL_RCC_OscConfig+0x27c>)
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	691b      	ldr	r3, [r3, #16]
 80024ac:	061b      	lsls	r3, r3, #24
 80024ae:	4946      	ldr	r1, [pc, #280]	@ (80025c8 <HAL_RCC_OscConfig+0x27c>)
 80024b0:	4313      	orrs	r3, r2
 80024b2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80024b4:	4b45      	ldr	r3, [pc, #276]	@ (80025cc <HAL_RCC_OscConfig+0x280>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4618      	mov	r0, r3
 80024ba:	f7ff fb83 	bl	8001bc4 <HAL_InitTick>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d043      	beq.n	800254c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e249      	b.n	800295c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d023      	beq.n	8002518 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024d0:	4b3d      	ldr	r3, [pc, #244]	@ (80025c8 <HAL_RCC_OscConfig+0x27c>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a3c      	ldr	r2, [pc, #240]	@ (80025c8 <HAL_RCC_OscConfig+0x27c>)
 80024d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024dc:	f7ff fbbe 	bl	8001c5c <HAL_GetTick>
 80024e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024e2:	e008      	b.n	80024f6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024e4:	f7ff fbba 	bl	8001c5c <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d901      	bls.n	80024f6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	e232      	b.n	800295c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024f6:	4b34      	ldr	r3, [pc, #208]	@ (80025c8 <HAL_RCC_OscConfig+0x27c>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d0f0      	beq.n	80024e4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002502:	4b31      	ldr	r3, [pc, #196]	@ (80025c8 <HAL_RCC_OscConfig+0x27c>)
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	691b      	ldr	r3, [r3, #16]
 800250e:	061b      	lsls	r3, r3, #24
 8002510:	492d      	ldr	r1, [pc, #180]	@ (80025c8 <HAL_RCC_OscConfig+0x27c>)
 8002512:	4313      	orrs	r3, r2
 8002514:	604b      	str	r3, [r1, #4]
 8002516:	e01a      	b.n	800254e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002518:	4b2b      	ldr	r3, [pc, #172]	@ (80025c8 <HAL_RCC_OscConfig+0x27c>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a2a      	ldr	r2, [pc, #168]	@ (80025c8 <HAL_RCC_OscConfig+0x27c>)
 800251e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002522:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002524:	f7ff fb9a 	bl	8001c5c <HAL_GetTick>
 8002528:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800252a:	e008      	b.n	800253e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800252c:	f7ff fb96 	bl	8001c5c <HAL_GetTick>
 8002530:	4602      	mov	r2, r0
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	2b02      	cmp	r3, #2
 8002538:	d901      	bls.n	800253e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800253a:	2303      	movs	r3, #3
 800253c:	e20e      	b.n	800295c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800253e:	4b22      	ldr	r3, [pc, #136]	@ (80025c8 <HAL_RCC_OscConfig+0x27c>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002546:	2b00      	cmp	r3, #0
 8002548:	d1f0      	bne.n	800252c <HAL_RCC_OscConfig+0x1e0>
 800254a:	e000      	b.n	800254e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800254c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0308 	and.w	r3, r3, #8
 8002556:	2b00      	cmp	r3, #0
 8002558:	d041      	beq.n	80025de <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	695b      	ldr	r3, [r3, #20]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d01c      	beq.n	800259c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002562:	4b19      	ldr	r3, [pc, #100]	@ (80025c8 <HAL_RCC_OscConfig+0x27c>)
 8002564:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002568:	4a17      	ldr	r2, [pc, #92]	@ (80025c8 <HAL_RCC_OscConfig+0x27c>)
 800256a:	f043 0301 	orr.w	r3, r3, #1
 800256e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002572:	f7ff fb73 	bl	8001c5c <HAL_GetTick>
 8002576:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002578:	e008      	b.n	800258c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800257a:	f7ff fb6f 	bl	8001c5c <HAL_GetTick>
 800257e:	4602      	mov	r2, r0
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	2b02      	cmp	r3, #2
 8002586:	d901      	bls.n	800258c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002588:	2303      	movs	r3, #3
 800258a:	e1e7      	b.n	800295c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800258c:	4b0e      	ldr	r3, [pc, #56]	@ (80025c8 <HAL_RCC_OscConfig+0x27c>)
 800258e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002592:	f003 0302 	and.w	r3, r3, #2
 8002596:	2b00      	cmp	r3, #0
 8002598:	d0ef      	beq.n	800257a <HAL_RCC_OscConfig+0x22e>
 800259a:	e020      	b.n	80025de <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800259c:	4b0a      	ldr	r3, [pc, #40]	@ (80025c8 <HAL_RCC_OscConfig+0x27c>)
 800259e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80025a2:	4a09      	ldr	r2, [pc, #36]	@ (80025c8 <HAL_RCC_OscConfig+0x27c>)
 80025a4:	f023 0301 	bic.w	r3, r3, #1
 80025a8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025ac:	f7ff fb56 	bl	8001c5c <HAL_GetTick>
 80025b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80025b2:	e00d      	b.n	80025d0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025b4:	f7ff fb52 	bl	8001c5c <HAL_GetTick>
 80025b8:	4602      	mov	r2, r0
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	2b02      	cmp	r3, #2
 80025c0:	d906      	bls.n	80025d0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80025c2:	2303      	movs	r3, #3
 80025c4:	e1ca      	b.n	800295c <HAL_RCC_OscConfig+0x610>
 80025c6:	bf00      	nop
 80025c8:	40021000 	.word	0x40021000
 80025cc:	20000068 	.word	0x20000068
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80025d0:	4b8c      	ldr	r3, [pc, #560]	@ (8002804 <HAL_RCC_OscConfig+0x4b8>)
 80025d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80025d6:	f003 0302 	and.w	r3, r3, #2
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d1ea      	bne.n	80025b4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0304 	and.w	r3, r3, #4
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	f000 80a6 	beq.w	8002738 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025ec:	2300      	movs	r3, #0
 80025ee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80025f0:	4b84      	ldr	r3, [pc, #528]	@ (8002804 <HAL_RCC_OscConfig+0x4b8>)
 80025f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d101      	bne.n	8002600 <HAL_RCC_OscConfig+0x2b4>
 80025fc:	2301      	movs	r3, #1
 80025fe:	e000      	b.n	8002602 <HAL_RCC_OscConfig+0x2b6>
 8002600:	2300      	movs	r3, #0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d00d      	beq.n	8002622 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002606:	4b7f      	ldr	r3, [pc, #508]	@ (8002804 <HAL_RCC_OscConfig+0x4b8>)
 8002608:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800260a:	4a7e      	ldr	r2, [pc, #504]	@ (8002804 <HAL_RCC_OscConfig+0x4b8>)
 800260c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002610:	6593      	str	r3, [r2, #88]	@ 0x58
 8002612:	4b7c      	ldr	r3, [pc, #496]	@ (8002804 <HAL_RCC_OscConfig+0x4b8>)
 8002614:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002616:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800261a:	60fb      	str	r3, [r7, #12]
 800261c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800261e:	2301      	movs	r3, #1
 8002620:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002622:	4b79      	ldr	r3, [pc, #484]	@ (8002808 <HAL_RCC_OscConfig+0x4bc>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800262a:	2b00      	cmp	r3, #0
 800262c:	d118      	bne.n	8002660 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800262e:	4b76      	ldr	r3, [pc, #472]	@ (8002808 <HAL_RCC_OscConfig+0x4bc>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a75      	ldr	r2, [pc, #468]	@ (8002808 <HAL_RCC_OscConfig+0x4bc>)
 8002634:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002638:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800263a:	f7ff fb0f 	bl	8001c5c <HAL_GetTick>
 800263e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002640:	e008      	b.n	8002654 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002642:	f7ff fb0b 	bl	8001c5c <HAL_GetTick>
 8002646:	4602      	mov	r2, r0
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	1ad3      	subs	r3, r2, r3
 800264c:	2b02      	cmp	r3, #2
 800264e:	d901      	bls.n	8002654 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002650:	2303      	movs	r3, #3
 8002652:	e183      	b.n	800295c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002654:	4b6c      	ldr	r3, [pc, #432]	@ (8002808 <HAL_RCC_OscConfig+0x4bc>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800265c:	2b00      	cmp	r3, #0
 800265e:	d0f0      	beq.n	8002642 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	2b01      	cmp	r3, #1
 8002666:	d108      	bne.n	800267a <HAL_RCC_OscConfig+0x32e>
 8002668:	4b66      	ldr	r3, [pc, #408]	@ (8002804 <HAL_RCC_OscConfig+0x4b8>)
 800266a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800266e:	4a65      	ldr	r2, [pc, #404]	@ (8002804 <HAL_RCC_OscConfig+0x4b8>)
 8002670:	f043 0301 	orr.w	r3, r3, #1
 8002674:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002678:	e024      	b.n	80026c4 <HAL_RCC_OscConfig+0x378>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	2b05      	cmp	r3, #5
 8002680:	d110      	bne.n	80026a4 <HAL_RCC_OscConfig+0x358>
 8002682:	4b60      	ldr	r3, [pc, #384]	@ (8002804 <HAL_RCC_OscConfig+0x4b8>)
 8002684:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002688:	4a5e      	ldr	r2, [pc, #376]	@ (8002804 <HAL_RCC_OscConfig+0x4b8>)
 800268a:	f043 0304 	orr.w	r3, r3, #4
 800268e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002692:	4b5c      	ldr	r3, [pc, #368]	@ (8002804 <HAL_RCC_OscConfig+0x4b8>)
 8002694:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002698:	4a5a      	ldr	r2, [pc, #360]	@ (8002804 <HAL_RCC_OscConfig+0x4b8>)
 800269a:	f043 0301 	orr.w	r3, r3, #1
 800269e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80026a2:	e00f      	b.n	80026c4 <HAL_RCC_OscConfig+0x378>
 80026a4:	4b57      	ldr	r3, [pc, #348]	@ (8002804 <HAL_RCC_OscConfig+0x4b8>)
 80026a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026aa:	4a56      	ldr	r2, [pc, #344]	@ (8002804 <HAL_RCC_OscConfig+0x4b8>)
 80026ac:	f023 0301 	bic.w	r3, r3, #1
 80026b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80026b4:	4b53      	ldr	r3, [pc, #332]	@ (8002804 <HAL_RCC_OscConfig+0x4b8>)
 80026b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026ba:	4a52      	ldr	r2, [pc, #328]	@ (8002804 <HAL_RCC_OscConfig+0x4b8>)
 80026bc:	f023 0304 	bic.w	r3, r3, #4
 80026c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d016      	beq.n	80026fa <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026cc:	f7ff fac6 	bl	8001c5c <HAL_GetTick>
 80026d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026d2:	e00a      	b.n	80026ea <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026d4:	f7ff fac2 	bl	8001c5c <HAL_GetTick>
 80026d8:	4602      	mov	r2, r0
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d901      	bls.n	80026ea <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80026e6:	2303      	movs	r3, #3
 80026e8:	e138      	b.n	800295c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026ea:	4b46      	ldr	r3, [pc, #280]	@ (8002804 <HAL_RCC_OscConfig+0x4b8>)
 80026ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026f0:	f003 0302 	and.w	r3, r3, #2
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d0ed      	beq.n	80026d4 <HAL_RCC_OscConfig+0x388>
 80026f8:	e015      	b.n	8002726 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026fa:	f7ff faaf 	bl	8001c5c <HAL_GetTick>
 80026fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002700:	e00a      	b.n	8002718 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002702:	f7ff faab 	bl	8001c5c <HAL_GetTick>
 8002706:	4602      	mov	r2, r0
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	1ad3      	subs	r3, r2, r3
 800270c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002710:	4293      	cmp	r3, r2
 8002712:	d901      	bls.n	8002718 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002714:	2303      	movs	r3, #3
 8002716:	e121      	b.n	800295c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002718:	4b3a      	ldr	r3, [pc, #232]	@ (8002804 <HAL_RCC_OscConfig+0x4b8>)
 800271a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800271e:	f003 0302 	and.w	r3, r3, #2
 8002722:	2b00      	cmp	r3, #0
 8002724:	d1ed      	bne.n	8002702 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002726:	7ffb      	ldrb	r3, [r7, #31]
 8002728:	2b01      	cmp	r3, #1
 800272a:	d105      	bne.n	8002738 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800272c:	4b35      	ldr	r3, [pc, #212]	@ (8002804 <HAL_RCC_OscConfig+0x4b8>)
 800272e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002730:	4a34      	ldr	r2, [pc, #208]	@ (8002804 <HAL_RCC_OscConfig+0x4b8>)
 8002732:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002736:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0320 	and.w	r3, r3, #32
 8002740:	2b00      	cmp	r3, #0
 8002742:	d03c      	beq.n	80027be <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	699b      	ldr	r3, [r3, #24]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d01c      	beq.n	8002786 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800274c:	4b2d      	ldr	r3, [pc, #180]	@ (8002804 <HAL_RCC_OscConfig+0x4b8>)
 800274e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002752:	4a2c      	ldr	r2, [pc, #176]	@ (8002804 <HAL_RCC_OscConfig+0x4b8>)
 8002754:	f043 0301 	orr.w	r3, r3, #1
 8002758:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800275c:	f7ff fa7e 	bl	8001c5c <HAL_GetTick>
 8002760:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002762:	e008      	b.n	8002776 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002764:	f7ff fa7a 	bl	8001c5c <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	2b02      	cmp	r3, #2
 8002770:	d901      	bls.n	8002776 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e0f2      	b.n	800295c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002776:	4b23      	ldr	r3, [pc, #140]	@ (8002804 <HAL_RCC_OscConfig+0x4b8>)
 8002778:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800277c:	f003 0302 	and.w	r3, r3, #2
 8002780:	2b00      	cmp	r3, #0
 8002782:	d0ef      	beq.n	8002764 <HAL_RCC_OscConfig+0x418>
 8002784:	e01b      	b.n	80027be <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002786:	4b1f      	ldr	r3, [pc, #124]	@ (8002804 <HAL_RCC_OscConfig+0x4b8>)
 8002788:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800278c:	4a1d      	ldr	r2, [pc, #116]	@ (8002804 <HAL_RCC_OscConfig+0x4b8>)
 800278e:	f023 0301 	bic.w	r3, r3, #1
 8002792:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002796:	f7ff fa61 	bl	8001c5c <HAL_GetTick>
 800279a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800279c:	e008      	b.n	80027b0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800279e:	f7ff fa5d 	bl	8001c5c <HAL_GetTick>
 80027a2:	4602      	mov	r2, r0
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	2b02      	cmp	r3, #2
 80027aa:	d901      	bls.n	80027b0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80027ac:	2303      	movs	r3, #3
 80027ae:	e0d5      	b.n	800295c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80027b0:	4b14      	ldr	r3, [pc, #80]	@ (8002804 <HAL_RCC_OscConfig+0x4b8>)
 80027b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80027b6:	f003 0302 	and.w	r3, r3, #2
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d1ef      	bne.n	800279e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	69db      	ldr	r3, [r3, #28]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	f000 80c9 	beq.w	800295a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027c8:	4b0e      	ldr	r3, [pc, #56]	@ (8002804 <HAL_RCC_OscConfig+0x4b8>)
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	f003 030c 	and.w	r3, r3, #12
 80027d0:	2b0c      	cmp	r3, #12
 80027d2:	f000 8083 	beq.w	80028dc <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	69db      	ldr	r3, [r3, #28]
 80027da:	2b02      	cmp	r3, #2
 80027dc:	d15e      	bne.n	800289c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027de:	4b09      	ldr	r3, [pc, #36]	@ (8002804 <HAL_RCC_OscConfig+0x4b8>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a08      	ldr	r2, [pc, #32]	@ (8002804 <HAL_RCC_OscConfig+0x4b8>)
 80027e4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80027e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ea:	f7ff fa37 	bl	8001c5c <HAL_GetTick>
 80027ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027f0:	e00c      	b.n	800280c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027f2:	f7ff fa33 	bl	8001c5c <HAL_GetTick>
 80027f6:	4602      	mov	r2, r0
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	2b02      	cmp	r3, #2
 80027fe:	d905      	bls.n	800280c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002800:	2303      	movs	r3, #3
 8002802:	e0ab      	b.n	800295c <HAL_RCC_OscConfig+0x610>
 8002804:	40021000 	.word	0x40021000
 8002808:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800280c:	4b55      	ldr	r3, [pc, #340]	@ (8002964 <HAL_RCC_OscConfig+0x618>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002814:	2b00      	cmp	r3, #0
 8002816:	d1ec      	bne.n	80027f2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002818:	4b52      	ldr	r3, [pc, #328]	@ (8002964 <HAL_RCC_OscConfig+0x618>)
 800281a:	68da      	ldr	r2, [r3, #12]
 800281c:	4b52      	ldr	r3, [pc, #328]	@ (8002968 <HAL_RCC_OscConfig+0x61c>)
 800281e:	4013      	ands	r3, r2
 8002820:	687a      	ldr	r2, [r7, #4]
 8002822:	6a11      	ldr	r1, [r2, #32]
 8002824:	687a      	ldr	r2, [r7, #4]
 8002826:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002828:	3a01      	subs	r2, #1
 800282a:	0112      	lsls	r2, r2, #4
 800282c:	4311      	orrs	r1, r2
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002832:	0212      	lsls	r2, r2, #8
 8002834:	4311      	orrs	r1, r2
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800283a:	0852      	lsrs	r2, r2, #1
 800283c:	3a01      	subs	r2, #1
 800283e:	0552      	lsls	r2, r2, #21
 8002840:	4311      	orrs	r1, r2
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002846:	0852      	lsrs	r2, r2, #1
 8002848:	3a01      	subs	r2, #1
 800284a:	0652      	lsls	r2, r2, #25
 800284c:	4311      	orrs	r1, r2
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002852:	06d2      	lsls	r2, r2, #27
 8002854:	430a      	orrs	r2, r1
 8002856:	4943      	ldr	r1, [pc, #268]	@ (8002964 <HAL_RCC_OscConfig+0x618>)
 8002858:	4313      	orrs	r3, r2
 800285a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800285c:	4b41      	ldr	r3, [pc, #260]	@ (8002964 <HAL_RCC_OscConfig+0x618>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a40      	ldr	r2, [pc, #256]	@ (8002964 <HAL_RCC_OscConfig+0x618>)
 8002862:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002866:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002868:	4b3e      	ldr	r3, [pc, #248]	@ (8002964 <HAL_RCC_OscConfig+0x618>)
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	4a3d      	ldr	r2, [pc, #244]	@ (8002964 <HAL_RCC_OscConfig+0x618>)
 800286e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002872:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002874:	f7ff f9f2 	bl	8001c5c <HAL_GetTick>
 8002878:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800287a:	e008      	b.n	800288e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800287c:	f7ff f9ee 	bl	8001c5c <HAL_GetTick>
 8002880:	4602      	mov	r2, r0
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	2b02      	cmp	r3, #2
 8002888:	d901      	bls.n	800288e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e066      	b.n	800295c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800288e:	4b35      	ldr	r3, [pc, #212]	@ (8002964 <HAL_RCC_OscConfig+0x618>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d0f0      	beq.n	800287c <HAL_RCC_OscConfig+0x530>
 800289a:	e05e      	b.n	800295a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800289c:	4b31      	ldr	r3, [pc, #196]	@ (8002964 <HAL_RCC_OscConfig+0x618>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a30      	ldr	r2, [pc, #192]	@ (8002964 <HAL_RCC_OscConfig+0x618>)
 80028a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80028a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028a8:	f7ff f9d8 	bl	8001c5c <HAL_GetTick>
 80028ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028ae:	e008      	b.n	80028c2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028b0:	f7ff f9d4 	bl	8001c5c <HAL_GetTick>
 80028b4:	4602      	mov	r2, r0
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	d901      	bls.n	80028c2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80028be:	2303      	movs	r3, #3
 80028c0:	e04c      	b.n	800295c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028c2:	4b28      	ldr	r3, [pc, #160]	@ (8002964 <HAL_RCC_OscConfig+0x618>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d1f0      	bne.n	80028b0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80028ce:	4b25      	ldr	r3, [pc, #148]	@ (8002964 <HAL_RCC_OscConfig+0x618>)
 80028d0:	68da      	ldr	r2, [r3, #12]
 80028d2:	4924      	ldr	r1, [pc, #144]	@ (8002964 <HAL_RCC_OscConfig+0x618>)
 80028d4:	4b25      	ldr	r3, [pc, #148]	@ (800296c <HAL_RCC_OscConfig+0x620>)
 80028d6:	4013      	ands	r3, r2
 80028d8:	60cb      	str	r3, [r1, #12]
 80028da:	e03e      	b.n	800295a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	69db      	ldr	r3, [r3, #28]
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d101      	bne.n	80028e8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e039      	b.n	800295c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80028e8:	4b1e      	ldr	r3, [pc, #120]	@ (8002964 <HAL_RCC_OscConfig+0x618>)
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	f003 0203 	and.w	r2, r3, #3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6a1b      	ldr	r3, [r3, #32]
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d12c      	bne.n	8002956 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002906:	3b01      	subs	r3, #1
 8002908:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800290a:	429a      	cmp	r2, r3
 800290c:	d123      	bne.n	8002956 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002918:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800291a:	429a      	cmp	r2, r3
 800291c:	d11b      	bne.n	8002956 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002928:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800292a:	429a      	cmp	r2, r3
 800292c:	d113      	bne.n	8002956 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002938:	085b      	lsrs	r3, r3, #1
 800293a:	3b01      	subs	r3, #1
 800293c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800293e:	429a      	cmp	r2, r3
 8002940:	d109      	bne.n	8002956 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800294c:	085b      	lsrs	r3, r3, #1
 800294e:	3b01      	subs	r3, #1
 8002950:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002952:	429a      	cmp	r2, r3
 8002954:	d001      	beq.n	800295a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e000      	b.n	800295c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800295a:	2300      	movs	r3, #0
}
 800295c:	4618      	mov	r0, r3
 800295e:	3720      	adds	r7, #32
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}
 8002964:	40021000 	.word	0x40021000
 8002968:	019f800c 	.word	0x019f800c
 800296c:	feeefffc 	.word	0xfeeefffc

08002970 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b086      	sub	sp, #24
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
 8002978:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800297a:	2300      	movs	r3, #0
 800297c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d101      	bne.n	8002988 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	e11e      	b.n	8002bc6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002988:	4b91      	ldr	r3, [pc, #580]	@ (8002bd0 <HAL_RCC_ClockConfig+0x260>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 030f 	and.w	r3, r3, #15
 8002990:	683a      	ldr	r2, [r7, #0]
 8002992:	429a      	cmp	r2, r3
 8002994:	d910      	bls.n	80029b8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002996:	4b8e      	ldr	r3, [pc, #568]	@ (8002bd0 <HAL_RCC_ClockConfig+0x260>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f023 020f 	bic.w	r2, r3, #15
 800299e:	498c      	ldr	r1, [pc, #560]	@ (8002bd0 <HAL_RCC_ClockConfig+0x260>)
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	4313      	orrs	r3, r2
 80029a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029a6:	4b8a      	ldr	r3, [pc, #552]	@ (8002bd0 <HAL_RCC_ClockConfig+0x260>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 030f 	and.w	r3, r3, #15
 80029ae:	683a      	ldr	r2, [r7, #0]
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d001      	beq.n	80029b8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e106      	b.n	8002bc6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0301 	and.w	r3, r3, #1
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d073      	beq.n	8002aac <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	2b03      	cmp	r3, #3
 80029ca:	d129      	bne.n	8002a20 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029cc:	4b81      	ldr	r3, [pc, #516]	@ (8002bd4 <HAL_RCC_ClockConfig+0x264>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d101      	bne.n	80029dc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e0f4      	b.n	8002bc6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80029dc:	f000 f966 	bl	8002cac <RCC_GetSysClockFreqFromPLLSource>
 80029e0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	4a7c      	ldr	r2, [pc, #496]	@ (8002bd8 <HAL_RCC_ClockConfig+0x268>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d93f      	bls.n	8002a6a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80029ea:	4b7a      	ldr	r3, [pc, #488]	@ (8002bd4 <HAL_RCC_ClockConfig+0x264>)
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d009      	beq.n	8002a0a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d033      	beq.n	8002a6a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d12f      	bne.n	8002a6a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002a0a:	4b72      	ldr	r3, [pc, #456]	@ (8002bd4 <HAL_RCC_ClockConfig+0x264>)
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002a12:	4a70      	ldr	r2, [pc, #448]	@ (8002bd4 <HAL_RCC_ClockConfig+0x264>)
 8002a14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a18:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002a1a:	2380      	movs	r3, #128	@ 0x80
 8002a1c:	617b      	str	r3, [r7, #20]
 8002a1e:	e024      	b.n	8002a6a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	2b02      	cmp	r3, #2
 8002a26:	d107      	bne.n	8002a38 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a28:	4b6a      	ldr	r3, [pc, #424]	@ (8002bd4 <HAL_RCC_ClockConfig+0x264>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d109      	bne.n	8002a48 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e0c6      	b.n	8002bc6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a38:	4b66      	ldr	r3, [pc, #408]	@ (8002bd4 <HAL_RCC_ClockConfig+0x264>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d101      	bne.n	8002a48 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	e0be      	b.n	8002bc6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002a48:	f000 f8ce 	bl	8002be8 <HAL_RCC_GetSysClockFreq>
 8002a4c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	4a61      	ldr	r2, [pc, #388]	@ (8002bd8 <HAL_RCC_ClockConfig+0x268>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d909      	bls.n	8002a6a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002a56:	4b5f      	ldr	r3, [pc, #380]	@ (8002bd4 <HAL_RCC_ClockConfig+0x264>)
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002a5e:	4a5d      	ldr	r2, [pc, #372]	@ (8002bd4 <HAL_RCC_ClockConfig+0x264>)
 8002a60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a64:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002a66:	2380      	movs	r3, #128	@ 0x80
 8002a68:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002a6a:	4b5a      	ldr	r3, [pc, #360]	@ (8002bd4 <HAL_RCC_ClockConfig+0x264>)
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	f023 0203 	bic.w	r2, r3, #3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	4957      	ldr	r1, [pc, #348]	@ (8002bd4 <HAL_RCC_ClockConfig+0x264>)
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a7c:	f7ff f8ee 	bl	8001c5c <HAL_GetTick>
 8002a80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a82:	e00a      	b.n	8002a9a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a84:	f7ff f8ea 	bl	8001c5c <HAL_GetTick>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	1ad3      	subs	r3, r2, r3
 8002a8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d901      	bls.n	8002a9a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002a96:	2303      	movs	r3, #3
 8002a98:	e095      	b.n	8002bc6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a9a:	4b4e      	ldr	r3, [pc, #312]	@ (8002bd4 <HAL_RCC_ClockConfig+0x264>)
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	f003 020c 	and.w	r2, r3, #12
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d1eb      	bne.n	8002a84 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 0302 	and.w	r3, r3, #2
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d023      	beq.n	8002b00 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0304 	and.w	r3, r3, #4
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d005      	beq.n	8002ad0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ac4:	4b43      	ldr	r3, [pc, #268]	@ (8002bd4 <HAL_RCC_ClockConfig+0x264>)
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	4a42      	ldr	r2, [pc, #264]	@ (8002bd4 <HAL_RCC_ClockConfig+0x264>)
 8002aca:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002ace:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0308 	and.w	r3, r3, #8
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d007      	beq.n	8002aec <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002adc:	4b3d      	ldr	r3, [pc, #244]	@ (8002bd4 <HAL_RCC_ClockConfig+0x264>)
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002ae4:	4a3b      	ldr	r2, [pc, #236]	@ (8002bd4 <HAL_RCC_ClockConfig+0x264>)
 8002ae6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002aea:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002aec:	4b39      	ldr	r3, [pc, #228]	@ (8002bd4 <HAL_RCC_ClockConfig+0x264>)
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	4936      	ldr	r1, [pc, #216]	@ (8002bd4 <HAL_RCC_ClockConfig+0x264>)
 8002afa:	4313      	orrs	r3, r2
 8002afc:	608b      	str	r3, [r1, #8]
 8002afe:	e008      	b.n	8002b12 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	2b80      	cmp	r3, #128	@ 0x80
 8002b04:	d105      	bne.n	8002b12 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002b06:	4b33      	ldr	r3, [pc, #204]	@ (8002bd4 <HAL_RCC_ClockConfig+0x264>)
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	4a32      	ldr	r2, [pc, #200]	@ (8002bd4 <HAL_RCC_ClockConfig+0x264>)
 8002b0c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002b10:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b12:	4b2f      	ldr	r3, [pc, #188]	@ (8002bd0 <HAL_RCC_ClockConfig+0x260>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 030f 	and.w	r3, r3, #15
 8002b1a:	683a      	ldr	r2, [r7, #0]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d21d      	bcs.n	8002b5c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b20:	4b2b      	ldr	r3, [pc, #172]	@ (8002bd0 <HAL_RCC_ClockConfig+0x260>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f023 020f 	bic.w	r2, r3, #15
 8002b28:	4929      	ldr	r1, [pc, #164]	@ (8002bd0 <HAL_RCC_ClockConfig+0x260>)
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002b30:	f7ff f894 	bl	8001c5c <HAL_GetTick>
 8002b34:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b36:	e00a      	b.n	8002b4e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b38:	f7ff f890 	bl	8001c5c <HAL_GetTick>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d901      	bls.n	8002b4e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	e03b      	b.n	8002bc6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b4e:	4b20      	ldr	r3, [pc, #128]	@ (8002bd0 <HAL_RCC_ClockConfig+0x260>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 030f 	and.w	r3, r3, #15
 8002b56:	683a      	ldr	r2, [r7, #0]
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d1ed      	bne.n	8002b38 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0304 	and.w	r3, r3, #4
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d008      	beq.n	8002b7a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b68:	4b1a      	ldr	r3, [pc, #104]	@ (8002bd4 <HAL_RCC_ClockConfig+0x264>)
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	4917      	ldr	r1, [pc, #92]	@ (8002bd4 <HAL_RCC_ClockConfig+0x264>)
 8002b76:	4313      	orrs	r3, r2
 8002b78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0308 	and.w	r3, r3, #8
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d009      	beq.n	8002b9a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b86:	4b13      	ldr	r3, [pc, #76]	@ (8002bd4 <HAL_RCC_ClockConfig+0x264>)
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	691b      	ldr	r3, [r3, #16]
 8002b92:	00db      	lsls	r3, r3, #3
 8002b94:	490f      	ldr	r1, [pc, #60]	@ (8002bd4 <HAL_RCC_ClockConfig+0x264>)
 8002b96:	4313      	orrs	r3, r2
 8002b98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b9a:	f000 f825 	bl	8002be8 <HAL_RCC_GetSysClockFreq>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	4b0c      	ldr	r3, [pc, #48]	@ (8002bd4 <HAL_RCC_ClockConfig+0x264>)
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	091b      	lsrs	r3, r3, #4
 8002ba6:	f003 030f 	and.w	r3, r3, #15
 8002baa:	490c      	ldr	r1, [pc, #48]	@ (8002bdc <HAL_RCC_ClockConfig+0x26c>)
 8002bac:	5ccb      	ldrb	r3, [r1, r3]
 8002bae:	f003 031f 	and.w	r3, r3, #31
 8002bb2:	fa22 f303 	lsr.w	r3, r2, r3
 8002bb6:	4a0a      	ldr	r2, [pc, #40]	@ (8002be0 <HAL_RCC_ClockConfig+0x270>)
 8002bb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002bba:	4b0a      	ldr	r3, [pc, #40]	@ (8002be4 <HAL_RCC_ClockConfig+0x274>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7ff f800 	bl	8001bc4 <HAL_InitTick>
 8002bc4:	4603      	mov	r3, r0
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3718      	adds	r7, #24
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	40022000 	.word	0x40022000
 8002bd4:	40021000 	.word	0x40021000
 8002bd8:	04c4b400 	.word	0x04c4b400
 8002bdc:	080043e0 	.word	0x080043e0
 8002be0:	20000038 	.word	0x20000038
 8002be4:	20000068 	.word	0x20000068

08002be8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b087      	sub	sp, #28
 8002bec:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002bee:	4b2c      	ldr	r3, [pc, #176]	@ (8002ca0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	f003 030c 	and.w	r3, r3, #12
 8002bf6:	2b04      	cmp	r3, #4
 8002bf8:	d102      	bne.n	8002c00 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002bfa:	4b2a      	ldr	r3, [pc, #168]	@ (8002ca4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002bfc:	613b      	str	r3, [r7, #16]
 8002bfe:	e047      	b.n	8002c90 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002c00:	4b27      	ldr	r3, [pc, #156]	@ (8002ca0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	f003 030c 	and.w	r3, r3, #12
 8002c08:	2b08      	cmp	r3, #8
 8002c0a:	d102      	bne.n	8002c12 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002c0c:	4b26      	ldr	r3, [pc, #152]	@ (8002ca8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002c0e:	613b      	str	r3, [r7, #16]
 8002c10:	e03e      	b.n	8002c90 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002c12:	4b23      	ldr	r3, [pc, #140]	@ (8002ca0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	f003 030c 	and.w	r3, r3, #12
 8002c1a:	2b0c      	cmp	r3, #12
 8002c1c:	d136      	bne.n	8002c8c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002c1e:	4b20      	ldr	r3, [pc, #128]	@ (8002ca0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c20:	68db      	ldr	r3, [r3, #12]
 8002c22:	f003 0303 	and.w	r3, r3, #3
 8002c26:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c28:	4b1d      	ldr	r3, [pc, #116]	@ (8002ca0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	091b      	lsrs	r3, r3, #4
 8002c2e:	f003 030f 	and.w	r3, r3, #15
 8002c32:	3301      	adds	r3, #1
 8002c34:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2b03      	cmp	r3, #3
 8002c3a:	d10c      	bne.n	8002c56 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002c3c:	4a1a      	ldr	r2, [pc, #104]	@ (8002ca8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c44:	4a16      	ldr	r2, [pc, #88]	@ (8002ca0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c46:	68d2      	ldr	r2, [r2, #12]
 8002c48:	0a12      	lsrs	r2, r2, #8
 8002c4a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002c4e:	fb02 f303 	mul.w	r3, r2, r3
 8002c52:	617b      	str	r3, [r7, #20]
      break;
 8002c54:	e00c      	b.n	8002c70 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002c56:	4a13      	ldr	r2, [pc, #76]	@ (8002ca4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c5e:	4a10      	ldr	r2, [pc, #64]	@ (8002ca0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c60:	68d2      	ldr	r2, [r2, #12]
 8002c62:	0a12      	lsrs	r2, r2, #8
 8002c64:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002c68:	fb02 f303 	mul.w	r3, r2, r3
 8002c6c:	617b      	str	r3, [r7, #20]
      break;
 8002c6e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002c70:	4b0b      	ldr	r3, [pc, #44]	@ (8002ca0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	0e5b      	lsrs	r3, r3, #25
 8002c76:	f003 0303 	and.w	r3, r3, #3
 8002c7a:	3301      	adds	r3, #1
 8002c7c:	005b      	lsls	r3, r3, #1
 8002c7e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002c80:	697a      	ldr	r2, [r7, #20]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c88:	613b      	str	r3, [r7, #16]
 8002c8a:	e001      	b.n	8002c90 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002c90:	693b      	ldr	r3, [r7, #16]
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	371c      	adds	r7, #28
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr
 8002c9e:	bf00      	nop
 8002ca0:	40021000 	.word	0x40021000
 8002ca4:	00f42400 	.word	0x00f42400
 8002ca8:	007a1200 	.word	0x007a1200

08002cac <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b087      	sub	sp, #28
 8002cb0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002cb2:	4b1e      	ldr	r3, [pc, #120]	@ (8002d2c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002cb4:	68db      	ldr	r3, [r3, #12]
 8002cb6:	f003 0303 	and.w	r3, r3, #3
 8002cba:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002cbc:	4b1b      	ldr	r3, [pc, #108]	@ (8002d2c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	091b      	lsrs	r3, r3, #4
 8002cc2:	f003 030f 	and.w	r3, r3, #15
 8002cc6:	3301      	adds	r3, #1
 8002cc8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	2b03      	cmp	r3, #3
 8002cce:	d10c      	bne.n	8002cea <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002cd0:	4a17      	ldr	r2, [pc, #92]	@ (8002d30 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cd8:	4a14      	ldr	r2, [pc, #80]	@ (8002d2c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002cda:	68d2      	ldr	r2, [r2, #12]
 8002cdc:	0a12      	lsrs	r2, r2, #8
 8002cde:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002ce2:	fb02 f303 	mul.w	r3, r2, r3
 8002ce6:	617b      	str	r3, [r7, #20]
    break;
 8002ce8:	e00c      	b.n	8002d04 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002cea:	4a12      	ldr	r2, [pc, #72]	@ (8002d34 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cf2:	4a0e      	ldr	r2, [pc, #56]	@ (8002d2c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002cf4:	68d2      	ldr	r2, [r2, #12]
 8002cf6:	0a12      	lsrs	r2, r2, #8
 8002cf8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002cfc:	fb02 f303 	mul.w	r3, r2, r3
 8002d00:	617b      	str	r3, [r7, #20]
    break;
 8002d02:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002d04:	4b09      	ldr	r3, [pc, #36]	@ (8002d2c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	0e5b      	lsrs	r3, r3, #25
 8002d0a:	f003 0303 	and.w	r3, r3, #3
 8002d0e:	3301      	adds	r3, #1
 8002d10:	005b      	lsls	r3, r3, #1
 8002d12:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002d14:	697a      	ldr	r2, [r7, #20]
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d1c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002d1e:	687b      	ldr	r3, [r7, #4]
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	371c      	adds	r7, #28
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr
 8002d2c:	40021000 	.word	0x40021000
 8002d30:	007a1200 	.word	0x007a1200
 8002d34:	00f42400 	.word	0x00f42400

08002d38 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b084      	sub	sp, #16
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d101      	bne.n	8002d4a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e09d      	b.n	8002e86 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d108      	bne.n	8002d64 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002d5a:	d009      	beq.n	8002d70 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	61da      	str	r2, [r3, #28]
 8002d62:	e005      	b.n	8002d70 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2200      	movs	r2, #0
 8002d68:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d106      	bne.n	8002d90 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2200      	movs	r2, #0
 8002d86:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f7fd fffc 	bl	8000d88 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2202      	movs	r2, #2
 8002d94:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002da6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002db0:	d902      	bls.n	8002db8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002db2:	2300      	movs	r3, #0
 8002db4:	60fb      	str	r3, [r7, #12]
 8002db6:	e002      	b.n	8002dbe <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002db8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002dbc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	68db      	ldr	r3, [r3, #12]
 8002dc2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002dc6:	d007      	beq.n	8002dd8 <HAL_SPI_Init+0xa0>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002dd0:	d002      	beq.n	8002dd8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002de8:	431a      	orrs	r2, r3
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	691b      	ldr	r3, [r3, #16]
 8002dee:	f003 0302 	and.w	r3, r3, #2
 8002df2:	431a      	orrs	r2, r3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	695b      	ldr	r3, [r3, #20]
 8002df8:	f003 0301 	and.w	r3, r3, #1
 8002dfc:	431a      	orrs	r2, r3
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	699b      	ldr	r3, [r3, #24]
 8002e02:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e06:	431a      	orrs	r2, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	69db      	ldr	r3, [r3, #28]
 8002e0c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002e10:	431a      	orrs	r2, r3
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6a1b      	ldr	r3, [r3, #32]
 8002e16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e1a:	ea42 0103 	orr.w	r1, r2, r3
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e22:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	430a      	orrs	r2, r1
 8002e2c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	699b      	ldr	r3, [r3, #24]
 8002e32:	0c1b      	lsrs	r3, r3, #16
 8002e34:	f003 0204 	and.w	r2, r3, #4
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e3c:	f003 0310 	and.w	r3, r3, #16
 8002e40:	431a      	orrs	r2, r3
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e46:	f003 0308 	and.w	r3, r3, #8
 8002e4a:	431a      	orrs	r2, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002e54:	ea42 0103 	orr.w	r1, r2, r3
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	430a      	orrs	r2, r1
 8002e64:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	69da      	ldr	r2, [r3, #28]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e74:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002e84:	2300      	movs	r3, #0
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3710      	adds	r7, #16
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}

08002e8e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e8e:	b580      	push	{r7, lr}
 8002e90:	b088      	sub	sp, #32
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	60f8      	str	r0, [r7, #12]
 8002e96:	60b9      	str	r1, [r7, #8]
 8002e98:	603b      	str	r3, [r7, #0]
 8002e9a:	4613      	mov	r3, r2
 8002e9c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d101      	bne.n	8002eb0 <HAL_SPI_Transmit+0x22>
 8002eac:	2302      	movs	r3, #2
 8002eae:	e15f      	b.n	8003170 <HAL_SPI_Transmit+0x2e2>
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002eb8:	f7fe fed0 	bl	8001c5c <HAL_GetTick>
 8002ebc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002ebe:	88fb      	ldrh	r3, [r7, #6]
 8002ec0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d002      	beq.n	8002ed4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002ece:	2302      	movs	r3, #2
 8002ed0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002ed2:	e148      	b.n	8003166 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d002      	beq.n	8002ee0 <HAL_SPI_Transmit+0x52>
 8002eda:	88fb      	ldrh	r3, [r7, #6]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d102      	bne.n	8002ee6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002ee4:	e13f      	b.n	8003166 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2203      	movs	r2, #3
 8002eea:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	68ba      	ldr	r2, [r7, #8]
 8002ef8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	88fa      	ldrh	r2, [r7, #6]
 8002efe:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	88fa      	ldrh	r2, [r7, #6]
 8002f04:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2200      	movs	r2, #0
 8002f18:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2200      	movs	r2, #0
 8002f26:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f30:	d10f      	bne.n	8002f52 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002f40:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002f50:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f5c:	2b40      	cmp	r3, #64	@ 0x40
 8002f5e:	d007      	beq.n	8002f70 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002f6e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002f78:	d94f      	bls.n	800301a <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d002      	beq.n	8002f88 <HAL_SPI_Transmit+0xfa>
 8002f82:	8afb      	ldrh	r3, [r7, #22]
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d142      	bne.n	800300e <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f8c:	881a      	ldrh	r2, [r3, #0]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f98:	1c9a      	adds	r2, r3, #2
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002fa2:	b29b      	uxth	r3, r3
 8002fa4:	3b01      	subs	r3, #1
 8002fa6:	b29a      	uxth	r2, r3
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002fac:	e02f      	b.n	800300e <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	f003 0302 	and.w	r3, r3, #2
 8002fb8:	2b02      	cmp	r3, #2
 8002fba:	d112      	bne.n	8002fe2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fc0:	881a      	ldrh	r2, [r3, #0]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fcc:	1c9a      	adds	r2, r3, #2
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002fd6:	b29b      	uxth	r3, r3
 8002fd8:	3b01      	subs	r3, #1
 8002fda:	b29a      	uxth	r2, r3
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002fe0:	e015      	b.n	800300e <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002fe2:	f7fe fe3b 	bl	8001c5c <HAL_GetTick>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	69bb      	ldr	r3, [r7, #24]
 8002fea:	1ad3      	subs	r3, r2, r3
 8002fec:	683a      	ldr	r2, [r7, #0]
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d803      	bhi.n	8002ffa <HAL_SPI_Transmit+0x16c>
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ff8:	d102      	bne.n	8003000 <HAL_SPI_Transmit+0x172>
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d106      	bne.n	800300e <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8003000:	2303      	movs	r3, #3
 8003002:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2201      	movs	r2, #1
 8003008:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800300c:	e0ab      	b.n	8003166 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003012:	b29b      	uxth	r3, r3
 8003014:	2b00      	cmp	r3, #0
 8003016:	d1ca      	bne.n	8002fae <HAL_SPI_Transmit+0x120>
 8003018:	e080      	b.n	800311c <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d002      	beq.n	8003028 <HAL_SPI_Transmit+0x19a>
 8003022:	8afb      	ldrh	r3, [r7, #22]
 8003024:	2b01      	cmp	r3, #1
 8003026:	d174      	bne.n	8003112 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800302c:	b29b      	uxth	r3, r3
 800302e:	2b01      	cmp	r3, #1
 8003030:	d912      	bls.n	8003058 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003036:	881a      	ldrh	r2, [r3, #0]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003042:	1c9a      	adds	r2, r3, #2
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800304c:	b29b      	uxth	r3, r3
 800304e:	3b02      	subs	r3, #2
 8003050:	b29a      	uxth	r2, r3
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003056:	e05c      	b.n	8003112 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	330c      	adds	r3, #12
 8003062:	7812      	ldrb	r2, [r2, #0]
 8003064:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800306a:	1c5a      	adds	r2, r3, #1
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003074:	b29b      	uxth	r3, r3
 8003076:	3b01      	subs	r3, #1
 8003078:	b29a      	uxth	r2, r3
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800307e:	e048      	b.n	8003112 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	f003 0302 	and.w	r3, r3, #2
 800308a:	2b02      	cmp	r3, #2
 800308c:	d12b      	bne.n	80030e6 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003092:	b29b      	uxth	r3, r3
 8003094:	2b01      	cmp	r3, #1
 8003096:	d912      	bls.n	80030be <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800309c:	881a      	ldrh	r2, [r3, #0]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030a8:	1c9a      	adds	r2, r3, #2
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80030b2:	b29b      	uxth	r3, r3
 80030b4:	3b02      	subs	r3, #2
 80030b6:	b29a      	uxth	r2, r3
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80030bc:	e029      	b.n	8003112 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	330c      	adds	r3, #12
 80030c8:	7812      	ldrb	r2, [r2, #0]
 80030ca:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030d0:	1c5a      	adds	r2, r3, #1
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80030da:	b29b      	uxth	r3, r3
 80030dc:	3b01      	subs	r3, #1
 80030de:	b29a      	uxth	r2, r3
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80030e4:	e015      	b.n	8003112 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80030e6:	f7fe fdb9 	bl	8001c5c <HAL_GetTick>
 80030ea:	4602      	mov	r2, r0
 80030ec:	69bb      	ldr	r3, [r7, #24]
 80030ee:	1ad3      	subs	r3, r2, r3
 80030f0:	683a      	ldr	r2, [r7, #0]
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d803      	bhi.n	80030fe <HAL_SPI_Transmit+0x270>
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030fc:	d102      	bne.n	8003104 <HAL_SPI_Transmit+0x276>
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d106      	bne.n	8003112 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8003104:	2303      	movs	r3, #3
 8003106:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2201      	movs	r2, #1
 800310c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003110:	e029      	b.n	8003166 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003116:	b29b      	uxth	r3, r3
 8003118:	2b00      	cmp	r3, #0
 800311a:	d1b1      	bne.n	8003080 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800311c:	69ba      	ldr	r2, [r7, #24]
 800311e:	6839      	ldr	r1, [r7, #0]
 8003120:	68f8      	ldr	r0, [r7, #12]
 8003122:	f000 fcf9 	bl	8003b18 <SPI_EndRxTxTransaction>
 8003126:	4603      	mov	r3, r0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d002      	beq.n	8003132 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2220      	movs	r2, #32
 8003130:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d10a      	bne.n	8003150 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800313a:	2300      	movs	r3, #0
 800313c:	613b      	str	r3, [r7, #16]
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	613b      	str	r3, [r7, #16]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	613b      	str	r3, [r7, #16]
 800314e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003154:	2b00      	cmp	r3, #0
 8003156:	d002      	beq.n	800315e <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	77fb      	strb	r3, [r7, #31]
 800315c:	e003      	b.n	8003166 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2201      	movs	r2, #1
 8003162:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2200      	movs	r2, #0
 800316a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800316e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003170:	4618      	mov	r0, r3
 8003172:	3720      	adds	r7, #32
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}

08003178 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b088      	sub	sp, #32
 800317c:	af02      	add	r7, sp, #8
 800317e:	60f8      	str	r0, [r7, #12]
 8003180:	60b9      	str	r1, [r7, #8]
 8003182:	603b      	str	r3, [r7, #0]
 8003184:	4613      	mov	r3, r2
 8003186:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003188:	2300      	movs	r3, #0
 800318a:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003192:	b2db      	uxtb	r3, r3
 8003194:	2b01      	cmp	r3, #1
 8003196:	d002      	beq.n	800319e <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8003198:	2302      	movs	r3, #2
 800319a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800319c:	e11a      	b.n	80033d4 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80031a6:	d112      	bne.n	80031ce <HAL_SPI_Receive+0x56>
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d10e      	bne.n	80031ce <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2204      	movs	r2, #4
 80031b4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80031b8:	88fa      	ldrh	r2, [r7, #6]
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	9300      	str	r3, [sp, #0]
 80031be:	4613      	mov	r3, r2
 80031c0:	68ba      	ldr	r2, [r7, #8]
 80031c2:	68b9      	ldr	r1, [r7, #8]
 80031c4:	68f8      	ldr	r0, [r7, #12]
 80031c6:	f000 f90e 	bl	80033e6 <HAL_SPI_TransmitReceive>
 80031ca:	4603      	mov	r3, r0
 80031cc:	e107      	b.n	80033de <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d101      	bne.n	80031dc <HAL_SPI_Receive+0x64>
 80031d8:	2302      	movs	r3, #2
 80031da:	e100      	b.n	80033de <HAL_SPI_Receive+0x266>
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2201      	movs	r2, #1
 80031e0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80031e4:	f7fe fd3a 	bl	8001c5c <HAL_GetTick>
 80031e8:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d002      	beq.n	80031f6 <HAL_SPI_Receive+0x7e>
 80031f0:	88fb      	ldrh	r3, [r7, #6]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d102      	bne.n	80031fc <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80031fa:	e0eb      	b.n	80033d4 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2204      	movs	r2, #4
 8003200:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2200      	movs	r2, #0
 8003208:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	68ba      	ldr	r2, [r7, #8]
 800320e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	88fa      	ldrh	r2, [r7, #6]
 8003214:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	88fa      	ldrh	r2, [r7, #6]
 800321c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2200      	movs	r2, #0
 8003224:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2200      	movs	r2, #0
 800322a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2200      	movs	r2, #0
 8003230:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2200      	movs	r2, #0
 8003236:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2200      	movs	r2, #0
 800323c:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	68db      	ldr	r3, [r3, #12]
 8003242:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003246:	d908      	bls.n	800325a <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	685a      	ldr	r2, [r3, #4]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003256:	605a      	str	r2, [r3, #4]
 8003258:	e007      	b.n	800326a <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	685a      	ldr	r2, [r3, #4]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003268:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003272:	d10f      	bne.n	8003294 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003282:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003292:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800329e:	2b40      	cmp	r3, #64	@ 0x40
 80032a0:	d007      	beq.n	80032b2 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80032b0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	68db      	ldr	r3, [r3, #12]
 80032b6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80032ba:	d86f      	bhi.n	800339c <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80032bc:	e034      	b.n	8003328 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	f003 0301 	and.w	r3, r3, #1
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d117      	bne.n	80032fc <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f103 020c 	add.w	r2, r3, #12
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032d8:	7812      	ldrb	r2, [r2, #0]
 80032da:	b2d2      	uxtb	r2, r2
 80032dc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032e2:	1c5a      	adds	r2, r3, #1
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80032ee:	b29b      	uxth	r3, r3
 80032f0:	3b01      	subs	r3, #1
 80032f2:	b29a      	uxth	r2, r3
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80032fa:	e015      	b.n	8003328 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80032fc:	f7fe fcae 	bl	8001c5c <HAL_GetTick>
 8003300:	4602      	mov	r2, r0
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	683a      	ldr	r2, [r7, #0]
 8003308:	429a      	cmp	r2, r3
 800330a:	d803      	bhi.n	8003314 <HAL_SPI_Receive+0x19c>
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003312:	d102      	bne.n	800331a <HAL_SPI_Receive+0x1a2>
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d106      	bne.n	8003328 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 800331a:	2303      	movs	r3, #3
 800331c:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2201      	movs	r2, #1
 8003322:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003326:	e055      	b.n	80033d4 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800332e:	b29b      	uxth	r3, r3
 8003330:	2b00      	cmp	r3, #0
 8003332:	d1c4      	bne.n	80032be <HAL_SPI_Receive+0x146>
 8003334:	e038      	b.n	80033a8 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	f003 0301 	and.w	r3, r3, #1
 8003340:	2b01      	cmp	r3, #1
 8003342:	d115      	bne.n	8003370 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	68da      	ldr	r2, [r3, #12]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800334e:	b292      	uxth	r2, r2
 8003350:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003356:	1c9a      	adds	r2, r3, #2
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003362:	b29b      	uxth	r3, r3
 8003364:	3b01      	subs	r3, #1
 8003366:	b29a      	uxth	r2, r3
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800336e:	e015      	b.n	800339c <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003370:	f7fe fc74 	bl	8001c5c <HAL_GetTick>
 8003374:	4602      	mov	r2, r0
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	683a      	ldr	r2, [r7, #0]
 800337c:	429a      	cmp	r2, r3
 800337e:	d803      	bhi.n	8003388 <HAL_SPI_Receive+0x210>
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003386:	d102      	bne.n	800338e <HAL_SPI_Receive+0x216>
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d106      	bne.n	800339c <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 800338e:	2303      	movs	r3, #3
 8003390:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2201      	movs	r2, #1
 8003396:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800339a:	e01b      	b.n	80033d4 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80033a2:	b29b      	uxth	r3, r3
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d1c6      	bne.n	8003336 <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80033a8:	693a      	ldr	r2, [r7, #16]
 80033aa:	6839      	ldr	r1, [r7, #0]
 80033ac:	68f8      	ldr	r0, [r7, #12]
 80033ae:	f000 fb5b 	bl	8003a68 <SPI_EndRxTransaction>
 80033b2:	4603      	mov	r3, r0
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d002      	beq.n	80033be <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2220      	movs	r2, #32
 80033bc:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d002      	beq.n	80033cc <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	75fb      	strb	r3, [r7, #23]
 80033ca:	e003      	b.n	80033d4 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2201      	movs	r2, #1
 80033d0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2200      	movs	r2, #0
 80033d8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80033dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3718      	adds	r7, #24
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}

080033e6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80033e6:	b580      	push	{r7, lr}
 80033e8:	b08a      	sub	sp, #40	@ 0x28
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	60f8      	str	r0, [r7, #12]
 80033ee:	60b9      	str	r1, [r7, #8]
 80033f0:	607a      	str	r2, [r7, #4]
 80033f2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80033f4:	2301      	movs	r3, #1
 80033f6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80033f8:	2300      	movs	r3, #0
 80033fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003404:	2b01      	cmp	r3, #1
 8003406:	d101      	bne.n	800340c <HAL_SPI_TransmitReceive+0x26>
 8003408:	2302      	movs	r3, #2
 800340a:	e20a      	b.n	8003822 <HAL_SPI_TransmitReceive+0x43c>
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2201      	movs	r2, #1
 8003410:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003414:	f7fe fc22 	bl	8001c5c <HAL_GetTick>
 8003418:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003420:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003428:	887b      	ldrh	r3, [r7, #2]
 800342a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800342c:	887b      	ldrh	r3, [r7, #2]
 800342e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003430:	7efb      	ldrb	r3, [r7, #27]
 8003432:	2b01      	cmp	r3, #1
 8003434:	d00e      	beq.n	8003454 <HAL_SPI_TransmitReceive+0x6e>
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800343c:	d106      	bne.n	800344c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d102      	bne.n	800344c <HAL_SPI_TransmitReceive+0x66>
 8003446:	7efb      	ldrb	r3, [r7, #27]
 8003448:	2b04      	cmp	r3, #4
 800344a:	d003      	beq.n	8003454 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800344c:	2302      	movs	r3, #2
 800344e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8003452:	e1e0      	b.n	8003816 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d005      	beq.n	8003466 <HAL_SPI_TransmitReceive+0x80>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d002      	beq.n	8003466 <HAL_SPI_TransmitReceive+0x80>
 8003460:	887b      	ldrh	r3, [r7, #2]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d103      	bne.n	800346e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800346c:	e1d3      	b.n	8003816 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003474:	b2db      	uxtb	r3, r3
 8003476:	2b04      	cmp	r3, #4
 8003478:	d003      	beq.n	8003482 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2205      	movs	r2, #5
 800347e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2200      	movs	r2, #0
 8003486:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	887a      	ldrh	r2, [r7, #2]
 8003492:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	887a      	ldrh	r2, [r7, #2]
 800349a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	68ba      	ldr	r2, [r7, #8]
 80034a2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	887a      	ldrh	r2, [r7, #2]
 80034a8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	887a      	ldrh	r2, [r7, #2]
 80034ae:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2200      	movs	r2, #0
 80034b4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2200      	movs	r2, #0
 80034ba:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80034c4:	d802      	bhi.n	80034cc <HAL_SPI_TransmitReceive+0xe6>
 80034c6:	8a3b      	ldrh	r3, [r7, #16]
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d908      	bls.n	80034de <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	685a      	ldr	r2, [r3, #4]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80034da:	605a      	str	r2, [r3, #4]
 80034dc:	e007      	b.n	80034ee <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	685a      	ldr	r2, [r3, #4]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80034ec:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034f8:	2b40      	cmp	r3, #64	@ 0x40
 80034fa:	d007      	beq.n	800350c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800350a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003514:	f240 8081 	bls.w	800361a <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d002      	beq.n	8003526 <HAL_SPI_TransmitReceive+0x140>
 8003520:	8a7b      	ldrh	r3, [r7, #18]
 8003522:	2b01      	cmp	r3, #1
 8003524:	d16d      	bne.n	8003602 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800352a:	881a      	ldrh	r2, [r3, #0]
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003536:	1c9a      	adds	r2, r3, #2
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003540:	b29b      	uxth	r3, r3
 8003542:	3b01      	subs	r3, #1
 8003544:	b29a      	uxth	r2, r3
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800354a:	e05a      	b.n	8003602 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	f003 0302 	and.w	r3, r3, #2
 8003556:	2b02      	cmp	r3, #2
 8003558:	d11b      	bne.n	8003592 <HAL_SPI_TransmitReceive+0x1ac>
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800355e:	b29b      	uxth	r3, r3
 8003560:	2b00      	cmp	r3, #0
 8003562:	d016      	beq.n	8003592 <HAL_SPI_TransmitReceive+0x1ac>
 8003564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003566:	2b01      	cmp	r3, #1
 8003568:	d113      	bne.n	8003592 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800356e:	881a      	ldrh	r2, [r3, #0]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800357a:	1c9a      	adds	r2, r3, #2
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003584:	b29b      	uxth	r3, r3
 8003586:	3b01      	subs	r3, #1
 8003588:	b29a      	uxth	r2, r3
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800358e:	2300      	movs	r3, #0
 8003590:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	f003 0301 	and.w	r3, r3, #1
 800359c:	2b01      	cmp	r3, #1
 800359e:	d11c      	bne.n	80035da <HAL_SPI_TransmitReceive+0x1f4>
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80035a6:	b29b      	uxth	r3, r3
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d016      	beq.n	80035da <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	68da      	ldr	r2, [r3, #12]
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035b6:	b292      	uxth	r2, r2
 80035b8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035be:	1c9a      	adds	r2, r3, #2
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80035ca:	b29b      	uxth	r3, r3
 80035cc:	3b01      	subs	r3, #1
 80035ce:	b29a      	uxth	r2, r3
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80035d6:	2301      	movs	r3, #1
 80035d8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80035da:	f7fe fb3f 	bl	8001c5c <HAL_GetTick>
 80035de:	4602      	mov	r2, r0
 80035e0:	69fb      	ldr	r3, [r7, #28]
 80035e2:	1ad3      	subs	r3, r2, r3
 80035e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80035e6:	429a      	cmp	r2, r3
 80035e8:	d80b      	bhi.n	8003602 <HAL_SPI_TransmitReceive+0x21c>
 80035ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035f0:	d007      	beq.n	8003602 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2201      	movs	r2, #1
 80035fc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8003600:	e109      	b.n	8003816 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003606:	b29b      	uxth	r3, r3
 8003608:	2b00      	cmp	r3, #0
 800360a:	d19f      	bne.n	800354c <HAL_SPI_TransmitReceive+0x166>
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003612:	b29b      	uxth	r3, r3
 8003614:	2b00      	cmp	r3, #0
 8003616:	d199      	bne.n	800354c <HAL_SPI_TransmitReceive+0x166>
 8003618:	e0e3      	b.n	80037e2 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d003      	beq.n	800362a <HAL_SPI_TransmitReceive+0x244>
 8003622:	8a7b      	ldrh	r3, [r7, #18]
 8003624:	2b01      	cmp	r3, #1
 8003626:	f040 80cf 	bne.w	80037c8 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800362e:	b29b      	uxth	r3, r3
 8003630:	2b01      	cmp	r3, #1
 8003632:	d912      	bls.n	800365a <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003638:	881a      	ldrh	r2, [r3, #0]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003644:	1c9a      	adds	r2, r3, #2
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800364e:	b29b      	uxth	r3, r3
 8003650:	3b02      	subs	r3, #2
 8003652:	b29a      	uxth	r2, r3
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003658:	e0b6      	b.n	80037c8 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	330c      	adds	r3, #12
 8003664:	7812      	ldrb	r2, [r2, #0]
 8003666:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800366c:	1c5a      	adds	r2, r3, #1
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003676:	b29b      	uxth	r3, r3
 8003678:	3b01      	subs	r3, #1
 800367a:	b29a      	uxth	r2, r3
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003680:	e0a2      	b.n	80037c8 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	f003 0302 	and.w	r3, r3, #2
 800368c:	2b02      	cmp	r3, #2
 800368e:	d134      	bne.n	80036fa <HAL_SPI_TransmitReceive+0x314>
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003694:	b29b      	uxth	r3, r3
 8003696:	2b00      	cmp	r3, #0
 8003698:	d02f      	beq.n	80036fa <HAL_SPI_TransmitReceive+0x314>
 800369a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800369c:	2b01      	cmp	r3, #1
 800369e:	d12c      	bne.n	80036fa <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036a4:	b29b      	uxth	r3, r3
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d912      	bls.n	80036d0 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036ae:	881a      	ldrh	r2, [r3, #0]
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036ba:	1c9a      	adds	r2, r3, #2
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036c4:	b29b      	uxth	r3, r3
 80036c6:	3b02      	subs	r3, #2
 80036c8:	b29a      	uxth	r2, r3
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80036ce:	e012      	b.n	80036f6 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	330c      	adds	r3, #12
 80036da:	7812      	ldrb	r2, [r2, #0]
 80036dc:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036e2:	1c5a      	adds	r2, r3, #1
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	3b01      	subs	r3, #1
 80036f0:	b29a      	uxth	r2, r3
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80036f6:	2300      	movs	r3, #0
 80036f8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	f003 0301 	and.w	r3, r3, #1
 8003704:	2b01      	cmp	r3, #1
 8003706:	d148      	bne.n	800379a <HAL_SPI_TransmitReceive+0x3b4>
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800370e:	b29b      	uxth	r3, r3
 8003710:	2b00      	cmp	r3, #0
 8003712:	d042      	beq.n	800379a <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800371a:	b29b      	uxth	r3, r3
 800371c:	2b01      	cmp	r3, #1
 800371e:	d923      	bls.n	8003768 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	68da      	ldr	r2, [r3, #12]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800372a:	b292      	uxth	r2, r2
 800372c:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003732:	1c9a      	adds	r2, r3, #2
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800373e:	b29b      	uxth	r3, r3
 8003740:	3b02      	subs	r3, #2
 8003742:	b29a      	uxth	r2, r3
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003750:	b29b      	uxth	r3, r3
 8003752:	2b01      	cmp	r3, #1
 8003754:	d81f      	bhi.n	8003796 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	685a      	ldr	r2, [r3, #4]
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003764:	605a      	str	r2, [r3, #4]
 8003766:	e016      	b.n	8003796 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f103 020c 	add.w	r2, r3, #12
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003774:	7812      	ldrb	r2, [r2, #0]
 8003776:	b2d2      	uxtb	r2, r2
 8003778:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800377e:	1c5a      	adds	r2, r3, #1
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800378a:	b29b      	uxth	r3, r3
 800378c:	3b01      	subs	r3, #1
 800378e:	b29a      	uxth	r2, r3
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003796:	2301      	movs	r3, #1
 8003798:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800379a:	f7fe fa5f 	bl	8001c5c <HAL_GetTick>
 800379e:	4602      	mov	r2, r0
 80037a0:	69fb      	ldr	r3, [r7, #28]
 80037a2:	1ad3      	subs	r3, r2, r3
 80037a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d803      	bhi.n	80037b2 <HAL_SPI_TransmitReceive+0x3cc>
 80037aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037b0:	d102      	bne.n	80037b8 <HAL_SPI_TransmitReceive+0x3d2>
 80037b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d107      	bne.n	80037c8 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 80037b8:	2303      	movs	r3, #3
 80037ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2201      	movs	r2, #1
 80037c2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80037c6:	e026      	b.n	8003816 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80037cc:	b29b      	uxth	r3, r3
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	f47f af57 	bne.w	8003682 <HAL_SPI_TransmitReceive+0x29c>
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80037da:	b29b      	uxth	r3, r3
 80037dc:	2b00      	cmp	r3, #0
 80037de:	f47f af50 	bne.w	8003682 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80037e2:	69fa      	ldr	r2, [r7, #28]
 80037e4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80037e6:	68f8      	ldr	r0, [r7, #12]
 80037e8:	f000 f996 	bl	8003b18 <SPI_EndRxTxTransaction>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d005      	beq.n	80037fe <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2220      	movs	r2, #32
 80037fc:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003802:	2b00      	cmp	r3, #0
 8003804:	d003      	beq.n	800380e <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800380c:	e003      	b.n	8003816 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2201      	movs	r2, #1
 8003812:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2200      	movs	r2, #0
 800381a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800381e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8003822:	4618      	mov	r0, r3
 8003824:	3728      	adds	r7, #40	@ 0x28
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
	...

0800382c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b088      	sub	sp, #32
 8003830:	af00      	add	r7, sp, #0
 8003832:	60f8      	str	r0, [r7, #12]
 8003834:	60b9      	str	r1, [r7, #8]
 8003836:	603b      	str	r3, [r7, #0]
 8003838:	4613      	mov	r3, r2
 800383a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800383c:	f7fe fa0e 	bl	8001c5c <HAL_GetTick>
 8003840:	4602      	mov	r2, r0
 8003842:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003844:	1a9b      	subs	r3, r3, r2
 8003846:	683a      	ldr	r2, [r7, #0]
 8003848:	4413      	add	r3, r2
 800384a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800384c:	f7fe fa06 	bl	8001c5c <HAL_GetTick>
 8003850:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003852:	4b39      	ldr	r3, [pc, #228]	@ (8003938 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	015b      	lsls	r3, r3, #5
 8003858:	0d1b      	lsrs	r3, r3, #20
 800385a:	69fa      	ldr	r2, [r7, #28]
 800385c:	fb02 f303 	mul.w	r3, r2, r3
 8003860:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003862:	e054      	b.n	800390e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	f1b3 3fff 	cmp.w	r3, #4294967295
 800386a:	d050      	beq.n	800390e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800386c:	f7fe f9f6 	bl	8001c5c <HAL_GetTick>
 8003870:	4602      	mov	r2, r0
 8003872:	69bb      	ldr	r3, [r7, #24]
 8003874:	1ad3      	subs	r3, r2, r3
 8003876:	69fa      	ldr	r2, [r7, #28]
 8003878:	429a      	cmp	r2, r3
 800387a:	d902      	bls.n	8003882 <SPI_WaitFlagStateUntilTimeout+0x56>
 800387c:	69fb      	ldr	r3, [r7, #28]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d13d      	bne.n	80038fe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	685a      	ldr	r2, [r3, #4]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003890:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800389a:	d111      	bne.n	80038c0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80038a4:	d004      	beq.n	80038b0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038ae:	d107      	bne.n	80038c0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80038be:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80038c8:	d10f      	bne.n	80038ea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80038d8:	601a      	str	r2, [r3, #0]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80038e8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2201      	movs	r2, #1
 80038ee:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2200      	movs	r2, #0
 80038f6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80038fa:	2303      	movs	r3, #3
 80038fc:	e017      	b.n	800392e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d101      	bne.n	8003908 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003904:	2300      	movs	r3, #0
 8003906:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	3b01      	subs	r3, #1
 800390c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	689a      	ldr	r2, [r3, #8]
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	4013      	ands	r3, r2
 8003918:	68ba      	ldr	r2, [r7, #8]
 800391a:	429a      	cmp	r2, r3
 800391c:	bf0c      	ite	eq
 800391e:	2301      	moveq	r3, #1
 8003920:	2300      	movne	r3, #0
 8003922:	b2db      	uxtb	r3, r3
 8003924:	461a      	mov	r2, r3
 8003926:	79fb      	ldrb	r3, [r7, #7]
 8003928:	429a      	cmp	r2, r3
 800392a:	d19b      	bne.n	8003864 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800392c:	2300      	movs	r3, #0
}
 800392e:	4618      	mov	r0, r3
 8003930:	3720      	adds	r7, #32
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	20000038 	.word	0x20000038

0800393c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b08a      	sub	sp, #40	@ 0x28
 8003940:	af00      	add	r7, sp, #0
 8003942:	60f8      	str	r0, [r7, #12]
 8003944:	60b9      	str	r1, [r7, #8]
 8003946:	607a      	str	r2, [r7, #4]
 8003948:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800394a:	2300      	movs	r3, #0
 800394c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800394e:	f7fe f985 	bl	8001c5c <HAL_GetTick>
 8003952:	4602      	mov	r2, r0
 8003954:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003956:	1a9b      	subs	r3, r3, r2
 8003958:	683a      	ldr	r2, [r7, #0]
 800395a:	4413      	add	r3, r2
 800395c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800395e:	f7fe f97d 	bl	8001c5c <HAL_GetTick>
 8003962:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	330c      	adds	r3, #12
 800396a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800396c:	4b3d      	ldr	r3, [pc, #244]	@ (8003a64 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	4613      	mov	r3, r2
 8003972:	009b      	lsls	r3, r3, #2
 8003974:	4413      	add	r3, r2
 8003976:	00da      	lsls	r2, r3, #3
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	0d1b      	lsrs	r3, r3, #20
 800397c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800397e:	fb02 f303 	mul.w	r3, r2, r3
 8003982:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003984:	e060      	b.n	8003a48 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800398c:	d107      	bne.n	800399e <SPI_WaitFifoStateUntilTimeout+0x62>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d104      	bne.n	800399e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	781b      	ldrb	r3, [r3, #0]
 8003998:	b2db      	uxtb	r3, r3
 800399a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800399c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039a4:	d050      	beq.n	8003a48 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80039a6:	f7fe f959 	bl	8001c5c <HAL_GetTick>
 80039aa:	4602      	mov	r2, r0
 80039ac:	6a3b      	ldr	r3, [r7, #32]
 80039ae:	1ad3      	subs	r3, r2, r3
 80039b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d902      	bls.n	80039bc <SPI_WaitFifoStateUntilTimeout+0x80>
 80039b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d13d      	bne.n	8003a38 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	685a      	ldr	r2, [r3, #4]
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80039ca:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80039d4:	d111      	bne.n	80039fa <SPI_WaitFifoStateUntilTimeout+0xbe>
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80039de:	d004      	beq.n	80039ea <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039e8:	d107      	bne.n	80039fa <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80039f8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a02:	d10f      	bne.n	8003a24 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003a12:	601a      	str	r2, [r3, #0]
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003a22:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2201      	movs	r2, #1
 8003a28:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003a34:	2303      	movs	r3, #3
 8003a36:	e010      	b.n	8003a5a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003a38:	69bb      	ldr	r3, [r7, #24]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d101      	bne.n	8003a42 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003a42:	69bb      	ldr	r3, [r7, #24]
 8003a44:	3b01      	subs	r3, #1
 8003a46:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	689a      	ldr	r2, [r3, #8]
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	4013      	ands	r3, r2
 8003a52:	687a      	ldr	r2, [r7, #4]
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d196      	bne.n	8003986 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003a58:	2300      	movs	r3, #0
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3728      	adds	r7, #40	@ 0x28
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	bf00      	nop
 8003a64:	20000038 	.word	0x20000038

08003a68 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b086      	sub	sp, #24
 8003a6c:	af02      	add	r7, sp, #8
 8003a6e:	60f8      	str	r0, [r7, #12]
 8003a70:	60b9      	str	r1, [r7, #8]
 8003a72:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003a7c:	d111      	bne.n	8003aa2 <SPI_EndRxTransaction+0x3a>
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a86:	d004      	beq.n	8003a92 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a90:	d107      	bne.n	8003aa2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003aa0:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	9300      	str	r3, [sp, #0]
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	2180      	movs	r1, #128	@ 0x80
 8003aac:	68f8      	ldr	r0, [r7, #12]
 8003aae:	f7ff febd 	bl	800382c <SPI_WaitFlagStateUntilTimeout>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d007      	beq.n	8003ac8 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003abc:	f043 0220 	orr.w	r2, r3, #32
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003ac4:	2303      	movs	r3, #3
 8003ac6:	e023      	b.n	8003b10 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003ad0:	d11d      	bne.n	8003b0e <SPI_EndRxTransaction+0xa6>
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ada:	d004      	beq.n	8003ae6 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ae4:	d113      	bne.n	8003b0e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	9300      	str	r3, [sp, #0]
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	2200      	movs	r2, #0
 8003aee:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003af2:	68f8      	ldr	r0, [r7, #12]
 8003af4:	f7ff ff22 	bl	800393c <SPI_WaitFifoStateUntilTimeout>
 8003af8:	4603      	mov	r3, r0
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d007      	beq.n	8003b0e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b02:	f043 0220 	orr.w	r2, r3, #32
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	e000      	b.n	8003b10 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8003b0e:	2300      	movs	r3, #0
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	3710      	adds	r7, #16
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}

08003b18 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b086      	sub	sp, #24
 8003b1c:	af02      	add	r7, sp, #8
 8003b1e:	60f8      	str	r0, [r7, #12]
 8003b20:	60b9      	str	r1, [r7, #8]
 8003b22:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	9300      	str	r3, [sp, #0]
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003b30:	68f8      	ldr	r0, [r7, #12]
 8003b32:	f7ff ff03 	bl	800393c <SPI_WaitFifoStateUntilTimeout>
 8003b36:	4603      	mov	r3, r0
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d007      	beq.n	8003b4c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b40:	f043 0220 	orr.w	r2, r3, #32
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003b48:	2303      	movs	r3, #3
 8003b4a:	e027      	b.n	8003b9c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	9300      	str	r3, [sp, #0]
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	2200      	movs	r2, #0
 8003b54:	2180      	movs	r1, #128	@ 0x80
 8003b56:	68f8      	ldr	r0, [r7, #12]
 8003b58:	f7ff fe68 	bl	800382c <SPI_WaitFlagStateUntilTimeout>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d007      	beq.n	8003b72 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b66:	f043 0220 	orr.w	r2, r3, #32
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	e014      	b.n	8003b9c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	9300      	str	r3, [sp, #0]
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003b7e:	68f8      	ldr	r0, [r7, #12]
 8003b80:	f7ff fedc 	bl	800393c <SPI_WaitFifoStateUntilTimeout>
 8003b84:	4603      	mov	r3, r0
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d007      	beq.n	8003b9a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b8e:	f043 0220 	orr.w	r2, r3, #32
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003b96:	2303      	movs	r3, #3
 8003b98:	e000      	b.n	8003b9c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003b9a:	2300      	movs	r3, #0
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3710      	adds	r7, #16
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}

08003ba4 <malloc>:
 8003ba4:	4b02      	ldr	r3, [pc, #8]	@ (8003bb0 <malloc+0xc>)
 8003ba6:	4601      	mov	r1, r0
 8003ba8:	6818      	ldr	r0, [r3, #0]
 8003baa:	f000 b825 	b.w	8003bf8 <_malloc_r>
 8003bae:	bf00      	nop
 8003bb0:	20000070 	.word	0x20000070

08003bb4 <sbrk_aligned>:
 8003bb4:	b570      	push	{r4, r5, r6, lr}
 8003bb6:	4e0f      	ldr	r6, [pc, #60]	@ (8003bf4 <sbrk_aligned+0x40>)
 8003bb8:	460c      	mov	r4, r1
 8003bba:	6831      	ldr	r1, [r6, #0]
 8003bbc:	4605      	mov	r5, r0
 8003bbe:	b911      	cbnz	r1, 8003bc6 <sbrk_aligned+0x12>
 8003bc0:	f000 f8ae 	bl	8003d20 <_sbrk_r>
 8003bc4:	6030      	str	r0, [r6, #0]
 8003bc6:	4621      	mov	r1, r4
 8003bc8:	4628      	mov	r0, r5
 8003bca:	f000 f8a9 	bl	8003d20 <_sbrk_r>
 8003bce:	1c43      	adds	r3, r0, #1
 8003bd0:	d103      	bne.n	8003bda <sbrk_aligned+0x26>
 8003bd2:	f04f 34ff 	mov.w	r4, #4294967295
 8003bd6:	4620      	mov	r0, r4
 8003bd8:	bd70      	pop	{r4, r5, r6, pc}
 8003bda:	1cc4      	adds	r4, r0, #3
 8003bdc:	f024 0403 	bic.w	r4, r4, #3
 8003be0:	42a0      	cmp	r0, r4
 8003be2:	d0f8      	beq.n	8003bd6 <sbrk_aligned+0x22>
 8003be4:	1a21      	subs	r1, r4, r0
 8003be6:	4628      	mov	r0, r5
 8003be8:	f000 f89a 	bl	8003d20 <_sbrk_r>
 8003bec:	3001      	adds	r0, #1
 8003bee:	d1f2      	bne.n	8003bd6 <sbrk_aligned+0x22>
 8003bf0:	e7ef      	b.n	8003bd2 <sbrk_aligned+0x1e>
 8003bf2:	bf00      	nop
 8003bf4:	20001270 	.word	0x20001270

08003bf8 <_malloc_r>:
 8003bf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003bfc:	1ccd      	adds	r5, r1, #3
 8003bfe:	f025 0503 	bic.w	r5, r5, #3
 8003c02:	3508      	adds	r5, #8
 8003c04:	2d0c      	cmp	r5, #12
 8003c06:	bf38      	it	cc
 8003c08:	250c      	movcc	r5, #12
 8003c0a:	2d00      	cmp	r5, #0
 8003c0c:	4606      	mov	r6, r0
 8003c0e:	db01      	blt.n	8003c14 <_malloc_r+0x1c>
 8003c10:	42a9      	cmp	r1, r5
 8003c12:	d904      	bls.n	8003c1e <_malloc_r+0x26>
 8003c14:	230c      	movs	r3, #12
 8003c16:	6033      	str	r3, [r6, #0]
 8003c18:	2000      	movs	r0, #0
 8003c1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003c1e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003cf4 <_malloc_r+0xfc>
 8003c22:	f000 f869 	bl	8003cf8 <__malloc_lock>
 8003c26:	f8d8 3000 	ldr.w	r3, [r8]
 8003c2a:	461c      	mov	r4, r3
 8003c2c:	bb44      	cbnz	r4, 8003c80 <_malloc_r+0x88>
 8003c2e:	4629      	mov	r1, r5
 8003c30:	4630      	mov	r0, r6
 8003c32:	f7ff ffbf 	bl	8003bb4 <sbrk_aligned>
 8003c36:	1c43      	adds	r3, r0, #1
 8003c38:	4604      	mov	r4, r0
 8003c3a:	d158      	bne.n	8003cee <_malloc_r+0xf6>
 8003c3c:	f8d8 4000 	ldr.w	r4, [r8]
 8003c40:	4627      	mov	r7, r4
 8003c42:	2f00      	cmp	r7, #0
 8003c44:	d143      	bne.n	8003cce <_malloc_r+0xd6>
 8003c46:	2c00      	cmp	r4, #0
 8003c48:	d04b      	beq.n	8003ce2 <_malloc_r+0xea>
 8003c4a:	6823      	ldr	r3, [r4, #0]
 8003c4c:	4639      	mov	r1, r7
 8003c4e:	4630      	mov	r0, r6
 8003c50:	eb04 0903 	add.w	r9, r4, r3
 8003c54:	f000 f864 	bl	8003d20 <_sbrk_r>
 8003c58:	4581      	cmp	r9, r0
 8003c5a:	d142      	bne.n	8003ce2 <_malloc_r+0xea>
 8003c5c:	6821      	ldr	r1, [r4, #0]
 8003c5e:	1a6d      	subs	r5, r5, r1
 8003c60:	4629      	mov	r1, r5
 8003c62:	4630      	mov	r0, r6
 8003c64:	f7ff ffa6 	bl	8003bb4 <sbrk_aligned>
 8003c68:	3001      	adds	r0, #1
 8003c6a:	d03a      	beq.n	8003ce2 <_malloc_r+0xea>
 8003c6c:	6823      	ldr	r3, [r4, #0]
 8003c6e:	442b      	add	r3, r5
 8003c70:	6023      	str	r3, [r4, #0]
 8003c72:	f8d8 3000 	ldr.w	r3, [r8]
 8003c76:	685a      	ldr	r2, [r3, #4]
 8003c78:	bb62      	cbnz	r2, 8003cd4 <_malloc_r+0xdc>
 8003c7a:	f8c8 7000 	str.w	r7, [r8]
 8003c7e:	e00f      	b.n	8003ca0 <_malloc_r+0xa8>
 8003c80:	6822      	ldr	r2, [r4, #0]
 8003c82:	1b52      	subs	r2, r2, r5
 8003c84:	d420      	bmi.n	8003cc8 <_malloc_r+0xd0>
 8003c86:	2a0b      	cmp	r2, #11
 8003c88:	d917      	bls.n	8003cba <_malloc_r+0xc2>
 8003c8a:	1961      	adds	r1, r4, r5
 8003c8c:	42a3      	cmp	r3, r4
 8003c8e:	6025      	str	r5, [r4, #0]
 8003c90:	bf18      	it	ne
 8003c92:	6059      	strne	r1, [r3, #4]
 8003c94:	6863      	ldr	r3, [r4, #4]
 8003c96:	bf08      	it	eq
 8003c98:	f8c8 1000 	streq.w	r1, [r8]
 8003c9c:	5162      	str	r2, [r4, r5]
 8003c9e:	604b      	str	r3, [r1, #4]
 8003ca0:	4630      	mov	r0, r6
 8003ca2:	f000 f82f 	bl	8003d04 <__malloc_unlock>
 8003ca6:	f104 000b 	add.w	r0, r4, #11
 8003caa:	1d23      	adds	r3, r4, #4
 8003cac:	f020 0007 	bic.w	r0, r0, #7
 8003cb0:	1ac2      	subs	r2, r0, r3
 8003cb2:	bf1c      	itt	ne
 8003cb4:	1a1b      	subne	r3, r3, r0
 8003cb6:	50a3      	strne	r3, [r4, r2]
 8003cb8:	e7af      	b.n	8003c1a <_malloc_r+0x22>
 8003cba:	6862      	ldr	r2, [r4, #4]
 8003cbc:	42a3      	cmp	r3, r4
 8003cbe:	bf0c      	ite	eq
 8003cc0:	f8c8 2000 	streq.w	r2, [r8]
 8003cc4:	605a      	strne	r2, [r3, #4]
 8003cc6:	e7eb      	b.n	8003ca0 <_malloc_r+0xa8>
 8003cc8:	4623      	mov	r3, r4
 8003cca:	6864      	ldr	r4, [r4, #4]
 8003ccc:	e7ae      	b.n	8003c2c <_malloc_r+0x34>
 8003cce:	463c      	mov	r4, r7
 8003cd0:	687f      	ldr	r7, [r7, #4]
 8003cd2:	e7b6      	b.n	8003c42 <_malloc_r+0x4a>
 8003cd4:	461a      	mov	r2, r3
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	42a3      	cmp	r3, r4
 8003cda:	d1fb      	bne.n	8003cd4 <_malloc_r+0xdc>
 8003cdc:	2300      	movs	r3, #0
 8003cde:	6053      	str	r3, [r2, #4]
 8003ce0:	e7de      	b.n	8003ca0 <_malloc_r+0xa8>
 8003ce2:	230c      	movs	r3, #12
 8003ce4:	6033      	str	r3, [r6, #0]
 8003ce6:	4630      	mov	r0, r6
 8003ce8:	f000 f80c 	bl	8003d04 <__malloc_unlock>
 8003cec:	e794      	b.n	8003c18 <_malloc_r+0x20>
 8003cee:	6005      	str	r5, [r0, #0]
 8003cf0:	e7d6      	b.n	8003ca0 <_malloc_r+0xa8>
 8003cf2:	bf00      	nop
 8003cf4:	20001274 	.word	0x20001274

08003cf8 <__malloc_lock>:
 8003cf8:	4801      	ldr	r0, [pc, #4]	@ (8003d00 <__malloc_lock+0x8>)
 8003cfa:	f000 b84b 	b.w	8003d94 <__retarget_lock_acquire_recursive>
 8003cfe:	bf00      	nop
 8003d00:	200013b4 	.word	0x200013b4

08003d04 <__malloc_unlock>:
 8003d04:	4801      	ldr	r0, [pc, #4]	@ (8003d0c <__malloc_unlock+0x8>)
 8003d06:	f000 b846 	b.w	8003d96 <__retarget_lock_release_recursive>
 8003d0a:	bf00      	nop
 8003d0c:	200013b4 	.word	0x200013b4

08003d10 <memset>:
 8003d10:	4402      	add	r2, r0
 8003d12:	4603      	mov	r3, r0
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d100      	bne.n	8003d1a <memset+0xa>
 8003d18:	4770      	bx	lr
 8003d1a:	f803 1b01 	strb.w	r1, [r3], #1
 8003d1e:	e7f9      	b.n	8003d14 <memset+0x4>

08003d20 <_sbrk_r>:
 8003d20:	b538      	push	{r3, r4, r5, lr}
 8003d22:	4d06      	ldr	r5, [pc, #24]	@ (8003d3c <_sbrk_r+0x1c>)
 8003d24:	2300      	movs	r3, #0
 8003d26:	4604      	mov	r4, r0
 8003d28:	4608      	mov	r0, r1
 8003d2a:	602b      	str	r3, [r5, #0]
 8003d2c:	f7fd f89e 	bl	8000e6c <_sbrk>
 8003d30:	1c43      	adds	r3, r0, #1
 8003d32:	d102      	bne.n	8003d3a <_sbrk_r+0x1a>
 8003d34:	682b      	ldr	r3, [r5, #0]
 8003d36:	b103      	cbz	r3, 8003d3a <_sbrk_r+0x1a>
 8003d38:	6023      	str	r3, [r4, #0]
 8003d3a:	bd38      	pop	{r3, r4, r5, pc}
 8003d3c:	200013b0 	.word	0x200013b0

08003d40 <__errno>:
 8003d40:	4b01      	ldr	r3, [pc, #4]	@ (8003d48 <__errno+0x8>)
 8003d42:	6818      	ldr	r0, [r3, #0]
 8003d44:	4770      	bx	lr
 8003d46:	bf00      	nop
 8003d48:	20000070 	.word	0x20000070

08003d4c <__libc_init_array>:
 8003d4c:	b570      	push	{r4, r5, r6, lr}
 8003d4e:	4d0d      	ldr	r5, [pc, #52]	@ (8003d84 <__libc_init_array+0x38>)
 8003d50:	4c0d      	ldr	r4, [pc, #52]	@ (8003d88 <__libc_init_array+0x3c>)
 8003d52:	1b64      	subs	r4, r4, r5
 8003d54:	10a4      	asrs	r4, r4, #2
 8003d56:	2600      	movs	r6, #0
 8003d58:	42a6      	cmp	r6, r4
 8003d5a:	d109      	bne.n	8003d70 <__libc_init_array+0x24>
 8003d5c:	4d0b      	ldr	r5, [pc, #44]	@ (8003d8c <__libc_init_array+0x40>)
 8003d5e:	4c0c      	ldr	r4, [pc, #48]	@ (8003d90 <__libc_init_array+0x44>)
 8003d60:	f000 f822 	bl	8003da8 <_init>
 8003d64:	1b64      	subs	r4, r4, r5
 8003d66:	10a4      	asrs	r4, r4, #2
 8003d68:	2600      	movs	r6, #0
 8003d6a:	42a6      	cmp	r6, r4
 8003d6c:	d105      	bne.n	8003d7a <__libc_init_array+0x2e>
 8003d6e:	bd70      	pop	{r4, r5, r6, pc}
 8003d70:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d74:	4798      	blx	r3
 8003d76:	3601      	adds	r6, #1
 8003d78:	e7ee      	b.n	8003d58 <__libc_init_array+0xc>
 8003d7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d7e:	4798      	blx	r3
 8003d80:	3601      	adds	r6, #1
 8003d82:	e7f2      	b.n	8003d6a <__libc_init_array+0x1e>
 8003d84:	080043f8 	.word	0x080043f8
 8003d88:	080043f8 	.word	0x080043f8
 8003d8c:	080043f8 	.word	0x080043f8
 8003d90:	080043fc 	.word	0x080043fc

08003d94 <__retarget_lock_acquire_recursive>:
 8003d94:	4770      	bx	lr

08003d96 <__retarget_lock_release_recursive>:
 8003d96:	4770      	bx	lr

08003d98 <strcpy>:
 8003d98:	4603      	mov	r3, r0
 8003d9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003d9e:	f803 2b01 	strb.w	r2, [r3], #1
 8003da2:	2a00      	cmp	r2, #0
 8003da4:	d1f9      	bne.n	8003d9a <strcpy+0x2>
 8003da6:	4770      	bx	lr

08003da8 <_init>:
 8003da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003daa:	bf00      	nop
 8003dac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dae:	bc08      	pop	{r3}
 8003db0:	469e      	mov	lr, r3
 8003db2:	4770      	bx	lr

08003db4 <_fini>:
 8003db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003db6:	bf00      	nop
 8003db8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dba:	bc08      	pop	{r3}
 8003dbc:	469e      	mov	lr, r3
 8003dbe:	4770      	bx	lr

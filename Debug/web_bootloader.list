
web_bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037c8  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080039a0  080039a0  000049a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039b0  080039b0  00005064  2**0
                  CONTENTS
  4 .ARM          00000000  080039b0  080039b0  00005064  2**0
                  CONTENTS
  5 .preinit_array 00000000  080039b0  080039b0  00005064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080039b0  080039b0  000049b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080039b4  080039b4  000049b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  080039b8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a8  20000064  08003a1c  00005064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000010c  08003a1c  0000510c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008fb2  00000000  00000000  00005094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c43  00000000  00000000  0000e046  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a38  00000000  00000000  0000fc90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007bd  00000000  00000000  000106c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023fea  00000000  00000000  00010e85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a1ed  00000000  00000000  00034e6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e5472  00000000  00000000  0003f05c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001244ce  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002890  00000000  00000000  00124514  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00126da4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000064 	.word	0x20000064
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08003988 	.word	0x08003988

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000068 	.word	0x20000068
 8000214:	08003988 	.word	0x08003988

08000218 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b084      	sub	sp, #16
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8000220:	4b22      	ldr	r3, [pc, #136]	@ (80002ac <WIZCHIP_READ+0x94>)
 8000222:	68db      	ldr	r3, [r3, #12]
 8000224:	4798      	blx	r3
   WIZCHIP.CS._select();
 8000226:	4b21      	ldr	r3, [pc, #132]	@ (80002ac <WIZCHIP_READ+0x94>)
 8000228:	695b      	ldr	r3, [r3, #20]
 800022a:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800022c:	4b1f      	ldr	r3, [pc, #124]	@ (80002ac <WIZCHIP_READ+0x94>)
 800022e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000230:	2b00      	cmp	r3, #0
 8000232:	d003      	beq.n	800023c <WIZCHIP_READ+0x24>
 8000234:	4b1d      	ldr	r3, [pc, #116]	@ (80002ac <WIZCHIP_READ+0x94>)
 8000236:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000238:	2b00      	cmp	r3, #0
 800023a:	d114      	bne.n	8000266 <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800023c:	4b1b      	ldr	r3, [pc, #108]	@ (80002ac <WIZCHIP_READ+0x94>)
 800023e:	6a1b      	ldr	r3, [r3, #32]
 8000240:	687a      	ldr	r2, [r7, #4]
 8000242:	0c12      	lsrs	r2, r2, #16
 8000244:	b2d2      	uxtb	r2, r2
 8000246:	4610      	mov	r0, r2
 8000248:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800024a:	4b18      	ldr	r3, [pc, #96]	@ (80002ac <WIZCHIP_READ+0x94>)
 800024c:	6a1b      	ldr	r3, [r3, #32]
 800024e:	687a      	ldr	r2, [r7, #4]
 8000250:	0a12      	lsrs	r2, r2, #8
 8000252:	b2d2      	uxtb	r2, r2
 8000254:	4610      	mov	r0, r2
 8000256:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8000258:	4b14      	ldr	r3, [pc, #80]	@ (80002ac <WIZCHIP_READ+0x94>)
 800025a:	6a1b      	ldr	r3, [r3, #32]
 800025c:	687a      	ldr	r2, [r7, #4]
 800025e:	b2d2      	uxtb	r2, r2
 8000260:	4610      	mov	r0, r2
 8000262:	4798      	blx	r3
 8000264:	e011      	b.n	800028a <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	0c1b      	lsrs	r3, r3, #16
 800026a:	b2db      	uxtb	r3, r3
 800026c:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	0a1b      	lsrs	r3, r3, #8
 8000272:	b2db      	uxtb	r3, r3
 8000274:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	b2db      	uxtb	r3, r3
 800027a:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 800027c:	4b0b      	ldr	r3, [pc, #44]	@ (80002ac <WIZCHIP_READ+0x94>)
 800027e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000280:	f107 020c 	add.w	r2, r7, #12
 8000284:	2103      	movs	r1, #3
 8000286:	4610      	mov	r0, r2
 8000288:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 800028a:	4b08      	ldr	r3, [pc, #32]	@ (80002ac <WIZCHIP_READ+0x94>)
 800028c:	69db      	ldr	r3, [r3, #28]
 800028e:	4798      	blx	r3
 8000290:	4603      	mov	r3, r0
 8000292:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 8000294:	4b05      	ldr	r3, [pc, #20]	@ (80002ac <WIZCHIP_READ+0x94>)
 8000296:	699b      	ldr	r3, [r3, #24]
 8000298:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800029a:	4b04      	ldr	r3, [pc, #16]	@ (80002ac <WIZCHIP_READ+0x94>)
 800029c:	691b      	ldr	r3, [r3, #16]
 800029e:	4798      	blx	r3
   return ret;
 80002a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80002a2:	4618      	mov	r0, r3
 80002a4:	3710      	adds	r7, #16
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bd80      	pop	{r7, pc}
 80002aa:	bf00      	nop
 80002ac:	20000030 	.word	0x20000030

080002b0 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b084      	sub	sp, #16
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
 80002b8:	460b      	mov	r3, r1
 80002ba:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 80002bc:	4b22      	ldr	r3, [pc, #136]	@ (8000348 <WIZCHIP_WRITE+0x98>)
 80002be:	68db      	ldr	r3, [r3, #12]
 80002c0:	4798      	blx	r3
   WIZCHIP.CS._select();
 80002c2:	4b21      	ldr	r3, [pc, #132]	@ (8000348 <WIZCHIP_WRITE+0x98>)
 80002c4:	695b      	ldr	r3, [r3, #20]
 80002c6:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	f043 0304 	orr.w	r3, r3, #4
 80002ce:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80002d0:	4b1d      	ldr	r3, [pc, #116]	@ (8000348 <WIZCHIP_WRITE+0x98>)
 80002d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d119      	bne.n	800030c <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80002d8:	4b1b      	ldr	r3, [pc, #108]	@ (8000348 <WIZCHIP_WRITE+0x98>)
 80002da:	6a1b      	ldr	r3, [r3, #32]
 80002dc:	687a      	ldr	r2, [r7, #4]
 80002de:	0c12      	lsrs	r2, r2, #16
 80002e0:	b2d2      	uxtb	r2, r2
 80002e2:	4610      	mov	r0, r2
 80002e4:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80002e6:	4b18      	ldr	r3, [pc, #96]	@ (8000348 <WIZCHIP_WRITE+0x98>)
 80002e8:	6a1b      	ldr	r3, [r3, #32]
 80002ea:	687a      	ldr	r2, [r7, #4]
 80002ec:	0a12      	lsrs	r2, r2, #8
 80002ee:	b2d2      	uxtb	r2, r2
 80002f0:	4610      	mov	r0, r2
 80002f2:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80002f4:	4b14      	ldr	r3, [pc, #80]	@ (8000348 <WIZCHIP_WRITE+0x98>)
 80002f6:	6a1b      	ldr	r3, [r3, #32]
 80002f8:	687a      	ldr	r2, [r7, #4]
 80002fa:	b2d2      	uxtb	r2, r2
 80002fc:	4610      	mov	r0, r2
 80002fe:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 8000300:	4b11      	ldr	r3, [pc, #68]	@ (8000348 <WIZCHIP_WRITE+0x98>)
 8000302:	6a1b      	ldr	r3, [r3, #32]
 8000304:	78fa      	ldrb	r2, [r7, #3]
 8000306:	4610      	mov	r0, r2
 8000308:	4798      	blx	r3
 800030a:	e013      	b.n	8000334 <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	0c1b      	lsrs	r3, r3, #16
 8000310:	b2db      	uxtb	r3, r3
 8000312:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	0a1b      	lsrs	r3, r3, #8
 8000318:	b2db      	uxtb	r3, r3
 800031a:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	b2db      	uxtb	r3, r3
 8000320:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 8000322:	78fb      	ldrb	r3, [r7, #3]
 8000324:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 8000326:	4b08      	ldr	r3, [pc, #32]	@ (8000348 <WIZCHIP_WRITE+0x98>)
 8000328:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800032a:	f107 020c 	add.w	r2, r7, #12
 800032e:	2104      	movs	r1, #4
 8000330:	4610      	mov	r0, r2
 8000332:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8000334:	4b04      	ldr	r3, [pc, #16]	@ (8000348 <WIZCHIP_WRITE+0x98>)
 8000336:	699b      	ldr	r3, [r3, #24]
 8000338:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800033a:	4b03      	ldr	r3, [pc, #12]	@ (8000348 <WIZCHIP_WRITE+0x98>)
 800033c:	691b      	ldr	r3, [r3, #16]
 800033e:	4798      	blx	r3
}
 8000340:	bf00      	nop
 8000342:	3710      	adds	r7, #16
 8000344:	46bd      	mov	sp, r7
 8000346:	bd80      	pop	{r7, pc}
 8000348:	20000030 	.word	0x20000030

0800034c <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 800034c:	b590      	push	{r4, r7, lr}
 800034e:	b087      	sub	sp, #28
 8000350:	af00      	add	r7, sp, #0
 8000352:	60f8      	str	r0, [r7, #12]
 8000354:	60b9      	str	r1, [r7, #8]
 8000356:	4613      	mov	r3, r2
 8000358:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 800035a:	4b2b      	ldr	r3, [pc, #172]	@ (8000408 <WIZCHIP_READ_BUF+0xbc>)
 800035c:	68db      	ldr	r3, [r3, #12]
 800035e:	4798      	blx	r3
   WIZCHIP.CS._select();
 8000360:	4b29      	ldr	r3, [pc, #164]	@ (8000408 <WIZCHIP_READ_BUF+0xbc>)
 8000362:	695b      	ldr	r3, [r3, #20]
 8000364:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8000366:	4b28      	ldr	r3, [pc, #160]	@ (8000408 <WIZCHIP_READ_BUF+0xbc>)
 8000368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800036a:	2b00      	cmp	r3, #0
 800036c:	d003      	beq.n	8000376 <WIZCHIP_READ_BUF+0x2a>
 800036e:	4b26      	ldr	r3, [pc, #152]	@ (8000408 <WIZCHIP_READ_BUF+0xbc>)
 8000370:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000372:	2b00      	cmp	r3, #0
 8000374:	d126      	bne.n	80003c4 <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8000376:	4b24      	ldr	r3, [pc, #144]	@ (8000408 <WIZCHIP_READ_BUF+0xbc>)
 8000378:	6a1b      	ldr	r3, [r3, #32]
 800037a:	68fa      	ldr	r2, [r7, #12]
 800037c:	0c12      	lsrs	r2, r2, #16
 800037e:	b2d2      	uxtb	r2, r2
 8000380:	4610      	mov	r0, r2
 8000382:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8000384:	4b20      	ldr	r3, [pc, #128]	@ (8000408 <WIZCHIP_READ_BUF+0xbc>)
 8000386:	6a1b      	ldr	r3, [r3, #32]
 8000388:	68fa      	ldr	r2, [r7, #12]
 800038a:	0a12      	lsrs	r2, r2, #8
 800038c:	b2d2      	uxtb	r2, r2
 800038e:	4610      	mov	r0, r2
 8000390:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8000392:	4b1d      	ldr	r3, [pc, #116]	@ (8000408 <WIZCHIP_READ_BUF+0xbc>)
 8000394:	6a1b      	ldr	r3, [r3, #32]
 8000396:	68fa      	ldr	r2, [r7, #12]
 8000398:	b2d2      	uxtb	r2, r2
 800039a:	4610      	mov	r0, r2
 800039c:	4798      	blx	r3
		for(i = 0; i < len; i++)
 800039e:	2300      	movs	r3, #0
 80003a0:	82fb      	strh	r3, [r7, #22]
 80003a2:	e00a      	b.n	80003ba <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 80003a4:	4b18      	ldr	r3, [pc, #96]	@ (8000408 <WIZCHIP_READ_BUF+0xbc>)
 80003a6:	69db      	ldr	r3, [r3, #28]
 80003a8:	8afa      	ldrh	r2, [r7, #22]
 80003aa:	68b9      	ldr	r1, [r7, #8]
 80003ac:	188c      	adds	r4, r1, r2
 80003ae:	4798      	blx	r3
 80003b0:	4603      	mov	r3, r0
 80003b2:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 80003b4:	8afb      	ldrh	r3, [r7, #22]
 80003b6:	3301      	adds	r3, #1
 80003b8:	82fb      	strh	r3, [r7, #22]
 80003ba:	8afa      	ldrh	r2, [r7, #22]
 80003bc:	88fb      	ldrh	r3, [r7, #6]
 80003be:	429a      	cmp	r2, r3
 80003c0:	d3f0      	bcc.n	80003a4 <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80003c2:	e017      	b.n	80003f4 <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80003c4:	68fb      	ldr	r3, [r7, #12]
 80003c6:	0c1b      	lsrs	r3, r3, #16
 80003c8:	b2db      	uxtb	r3, r3
 80003ca:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80003cc:	68fb      	ldr	r3, [r7, #12]
 80003ce:	0a1b      	lsrs	r3, r3, #8
 80003d0:	b2db      	uxtb	r3, r3
 80003d2:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80003d4:	68fb      	ldr	r3, [r7, #12]
 80003d6:	b2db      	uxtb	r3, r3
 80003d8:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80003da:	4b0b      	ldr	r3, [pc, #44]	@ (8000408 <WIZCHIP_READ_BUF+0xbc>)
 80003dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80003de:	f107 0210 	add.w	r2, r7, #16
 80003e2:	2103      	movs	r1, #3
 80003e4:	4610      	mov	r0, r2
 80003e6:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 80003e8:	4b07      	ldr	r3, [pc, #28]	@ (8000408 <WIZCHIP_READ_BUF+0xbc>)
 80003ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80003ec:	88fa      	ldrh	r2, [r7, #6]
 80003ee:	4611      	mov	r1, r2
 80003f0:	68b8      	ldr	r0, [r7, #8]
 80003f2:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 80003f4:	4b04      	ldr	r3, [pc, #16]	@ (8000408 <WIZCHIP_READ_BUF+0xbc>)
 80003f6:	699b      	ldr	r3, [r3, #24]
 80003f8:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80003fa:	4b03      	ldr	r3, [pc, #12]	@ (8000408 <WIZCHIP_READ_BUF+0xbc>)
 80003fc:	691b      	ldr	r3, [r3, #16]
 80003fe:	4798      	blx	r3
}
 8000400:	bf00      	nop
 8000402:	371c      	adds	r7, #28
 8000404:	46bd      	mov	sp, r7
 8000406:	bd90      	pop	{r4, r7, pc}
 8000408:	20000030 	.word	0x20000030

0800040c <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b086      	sub	sp, #24
 8000410:	af00      	add	r7, sp, #0
 8000412:	60f8      	str	r0, [r7, #12]
 8000414:	60b9      	str	r1, [r7, #8]
 8000416:	4613      	mov	r3, r2
 8000418:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 800041a:	4b2b      	ldr	r3, [pc, #172]	@ (80004c8 <WIZCHIP_WRITE_BUF+0xbc>)
 800041c:	68db      	ldr	r3, [r3, #12]
 800041e:	4798      	blx	r3
   WIZCHIP.CS._select();
 8000420:	4b29      	ldr	r3, [pc, #164]	@ (80004c8 <WIZCHIP_WRITE_BUF+0xbc>)
 8000422:	695b      	ldr	r3, [r3, #20]
 8000424:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8000426:	68fb      	ldr	r3, [r7, #12]
 8000428:	f043 0304 	orr.w	r3, r3, #4
 800042c:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800042e:	4b26      	ldr	r3, [pc, #152]	@ (80004c8 <WIZCHIP_WRITE_BUF+0xbc>)
 8000430:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000432:	2b00      	cmp	r3, #0
 8000434:	d126      	bne.n	8000484 <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8000436:	4b24      	ldr	r3, [pc, #144]	@ (80004c8 <WIZCHIP_WRITE_BUF+0xbc>)
 8000438:	6a1b      	ldr	r3, [r3, #32]
 800043a:	68fa      	ldr	r2, [r7, #12]
 800043c:	0c12      	lsrs	r2, r2, #16
 800043e:	b2d2      	uxtb	r2, r2
 8000440:	4610      	mov	r0, r2
 8000442:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8000444:	4b20      	ldr	r3, [pc, #128]	@ (80004c8 <WIZCHIP_WRITE_BUF+0xbc>)
 8000446:	6a1b      	ldr	r3, [r3, #32]
 8000448:	68fa      	ldr	r2, [r7, #12]
 800044a:	0a12      	lsrs	r2, r2, #8
 800044c:	b2d2      	uxtb	r2, r2
 800044e:	4610      	mov	r0, r2
 8000450:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8000452:	4b1d      	ldr	r3, [pc, #116]	@ (80004c8 <WIZCHIP_WRITE_BUF+0xbc>)
 8000454:	6a1b      	ldr	r3, [r3, #32]
 8000456:	68fa      	ldr	r2, [r7, #12]
 8000458:	b2d2      	uxtb	r2, r2
 800045a:	4610      	mov	r0, r2
 800045c:	4798      	blx	r3
		for(i = 0; i < len; i++)
 800045e:	2300      	movs	r3, #0
 8000460:	82fb      	strh	r3, [r7, #22]
 8000462:	e00a      	b.n	800047a <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8000464:	4b18      	ldr	r3, [pc, #96]	@ (80004c8 <WIZCHIP_WRITE_BUF+0xbc>)
 8000466:	6a1b      	ldr	r3, [r3, #32]
 8000468:	8afa      	ldrh	r2, [r7, #22]
 800046a:	68b9      	ldr	r1, [r7, #8]
 800046c:	440a      	add	r2, r1
 800046e:	7812      	ldrb	r2, [r2, #0]
 8000470:	4610      	mov	r0, r2
 8000472:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8000474:	8afb      	ldrh	r3, [r7, #22]
 8000476:	3301      	adds	r3, #1
 8000478:	82fb      	strh	r3, [r7, #22]
 800047a:	8afa      	ldrh	r2, [r7, #22]
 800047c:	88fb      	ldrh	r3, [r7, #6]
 800047e:	429a      	cmp	r2, r3
 8000480:	d3f0      	bcc.n	8000464 <WIZCHIP_WRITE_BUF+0x58>
 8000482:	e017      	b.n	80004b4 <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8000484:	68fb      	ldr	r3, [r7, #12]
 8000486:	0c1b      	lsrs	r3, r3, #16
 8000488:	b2db      	uxtb	r3, r3
 800048a:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 800048c:	68fb      	ldr	r3, [r7, #12]
 800048e:	0a1b      	lsrs	r3, r3, #8
 8000490:	b2db      	uxtb	r3, r3
 8000492:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8000494:	68fb      	ldr	r3, [r7, #12]
 8000496:	b2db      	uxtb	r3, r3
 8000498:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 800049a:	4b0b      	ldr	r3, [pc, #44]	@ (80004c8 <WIZCHIP_WRITE_BUF+0xbc>)
 800049c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800049e:	f107 0210 	add.w	r2, r7, #16
 80004a2:	2103      	movs	r1, #3
 80004a4:	4610      	mov	r0, r2
 80004a6:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 80004a8:	4b07      	ldr	r3, [pc, #28]	@ (80004c8 <WIZCHIP_WRITE_BUF+0xbc>)
 80004aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80004ac:	88fa      	ldrh	r2, [r7, #6]
 80004ae:	4611      	mov	r1, r2
 80004b0:	68b8      	ldr	r0, [r7, #8]
 80004b2:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 80004b4:	4b04      	ldr	r3, [pc, #16]	@ (80004c8 <WIZCHIP_WRITE_BUF+0xbc>)
 80004b6:	699b      	ldr	r3, [r3, #24]
 80004b8:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80004ba:	4b03      	ldr	r3, [pc, #12]	@ (80004c8 <WIZCHIP_WRITE_BUF+0xbc>)
 80004bc:	691b      	ldr	r3, [r3, #16]
 80004be:	4798      	blx	r3
}
 80004c0:	bf00      	nop
 80004c2:	3718      	adds	r7, #24
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bd80      	pop	{r7, pc}
 80004c8:	20000030 	.word	0x20000030

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d0:	f001 fa3d 	bl	800194e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d4:	f000 f84c 	bl	8000570 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d8:	f000 f8c8 	bl	800066c <MX_GPIO_Init>
  MX_SPI1_Init();
 80004dc:	f000 f888 	bl	80005f0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  reg_wizchip_cs_cbfunc(cs_select, cs_deselect);
 80004e0:	4918      	ldr	r1, [pc, #96]	@ (8000544 <main+0x78>)
 80004e2:	4819      	ldr	r0, [pc, #100]	@ (8000548 <main+0x7c>)
 80004e4:	f000 fc9a 	bl	8000e1c <reg_wizchip_cs_cbfunc>
  reg_wizchip_spi_cbfunc(spi_readbyte, spi_writebyte);
 80004e8:	4918      	ldr	r1, [pc, #96]	@ (800054c <main+0x80>)
 80004ea:	4819      	ldr	r0, [pc, #100]	@ (8000550 <main+0x84>)
 80004ec:	f000 fcbc 	bl	8000e68 <reg_wizchip_spi_cbfunc>
  reg_wizchip_cris_cbfunc(cris_enter, cris_exit);
 80004f0:	4918      	ldr	r1, [pc, #96]	@ (8000554 <main+0x88>)
 80004f2:	4819      	ldr	r0, [pc, #100]	@ (8000558 <main+0x8c>)
 80004f4:	f000 fc6c 	bl	8000dd0 <reg_wizchip_cris_cbfunc>
  reg_wizchip_spiburst_cbfunc(spi_readburst, spi_writeburst);
 80004f8:	4918      	ldr	r1, [pc, #96]	@ (800055c <main+0x90>)
 80004fa:	4819      	ldr	r0, [pc, #100]	@ (8000560 <main+0x94>)
 80004fc:	f000 fce0 	bl	8000ec0 <reg_wizchip_spiburst_cbfunc>

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8000500:	2200      	movs	r2, #0
 8000502:	2180      	movs	r1, #128	@ 0x80
 8000504:	4817      	ldr	r0, [pc, #92]	@ (8000564 <main+0x98>)
 8000506:	f001 fd1b 	bl	8001f40 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 800050a:	2001      	movs	r0, #1
 800050c:	f001 fa90 	bl	8001a30 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8000510:	2201      	movs	r2, #1
 8000512:	2180      	movs	r1, #128	@ 0x80
 8000514:	4813      	ldr	r0, [pc, #76]	@ (8000564 <main+0x98>)
 8000516:	f001 fd13 	bl	8001f40 <HAL_GPIO_WritePin>
  HAL_Delay(1600);
 800051a:	f44f 60c8 	mov.w	r0, #1600	@ 0x640
 800051e:	f001 fa87 	bl	8001a30 <HAL_Delay>

  ctlnetwork(CN_SET_NETINFO, (void*)&gSetNetInfo);
 8000522:	4911      	ldr	r1, [pc, #68]	@ (8000568 <main+0x9c>)
 8000524:	2000      	movs	r0, #0
 8000526:	f000 fde7 	bl	80010f8 <ctlnetwork>
  ctlwizchip(CW_INIT_WIZCHIP,(void*)buffer_size_tx_rx);
 800052a:	4910      	ldr	r1, [pc, #64]	@ (800056c <main+0xa0>)
 800052c:	2004      	movs	r0, #4
 800052e:	f000 fcf3 	bl	8000f18 <ctlwizchip>

  socket(0,Sn_MR_TCP,5555,SF_TCP_NODELAY | SF_IO_NONBLOCK);
 8000532:	2321      	movs	r3, #33	@ 0x21
 8000534:	f241 52b3 	movw	r2, #5555	@ 0x15b3
 8000538:	2101      	movs	r1, #1
 800053a:	2000      	movs	r0, #0
 800053c:	f000 f97c 	bl	8000838 <socket>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000540:	bf00      	nop
 8000542:	e7fd      	b.n	8000540 <main+0x74>
 8000544:	08000745 	.word	0x08000745
 8000548:	0800072d 	.word	0x0800072d
 800054c:	080007b9 	.word	0x080007b9
 8000550:	08000799 	.word	0x08000799
 8000554:	0800077b 	.word	0x0800077b
 8000558:	0800075d 	.word	0x0800075d
 800055c:	08000805 	.word	0x08000805
 8000560:	080007dd 	.word	0x080007dd
 8000564:	48000800 	.word	0x48000800
 8000568:	20000000 	.word	0x20000000
 800056c:	20000018 	.word	0x20000018

08000570 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b094      	sub	sp, #80	@ 0x50
 8000574:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000576:	f107 0318 	add.w	r3, r7, #24
 800057a:	2238      	movs	r2, #56	@ 0x38
 800057c:	2100      	movs	r1, #0
 800057e:	4618      	mov	r0, r3
 8000580:	f003 f9d6 	bl	8003930 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000584:	1d3b      	adds	r3, r7, #4
 8000586:	2200      	movs	r2, #0
 8000588:	601a      	str	r2, [r3, #0]
 800058a:	605a      	str	r2, [r3, #4]
 800058c:	609a      	str	r2, [r3, #8]
 800058e:	60da      	str	r2, [r3, #12]
 8000590:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000592:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000596:	f001 fceb 	bl	8001f70 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800059a:	2302      	movs	r3, #2
 800059c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800059e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80005a2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005a4:	2340      	movs	r3, #64	@ 0x40
 80005a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005a8:	2300      	movs	r3, #0
 80005aa:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ac:	f107 0318 	add.w	r3, r7, #24
 80005b0:	4618      	mov	r0, r3
 80005b2:	f001 fd91 	bl	80020d8 <HAL_RCC_OscConfig>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80005bc:	f000 f936 	bl	800082c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c0:	230f      	movs	r3, #15
 80005c2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005c4:	2301      	movs	r3, #1
 80005c6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c8:	2300      	movs	r3, #0
 80005ca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005cc:	2300      	movs	r3, #0
 80005ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005d0:	2300      	movs	r3, #0
 80005d2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005d4:	1d3b      	adds	r3, r7, #4
 80005d6:	2100      	movs	r1, #0
 80005d8:	4618      	mov	r0, r3
 80005da:	f002 f88f 	bl	80026fc <HAL_RCC_ClockConfig>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80005e4:	f000 f922 	bl	800082c <Error_Handler>
  }
}
 80005e8:	bf00      	nop
 80005ea:	3750      	adds	r7, #80	@ 0x50
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}

080005f0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80005f4:	4b1b      	ldr	r3, [pc, #108]	@ (8000664 <MX_SPI1_Init+0x74>)
 80005f6:	4a1c      	ldr	r2, [pc, #112]	@ (8000668 <MX_SPI1_Init+0x78>)
 80005f8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80005fa:	4b1a      	ldr	r3, [pc, #104]	@ (8000664 <MX_SPI1_Init+0x74>)
 80005fc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000600:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000602:	4b18      	ldr	r3, [pc, #96]	@ (8000664 <MX_SPI1_Init+0x74>)
 8000604:	2200      	movs	r2, #0
 8000606:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000608:	4b16      	ldr	r3, [pc, #88]	@ (8000664 <MX_SPI1_Init+0x74>)
 800060a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800060e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000610:	4b14      	ldr	r3, [pc, #80]	@ (8000664 <MX_SPI1_Init+0x74>)
 8000612:	2200      	movs	r2, #0
 8000614:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000616:	4b13      	ldr	r3, [pc, #76]	@ (8000664 <MX_SPI1_Init+0x74>)
 8000618:	2200      	movs	r2, #0
 800061a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800061c:	4b11      	ldr	r3, [pc, #68]	@ (8000664 <MX_SPI1_Init+0x74>)
 800061e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000622:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000624:	4b0f      	ldr	r3, [pc, #60]	@ (8000664 <MX_SPI1_Init+0x74>)
 8000626:	2200      	movs	r2, #0
 8000628:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800062a:	4b0e      	ldr	r3, [pc, #56]	@ (8000664 <MX_SPI1_Init+0x74>)
 800062c:	2200      	movs	r2, #0
 800062e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000630:	4b0c      	ldr	r3, [pc, #48]	@ (8000664 <MX_SPI1_Init+0x74>)
 8000632:	2200      	movs	r2, #0
 8000634:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000636:	4b0b      	ldr	r3, [pc, #44]	@ (8000664 <MX_SPI1_Init+0x74>)
 8000638:	2200      	movs	r2, #0
 800063a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 800063c:	4b09      	ldr	r3, [pc, #36]	@ (8000664 <MX_SPI1_Init+0x74>)
 800063e:	2207      	movs	r2, #7
 8000640:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000642:	4b08      	ldr	r3, [pc, #32]	@ (8000664 <MX_SPI1_Init+0x74>)
 8000644:	2200      	movs	r2, #0
 8000646:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000648:	4b06      	ldr	r3, [pc, #24]	@ (8000664 <MX_SPI1_Init+0x74>)
 800064a:	2208      	movs	r2, #8
 800064c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800064e:	4805      	ldr	r0, [pc, #20]	@ (8000664 <MX_SPI1_Init+0x74>)
 8000650:	f002 fa38 	bl	8002ac4 <HAL_SPI_Init>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800065a:	f000 f8e7 	bl	800082c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800065e:	bf00      	nop
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	20000080 	.word	0x20000080
 8000668:	40013000 	.word	0x40013000

0800066c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b088      	sub	sp, #32
 8000670:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000672:	f107 030c 	add.w	r3, r7, #12
 8000676:	2200      	movs	r2, #0
 8000678:	601a      	str	r2, [r3, #0]
 800067a:	605a      	str	r2, [r3, #4]
 800067c:	609a      	str	r2, [r3, #8]
 800067e:	60da      	str	r2, [r3, #12]
 8000680:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000682:	4b27      	ldr	r3, [pc, #156]	@ (8000720 <MX_GPIO_Init+0xb4>)
 8000684:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000686:	4a26      	ldr	r2, [pc, #152]	@ (8000720 <MX_GPIO_Init+0xb4>)
 8000688:	f043 0301 	orr.w	r3, r3, #1
 800068c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800068e:	4b24      	ldr	r3, [pc, #144]	@ (8000720 <MX_GPIO_Init+0xb4>)
 8000690:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000692:	f003 0301 	and.w	r3, r3, #1
 8000696:	60bb      	str	r3, [r7, #8]
 8000698:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800069a:	4b21      	ldr	r3, [pc, #132]	@ (8000720 <MX_GPIO_Init+0xb4>)
 800069c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800069e:	4a20      	ldr	r2, [pc, #128]	@ (8000720 <MX_GPIO_Init+0xb4>)
 80006a0:	f043 0304 	orr.w	r3, r3, #4
 80006a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006a6:	4b1e      	ldr	r3, [pc, #120]	@ (8000720 <MX_GPIO_Init+0xb4>)
 80006a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006aa:	f003 0304 	and.w	r3, r3, #4
 80006ae:	607b      	str	r3, [r7, #4]
 80006b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006b2:	4b1b      	ldr	r3, [pc, #108]	@ (8000720 <MX_GPIO_Init+0xb4>)
 80006b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006b6:	4a1a      	ldr	r2, [pc, #104]	@ (8000720 <MX_GPIO_Init+0xb4>)
 80006b8:	f043 0302 	orr.w	r3, r3, #2
 80006bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006be:	4b18      	ldr	r3, [pc, #96]	@ (8000720 <MX_GPIO_Init+0xb4>)
 80006c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006c2:	f003 0302 	and.w	r3, r3, #2
 80006c6:	603b      	str	r3, [r7, #0]
 80006c8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(W5500_RST_GPIO_Port, W5500_RST_Pin, GPIO_PIN_RESET);
 80006ca:	2200      	movs	r2, #0
 80006cc:	2180      	movs	r1, #128	@ 0x80
 80006ce:	4815      	ldr	r0, [pc, #84]	@ (8000724 <MX_GPIO_Init+0xb8>)
 80006d0:	f001 fc36 	bl	8001f40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80006d4:	2200      	movs	r2, #0
 80006d6:	2140      	movs	r1, #64	@ 0x40
 80006d8:	4813      	ldr	r0, [pc, #76]	@ (8000728 <MX_GPIO_Init+0xbc>)
 80006da:	f001 fc31 	bl	8001f40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : W5500_RST_Pin */
  GPIO_InitStruct.Pin = W5500_RST_Pin;
 80006de:	2380      	movs	r3, #128	@ 0x80
 80006e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e2:	2301      	movs	r3, #1
 80006e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e6:	2300      	movs	r3, #0
 80006e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ea:	2300      	movs	r3, #0
 80006ec:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(W5500_RST_GPIO_Port, &GPIO_InitStruct);
 80006ee:	f107 030c 	add.w	r3, r7, #12
 80006f2:	4619      	mov	r1, r3
 80006f4:	480b      	ldr	r0, [pc, #44]	@ (8000724 <MX_GPIO_Init+0xb8>)
 80006f6:	f001 faa1 	bl	8001c3c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 80006fa:	2340      	movs	r3, #64	@ 0x40
 80006fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006fe:	2301      	movs	r3, #1
 8000700:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000702:	2300      	movs	r3, #0
 8000704:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000706:	2300      	movs	r3, #0
 8000708:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 800070a:	f107 030c 	add.w	r3, r7, #12
 800070e:	4619      	mov	r1, r3
 8000710:	4805      	ldr	r0, [pc, #20]	@ (8000728 <MX_GPIO_Init+0xbc>)
 8000712:	f001 fa93 	bl	8001c3c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000716:	bf00      	nop
 8000718:	3720      	adds	r7, #32
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	40021000 	.word	0x40021000
 8000724:	48000800 	.word	0x48000800
 8000728:	48000400 	.word	0x48000400

0800072c <cs_select>:

/* USER CODE BEGIN 4 */
void 	cs_select(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, RESET);
 8000730:	2200      	movs	r2, #0
 8000732:	2140      	movs	r1, #64	@ 0x40
 8000734:	4802      	ldr	r0, [pc, #8]	@ (8000740 <cs_select+0x14>)
 8000736:	f001 fc03 	bl	8001f40 <HAL_GPIO_WritePin>
}
 800073a:	bf00      	nop
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	48000400 	.word	0x48000400

08000744 <cs_deselect>:

void 	cs_deselect(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, SET);
 8000748:	2201      	movs	r2, #1
 800074a:	2140      	movs	r1, #64	@ 0x40
 800074c:	4802      	ldr	r0, [pc, #8]	@ (8000758 <cs_deselect+0x14>)
 800074e:	f001 fbf7 	bl	8001f40 <HAL_GPIO_WritePin>
}
 8000752:	bf00      	nop
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	48000400 	.word	0x48000400

0800075c <cris_enter>:

void 	cris_enter(void)
{
 800075c:	b480      	push	{r7}
 800075e:	b083      	sub	sp, #12
 8000760:	af00      	add	r7, sp, #0
 8000762:	2301      	movs	r3, #1
 8000764:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	f383 8810 	msr	PRIMASK, r3
}
 800076c:	bf00      	nop
	__set_PRIMASK(1);
}
 800076e:	bf00      	nop
 8000770:	370c      	adds	r7, #12
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr

0800077a <cris_exit>:

void 	cris_exit(void)
{
 800077a:	b480      	push	{r7}
 800077c:	b083      	sub	sp, #12
 800077e:	af00      	add	r7, sp, #0
 8000780:	2300      	movs	r3, #0
 8000782:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	f383 8810 	msr	PRIMASK, r3
}
 800078a:	bf00      	nop
	__set_PRIMASK(0);
}
 800078c:	bf00      	nop
 800078e:	370c      	adds	r7, #12
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr

08000798 <spi_readbyte>:

uint8_t spi_readbyte(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
	uint8_t data;
	HAL_SPI_Receive(&hspi1,&data,1,100);
 800079e:	1df9      	adds	r1, r7, #7
 80007a0:	2364      	movs	r3, #100	@ 0x64
 80007a2:	2201      	movs	r2, #1
 80007a4:	4803      	ldr	r0, [pc, #12]	@ (80007b4 <spi_readbyte+0x1c>)
 80007a6:	f002 fbad 	bl	8002f04 <HAL_SPI_Receive>
	return data;
 80007aa:	79fb      	ldrb	r3, [r7, #7]
}
 80007ac:	4618      	mov	r0, r3
 80007ae:	3708      	adds	r7, #8
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	20000080 	.word	0x20000080

080007b8 <spi_writebyte>:

void 	spi_writebyte(uint8_t wb)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
 80007be:	4603      	mov	r3, r0
 80007c0:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi1,&wb,1,100);
 80007c2:	1df9      	adds	r1, r7, #7
 80007c4:	2364      	movs	r3, #100	@ 0x64
 80007c6:	2201      	movs	r2, #1
 80007c8:	4803      	ldr	r0, [pc, #12]	@ (80007d8 <spi_writebyte+0x20>)
 80007ca:	f002 fa26 	bl	8002c1a <HAL_SPI_Transmit>
}
 80007ce:	bf00      	nop
 80007d0:	3708      	adds	r7, #8
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	20000080 	.word	0x20000080

080007dc <spi_readburst>:

void 	spi_readburst(uint8_t* pBuf, uint16_t len)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
 80007e4:	460b      	mov	r3, r1
 80007e6:	807b      	strh	r3, [r7, #2]
	HAL_SPI_Receive(&hspi1, pBuf, len, HAL_MAX_DELAY);
 80007e8:	887a      	ldrh	r2, [r7, #2]
 80007ea:	f04f 33ff 	mov.w	r3, #4294967295
 80007ee:	6879      	ldr	r1, [r7, #4]
 80007f0:	4803      	ldr	r0, [pc, #12]	@ (8000800 <spi_readburst+0x24>)
 80007f2:	f002 fb87 	bl	8002f04 <HAL_SPI_Receive>
}
 80007f6:	bf00      	nop
 80007f8:	3708      	adds	r7, #8
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	20000080 	.word	0x20000080

08000804 <spi_writeburst>:

void 	spi_writeburst(uint8_t* pBuf, uint16_t len)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
 800080c:	460b      	mov	r3, r1
 800080e:	807b      	strh	r3, [r7, #2]
	HAL_SPI_Transmit(&hspi1, pBuf, len, HAL_MAX_DELAY);
 8000810:	887a      	ldrh	r2, [r7, #2]
 8000812:	f04f 33ff 	mov.w	r3, #4294967295
 8000816:	6879      	ldr	r1, [r7, #4]
 8000818:	4803      	ldr	r0, [pc, #12]	@ (8000828 <spi_writeburst+0x24>)
 800081a:	f002 f9fe 	bl	8002c1a <HAL_SPI_Transmit>
}
 800081e:	bf00      	nop
 8000820:	3708      	adds	r7, #8
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	20000080 	.word	0x20000080

0800082c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000830:	b672      	cpsid	i
}
 8000832:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000834:	bf00      	nop
 8000836:	e7fd      	b.n	8000834 <Error_Handler+0x8>

08000838 <socket>:




int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{ 
 8000838:	b590      	push	{r4, r7, lr}
 800083a:	b089      	sub	sp, #36	@ 0x24
 800083c:	af00      	add	r7, sp, #0
 800083e:	4604      	mov	r4, r0
 8000840:	4608      	mov	r0, r1
 8000842:	4611      	mov	r1, r2
 8000844:	461a      	mov	r2, r3
 8000846:	4623      	mov	r3, r4
 8000848:	71fb      	strb	r3, [r7, #7]
 800084a:	4603      	mov	r3, r0
 800084c:	71bb      	strb	r3, [r7, #6]
 800084e:	460b      	mov	r3, r1
 8000850:	80bb      	strh	r3, [r7, #4]
 8000852:	4613      	mov	r3, r2
 8000854:	70fb      	strb	r3, [r7, #3]

   uint8_t taddr[16];
   uint16_t local_port=0;
 8000856:	2300      	movs	r3, #0
 8000858:	83fb      	strh	r3, [r7, #30]
   CHECK_SOCKNUM(); 
 800085a:	79fb      	ldrb	r3, [r7, #7]
 800085c:	2b08      	cmp	r3, #8
 800085e:	d902      	bls.n	8000866 <socket+0x2e>
 8000860:	f04f 33ff 	mov.w	r3, #4294967295
 8000864:	e103      	b.n	8000a6e <socket+0x236>
   switch (protocol & 0x0F)
 8000866:	79bb      	ldrb	r3, [r7, #6]
 8000868:	f003 030f 	and.w	r3, r3, #15
 800086c:	3b01      	subs	r3, #1
 800086e:	2b0d      	cmp	r3, #13
 8000870:	d82c      	bhi.n	80008cc <socket+0x94>
 8000872:	a201      	add	r2, pc, #4	@ (adr r2, 8000878 <socket+0x40>)
 8000874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000878:	080008b1 	.word	0x080008b1
 800087c:	080008d3 	.word	0x080008d3
 8000880:	080008d3 	.word	0x080008d3
 8000884:	080008d3 	.word	0x080008d3
 8000888:	080008cd 	.word	0x080008cd
 800088c:	080008cd 	.word	0x080008cd
 8000890:	080008cd 	.word	0x080008cd
 8000894:	080008cd 	.word	0x080008cd
 8000898:	080008cd 	.word	0x080008cd
 800089c:	080008d3 	.word	0x080008d3
 80008a0:	080008d3 	.word	0x080008d3
 80008a4:	080008cd 	.word	0x080008cd
 80008a8:	080008cd 	.word	0x080008cd
 80008ac:	080008d3 	.word	0x080008d3
         break;
#else  
         case Sn_MR_TCP :
         {
            uint8_t taddr;
            getSIPR((uint8_t*)&taddr);
 80008b0:	f107 030b 	add.w	r3, r7, #11
 80008b4:	2204      	movs	r2, #4
 80008b6:	4619      	mov	r1, r3
 80008b8:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 80008bc:	f7ff fd46 	bl	800034c <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 80008c0:	7afb      	ldrb	r3, [r7, #11]
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d107      	bne.n	80008d6 <socket+0x9e>
 80008c6:	f06f 0302 	mvn.w	r3, #2
 80008ca:	e0d0      	b.n	8000a6e <socket+0x236>
      case Sn_MR_MACRAW :
      case Sn_MR_IPRAW4 :
      case Sn_MR_IPRAW6 :
         break; 
      default :
        return SOCKERR_SOCKMODE;
 80008cc:	f06f 0304 	mvn.w	r3, #4
 80008d0:	e0cd      	b.n	8000a6e <socket+0x236>
         break; 
 80008d2:	bf00      	nop
 80008d4:	e000      	b.n	80008d8 <socket+0xa0>
            break;
 80008d6:	bf00      	nop
   } 

   if((flag & 0x04)) return SOCKERR_SOCKFLAG;
 80008d8:	78fb      	ldrb	r3, [r7, #3]
 80008da:	f003 0304 	and.w	r3, r3, #4
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d002      	beq.n	80008e8 <socket+0xb0>
 80008e2:	f06f 0305 	mvn.w	r3, #5
 80008e6:	e0c2      	b.n	8000a6e <socket+0x236>
   if(flag != 0)
 80008e8:	78fb      	ldrb	r3, [r7, #3]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d028      	beq.n	8000940 <socket+0x108>
   {
      switch(protocol)
 80008ee:	79bb      	ldrb	r3, [r7, #6]
 80008f0:	2b01      	cmp	r3, #1
 80008f2:	d002      	beq.n	80008fa <socket+0xc2>
 80008f4:	2b02      	cmp	r3, #2
 80008f6:	d008      	beq.n	800090a <socket+0xd2>
         break;

#endif 

         default:
            break;
 80008f8:	e022      	b.n	8000940 <socket+0x108>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 80008fa:	78fb      	ldrb	r3, [r7, #3]
 80008fc:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8000900:	2b00      	cmp	r3, #0
 8000902:	d11a      	bne.n	800093a <socket+0x102>
 8000904:	f06f 0305 	mvn.w	r3, #5
 8000908:	e0b1      	b.n	8000a6e <socket+0x236>
   	      if(flag & SF_IGMP_VER2)
 800090a:	78fb      	ldrb	r3, [r7, #3]
 800090c:	f003 0320 	and.w	r3, r3, #32
 8000910:	2b00      	cmp	r3, #0
 8000912:	d006      	beq.n	8000922 <socket+0xea>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8000914:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000918:	2b00      	cmp	r3, #0
 800091a:	db02      	blt.n	8000922 <socket+0xea>
 800091c:	f06f 0305 	mvn.w	r3, #5
 8000920:	e0a5      	b.n	8000a6e <socket+0x236>
      	      if(flag & SF_UNI_BLOCK)
 8000922:	78fb      	ldrb	r3, [r7, #3]
 8000924:	f003 0310 	and.w	r3, r3, #16
 8000928:	2b00      	cmp	r3, #0
 800092a:	d008      	beq.n	800093e <socket+0x106>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 800092c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000930:	2b00      	cmp	r3, #0
 8000932:	db04      	blt.n	800093e <socket+0x106>
 8000934:	f06f 0305 	mvn.w	r3, #5
 8000938:	e099      	b.n	8000a6e <socket+0x236>
   	      break;
 800093a:	bf00      	nop
 800093c:	e000      	b.n	8000940 <socket+0x108>
         break;
 800093e:	bf00      	nop
      }
   }
   close(sn);
 8000940:	79fb      	ldrb	r3, [r7, #7]
 8000942:	4618      	mov	r0, r3
 8000944:	f000 f8a2 	bl	8000a8c <close>
   setSn_MR(sn,(protocol | (flag & 0xF0)));
 8000948:	79fb      	ldrb	r3, [r7, #7]
 800094a:	009b      	lsls	r3, r3, #2
 800094c:	3301      	adds	r3, #1
 800094e:	00db      	lsls	r3, r3, #3
 8000950:	4618      	mov	r0, r3
 8000952:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000956:	f023 030f 	bic.w	r3, r3, #15
 800095a:	b25a      	sxtb	r2, r3
 800095c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000960:	4313      	orrs	r3, r2
 8000962:	b25b      	sxtb	r3, r3
 8000964:	b2db      	uxtb	r3, r3
 8000966:	4619      	mov	r1, r3
 8000968:	f7ff fca2 	bl	80002b0 <WIZCHIP_WRITE>
#ifdef IPV6_AVAILABLE
   setSn_MR2(sn, flag & 0x03);  
#endif 
   if(!port)
 800096c:	88bb      	ldrh	r3, [r7, #4]
 800096e:	2b00      	cmp	r3, #0
 8000970:	d110      	bne.n	8000994 <socket+0x15c>
   {
      port = sock_any_port++;
 8000972:	4b41      	ldr	r3, [pc, #260]	@ (8000a78 <socket+0x240>)
 8000974:	881b      	ldrh	r3, [r3, #0]
 8000976:	1c5a      	adds	r2, r3, #1
 8000978:	b291      	uxth	r1, r2
 800097a:	4a3f      	ldr	r2, [pc, #252]	@ (8000a78 <socket+0x240>)
 800097c:	8011      	strh	r1, [r2, #0]
 800097e:	80bb      	strh	r3, [r7, #4]
      if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8000980:	4b3d      	ldr	r3, [pc, #244]	@ (8000a78 <socket+0x240>)
 8000982:	881b      	ldrh	r3, [r3, #0]
 8000984:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 8000988:	4293      	cmp	r3, r2
 800098a:	d103      	bne.n	8000994 <socket+0x15c>
 800098c:	4b3a      	ldr	r3, [pc, #232]	@ (8000a78 <socket+0x240>)
 800098e:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8000992:	801a      	strh	r2, [r3, #0]
   }
   setSn_PORTR(sn,port);
 8000994:	79fb      	ldrb	r3, [r7, #7]
 8000996:	009b      	lsls	r3, r3, #2
 8000998:	3301      	adds	r3, #1
 800099a:	00db      	lsls	r3, r3, #3
 800099c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80009a0:	461a      	mov	r2, r3
 80009a2:	88bb      	ldrh	r3, [r7, #4]
 80009a4:	0a1b      	lsrs	r3, r3, #8
 80009a6:	b29b      	uxth	r3, r3
 80009a8:	b2db      	uxtb	r3, r3
 80009aa:	4619      	mov	r1, r3
 80009ac:	4610      	mov	r0, r2
 80009ae:	f7ff fc7f 	bl	80002b0 <WIZCHIP_WRITE>
 80009b2:	79fb      	ldrb	r3, [r7, #7]
 80009b4:	009b      	lsls	r3, r3, #2
 80009b6:	3301      	adds	r3, #1
 80009b8:	00db      	lsls	r3, r3, #3
 80009ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80009be:	461a      	mov	r2, r3
 80009c0:	88bb      	ldrh	r3, [r7, #4]
 80009c2:	b2db      	uxtb	r3, r3
 80009c4:	4619      	mov	r1, r3
 80009c6:	4610      	mov	r0, r2
 80009c8:	f7ff fc72 	bl	80002b0 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 80009cc:	79fb      	ldrb	r3, [r7, #7]
 80009ce:	009b      	lsls	r3, r3, #2
 80009d0:	3301      	adds	r3, #1
 80009d2:	00db      	lsls	r3, r3, #3
 80009d4:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80009d8:	2101      	movs	r1, #1
 80009da:	4618      	mov	r0, r3
 80009dc:	f7ff fc68 	bl	80002b0 <WIZCHIP_WRITE>

   while(getSn_CR(sn));
 80009e0:	bf00      	nop
 80009e2:	79fb      	ldrb	r3, [r7, #7]
 80009e4:	009b      	lsls	r3, r3, #2
 80009e6:	3301      	adds	r3, #1
 80009e8:	00db      	lsls	r3, r3, #3
 80009ea:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80009ee:	4618      	mov	r0, r3
 80009f0:	f7ff fc12 	bl	8000218 <WIZCHIP_READ>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d1f3      	bne.n	80009e2 <socket+0x1aa>

   sock_io_mode &= ~(1 <<sn);
 80009fa:	79fb      	ldrb	r3, [r7, #7]
 80009fc:	2201      	movs	r2, #1
 80009fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000a02:	b21b      	sxth	r3, r3
 8000a04:	43db      	mvns	r3, r3
 8000a06:	b21a      	sxth	r2, r3
 8000a08:	4b1c      	ldr	r3, [pc, #112]	@ (8000a7c <socket+0x244>)
 8000a0a:	881b      	ldrh	r3, [r3, #0]
 8000a0c:	b21b      	sxth	r3, r3
 8000a0e:	4013      	ands	r3, r2
 8000a10:	b21b      	sxth	r3, r3
 8000a12:	b29a      	uxth	r2, r3
 8000a14:	4b19      	ldr	r3, [pc, #100]	@ (8000a7c <socket+0x244>)
 8000a16:	801a      	strh	r2, [r3, #0]
   sock_io_mode |= ((flag & (SF_IO_NONBLOCK>>3)) << sn);
 8000a18:	4b18      	ldr	r3, [pc, #96]	@ (8000a7c <socket+0x244>)
 8000a1a:	881a      	ldrh	r2, [r3, #0]
 8000a1c:	4b17      	ldr	r3, [pc, #92]	@ (8000a7c <socket+0x244>)
 8000a1e:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8000a20:	79fb      	ldrb	r3, [r7, #7]
 8000a22:	2201      	movs	r2, #1
 8000a24:	fa02 f303 	lsl.w	r3, r2, r3
 8000a28:	b21b      	sxth	r3, r3
 8000a2a:	43db      	mvns	r3, r3
 8000a2c:	b21a      	sxth	r2, r3
 8000a2e:	4b14      	ldr	r3, [pc, #80]	@ (8000a80 <socket+0x248>)
 8000a30:	881b      	ldrh	r3, [r3, #0]
 8000a32:	b21b      	sxth	r3, r3
 8000a34:	4013      	ands	r3, r2
 8000a36:	b21b      	sxth	r3, r3
 8000a38:	b29a      	uxth	r2, r3
 8000a3a:	4b11      	ldr	r3, [pc, #68]	@ (8000a80 <socket+0x248>)
 8000a3c:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8000a3e:	79fb      	ldrb	r3, [r7, #7]
 8000a40:	4a10      	ldr	r2, [pc, #64]	@ (8000a84 <socket+0x24c>)
 8000a42:	2100      	movs	r1, #0
 8000a44:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   sock_pack_info[sn] = PACK_NONE;
 8000a48:	79fb      	ldrb	r3, [r7, #7]
 8000a4a:	4a0f      	ldr	r2, [pc, #60]	@ (8000a88 <socket+0x250>)
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	54d1      	strb	r1, [r2, r3]

   while(getSn_SR(sn) == SOCK_CLOSED) ;
 8000a50:	bf00      	nop
 8000a52:	79fb      	ldrb	r3, [r7, #7]
 8000a54:	009b      	lsls	r3, r3, #2
 8000a56:	3301      	adds	r3, #1
 8000a58:	00db      	lsls	r3, r3, #3
 8000a5a:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f7ff fbda 	bl	8000218 <WIZCHIP_READ>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d0f3      	beq.n	8000a52 <socket+0x21a>
//   printf("[%d]%d\r\n", sn, getSn_PORTR(sn));
   return sn;
 8000a6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
}  
 8000a6e:	4618      	mov	r0, r3
 8000a70:	3724      	adds	r7, #36	@ 0x24
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd90      	pop	{r4, r7, pc}
 8000a76:	bf00      	nop
 8000a78:	20000028 	.word	0x20000028
 8000a7c:	200000e4 	.word	0x200000e4
 8000a80:	200000e6 	.word	0x200000e6
 8000a84:	200000e8 	.word	0x200000e8
 8000a88:	200000f8 	.word	0x200000f8

08000a8c <close>:


int8_t close(uint8_t sn)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	4603      	mov	r3, r0
 8000a94:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 8000a96:	79fb      	ldrb	r3, [r7, #7]
 8000a98:	2b08      	cmp	r3, #8
 8000a9a:	d902      	bls.n	8000aa2 <close+0x16>
 8000a9c:	f04f 33ff 	mov.w	r3, #4294967295
 8000aa0:	e055      	b.n	8000b4e <close+0xc2>
   setSn_CR(sn,Sn_CR_CLOSE);
 8000aa2:	79fb      	ldrb	r3, [r7, #7]
 8000aa4:	009b      	lsls	r3, r3, #2
 8000aa6:	3301      	adds	r3, #1
 8000aa8:	00db      	lsls	r3, r3, #3
 8000aaa:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8000aae:	2110      	movs	r1, #16
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f7ff fbfd 	bl	80002b0 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while( getSn_CR(sn) );
 8000ab6:	bf00      	nop
 8000ab8:	79fb      	ldrb	r3, [r7, #7]
 8000aba:	009b      	lsls	r3, r3, #2
 8000abc:	3301      	adds	r3, #1
 8000abe:	00db      	lsls	r3, r3, #3
 8000ac0:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f7ff fba7 	bl	8000218 <WIZCHIP_READ>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d1f3      	bne.n	8000ab8 <close+0x2c>
   /* clear all interrupt of SOCKETn. */
   setSn_IR(sn, 0xFF);  	
 8000ad0:	79fb      	ldrb	r3, [r7, #7]
 8000ad2:	009b      	lsls	r3, r3, #2
 8000ad4:	3301      	adds	r3, #1
 8000ad6:	00db      	lsls	r3, r3, #3
 8000ad8:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000adc:	211f      	movs	r1, #31
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f7ff fbe6 	bl	80002b0 <WIZCHIP_WRITE>
   //setSn_IRCLR(sn, 0xFF);  
   /* Release the sock_io_mode of SOCKETn. */
   sock_io_mode &= ~(1<<sn); 
 8000ae4:	79fb      	ldrb	r3, [r7, #7]
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8000aec:	b21b      	sxth	r3, r3
 8000aee:	43db      	mvns	r3, r3
 8000af0:	b21a      	sxth	r2, r3
 8000af2:	4b19      	ldr	r3, [pc, #100]	@ (8000b58 <close+0xcc>)
 8000af4:	881b      	ldrh	r3, [r3, #0]
 8000af6:	b21b      	sxth	r3, r3
 8000af8:	4013      	ands	r3, r2
 8000afa:	b21b      	sxth	r3, r3
 8000afc:	b29a      	uxth	r2, r3
 8000afe:	4b16      	ldr	r3, [pc, #88]	@ (8000b58 <close+0xcc>)
 8000b00:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8000b02:	79fb      	ldrb	r3, [r7, #7]
 8000b04:	4a15      	ldr	r2, [pc, #84]	@ (8000b5c <close+0xd0>)
 8000b06:	2100      	movs	r1, #0
 8000b08:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   sock_is_sending &= ~(1<<sn);
 8000b0c:	79fb      	ldrb	r3, [r7, #7]
 8000b0e:	2201      	movs	r2, #1
 8000b10:	fa02 f303 	lsl.w	r3, r2, r3
 8000b14:	b21b      	sxth	r3, r3
 8000b16:	43db      	mvns	r3, r3
 8000b18:	b21a      	sxth	r2, r3
 8000b1a:	4b11      	ldr	r3, [pc, #68]	@ (8000b60 <close+0xd4>)
 8000b1c:	881b      	ldrh	r3, [r3, #0]
 8000b1e:	b21b      	sxth	r3, r3
 8000b20:	4013      	ands	r3, r2
 8000b22:	b21b      	sxth	r3, r3
 8000b24:	b29a      	uxth	r2, r3
 8000b26:	4b0e      	ldr	r3, [pc, #56]	@ (8000b60 <close+0xd4>)
 8000b28:	801a      	strh	r2, [r3, #0]
   sock_pack_info[sn] = PACK_NONE;
 8000b2a:	79fb      	ldrb	r3, [r7, #7]
 8000b2c:	4a0d      	ldr	r2, [pc, #52]	@ (8000b64 <close+0xd8>)
 8000b2e:	2100      	movs	r1, #0
 8000b30:	54d1      	strb	r1, [r2, r3]
   while(getSn_SR(sn) != SOCK_CLOSED);
 8000b32:	bf00      	nop
 8000b34:	79fb      	ldrb	r3, [r7, #7]
 8000b36:	009b      	lsls	r3, r3, #2
 8000b38:	3301      	adds	r3, #1
 8000b3a:	00db      	lsls	r3, r3, #3
 8000b3c:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8000b40:	4618      	mov	r0, r3
 8000b42:	f7ff fb69 	bl	8000218 <WIZCHIP_READ>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d1f3      	bne.n	8000b34 <close+0xa8>
   return SOCK_OK;
 8000b4c:	2301      	movs	r3, #1
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	200000e4 	.word	0x200000e4
 8000b5c:	200000e8 	.word	0x200000e8
 8000b60:	200000e6 	.word	0x200000e6
 8000b64:	200000f8 	.word	0x200000f8

08000b68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b6e:	4b0f      	ldr	r3, [pc, #60]	@ (8000bac <HAL_MspInit+0x44>)
 8000b70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b72:	4a0e      	ldr	r2, [pc, #56]	@ (8000bac <HAL_MspInit+0x44>)
 8000b74:	f043 0301 	orr.w	r3, r3, #1
 8000b78:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b7a:	4b0c      	ldr	r3, [pc, #48]	@ (8000bac <HAL_MspInit+0x44>)
 8000b7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b7e:	f003 0301 	and.w	r3, r3, #1
 8000b82:	607b      	str	r3, [r7, #4]
 8000b84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b86:	4b09      	ldr	r3, [pc, #36]	@ (8000bac <HAL_MspInit+0x44>)
 8000b88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b8a:	4a08      	ldr	r2, [pc, #32]	@ (8000bac <HAL_MspInit+0x44>)
 8000b8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b90:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b92:	4b06      	ldr	r3, [pc, #24]	@ (8000bac <HAL_MspInit+0x44>)
 8000b94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b9a:	603b      	str	r3, [r7, #0]
 8000b9c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000b9e:	f001 fa8b 	bl	80020b8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ba2:	bf00      	nop
 8000ba4:	3708      	adds	r7, #8
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	40021000 	.word	0x40021000

08000bb0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b08a      	sub	sp, #40	@ 0x28
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb8:	f107 0314 	add.w	r3, r7, #20
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	601a      	str	r2, [r3, #0]
 8000bc0:	605a      	str	r2, [r3, #4]
 8000bc2:	609a      	str	r2, [r3, #8]
 8000bc4:	60da      	str	r2, [r3, #12]
 8000bc6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a17      	ldr	r2, [pc, #92]	@ (8000c2c <HAL_SPI_MspInit+0x7c>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d128      	bne.n	8000c24 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000bd2:	4b17      	ldr	r3, [pc, #92]	@ (8000c30 <HAL_SPI_MspInit+0x80>)
 8000bd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000bd6:	4a16      	ldr	r2, [pc, #88]	@ (8000c30 <HAL_SPI_MspInit+0x80>)
 8000bd8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000bdc:	6613      	str	r3, [r2, #96]	@ 0x60
 8000bde:	4b14      	ldr	r3, [pc, #80]	@ (8000c30 <HAL_SPI_MspInit+0x80>)
 8000be0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000be2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000be6:	613b      	str	r3, [r7, #16]
 8000be8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bea:	4b11      	ldr	r3, [pc, #68]	@ (8000c30 <HAL_SPI_MspInit+0x80>)
 8000bec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bee:	4a10      	ldr	r2, [pc, #64]	@ (8000c30 <HAL_SPI_MspInit+0x80>)
 8000bf0:	f043 0301 	orr.w	r3, r3, #1
 8000bf4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bf6:	4b0e      	ldr	r3, [pc, #56]	@ (8000c30 <HAL_SPI_MspInit+0x80>)
 8000bf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bfa:	f003 0301 	and.w	r3, r3, #1
 8000bfe:	60fb      	str	r3, [r7, #12]
 8000c00:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000c02:	23e0      	movs	r3, #224	@ 0xe0
 8000c04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c06:	2302      	movs	r3, #2
 8000c08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c12:	2305      	movs	r3, #5
 8000c14:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c16:	f107 0314 	add.w	r3, r7, #20
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c20:	f001 f80c 	bl	8001c3c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c24:	bf00      	nop
 8000c26:	3728      	adds	r7, #40	@ 0x28
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	40013000 	.word	0x40013000
 8000c30:	40021000 	.word	0x40021000

08000c34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c38:	bf00      	nop
 8000c3a:	e7fd      	b.n	8000c38 <NMI_Handler+0x4>

08000c3c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c40:	bf00      	nop
 8000c42:	e7fd      	b.n	8000c40 <HardFault_Handler+0x4>

08000c44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c48:	bf00      	nop
 8000c4a:	e7fd      	b.n	8000c48 <MemManage_Handler+0x4>

08000c4c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c50:	bf00      	nop
 8000c52:	e7fd      	b.n	8000c50 <BusFault_Handler+0x4>

08000c54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c58:	bf00      	nop
 8000c5a:	e7fd      	b.n	8000c58 <UsageFault_Handler+0x4>

08000c5c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c60:	bf00      	nop
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr

08000c6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c6a:	b480      	push	{r7}
 8000c6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c6e:	bf00      	nop
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr

08000c78 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c7c:	bf00      	nop
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr

08000c86 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c86:	b580      	push	{r7, lr}
 8000c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c8a:	f000 feb3 	bl	80019f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c8e:	bf00      	nop
 8000c90:	bd80      	pop	{r7, pc}
	...

08000c94 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000c98:	4b06      	ldr	r3, [pc, #24]	@ (8000cb4 <SystemInit+0x20>)
 8000c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c9e:	4a05      	ldr	r2, [pc, #20]	@ (8000cb4 <SystemInit+0x20>)
 8000ca0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ca4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ca8:	bf00      	nop
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	e000ed00 	.word	0xe000ed00

08000cb8 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	bf00      	nop
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr

08000cc6 <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 8000cc6:	b480      	push	{r7}
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	bf00      	nop
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr

08000cd4 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	bf00      	nop
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr

08000ce2 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8000ce2:	b480      	push	{r7}
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	bf00      	nop
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr

08000cf0 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	b2db      	uxtb	r3, r3
 8000cfe:	4618      	mov	r0, r3
 8000d00:	370c      	adds	r7, #12
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr

08000d0a <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8000d0a:	b480      	push	{r7}
 8000d0c:	b083      	sub	sp, #12
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	6078      	str	r0, [r7, #4]
 8000d12:	460b      	mov	r3, r1
 8000d14:	70fb      	strb	r3, [r7, #3]
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	78fa      	ldrb	r2, [r7, #3]
 8000d1a:	701a      	strb	r2, [r3, #0]
 8000d1c:	bf00      	nop
 8000d1e:	370c      	adds	r7, #12
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr

08000d28 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	4618      	mov	r0, r3
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr

08000d38 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	4603      	mov	r3, r0
 8000d40:	71fb      	strb	r3, [r7, #7]
 8000d42:	bf00      	nop
 8000d44:	370c      	adds	r7, #12
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
	...

08000d50 <wizchip_spi_readburst>:
 */
//void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}; 
#if 1
// 20231018 taylor
void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len)
{
 8000d50:	b590      	push	{r4, r7, lr}
 8000d52:	b085      	sub	sp, #20
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
 8000d58:	460b      	mov	r3, r1
 8000d5a:	807b      	strh	r3, [r7, #2]
	for(uint16_t i=0; i<len; i++)
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	81fb      	strh	r3, [r7, #14]
 8000d60:	e00a      	b.n	8000d78 <wizchip_spi_readburst+0x28>
	{
		*pBuf++ = WIZCHIP.IF.SPI._read_byte();
 8000d62:	4b0a      	ldr	r3, [pc, #40]	@ (8000d8c <wizchip_spi_readburst+0x3c>)
 8000d64:	69db      	ldr	r3, [r3, #28]
 8000d66:	687c      	ldr	r4, [r7, #4]
 8000d68:	1c62      	adds	r2, r4, #1
 8000d6a:	607a      	str	r2, [r7, #4]
 8000d6c:	4798      	blx	r3
 8000d6e:	4603      	mov	r3, r0
 8000d70:	7023      	strb	r3, [r4, #0]
	for(uint16_t i=0; i<len; i++)
 8000d72:	89fb      	ldrh	r3, [r7, #14]
 8000d74:	3301      	adds	r3, #1
 8000d76:	81fb      	strh	r3, [r7, #14]
 8000d78:	89fa      	ldrh	r2, [r7, #14]
 8000d7a:	887b      	ldrh	r3, [r7, #2]
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	d3f0      	bcc.n	8000d62 <wizchip_spi_readburst+0x12>
	}
}
 8000d80:	bf00      	nop
 8000d82:	bf00      	nop
 8000d84:	3714      	adds	r7, #20
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd90      	pop	{r4, r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	20000030 	.word	0x20000030

08000d90 <wizchip_spi_writeburst>:
 */
//void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
#if 1
// 20231018 taylor
void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b084      	sub	sp, #16
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
 8000d98:	460b      	mov	r3, r1
 8000d9a:	807b      	strh	r3, [r7, #2]
	for(uint16_t i=0; i<len; i++)
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	81fb      	strh	r3, [r7, #14]
 8000da0:	e00a      	b.n	8000db8 <wizchip_spi_writeburst+0x28>
	{
		WIZCHIP.IF.SPI._write_byte(*pBuf++);
 8000da2:	4b0a      	ldr	r3, [pc, #40]	@ (8000dcc <wizchip_spi_writeburst+0x3c>)
 8000da4:	6a1a      	ldr	r2, [r3, #32]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	1c59      	adds	r1, r3, #1
 8000daa:	6079      	str	r1, [r7, #4]
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	4618      	mov	r0, r3
 8000db0:	4790      	blx	r2
	for(uint16_t i=0; i<len; i++)
 8000db2:	89fb      	ldrh	r3, [r7, #14]
 8000db4:	3301      	adds	r3, #1
 8000db6:	81fb      	strh	r3, [r7, #14]
 8000db8:	89fa      	ldrh	r2, [r7, #14]
 8000dba:	887b      	ldrh	r3, [r7, #2]
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	d3f0      	bcc.n	8000da2 <wizchip_spi_writeburst+0x12>
	}
}
 8000dc0:	bf00      	nop
 8000dc2:	bf00      	nop
 8000dc4:	3710      	adds	r7, #16
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	20000030 	.word	0x20000030

08000dd0 <reg_wizchip_cris_cbfunc>:
static uint8_t      _DNS6_[16];    ///< DSN server IPv6 address
static ipconf_mode  _IPMODE_;      ///< IP configuration mode
#endif

void reg_wizchip_cris_cbfunc(void(*cris_en)(void), void(*cris_ex)(void))
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b083      	sub	sp, #12
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
 8000dd8:	6039      	str	r1, [r7, #0]
   if(!cris_en || !cris_ex)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d002      	beq.n	8000de6 <reg_wizchip_cris_cbfunc+0x16>
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d106      	bne.n	8000df4 <reg_wizchip_cris_cbfunc+0x24>
   {
      WIZCHIP.CRIS._enter = wizchip_cris_enter;
 8000de6:	4b0a      	ldr	r3, [pc, #40]	@ (8000e10 <reg_wizchip_cris_cbfunc+0x40>)
 8000de8:	4a0a      	ldr	r2, [pc, #40]	@ (8000e14 <reg_wizchip_cris_cbfunc+0x44>)
 8000dea:	60da      	str	r2, [r3, #12]
      WIZCHIP.CRIS._exit  = wizchip_cris_exit;
 8000dec:	4b08      	ldr	r3, [pc, #32]	@ (8000e10 <reg_wizchip_cris_cbfunc+0x40>)
 8000dee:	4a0a      	ldr	r2, [pc, #40]	@ (8000e18 <reg_wizchip_cris_cbfunc+0x48>)
 8000df0:	611a      	str	r2, [r3, #16]
 8000df2:	e006      	b.n	8000e02 <reg_wizchip_cris_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CRIS._enter = cris_en;
 8000df4:	4a06      	ldr	r2, [pc, #24]	@ (8000e10 <reg_wizchip_cris_cbfunc+0x40>)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	60d3      	str	r3, [r2, #12]
      WIZCHIP.CRIS._exit  = cris_ex;
 8000dfa:	4a05      	ldr	r2, [pc, #20]	@ (8000e10 <reg_wizchip_cris_cbfunc+0x40>)
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	6113      	str	r3, [r2, #16]
   }
}
 8000e00:	bf00      	nop
 8000e02:	bf00      	nop
 8000e04:	370c      	adds	r7, #12
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	20000030 	.word	0x20000030
 8000e14:	08000cb9 	.word	0x08000cb9
 8000e18:	08000cc7 	.word	0x08000cc7

08000e1c <reg_wizchip_cs_cbfunc>:

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
 8000e24:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d002      	beq.n	8000e32 <reg_wizchip_cs_cbfunc+0x16>
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d106      	bne.n	8000e40 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 8000e32:	4b0a      	ldr	r3, [pc, #40]	@ (8000e5c <reg_wizchip_cs_cbfunc+0x40>)
 8000e34:	4a0a      	ldr	r2, [pc, #40]	@ (8000e60 <reg_wizchip_cs_cbfunc+0x44>)
 8000e36:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8000e38:	4b08      	ldr	r3, [pc, #32]	@ (8000e5c <reg_wizchip_cs_cbfunc+0x40>)
 8000e3a:	4a0a      	ldr	r2, [pc, #40]	@ (8000e64 <reg_wizchip_cs_cbfunc+0x48>)
 8000e3c:	619a      	str	r2, [r3, #24]
 8000e3e:	e006      	b.n	8000e4e <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8000e40:	4a06      	ldr	r2, [pc, #24]	@ (8000e5c <reg_wizchip_cs_cbfunc+0x40>)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 8000e46:	4a05      	ldr	r2, [pc, #20]	@ (8000e5c <reg_wizchip_cs_cbfunc+0x40>)
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	6193      	str	r3, [r2, #24]
   }
}
 8000e4c:	bf00      	nop
 8000e4e:	bf00      	nop
 8000e50:	370c      	adds	r7, #12
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	20000030 	.word	0x20000030
 8000e60:	08000cd5 	.word	0x08000cd5
 8000e64:	08000ce3 	.word	0x08000ce3

08000e68 <reg_wizchip_spi_cbfunc>:
   else           WIZCHIP.IF.SPI._write_burst = spi_wbuf;
}
#else 

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
 8000e70:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8000e72:	bf00      	nop
 8000e74:	4b0f      	ldr	r3, [pc, #60]	@ (8000eb4 <reg_wizchip_spi_cbfunc+0x4c>)
 8000e76:	881b      	ldrh	r3, [r3, #0]
 8000e78:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d0f9      	beq.n	8000e74 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d002      	beq.n	8000e8c <reg_wizchip_spi_cbfunc+0x24>
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d106      	bne.n	8000e9a <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8000e8c:	4b09      	ldr	r3, [pc, #36]	@ (8000eb4 <reg_wizchip_spi_cbfunc+0x4c>)
 8000e8e:	4a0a      	ldr	r2, [pc, #40]	@ (8000eb8 <reg_wizchip_spi_cbfunc+0x50>)
 8000e90:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 8000e92:	4b08      	ldr	r3, [pc, #32]	@ (8000eb4 <reg_wizchip_spi_cbfunc+0x4c>)
 8000e94:	4a09      	ldr	r2, [pc, #36]	@ (8000ebc <reg_wizchip_spi_cbfunc+0x54>)
 8000e96:	621a      	str	r2, [r3, #32]
 8000e98:	e006      	b.n	8000ea8 <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 8000e9a:	4a06      	ldr	r2, [pc, #24]	@ (8000eb4 <reg_wizchip_spi_cbfunc+0x4c>)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8000ea0:	4a04      	ldr	r2, [pc, #16]	@ (8000eb4 <reg_wizchip_spi_cbfunc+0x4c>)
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	6213      	str	r3, [r2, #32]
   }
}
 8000ea6:	bf00      	nop
 8000ea8:	bf00      	nop
 8000eaa:	370c      	adds	r7, #12
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr
 8000eb4:	20000030 	.word	0x20000030
 8000eb8:	08000d29 	.word	0x08000d29
 8000ebc:	08000d39 	.word	0x08000d39

08000ec0 <reg_wizchip_spiburst_cbfunc>:
#endif 

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
 8000ec8:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8000eca:	bf00      	nop
 8000ecc:	4b0f      	ldr	r3, [pc, #60]	@ (8000f0c <reg_wizchip_spiburst_cbfunc+0x4c>)
 8000ece:	881b      	ldrh	r3, [r3, #0]
 8000ed0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d0f9      	beq.n	8000ecc <reg_wizchip_spiburst_cbfunc+0xc>

   if(!spi_rb || !spi_wb)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d002      	beq.n	8000ee4 <reg_wizchip_spiburst_cbfunc+0x24>
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d106      	bne.n	8000ef2 <reg_wizchip_spiburst_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
 8000ee4:	4b09      	ldr	r3, [pc, #36]	@ (8000f0c <reg_wizchip_spiburst_cbfunc+0x4c>)
 8000ee6:	4a0a      	ldr	r2, [pc, #40]	@ (8000f10 <reg_wizchip_spiburst_cbfunc+0x50>)
 8000ee8:	625a      	str	r2, [r3, #36]	@ 0x24
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
 8000eea:	4b08      	ldr	r3, [pc, #32]	@ (8000f0c <reg_wizchip_spiburst_cbfunc+0x4c>)
 8000eec:	4a09      	ldr	r2, [pc, #36]	@ (8000f14 <reg_wizchip_spiburst_cbfunc+0x54>)
 8000eee:	629a      	str	r2, [r3, #40]	@ 0x28
 8000ef0:	e006      	b.n	8000f00 <reg_wizchip_spiburst_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
 8000ef2:	4a06      	ldr	r2, [pc, #24]	@ (8000f0c <reg_wizchip_spiburst_cbfunc+0x4c>)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6253      	str	r3, [r2, #36]	@ 0x24
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
 8000ef8:	4a04      	ldr	r2, [pc, #16]	@ (8000f0c <reg_wizchip_spiburst_cbfunc+0x4c>)
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	6293      	str	r3, [r2, #40]	@ 0x28
   }
}
 8000efe:	bf00      	nop
 8000f00:	bf00      	nop
 8000f02:	370c      	adds	r7, #12
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr
 8000f0c:	20000030 	.word	0x20000030
 8000f10:	08000d51 	.word	0x08000d51
 8000f14:	08000d91 	.word	0x08000d91

08000f18 <ctlwizchip>:
   }
}
#endif

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 8000f18:	b590      	push	{r4, r7, lr}
 8000f1a:	b087      	sub	sp, #28
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	4603      	mov	r3, r0
 8000f20:	6039      	str	r1, [r7, #0]
 8000f22:	71fb      	strb	r3, [r7, #7]
//teddy 240122
#if	_WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500 || _WIZCHIP_ == W6100 || _WIZCHIP_ == W6300
   uint8_t tmp = *(uint8_t*) arg;
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	75fb      	strb	r3, [r7, #23]
#endif
   uint8_t* ptmp[2] = {0,0};
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	60fb      	str	r3, [r7, #12]
 8000f2e:	2300      	movs	r3, #0
 8000f30:	613b      	str	r3, [r7, #16]
   switch(cwtype)
 8000f32:	79fb      	ldrb	r3, [r7, #7]
 8000f34:	3b03      	subs	r3, #3
 8000f36:	2b14      	cmp	r3, #20
 8000f38:	f200 80d3 	bhi.w	80010e2 <ctlwizchip+0x1ca>
 8000f3c:	a201      	add	r2, pc, #4	@ (adr r2, 8000f44 <ctlwizchip+0x2c>)
 8000f3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f42:	bf00      	nop
 8000f44:	08000f99 	.word	0x08000f99
 8000f48:	08000f9f 	.word	0x08000f9f
 8000f4c:	08000fcb 	.word	0x08000fcb
 8000f50:	08000fbf 	.word	0x08000fbf
 8000f54:	08000fd9 	.word	0x08000fd9
 8000f58:	08000fe5 	.word	0x08000fe5
 8000f5c:	08000ff3 	.word	0x08000ff3
 8000f60:	08001019 	.word	0x08001019
 8000f64:	080010e3 	.word	0x080010e3
 8000f68:	080010e3 	.word	0x080010e3
 8000f6c:	0800103b 	.word	0x0800103b
 8000f70:	080010e3 	.word	0x080010e3
 8000f74:	080010e3 	.word	0x080010e3
 8000f78:	080010e3 	.word	0x080010e3
 8000f7c:	0800107f 	.word	0x0800107f
 8000f80:	08001085 	.word	0x08001085
 8000f84:	0800108d 	.word	0x0800108d
 8000f88:	08001095 	.word	0x08001095
 8000f8c:	0800109d 	.word	0x0800109d
 8000f90:	080010ab 	.word	0x080010ab
 8000f94:	080010c7 	.word	0x080010c7
      case CW_GET_SYSLOCK:
         *(uint8_t*)arg = getSYSR() >> 5;
         break;
#endif
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 8000f98:	f000 f8ec 	bl	8001174 <wizchip_sw_reset>
         break;
 8000f9c:	e0a4      	b.n	80010e8 <ctlwizchip+0x1d0>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d004      	beq.n	8000fae <ctlwizchip+0x96>
         {
            ptmp[0] = (uint8_t*)arg;
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	60fb      	str	r3, [r7, #12]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	3308      	adds	r3, #8
 8000fac:	613b      	str	r3, [r7, #16]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	693a      	ldr	r2, [r7, #16]
 8000fb2:	4611      	mov	r1, r2
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f000 f929 	bl	800120c <wizchip_init>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	e095      	b.n	80010ea <ctlwizchip+0x1d2>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	881b      	ldrh	r3, [r3, #0]
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f000 f9ae 	bl	8001324 <wizchip_clrinterrupt>
         break;
 8000fc8:	e08e      	b.n	80010e8 <ctlwizchip+0x1d0>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 8000fca:	f000 f9df 	bl	800138c <wizchip_getinterrupt>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	461a      	mov	r2, r3
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	801a      	strh	r2, [r3, #0]
         break;
 8000fd6:	e087      	b.n	80010e8 <ctlwizchip+0x1d0>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	881b      	ldrh	r3, [r3, #0]
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f000 f9f9 	bl	80013d4 <wizchip_setinterruptmask>
         break;         
 8000fe2:	e081      	b.n	80010e8 <ctlwizchip+0x1d0>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 8000fe4:	f000 fa11 	bl	800140a <wizchip_getinterruptmask>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	461a      	mov	r2, r3
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	801a      	strh	r2, [r3, #0]
         break;
 8000ff0:	e07a      	b.n	80010e8 <ctlwizchip+0x1d0>
   //M20150601 : This can be supported by W5200, W5500
   //#if _WIZCHIP_ > W5100
   #if (_WIZCHIP_ == W5200 || _WIZCHIP_ == W5500)
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	881b      	ldrh	r3, [r3, #0]
 8000ff6:	0a1b      	lsrs	r3, r3, #8
 8000ff8:	b29b      	uxth	r3, r3
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	f44f 5098 	mov.w	r0, #4864	@ 0x1300
 8001002:	f7ff f955 	bl	80002b0 <WIZCHIP_WRITE>
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	881b      	ldrh	r3, [r3, #0]
 800100a:	b2db      	uxtb	r3, r3
 800100c:	4619      	mov	r1, r3
 800100e:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 8001012:	f7ff f94d 	bl	80002b0 <WIZCHIP_WRITE>
         break;
 8001016:	e067      	b.n	80010e8 <ctlwizchip+0x1d0>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
 8001018:	f44f 5098 	mov.w	r0, #4864	@ 0x1300
 800101c:	f7ff f8fc 	bl	8000218 <WIZCHIP_READ>
 8001020:	4603      	mov	r3, r0
 8001022:	021b      	lsls	r3, r3, #8
 8001024:	b29c      	uxth	r4, r3
 8001026:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 800102a:	f7ff f8f5 	bl	8000218 <WIZCHIP_READ>
 800102e:	4603      	mov	r3, r0
 8001030:	4423      	add	r3, r4
 8001032:	b29a      	uxth	r2, r3
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	801a      	strh	r2, [r3, #0]
         break;
 8001038:	e056      	b.n	80010e8 <ctlwizchip+0x1d0>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTPTMR();
         break;   
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 800103a:	4b2e      	ldr	r3, [pc, #184]	@ (80010f4 <ctlwizchip+0x1dc>)
 800103c:	789a      	ldrb	r2, [r3, #2]
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	3301      	adds	r3, #1
 8001046:	4a2b      	ldr	r2, [pc, #172]	@ (80010f4 <ctlwizchip+0x1dc>)
 8001048:	78d2      	ldrb	r2, [r2, #3]
 800104a:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	3302      	adds	r3, #2
 8001050:	4a28      	ldr	r2, [pc, #160]	@ (80010f4 <ctlwizchip+0x1dc>)
 8001052:	7912      	ldrb	r2, [r2, #4]
 8001054:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	3303      	adds	r3, #3
 800105a:	4a26      	ldr	r2, [pc, #152]	@ (80010f4 <ctlwizchip+0x1dc>)
 800105c:	7952      	ldrb	r2, [r2, #5]
 800105e:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	3304      	adds	r3, #4
 8001064:	4a23      	ldr	r2, [pc, #140]	@ (80010f4 <ctlwizchip+0x1dc>)
 8001066:	7992      	ldrb	r2, [r2, #6]
 8001068:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = WIZCHIP.id[5];
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	3305      	adds	r3, #5
 800106e:	4a21      	ldr	r2, [pc, #132]	@ (80010f4 <ctlwizchip+0x1dc>)
 8001070:	79d2      	ldrb	r2, [r2, #7]
 8001072:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[6] = 0;
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	3306      	adds	r3, #6
 8001078:	2200      	movs	r2, #0
 800107a:	701a      	strb	r2, [r3, #0]
         break;
 800107c:	e034      	b.n	80010e8 <ctlwizchip+0x1d0>
   #endif
#endif
//teddy 240122
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5500 || _WIZCHIP_ == W6100 || _WIZCHIP_ == W6300
      case CW_RESET_PHY:
         wizphy_reset();
 800107e:	f000 fa15 	bl	80014ac <wizphy_reset>
         break;
 8001082:	e031      	b.n	80010e8 <ctlwizchip+0x1d0>
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
 8001084:	6838      	ldr	r0, [r7, #0]
 8001086:	f000 fa38 	bl	80014fa <wizphy_setphyconf>
         break;
 800108a:	e02d      	b.n	80010e8 <ctlwizchip+0x1d0>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
 800108c:	6838      	ldr	r0, [r7, #0]
 800108e:	f000 fa77 	bl	8001580 <wizphy_getphyconf>
         break;
 8001092:	e029      	b.n	80010e8 <ctlwizchip+0x1d0>
      case CW_GET_PHYSTATUS:
#if 1
    	  // 20231012 taylor
   #if _WIZCHIP_ == W5500
         wizphy_getphystat((wiz_PhyConf*)arg);
 8001094:	6838      	ldr	r0, [r7, #0]
 8001096:	f000 fadd 	bl	8001654 <wizphy_getphystat>
   #endif
#else
         wizphy_getphystat((wiz_PhyConf*)arg);
#endif
         break;
 800109a:	e025      	b.n	80010e8 <ctlwizchip+0x1d0>
	  //teddy 240122
      #if _WIZCHIP_ == W6100 ||_WIZCHIP_ == W6300
        wizphy_setphypmode(*(uint8_t*)arg);
        break;
      #else
         return wizphy_setphypmode(*(uint8_t*)arg);
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	4618      	mov	r0, r3
 80010a2:	f000 faf5 	bl	8001690 <wizphy_setphypmode>
 80010a6:	4603      	mov	r3, r0
 80010a8:	e01f      	b.n	80010ea <ctlwizchip+0x1d2>
      #endif
   #endif
   //teddy 240122
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500 || _WIZCHIP_ == W6100 || _WIZCHIP_ == W6300
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
 80010aa:	f000 f9e6 	bl	800147a <wizphy_getphypmode>
 80010ae:	4603      	mov	r3, r0
 80010b0:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 80010b2:	7dfb      	ldrb	r3, [r7, #23]
 80010b4:	2bff      	cmp	r3, #255	@ 0xff
 80010b6:	d102      	bne.n	80010be <ctlwizchip+0x1a6>
 80010b8:	f04f 33ff 	mov.w	r3, #4294967295
 80010bc:	e015      	b.n	80010ea <ctlwizchip+0x1d2>
         *(uint8_t*)arg = tmp;
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	7dfa      	ldrb	r2, [r7, #23]
 80010c2:	701a      	strb	r2, [r3, #0]
         break;
 80010c4:	e010      	b.n	80010e8 <ctlwizchip+0x1d0>
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
 80010c6:	f000 f9c2 	bl	800144e <wizphy_getphylink>
 80010ca:	4603      	mov	r3, r0
 80010cc:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 80010ce:	7dfb      	ldrb	r3, [r7, #23]
 80010d0:	2bff      	cmp	r3, #255	@ 0xff
 80010d2:	d102      	bne.n	80010da <ctlwizchip+0x1c2>
 80010d4:	f04f 33ff 	mov.w	r3, #4294967295
 80010d8:	e007      	b.n	80010ea <ctlwizchip+0x1d2>
         *(uint8_t*)arg = tmp;
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	7dfa      	ldrb	r2, [r7, #23]
 80010de:	701a      	strb	r2, [r3, #0]
         break;
 80010e0:	e002      	b.n	80010e8 <ctlwizchip+0x1d0>
   #endif      
      default:
         return -1;
 80010e2:	f04f 33ff 	mov.w	r3, #4294967295
 80010e6:	e000      	b.n	80010ea <ctlwizchip+0x1d2>
   }
   return 0;
 80010e8:	2300      	movs	r3, #0
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	371c      	adds	r7, #28
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd90      	pop	{r4, r7, pc}
 80010f2:	bf00      	nop
 80010f4:	20000030 	.word	0x20000030

080010f8 <ctlnetwork>:


int8_t ctlnetwork(ctlnetwork_type cntype, void* arg)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	4603      	mov	r3, r0
 8001100:	6039      	str	r1, [r7, #0]
 8001102:	71fb      	strb	r3, [r7, #7]
   
   switch(cntype)
 8001104:	79fb      	ldrb	r3, [r7, #7]
 8001106:	2b05      	cmp	r3, #5
 8001108:	d82c      	bhi.n	8001164 <ctlnetwork+0x6c>
 800110a:	a201      	add	r2, pc, #4	@ (adr r2, 8001110 <ctlnetwork+0x18>)
 800110c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001110:	08001129 	.word	0x08001129
 8001114:	08001131 	.word	0x08001131
 8001118:	08001139 	.word	0x08001139
 800111c:	08001147 	.word	0x08001147
 8001120:	08001155 	.word	0x08001155
 8001124:	0800115d 	.word	0x0800115d
   {
      case CN_SET_NETINFO:
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 8001128:	6838      	ldr	r0, [r7, #0]
 800112a:	f000 fafb 	bl	8001724 <wizchip_setnetinfo>
         break;
 800112e:	e01c      	b.n	800116a <ctlnetwork+0x72>
      case CN_GET_NETINFO:
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 8001130:	6838      	ldr	r0, [r7, #0]
 8001132:	f000 fb37 	bl	80017a4 <wizchip_getnetinfo>
         break;
 8001136:	e018      	b.n	800116a <ctlnetwork+0x72>
      case CN_SET_NETMODE:
#if (_WIZCHIP_ == W5100 || _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5300 || _WIZCHIP_ == W5500)
         return wizchip_setnetmode(*(netmode_type*)arg);
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	4618      	mov	r0, r3
 800113e:	f000 fb71 	bl	8001824 <wizchip_setnetmode>
 8001142:	4603      	mov	r3, r0
 8001144:	e012      	b.n	800116c <ctlnetwork+0x74>
		 //teddy 240122
      #elif ((_WIZCHIP_ == 6100)||(_WIZCHIP_ == W6300))
         wizchip_setnetmode(*(netmode_type*)arg);
      #endif
      case CN_GET_NETMODE:
         *(netmode_type*)arg = wizchip_getnetmode();
 8001146:	f000 fb8f 	bl	8001868 <wizchip_getnetmode>
 800114a:	4603      	mov	r3, r0
 800114c:	461a      	mov	r2, r3
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	701a      	strb	r2, [r3, #0]
         break;
 8001152:	e00a      	b.n	800116a <ctlnetwork+0x72>
      case CN_SET_TIMEOUT:
         wizchip_settimeout((wiz_NetTimeout*)arg);
 8001154:	6838      	ldr	r0, [r7, #0]
 8001156:	f000 fb8f 	bl	8001878 <wizchip_settimeout>
         break;
 800115a:	e006      	b.n	800116a <ctlnetwork+0x72>
      case CN_GET_TIMEOUT:
         wizchip_gettimeout((wiz_NetTimeout*)arg);
 800115c:	6838      	ldr	r0, [r7, #0]
 800115e:	f000 fbac 	bl	80018ba <wizchip_gettimeout>
         break;
 8001162:	e002      	b.n	800116a <ctlnetwork+0x72>
      case CN_GET_PREFER:
    	  *(uint8_t*)arg= getSLPSR();
         break;
#endif   
      default:
         return -1;
 8001164:	f04f 33ff 	mov.w	r3, #4294967295
 8001168:	e000      	b.n	800116c <ctlnetwork+0x74>
   }
   return 0;
 800116a:	2300      	movs	r3, #0
}
 800116c:	4618      	mov	r0, r3
 800116e:	3708      	adds	r7, #8
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}

08001174 <wizchip_sw_reset>:

void wizchip_sw_reset(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b086      	sub	sp, #24
 8001178:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 800117a:	1d3b      	adds	r3, r7, #4
 800117c:	2206      	movs	r2, #6
 800117e:	4619      	mov	r1, r3
 8001180:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8001184:	f7ff f8e2 	bl	800034c <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8001188:	f107 0314 	add.w	r3, r7, #20
 800118c:	2204      	movs	r2, #4
 800118e:	4619      	mov	r1, r3
 8001190:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001194:	f7ff f8da 	bl	800034c <WIZCHIP_READ_BUF>
 8001198:	f107 0310 	add.w	r3, r7, #16
 800119c:	2204      	movs	r2, #4
 800119e:	4619      	mov	r1, r3
 80011a0:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 80011a4:	f7ff f8d2 	bl	800034c <WIZCHIP_READ_BUF>
 80011a8:	f107 030c 	add.w	r3, r7, #12
 80011ac:	2204      	movs	r2, #4
 80011ae:	4619      	mov	r1, r3
 80011b0:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 80011b4:	f7ff f8ca 	bl	800034c <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 80011b8:	2180      	movs	r1, #128	@ 0x80
 80011ba:	2000      	movs	r0, #0
 80011bc:	f7ff f878 	bl	80002b0 <WIZCHIP_WRITE>
   getMR(); // for delay
 80011c0:	2000      	movs	r0, #0
 80011c2:	f7ff f829 	bl	8000218 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 80011c6:	1d3b      	adds	r3, r7, #4
 80011c8:	2206      	movs	r2, #6
 80011ca:	4619      	mov	r1, r3
 80011cc:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 80011d0:	f7ff f91c 	bl	800040c <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 80011d4:	f107 0314 	add.w	r3, r7, #20
 80011d8:	2204      	movs	r2, #4
 80011da:	4619      	mov	r1, r3
 80011dc:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80011e0:	f7ff f914 	bl	800040c <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 80011e4:	f107 0310 	add.w	r3, r7, #16
 80011e8:	2204      	movs	r2, #4
 80011ea:	4619      	mov	r1, r3
 80011ec:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 80011f0:	f7ff f90c 	bl	800040c <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 80011f4:	f107 030c 	add.w	r3, r7, #12
 80011f8:	2204      	movs	r2, #4
 80011fa:	4619      	mov	r1, r3
 80011fc:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8001200:	f7ff f904 	bl	800040c <WIZCHIP_WRITE_BUF>
  setLLAR(lla);
  setGUAR(gua);
  if(islock & SYSR_CHPL) CHIPLOCK();
  if(islock & SYSR_NETL) NETLOCK();
#endif
}
 8001204:	bf00      	nop
 8001206:	3718      	adds	r7, #24
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}

0800120c <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 8001216:	2300      	movs	r3, #0
 8001218:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 800121a:	f7ff ffab 	bl	8001174 <wizchip_sw_reset>
   if(txsize)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d03b      	beq.n	800129c <wizchip_init+0x90>
   {
      tmp = 0;
 8001224:	2300      	movs	r3, #0
 8001226:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001228:	2300      	movs	r3, #0
 800122a:	73fb      	strb	r3, [r7, #15]
 800122c:	e015      	b.n	800125a <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 800122e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001232:	687a      	ldr	r2, [r7, #4]
 8001234:	4413      	add	r3, r2
 8001236:	781a      	ldrb	r2, [r3, #0]
 8001238:	7bbb      	ldrb	r3, [r7, #14]
 800123a:	4413      	add	r3, r2
 800123c:	b2db      	uxtb	r3, r3
 800123e:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#elif  _WIZCHIP_ == W6300
			if(tmp > 32) return -1;
#else
			if(tmp > 16) return -1;
 8001240:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001244:	2b10      	cmp	r3, #16
 8001246:	dd02      	ble.n	800124e <wizchip_init+0x42>
 8001248:	f04f 33ff 	mov.w	r3, #4294967295
 800124c:	e066      	b.n	800131c <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800124e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001252:	b2db      	uxtb	r3, r3
 8001254:	3301      	adds	r3, #1
 8001256:	b2db      	uxtb	r3, r3
 8001258:	73fb      	strb	r3, [r7, #15]
 800125a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800125e:	2b07      	cmp	r3, #7
 8001260:	dde5      	ble.n	800122e <wizchip_init+0x22>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001262:	2300      	movs	r3, #0
 8001264:	73fb      	strb	r3, [r7, #15]
 8001266:	e015      	b.n	8001294 <wizchip_init+0x88>
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 8001268:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800126c:	009b      	lsls	r3, r3, #2
 800126e:	3301      	adds	r3, #1
 8001270:	00db      	lsls	r3, r3, #3
 8001272:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 8001276:	4618      	mov	r0, r3
 8001278:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800127c:	687a      	ldr	r2, [r7, #4]
 800127e:	4413      	add	r3, r2
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	4619      	mov	r1, r3
 8001284:	f7ff f814 	bl	80002b0 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001288:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800128c:	b2db      	uxtb	r3, r3
 800128e:	3301      	adds	r3, #1
 8001290:	b2db      	uxtb	r3, r3
 8001292:	73fb      	strb	r3, [r7, #15]
 8001294:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001298:	2b07      	cmp	r3, #7
 800129a:	dde5      	ble.n	8001268 <wizchip_init+0x5c>
#endif
		}	
   }

   if(rxsize)
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d03b      	beq.n	800131a <wizchip_init+0x10e>
   {
      tmp = 0;
 80012a2:	2300      	movs	r3, #0
 80012a4:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80012a6:	2300      	movs	r3, #0
 80012a8:	73fb      	strb	r3, [r7, #15]
 80012aa:	e015      	b.n	80012d8 <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 80012ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012b0:	683a      	ldr	r2, [r7, #0]
 80012b2:	4413      	add	r3, r2
 80012b4:	781a      	ldrb	r2, [r3, #0]
 80012b6:	7bbb      	ldrb	r3, [r7, #14]
 80012b8:	4413      	add	r3, r2
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#elif  _WIZCHIP_ == W6300
			if(tmp > 32) return -1;
#else
			if(tmp > 16) return -1;
 80012be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80012c2:	2b10      	cmp	r3, #16
 80012c4:	dd02      	ble.n	80012cc <wizchip_init+0xc0>
 80012c6:	f04f 33ff 	mov.w	r3, #4294967295
 80012ca:	e027      	b.n	800131c <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80012cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	3301      	adds	r3, #1
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	73fb      	strb	r3, [r7, #15]
 80012d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012dc:	2b07      	cmp	r3, #7
 80012de:	dde5      	ble.n	80012ac <wizchip_init+0xa0>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80012e0:	2300      	movs	r3, #0
 80012e2:	73fb      	strb	r3, [r7, #15]
 80012e4:	e015      	b.n	8001312 <wizchip_init+0x106>
#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 80012e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ea:	009b      	lsls	r3, r3, #2
 80012ec:	3301      	adds	r3, #1
 80012ee:	00db      	lsls	r3, r3, #3
 80012f0:	f503 53f0 	add.w	r3, r3, #7680	@ 0x1e00
 80012f4:	4618      	mov	r0, r3
 80012f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012fa:	683a      	ldr	r2, [r7, #0]
 80012fc:	4413      	add	r3, r2
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	4619      	mov	r1, r3
 8001302:	f7fe ffd5 	bl	80002b0 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001306:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800130a:	b2db      	uxtb	r3, r3
 800130c:	3301      	adds	r3, #1
 800130e:	b2db      	uxtb	r3, r3
 8001310:	73fb      	strb	r3, [r7, #15]
 8001312:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001316:	2b07      	cmp	r3, #7
 8001318:	dde5      	ble.n	80012e6 <wizchip_init+0xda>
#endif
		}
   }
   return 0;
 800131a:	2300      	movs	r3, #0
}
 800131c:	4618      	mov	r0, r3
 800131e:	3710      	adds	r7, #16
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}

08001324 <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0
 800132a:	4603      	mov	r3, r0
 800132c:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 800132e:	88fb      	ldrh	r3, [r7, #6]
 8001330:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 8001332:	88fb      	ldrh	r3, [r7, #6]
 8001334:	0a1b      	lsrs	r3, r3, #8
 8001336:	b29b      	uxth	r3, r3
 8001338:	73bb      	strb	r3, [r7, #14]
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
#else
   setIR(ir);
 800133a:	7bfb      	ldrb	r3, [r7, #15]
 800133c:	f023 030f 	bic.w	r3, r3, #15
 8001340:	b2db      	uxtb	r3, r3
 8001342:	4619      	mov	r1, r3
 8001344:	f44f 50a8 	mov.w	r0, #5376	@ 0x1500
 8001348:	f7fe ffb2 	bl	80002b0 <WIZCHIP_WRITE>
//M20200227 : For clear
   //setSIR(sir);
   for(ir=0; ir<8; ir++){
 800134c:	2300      	movs	r3, #0
 800134e:	73fb      	strb	r3, [r7, #15]
 8001350:	e014      	b.n	800137c <wizchip_clrinterrupt+0x58>
       if(sir & (0x01 <<ir) ) setSn_IR(ir, 0xff);
 8001352:	7bba      	ldrb	r2, [r7, #14]
 8001354:	7bfb      	ldrb	r3, [r7, #15]
 8001356:	fa42 f303 	asr.w	r3, r2, r3
 800135a:	f003 0301 	and.w	r3, r3, #1
 800135e:	2b00      	cmp	r3, #0
 8001360:	d009      	beq.n	8001376 <wizchip_clrinterrupt+0x52>
 8001362:	7bfb      	ldrb	r3, [r7, #15]
 8001364:	009b      	lsls	r3, r3, #2
 8001366:	3301      	adds	r3, #1
 8001368:	00db      	lsls	r3, r3, #3
 800136a:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800136e:	211f      	movs	r1, #31
 8001370:	4618      	mov	r0, r3
 8001372:	f7fe ff9d 	bl	80002b0 <WIZCHIP_WRITE>
   for(ir=0; ir<8; ir++){
 8001376:	7bfb      	ldrb	r3, [r7, #15]
 8001378:	3301      	adds	r3, #1
 800137a:	73fb      	strb	r3, [r7, #15]
 800137c:	7bfb      	ldrb	r3, [r7, #15]
 800137e:	2b07      	cmp	r3, #7
 8001380:	d9e7      	bls.n	8001352 <wizchip_clrinterrupt+0x2e>
   }

#endif   
}
 8001382:	bf00      	nop
 8001384:	bf00      	nop
 8001386:	3710      	adds	r7, #16
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}

0800138c <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 8001392:	2300      	movs	r3, #0
 8001394:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 8001396:	2300      	movs	r3, #0
 8001398:	71bb      	strb	r3, [r7, #6]
   uint32_t ret = 0;
 800139a:	2300      	movs	r3, #0
 800139c:	603b      	str	r3, [r7, #0]
#elif _WIZCHIP_  == W5300
   ret = getIR();
   ir = (uint8_t)(ret >> 8);
   sir = (uint8_t)ret;
#else
   ir  = getIR();
 800139e:	f44f 50a8 	mov.w	r0, #5376	@ 0x1500
 80013a2:	f7fe ff39 	bl	8000218 <WIZCHIP_READ>
 80013a6:	4603      	mov	r3, r0
 80013a8:	f023 030f 	bic.w	r3, r3, #15
 80013ac:	71fb      	strb	r3, [r7, #7]
   sir = getSIR();
 80013ae:	f44f 50b8 	mov.w	r0, #5888	@ 0x1700
 80013b2:	f7fe ff31 	bl	8000218 <WIZCHIP_READ>
 80013b6:	4603      	mov	r3, r0
 80013b8:	71bb      	strb	r3, [r7, #6]
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 80013ba:	79bb      	ldrb	r3, [r7, #6]
 80013bc:	603b      	str	r3, [r7, #0]
  ret = (ret << 8) + ir;
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	021a      	lsls	r2, r3, #8
 80013c2:	79fb      	ldrb	r3, [r7, #7]
 80013c4:	4413      	add	r3, r2
 80013c6:	603b      	str	r3, [r7, #0]
  //teddy 240122
#if _WIZCHIP_ == W6100 || _WIZCHIP_ == W6300
  ret = (((uint32_t)getSLIR())<<16) | ret;
#endif

  return (intr_kind)ret;
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	b29b      	uxth	r3, r3
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	3708      	adds	r7, #8
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}

080013d4 <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af00      	add	r7, sp, #0
 80013da:	4603      	mov	r3, r0
 80013dc:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 80013de:	88fb      	ldrh	r3, [r7, #6]
 80013e0:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 80013e2:	88fb      	ldrh	r3, [r7, #6]
 80013e4:	0a1b      	lsrs	r3, r3, #8
 80013e6:	b29b      	uxth	r3, r3
 80013e8:	73bb      	strb	r3, [r7, #14]
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
#else
   setIMR(imr);
 80013ea:	7bfb      	ldrb	r3, [r7, #15]
 80013ec:	4619      	mov	r1, r3
 80013ee:	f44f 50b0 	mov.w	r0, #5632	@ 0x1600
 80013f2:	f7fe ff5d 	bl	80002b0 <WIZCHIP_WRITE>
   setSIMR(simr);
 80013f6:	7bbb      	ldrb	r3, [r7, #14]
 80013f8:	4619      	mov	r1, r3
 80013fa:	f44f 50c0 	mov.w	r0, #6144	@ 0x1800
 80013fe:	f7fe ff57 	bl	80002b0 <WIZCHIP_WRITE>
#if _WIZCHIP_ == W6100 || _WIZCHIP_ == W6300
   uint8_t slimr = (uint8_t)((uint32_t)intr >> 16);
   setSLIMR(slimr);
#endif
#endif   
}
 8001402:	bf00      	nop
 8001404:	3710      	adds	r7, #16
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}

0800140a <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 800140a:	b580      	push	{r7, lr}
 800140c:	b082      	sub	sp, #8
 800140e:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 8001410:	2300      	movs	r3, #0
 8001412:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 8001414:	2300      	movs	r3, #0
 8001416:	71bb      	strb	r3, [r7, #6]
   uint32_t ret = 0;
 8001418:	2300      	movs	r3, #0
 800141a:	603b      	str	r3, [r7, #0]
#elif _WIZCHIP_ == W5300
   ret = getIMR();
   imr = (uint8_t)(ret >> 8);
   simr = (uint8_t)ret;
#else
   imr  = getIMR();
 800141c:	f44f 50b0 	mov.w	r0, #5632	@ 0x1600
 8001420:	f7fe fefa 	bl	8000218 <WIZCHIP_READ>
 8001424:	4603      	mov	r3, r0
 8001426:	71fb      	strb	r3, [r7, #7]
   simr = getSIMR();
 8001428:	f44f 50c0 	mov.w	r0, #6144	@ 0x1800
 800142c:	f7fe fef4 	bl	8000218 <WIZCHIP_READ>
 8001430:	4603      	mov	r3, r0
 8001432:	71bb      	strb	r3, [r7, #6]
   imr &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 8001434:	79bb      	ldrb	r3, [r7, #6]
 8001436:	603b      	str	r3, [r7, #0]
  ret = (ret << 8) + imr;
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	021a      	lsls	r2, r3, #8
 800143c:	79fb      	ldrb	r3, [r7, #7]
 800143e:	4413      	add	r3, r2
 8001440:	603b      	str	r3, [r7, #0]
  //teddy 240122
#if _WIZCHIP_ == W6100 || _WIZCHIP_ == W6300
  ret = (((uint32_t)getSLIMR())<<16) | ret;
#endif
  
  return (intr_kind)ret;
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	b29b      	uxth	r3, r3
}
 8001446:	4618      	mov	r0, r3
 8001448:	3708      	adds	r7, #8
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}

0800144e <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 800144e:	b580      	push	{r7, lr}
 8001450:	b082      	sub	sp, #8
 8001452:	af00      	add	r7, sp, #0
   int8_t tmp = PHY_LINK_OFF;
 8001454:	2300      	movs	r3, #0
 8001456:	71fb      	strb	r3, [r7, #7]
	   tmp = PHY_LINK_ON;
#elif   _WIZCHIP_ == W5200
   if(getPHYSTATUS() & PHYSTATUS_LINK)
      tmp = PHY_LINK_ON;
#elif _WIZCHIP_ == W5500
   if(getPHYCFGR() & PHYCFGR_LNK_ON)
 8001458:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 800145c:	f7fe fedc 	bl	8000218 <WIZCHIP_READ>
 8001460:	4603      	mov	r3, r0
 8001462:	f003 0301 	and.w	r3, r3, #1
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <wizphy_getphylink+0x20>
      tmp = PHY_LINK_ON;
 800146a:	2301      	movs	r3, #1
 800146c:	71fb      	strb	r3, [r7, #7]
#endif

#else
   tmp = -1;
#endif
   return tmp;
 800146e:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8001472:	4618      	mov	r0, r3
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}

0800147a <wizphy_getphypmode>:

#if _WIZCHIP_ > W5100

int8_t wizphy_getphypmode(void)
{
 800147a:	b580      	push	{r7, lr}
 800147c:	b082      	sub	sp, #8
 800147e:	af00      	add	r7, sp, #0
   int8_t tmp = 0;
 8001480:	2300      	movs	r3, #0
 8001482:	71fb      	strb	r3, [r7, #7]
      if(getPHYSTATUS() & PHYSTATUS_POWERDOWN)
         tmp = PHY_POWER_DOWN;
      else          
         tmp = PHY_POWER_NORM;
   #elif _WIZCHIP_ == 5500
      if((getPHYCFGR() & PHYCFGR_OPMDC_ALLA) == PHYCFGR_OPMDC_PDOWN)
 8001484:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8001488:	f7fe fec6 	bl	8000218 <WIZCHIP_READ>
 800148c:	4603      	mov	r3, r0
 800148e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001492:	2b30      	cmp	r3, #48	@ 0x30
 8001494:	d102      	bne.n	800149c <wizphy_getphypmode+0x22>
         tmp = PHY_POWER_DOWN;
 8001496:	2301      	movs	r3, #1
 8001498:	71fb      	strb	r3, [r7, #7]
 800149a:	e001      	b.n	80014a0 <wizphy_getphypmode+0x26>
      else 
         tmp = PHY_POWER_NORM;
 800149c:	2300      	movs	r3, #0
 800149e:	71fb      	strb	r3, [r7, #7]
   #endif   
      return PHY_POWER_NORM;
   #else
      tmp = -1;
   #endif
   return tmp;
 80014a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3708      	adds	r7, #8
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}

080014ac <wizphy_reset>:
   return -1;
}

#elif _WIZCHIP_ == W5500
void wizphy_reset(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
   uint8_t tmp = getPHYCFGR();
 80014b2:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 80014b6:	f7fe feaf 	bl	8000218 <WIZCHIP_READ>
 80014ba:	4603      	mov	r3, r0
 80014bc:	71fb      	strb	r3, [r7, #7]
   tmp &= PHYCFGR_RST;
 80014be:	79fb      	ldrb	r3, [r7, #7]
 80014c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80014c4:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 80014c6:	79fb      	ldrb	r3, [r7, #7]
 80014c8:	4619      	mov	r1, r3
 80014ca:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 80014ce:	f7fe feef 	bl	80002b0 <WIZCHIP_WRITE>
   tmp = getPHYCFGR();
 80014d2:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 80014d6:	f7fe fe9f 	bl	8000218 <WIZCHIP_READ>
 80014da:	4603      	mov	r3, r0
 80014dc:	71fb      	strb	r3, [r7, #7]
   tmp |= ~PHYCFGR_RST;
 80014de:	79fb      	ldrb	r3, [r7, #7]
 80014e0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80014e4:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 80014e6:	79fb      	ldrb	r3, [r7, #7]
 80014e8:	4619      	mov	r1, r3
 80014ea:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 80014ee:	f7fe fedf 	bl	80002b0 <WIZCHIP_WRITE>
}
 80014f2:	bf00      	nop
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}

080014fa <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 80014fa:	b580      	push	{r7, lr}
 80014fc:	b084      	sub	sp, #16
 80014fe:	af00      	add	r7, sp, #0
 8001500:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8001502:	2300      	movs	r3, #0
 8001504:	73fb      	strb	r3, [r7, #15]
   if(phyconf->by == PHY_CONFBY_SW)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	2b01      	cmp	r3, #1
 800150c:	d104      	bne.n	8001518 <wizphy_setphyconf+0x1e>
      tmp |= PHYCFGR_OPMD;
 800150e:	7bfb      	ldrb	r3, [r7, #15]
 8001510:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001514:	73fb      	strb	r3, [r7, #15]
 8001516:	e003      	b.n	8001520 <wizphy_setphyconf+0x26>
   else
      tmp &= ~PHYCFGR_OPMD;
 8001518:	7bfb      	ldrb	r3, [r7, #15]
 800151a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800151e:	73fb      	strb	r3, [r7, #15]
   if(phyconf->mode == PHY_MODE_AUTONEGO)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	785b      	ldrb	r3, [r3, #1]
 8001524:	2b01      	cmp	r3, #1
 8001526:	d104      	bne.n	8001532 <wizphy_setphyconf+0x38>
      tmp |= PHYCFGR_OPMDC_ALLA;
 8001528:	7bfb      	ldrb	r3, [r7, #15]
 800152a:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 800152e:	73fb      	strb	r3, [r7, #15]
 8001530:	e019      	b.n	8001566 <wizphy_setphyconf+0x6c>
   else
   {
      if(phyconf->duplex == PHY_DUPLEX_FULL)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	78db      	ldrb	r3, [r3, #3]
 8001536:	2b01      	cmp	r3, #1
 8001538:	d10d      	bne.n	8001556 <wizphy_setphyconf+0x5c>
      {
         if(phyconf->speed == PHY_SPEED_100)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	789b      	ldrb	r3, [r3, #2]
 800153e:	2b01      	cmp	r3, #1
 8001540:	d104      	bne.n	800154c <wizphy_setphyconf+0x52>
            tmp |= PHYCFGR_OPMDC_100F;
 8001542:	7bfb      	ldrb	r3, [r7, #15]
 8001544:	f043 0318 	orr.w	r3, r3, #24
 8001548:	73fb      	strb	r3, [r7, #15]
 800154a:	e00c      	b.n	8001566 <wizphy_setphyconf+0x6c>
         else
            tmp |= PHYCFGR_OPMDC_10F;
 800154c:	7bfb      	ldrb	r3, [r7, #15]
 800154e:	f043 0308 	orr.w	r3, r3, #8
 8001552:	73fb      	strb	r3, [r7, #15]
 8001554:	e007      	b.n	8001566 <wizphy_setphyconf+0x6c>
      }   
      else
      {
         if(phyconf->speed == PHY_SPEED_100)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	789b      	ldrb	r3, [r3, #2]
 800155a:	2b01      	cmp	r3, #1
 800155c:	d103      	bne.n	8001566 <wizphy_setphyconf+0x6c>
            tmp |= PHYCFGR_OPMDC_100H;
 800155e:	7bfb      	ldrb	r3, [r7, #15]
 8001560:	f043 0310 	orr.w	r3, r3, #16
 8001564:	73fb      	strb	r3, [r7, #15]
         else
            tmp |= PHYCFGR_OPMDC_10H;
      }
   }
   setPHYCFGR(tmp);
 8001566:	7bfb      	ldrb	r3, [r7, #15]
 8001568:	4619      	mov	r1, r3
 800156a:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 800156e:	f7fe fe9f 	bl	80002b0 <WIZCHIP_WRITE>
   wizphy_reset();
 8001572:	f7ff ff9b 	bl	80014ac <wizphy_reset>
}
 8001576:	bf00      	nop
 8001578:	3710      	adds	r7, #16
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
	...

08001580 <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b084      	sub	sp, #16
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8001588:	2300      	movs	r3, #0
 800158a:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 800158c:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8001590:	f7fe fe42 	bl	8000218 <WIZCHIP_READ>
 8001594:	4603      	mov	r3, r0
 8001596:	73fb      	strb	r3, [r7, #15]
   phyconf->by   = (tmp & PHYCFGR_OPMD) ? PHY_CONFBY_SW : PHY_CONFBY_HW;
 8001598:	7bfb      	ldrb	r3, [r7, #15]
 800159a:	119b      	asrs	r3, r3, #6
 800159c:	b2db      	uxtb	r3, r3
 800159e:	f003 0301 	and.w	r3, r3, #1
 80015a2:	b2da      	uxtb	r2, r3
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	701a      	strb	r2, [r3, #0]
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 80015a8:	7bfb      	ldrb	r3, [r7, #15]
 80015aa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80015ae:	2b20      	cmp	r3, #32
 80015b0:	d001      	beq.n	80015b6 <wizphy_getphyconf+0x36>
 80015b2:	2b38      	cmp	r3, #56	@ 0x38
 80015b4:	d103      	bne.n	80015be <wizphy_getphyconf+0x3e>
   {
      case PHYCFGR_OPMDC_ALLA:
      case PHYCFGR_OPMDC_100FA: 
         phyconf->mode = PHY_MODE_AUTONEGO;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2201      	movs	r2, #1
 80015ba:	705a      	strb	r2, [r3, #1]
         break;
 80015bc:	e003      	b.n	80015c6 <wizphy_getphyconf+0x46>
      default:
         phyconf->mode = PHY_MODE_MANUAL;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2200      	movs	r2, #0
 80015c2:	705a      	strb	r2, [r3, #1]
         break;
 80015c4:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 80015c6:	7bfb      	ldrb	r3, [r7, #15]
 80015c8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80015cc:	3b10      	subs	r3, #16
 80015ce:	2b10      	cmp	r3, #16
 80015d0:	bf8c      	ite	hi
 80015d2:	2201      	movhi	r2, #1
 80015d4:	2200      	movls	r2, #0
 80015d6:	b2d2      	uxtb	r2, r2
 80015d8:	2a00      	cmp	r2, #0
 80015da:	d10f      	bne.n	80015fc <wizphy_getphyconf+0x7c>
 80015dc:	4a1b      	ldr	r2, [pc, #108]	@ (800164c <wizphy_getphyconf+0xcc>)
 80015de:	fa22 f303 	lsr.w	r3, r2, r3
 80015e2:	f003 0301 	and.w	r3, r3, #1
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	bf14      	ite	ne
 80015ea:	2301      	movne	r3, #1
 80015ec:	2300      	moveq	r3, #0
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d003      	beq.n	80015fc <wizphy_getphyconf+0x7c>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_100H:
         phyconf->speed = PHY_SPEED_100;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2201      	movs	r2, #1
 80015f8:	709a      	strb	r2, [r3, #2]
         break;
 80015fa:	e003      	b.n	8001604 <wizphy_getphyconf+0x84>
      default:
         phyconf->speed = PHY_SPEED_10;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2200      	movs	r2, #0
 8001600:	709a      	strb	r2, [r3, #2]
         break;
 8001602:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8001604:	7bfb      	ldrb	r3, [r7, #15]
 8001606:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800160a:	3b08      	subs	r3, #8
 800160c:	2b18      	cmp	r3, #24
 800160e:	bf8c      	ite	hi
 8001610:	2201      	movhi	r2, #1
 8001612:	2200      	movls	r2, #0
 8001614:	b2d2      	uxtb	r2, r2
 8001616:	2a00      	cmp	r2, #0
 8001618:	d10f      	bne.n	800163a <wizphy_getphyconf+0xba>
 800161a:	4a0d      	ldr	r2, [pc, #52]	@ (8001650 <wizphy_getphyconf+0xd0>)
 800161c:	fa22 f303 	lsr.w	r3, r2, r3
 8001620:	f003 0301 	and.w	r3, r3, #1
 8001624:	2b00      	cmp	r3, #0
 8001626:	bf14      	ite	ne
 8001628:	2301      	movne	r3, #1
 800162a:	2300      	moveq	r3, #0
 800162c:	b2db      	uxtb	r3, r3
 800162e:	2b00      	cmp	r3, #0
 8001630:	d003      	beq.n	800163a <wizphy_getphyconf+0xba>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_10F:
         phyconf->duplex = PHY_DUPLEX_FULL;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2201      	movs	r2, #1
 8001636:	70da      	strb	r2, [r3, #3]
         break;
 8001638:	e003      	b.n	8001642 <wizphy_getphyconf+0xc2>
      default:
         phyconf->duplex = PHY_DUPLEX_HALF;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2200      	movs	r2, #0
 800163e:	70da      	strb	r2, [r3, #3]
         break;
 8001640:	bf00      	nop
   }
}
 8001642:	bf00      	nop
 8001644:	3710      	adds	r7, #16
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	00010101 	.word	0x00010101
 8001650:	01010001 	.word	0x01010001

08001654 <wizphy_getphystat>:

void wizphy_getphystat(wiz_PhyConf* phyconf)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
   uint8_t tmp = getPHYCFGR();
 800165c:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8001660:	f7fe fdda 	bl	8000218 <WIZCHIP_READ>
 8001664:	4603      	mov	r3, r0
 8001666:	73fb      	strb	r3, [r7, #15]
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
 8001668:	7bfb      	ldrb	r3, [r7, #15]
 800166a:	109b      	asrs	r3, r3, #2
 800166c:	b2db      	uxtb	r3, r3
 800166e:	f003 0301 	and.w	r3, r3, #1
 8001672:	b2da      	uxtb	r2, r3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	70da      	strb	r2, [r3, #3]
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
 8001678:	7bfb      	ldrb	r3, [r7, #15]
 800167a:	105b      	asrs	r3, r3, #1
 800167c:	b2db      	uxtb	r3, r3
 800167e:	f003 0301 	and.w	r3, r3, #1
 8001682:	b2da      	uxtb	r2, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	709a      	strb	r2, [r3, #2]
}
 8001688:	bf00      	nop
 800168a:	3710      	adds	r7, #16
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}

08001690 <wizphy_setphypmode>:

int8_t wizphy_setphypmode(uint8_t pmode)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b084      	sub	sp, #16
 8001694:	af00      	add	r7, sp, #0
 8001696:	4603      	mov	r3, r0
 8001698:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 800169a:	2300      	movs	r3, #0
 800169c:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 800169e:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 80016a2:	f7fe fdb9 	bl	8000218 <WIZCHIP_READ>
 80016a6:	4603      	mov	r3, r0
 80016a8:	73fb      	strb	r3, [r7, #15]
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
 80016aa:	7bfb      	ldrb	r3, [r7, #15]
 80016ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d102      	bne.n	80016ba <wizphy_setphypmode+0x2a>
 80016b4:	f04f 33ff 	mov.w	r3, #4294967295
 80016b8:	e030      	b.n	800171c <wizphy_setphypmode+0x8c>
   tmp &= ~PHYCFGR_OPMDC_ALLA;         
 80016ba:	7bfb      	ldrb	r3, [r7, #15]
 80016bc:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 80016c0:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 80016c2:	79fb      	ldrb	r3, [r7, #7]
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	d104      	bne.n	80016d2 <wizphy_setphypmode+0x42>
      tmp |= PHYCFGR_OPMDC_PDOWN;
 80016c8:	7bfb      	ldrb	r3, [r7, #15]
 80016ca:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 80016ce:	73fb      	strb	r3, [r7, #15]
 80016d0:	e003      	b.n	80016da <wizphy_setphypmode+0x4a>
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
 80016d2:	7bfb      	ldrb	r3, [r7, #15]
 80016d4:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 80016d8:	73fb      	strb	r3, [r7, #15]
   setPHYCFGR(tmp);
 80016da:	7bfb      	ldrb	r3, [r7, #15]
 80016dc:	4619      	mov	r1, r3
 80016de:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 80016e2:	f7fe fde5 	bl	80002b0 <WIZCHIP_WRITE>
   wizphy_reset();
 80016e6:	f7ff fee1 	bl	80014ac <wizphy_reset>
   tmp = getPHYCFGR();
 80016ea:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 80016ee:	f7fe fd93 	bl	8000218 <WIZCHIP_READ>
 80016f2:	4603      	mov	r3, r0
 80016f4:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 80016f6:	79fb      	ldrb	r3, [r7, #7]
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d106      	bne.n	800170a <wizphy_setphypmode+0x7a>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
 80016fc:	7bfb      	ldrb	r3, [r7, #15]
 80016fe:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8001702:	2b00      	cmp	r3, #0
 8001704:	d008      	beq.n	8001718 <wizphy_setphypmode+0x88>
 8001706:	2300      	movs	r3, #0
 8001708:	e008      	b.n	800171c <wizphy_setphypmode+0x8c>
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
 800170a:	7bfb      	ldrb	r3, [r7, #15]
 800170c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <wizphy_setphypmode+0x88>
 8001714:	2300      	movs	r3, #0
 8001716:	e001      	b.n	800171c <wizphy_setphypmode+0x8c>
   }
   return -1;
 8001718:	f04f 33ff 	mov.w	r3, #4294967295
}
 800171c:	4618      	mov	r0, r3
 800171e:	3710      	adds	r7, #16
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}

08001724 <wizchip_setnetinfo>:

#endif

#if (_WIZCHIP_ == W5100 || _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5300 || _WIZCHIP_ == W5500)
void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2206      	movs	r2, #6
 8001730:	4619      	mov	r1, r3
 8001732:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8001736:	f7fe fe69 	bl	800040c <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	330e      	adds	r3, #14
 800173e:	2204      	movs	r2, #4
 8001740:	4619      	mov	r1, r3
 8001742:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001746:	f7fe fe61 	bl	800040c <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	330a      	adds	r3, #10
 800174e:	2204      	movs	r2, #4
 8001750:	4619      	mov	r1, r3
 8001752:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8001756:	f7fe fe59 	bl	800040c <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	3306      	adds	r3, #6
 800175e:	2204      	movs	r2, #4
 8001760:	4619      	mov	r1, r3
 8001762:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8001766:	f7fe fe51 	bl	800040c <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	7c9a      	ldrb	r2, [r3, #18]
 800176e:	4b0b      	ldr	r3, [pc, #44]	@ (800179c <wizchip_setnetinfo+0x78>)
 8001770:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	7cda      	ldrb	r2, [r3, #19]
 8001776:	4b09      	ldr	r3, [pc, #36]	@ (800179c <wizchip_setnetinfo+0x78>)
 8001778:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	7d1a      	ldrb	r2, [r3, #20]
 800177e:	4b07      	ldr	r3, [pc, #28]	@ (800179c <wizchip_setnetinfo+0x78>)
 8001780:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	7d5a      	ldrb	r2, [r3, #21]
 8001786:	4b05      	ldr	r3, [pc, #20]	@ (800179c <wizchip_setnetinfo+0x78>)
 8001788:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	7d9a      	ldrb	r2, [r3, #22]
 800178e:	4b04      	ldr	r3, [pc, #16]	@ (80017a0 <wizchip_setnetinfo+0x7c>)
 8001790:	701a      	strb	r2, [r3, #0]
}
 8001792:	bf00      	nop
 8001794:	3708      	adds	r7, #8
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	20000100 	.word	0x20000100
 80017a0:	20000104 	.word	0x20000104

080017a4 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2206      	movs	r2, #6
 80017b0:	4619      	mov	r1, r3
 80017b2:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 80017b6:	f7fe fdc9 	bl	800034c <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	330e      	adds	r3, #14
 80017be:	2204      	movs	r2, #4
 80017c0:	4619      	mov	r1, r3
 80017c2:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80017c6:	f7fe fdc1 	bl	800034c <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	330a      	adds	r3, #10
 80017ce:	2204      	movs	r2, #4
 80017d0:	4619      	mov	r1, r3
 80017d2:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 80017d6:	f7fe fdb9 	bl	800034c <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	3306      	adds	r3, #6
 80017de:	2204      	movs	r2, #4
 80017e0:	4619      	mov	r1, r3
 80017e2:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 80017e6:	f7fe fdb1 	bl	800034c <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 80017ea:	4b0c      	ldr	r3, [pc, #48]	@ (800181c <wizchip_getnetinfo+0x78>)
 80017ec:	781a      	ldrb	r2, [r3, #0]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 80017f2:	4b0a      	ldr	r3, [pc, #40]	@ (800181c <wizchip_getnetinfo+0x78>)
 80017f4:	785a      	ldrb	r2, [r3, #1]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 80017fa:	4b08      	ldr	r3, [pc, #32]	@ (800181c <wizchip_getnetinfo+0x78>)
 80017fc:	789a      	ldrb	r2, [r3, #2]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 8001802:	4b06      	ldr	r3, [pc, #24]	@ (800181c <wizchip_getnetinfo+0x78>)
 8001804:	78da      	ldrb	r2, [r3, #3]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 800180a:	4b05      	ldr	r3, [pc, #20]	@ (8001820 <wizchip_getnetinfo+0x7c>)
 800180c:	781a      	ldrb	r2, [r3, #0]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	759a      	strb	r2, [r3, #22]
}
 8001812:	bf00      	nop
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	20000100 	.word	0x20000100
 8001820:	20000104 	.word	0x20000104

08001824 <wizchip_setnetmode>:

int8_t wizchip_setnetmode(netmode_type netmode)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b084      	sub	sp, #16
 8001828:	af00      	add	r7, sp, #0
 800182a:	4603      	mov	r3, r0
 800182c:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 800182e:	2300      	movs	r3, #0
 8001830:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ != W5500
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
#else
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
 8001832:	79fb      	ldrb	r3, [r7, #7]
 8001834:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 8001838:	2b00      	cmp	r3, #0
 800183a:	d002      	beq.n	8001842 <wizchip_setnetmode+0x1e>
 800183c:	f04f 33ff 	mov.w	r3, #4294967295
 8001840:	e00e      	b.n	8001860 <wizchip_setnetmode+0x3c>
#endif      
   tmp = getMR();
 8001842:	2000      	movs	r0, #0
 8001844:	f7fe fce8 	bl	8000218 <WIZCHIP_READ>
 8001848:	4603      	mov	r3, r0
 800184a:	73fb      	strb	r3, [r7, #15]
   tmp |= (uint8_t)netmode;
 800184c:	7bfa      	ldrb	r2, [r7, #15]
 800184e:	79fb      	ldrb	r3, [r7, #7]
 8001850:	4313      	orrs	r3, r2
 8001852:	73fb      	strb	r3, [r7, #15]
   setMR(tmp);
 8001854:	7bfb      	ldrb	r3, [r7, #15]
 8001856:	4619      	mov	r1, r3
 8001858:	2000      	movs	r0, #0
 800185a:	f7fe fd29 	bl	80002b0 <WIZCHIP_WRITE>
   return 0;
 800185e:	2300      	movs	r3, #0
}
 8001860:	4618      	mov	r0, r3
 8001862:	3710      	adds	r7, #16
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}

08001868 <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
   return (netmode_type) getMR();
 800186c:	2000      	movs	r0, #0
 800186e:	f7fe fcd3 	bl	8000218 <WIZCHIP_READ>
 8001872:	4603      	mov	r3, r0
}
 8001874:	4618      	mov	r0, r3
 8001876:	bd80      	pop	{r7, pc}

08001878 <wizchip_settimeout>:

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
   setRCR(nettime->retry_cnt);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	4619      	mov	r1, r3
 8001886:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 800188a:	f7fe fd11 	bl	80002b0 <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	885b      	ldrh	r3, [r3, #2]
 8001892:	0a1b      	lsrs	r3, r3, #8
 8001894:	b29b      	uxth	r3, r3
 8001896:	b2db      	uxtb	r3, r3
 8001898:	4619      	mov	r1, r3
 800189a:	f44f 50c8 	mov.w	r0, #6400	@ 0x1900
 800189e:	f7fe fd07 	bl	80002b0 <WIZCHIP_WRITE>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	885b      	ldrh	r3, [r3, #2]
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	4619      	mov	r1, r3
 80018aa:	f44f 50d0 	mov.w	r0, #6656	@ 0x1a00
 80018ae:	f7fe fcff 	bl	80002b0 <WIZCHIP_WRITE>
}
 80018b2:	bf00      	nop
 80018b4:	3708      	adds	r7, #8
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}

080018ba <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
 80018ba:	b590      	push	{r4, r7, lr}
 80018bc:	b083      	sub	sp, #12
 80018be:	af00      	add	r7, sp, #0
 80018c0:	6078      	str	r0, [r7, #4]
   nettime->retry_cnt = getRCR();
 80018c2:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 80018c6:	f7fe fca7 	bl	8000218 <WIZCHIP_READ>
 80018ca:	4603      	mov	r3, r0
 80018cc:	461a      	mov	r2, r3
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	701a      	strb	r2, [r3, #0]
   nettime->time_100us = getRTR();
 80018d2:	f44f 50c8 	mov.w	r0, #6400	@ 0x1900
 80018d6:	f7fe fc9f 	bl	8000218 <WIZCHIP_READ>
 80018da:	4603      	mov	r3, r0
 80018dc:	021b      	lsls	r3, r3, #8
 80018de:	b29c      	uxth	r4, r3
 80018e0:	f44f 50d0 	mov.w	r0, #6656	@ 0x1a00
 80018e4:	f7fe fc98 	bl	8000218 <WIZCHIP_READ>
 80018e8:	4603      	mov	r3, r0
 80018ea:	4423      	add	r3, r4
 80018ec:	b29a      	uxth	r2, r3
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	805a      	strh	r2, [r3, #2]
}
 80018f2:	bf00      	nop
 80018f4:	370c      	adds	r7, #12
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd90      	pop	{r4, r7, pc}
	...

080018fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80018fc:	480d      	ldr	r0, [pc, #52]	@ (8001934 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80018fe:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001900:	f7ff f9c8 	bl	8000c94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001904:	480c      	ldr	r0, [pc, #48]	@ (8001938 <LoopForever+0x6>)
  ldr r1, =_edata
 8001906:	490d      	ldr	r1, [pc, #52]	@ (800193c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001908:	4a0d      	ldr	r2, [pc, #52]	@ (8001940 <LoopForever+0xe>)
  movs r3, #0
 800190a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800190c:	e002      	b.n	8001914 <LoopCopyDataInit>

0800190e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800190e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001910:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001912:	3304      	adds	r3, #4

08001914 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001914:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001916:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001918:	d3f9      	bcc.n	800190e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800191a:	4a0a      	ldr	r2, [pc, #40]	@ (8001944 <LoopForever+0x12>)
  ldr r4, =_ebss
 800191c:	4c0a      	ldr	r4, [pc, #40]	@ (8001948 <LoopForever+0x16>)
  movs r3, #0
 800191e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001920:	e001      	b.n	8001926 <LoopFillZerobss>

08001922 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001922:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001924:	3204      	adds	r2, #4

08001926 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001926:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001928:	d3fb      	bcc.n	8001922 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800192a:	f002 f809 	bl	8003940 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800192e:	f7fe fdcd 	bl	80004cc <main>

08001932 <LoopForever>:

LoopForever:
    b LoopForever
 8001932:	e7fe      	b.n	8001932 <LoopForever>
  ldr   r0, =_estack
 8001934:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001938:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800193c:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001940:	080039b8 	.word	0x080039b8
  ldr r2, =_sbss
 8001944:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8001948:	2000010c 	.word	0x2000010c

0800194c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800194c:	e7fe      	b.n	800194c <ADC1_2_IRQHandler>

0800194e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800194e:	b580      	push	{r7, lr}
 8001950:	b082      	sub	sp, #8
 8001952:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001954:	2300      	movs	r3, #0
 8001956:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001958:	2003      	movs	r0, #3
 800195a:	f000 f93d 	bl	8001bd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800195e:	200f      	movs	r0, #15
 8001960:	f000 f80e 	bl	8001980 <HAL_InitTick>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d002      	beq.n	8001970 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	71fb      	strb	r3, [r7, #7]
 800196e:	e001      	b.n	8001974 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001970:	f7ff f8fa 	bl	8000b68 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001974:	79fb      	ldrb	r3, [r7, #7]

}
 8001976:	4618      	mov	r0, r3
 8001978:	3708      	adds	r7, #8
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
	...

08001980 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b084      	sub	sp, #16
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001988:	2300      	movs	r3, #0
 800198a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800198c:	4b16      	ldr	r3, [pc, #88]	@ (80019e8 <HAL_InitTick+0x68>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d022      	beq.n	80019da <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001994:	4b15      	ldr	r3, [pc, #84]	@ (80019ec <HAL_InitTick+0x6c>)
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	4b13      	ldr	r3, [pc, #76]	@ (80019e8 <HAL_InitTick+0x68>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80019a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80019a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80019a8:	4618      	mov	r0, r3
 80019aa:	f000 f93a 	bl	8001c22 <HAL_SYSTICK_Config>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d10f      	bne.n	80019d4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2b0f      	cmp	r3, #15
 80019b8:	d809      	bhi.n	80019ce <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019ba:	2200      	movs	r2, #0
 80019bc:	6879      	ldr	r1, [r7, #4]
 80019be:	f04f 30ff 	mov.w	r0, #4294967295
 80019c2:	f000 f914 	bl	8001bee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80019c6:	4a0a      	ldr	r2, [pc, #40]	@ (80019f0 <HAL_InitTick+0x70>)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6013      	str	r3, [r2, #0]
 80019cc:	e007      	b.n	80019de <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	73fb      	strb	r3, [r7, #15]
 80019d2:	e004      	b.n	80019de <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	73fb      	strb	r3, [r7, #15]
 80019d8:	e001      	b.n	80019de <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80019de:	7bfb      	ldrb	r3, [r7, #15]
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3710      	adds	r7, #16
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	20000060 	.word	0x20000060
 80019ec:	2000002c 	.word	0x2000002c
 80019f0:	2000005c 	.word	0x2000005c

080019f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019f8:	4b05      	ldr	r3, [pc, #20]	@ (8001a10 <HAL_IncTick+0x1c>)
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	4b05      	ldr	r3, [pc, #20]	@ (8001a14 <HAL_IncTick+0x20>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4413      	add	r3, r2
 8001a02:	4a03      	ldr	r2, [pc, #12]	@ (8001a10 <HAL_IncTick+0x1c>)
 8001a04:	6013      	str	r3, [r2, #0]
}
 8001a06:	bf00      	nop
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr
 8001a10:	20000108 	.word	0x20000108
 8001a14:	20000060 	.word	0x20000060

08001a18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a1c:	4b03      	ldr	r3, [pc, #12]	@ (8001a2c <HAL_GetTick+0x14>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	20000108 	.word	0x20000108

08001a30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b084      	sub	sp, #16
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a38:	f7ff ffee 	bl	8001a18 <HAL_GetTick>
 8001a3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a48:	d004      	beq.n	8001a54 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a4a:	4b09      	ldr	r3, [pc, #36]	@ (8001a70 <HAL_Delay+0x40>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	68fa      	ldr	r2, [r7, #12]
 8001a50:	4413      	add	r3, r2
 8001a52:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a54:	bf00      	nop
 8001a56:	f7ff ffdf 	bl	8001a18 <HAL_GetTick>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	68fa      	ldr	r2, [r7, #12]
 8001a62:	429a      	cmp	r2, r3
 8001a64:	d8f7      	bhi.n	8001a56 <HAL_Delay+0x26>
  {
  }
}
 8001a66:	bf00      	nop
 8001a68:	bf00      	nop
 8001a6a:	3710      	adds	r7, #16
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	20000060 	.word	0x20000060

08001a74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b085      	sub	sp, #20
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	f003 0307 	and.w	r3, r3, #7
 8001a82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a84:	4b0c      	ldr	r3, [pc, #48]	@ (8001ab8 <__NVIC_SetPriorityGrouping+0x44>)
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a8a:	68ba      	ldr	r2, [r7, #8]
 8001a8c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a90:	4013      	ands	r3, r2
 8001a92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a9c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001aa0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001aa4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001aa6:	4a04      	ldr	r2, [pc, #16]	@ (8001ab8 <__NVIC_SetPriorityGrouping+0x44>)
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	60d3      	str	r3, [r2, #12]
}
 8001aac:	bf00      	nop
 8001aae:	3714      	adds	r7, #20
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr
 8001ab8:	e000ed00 	.word	0xe000ed00

08001abc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ac0:	4b04      	ldr	r3, [pc, #16]	@ (8001ad4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	0a1b      	lsrs	r3, r3, #8
 8001ac6:	f003 0307 	and.w	r3, r3, #7
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr
 8001ad4:	e000ed00 	.word	0xe000ed00

08001ad8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	4603      	mov	r3, r0
 8001ae0:	6039      	str	r1, [r7, #0]
 8001ae2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ae4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	db0a      	blt.n	8001b02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	b2da      	uxtb	r2, r3
 8001af0:	490c      	ldr	r1, [pc, #48]	@ (8001b24 <__NVIC_SetPriority+0x4c>)
 8001af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af6:	0112      	lsls	r2, r2, #4
 8001af8:	b2d2      	uxtb	r2, r2
 8001afa:	440b      	add	r3, r1
 8001afc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b00:	e00a      	b.n	8001b18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	b2da      	uxtb	r2, r3
 8001b06:	4908      	ldr	r1, [pc, #32]	@ (8001b28 <__NVIC_SetPriority+0x50>)
 8001b08:	79fb      	ldrb	r3, [r7, #7]
 8001b0a:	f003 030f 	and.w	r3, r3, #15
 8001b0e:	3b04      	subs	r3, #4
 8001b10:	0112      	lsls	r2, r2, #4
 8001b12:	b2d2      	uxtb	r2, r2
 8001b14:	440b      	add	r3, r1
 8001b16:	761a      	strb	r2, [r3, #24]
}
 8001b18:	bf00      	nop
 8001b1a:	370c      	adds	r7, #12
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr
 8001b24:	e000e100 	.word	0xe000e100
 8001b28:	e000ed00 	.word	0xe000ed00

08001b2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b089      	sub	sp, #36	@ 0x24
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	60f8      	str	r0, [r7, #12]
 8001b34:	60b9      	str	r1, [r7, #8]
 8001b36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	f003 0307 	and.w	r3, r3, #7
 8001b3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	f1c3 0307 	rsb	r3, r3, #7
 8001b46:	2b04      	cmp	r3, #4
 8001b48:	bf28      	it	cs
 8001b4a:	2304      	movcs	r3, #4
 8001b4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	3304      	adds	r3, #4
 8001b52:	2b06      	cmp	r3, #6
 8001b54:	d902      	bls.n	8001b5c <NVIC_EncodePriority+0x30>
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	3b03      	subs	r3, #3
 8001b5a:	e000      	b.n	8001b5e <NVIC_EncodePriority+0x32>
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b60:	f04f 32ff 	mov.w	r2, #4294967295
 8001b64:	69bb      	ldr	r3, [r7, #24]
 8001b66:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6a:	43da      	mvns	r2, r3
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	401a      	ands	r2, r3
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b74:	f04f 31ff 	mov.w	r1, #4294967295
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b7e:	43d9      	mvns	r1, r3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b84:	4313      	orrs	r3, r2
         );
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3724      	adds	r7, #36	@ 0x24
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
	...

08001b94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	3b01      	subs	r3, #1
 8001ba0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ba4:	d301      	bcc.n	8001baa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e00f      	b.n	8001bca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001baa:	4a0a      	ldr	r2, [pc, #40]	@ (8001bd4 <SysTick_Config+0x40>)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	3b01      	subs	r3, #1
 8001bb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bb2:	210f      	movs	r1, #15
 8001bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8001bb8:	f7ff ff8e 	bl	8001ad8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bbc:	4b05      	ldr	r3, [pc, #20]	@ (8001bd4 <SysTick_Config+0x40>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bc2:	4b04      	ldr	r3, [pc, #16]	@ (8001bd4 <SysTick_Config+0x40>)
 8001bc4:	2207      	movs	r2, #7
 8001bc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bc8:	2300      	movs	r3, #0
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3708      	adds	r7, #8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	e000e010 	.word	0xe000e010

08001bd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	f7ff ff47 	bl	8001a74 <__NVIC_SetPriorityGrouping>
}
 8001be6:	bf00      	nop
 8001be8:	3708      	adds	r7, #8
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}

08001bee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bee:	b580      	push	{r7, lr}
 8001bf0:	b086      	sub	sp, #24
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	60b9      	str	r1, [r7, #8]
 8001bf8:	607a      	str	r2, [r7, #4]
 8001bfa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001bfc:	f7ff ff5e 	bl	8001abc <__NVIC_GetPriorityGrouping>
 8001c00:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c02:	687a      	ldr	r2, [r7, #4]
 8001c04:	68b9      	ldr	r1, [r7, #8]
 8001c06:	6978      	ldr	r0, [r7, #20]
 8001c08:	f7ff ff90 	bl	8001b2c <NVIC_EncodePriority>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c12:	4611      	mov	r1, r2
 8001c14:	4618      	mov	r0, r3
 8001c16:	f7ff ff5f 	bl	8001ad8 <__NVIC_SetPriority>
}
 8001c1a:	bf00      	nop
 8001c1c:	3718      	adds	r7, #24
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}

08001c22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c22:	b580      	push	{r7, lr}
 8001c24:	b082      	sub	sp, #8
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f7ff ffb2 	bl	8001b94 <SysTick_Config>
 8001c30:	4603      	mov	r3, r0
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3708      	adds	r7, #8
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
	...

08001c3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b087      	sub	sp, #28
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001c46:	2300      	movs	r3, #0
 8001c48:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001c4a:	e15a      	b.n	8001f02 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	2101      	movs	r1, #1
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	fa01 f303 	lsl.w	r3, r1, r3
 8001c58:	4013      	ands	r3, r2
 8001c5a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	f000 814c 	beq.w	8001efc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f003 0303 	and.w	r3, r3, #3
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d005      	beq.n	8001c7c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001c78:	2b02      	cmp	r3, #2
 8001c7a:	d130      	bne.n	8001cde <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	005b      	lsls	r3, r3, #1
 8001c86:	2203      	movs	r2, #3
 8001c88:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8c:	43db      	mvns	r3, r3
 8001c8e:	693a      	ldr	r2, [r7, #16]
 8001c90:	4013      	ands	r3, r2
 8001c92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	68da      	ldr	r2, [r3, #12]
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	005b      	lsls	r3, r3, #1
 8001c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca0:	693a      	ldr	r2, [r7, #16]
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	693a      	ldr	r2, [r7, #16]
 8001caa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cba:	43db      	mvns	r3, r3
 8001cbc:	693a      	ldr	r2, [r7, #16]
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	091b      	lsrs	r3, r3, #4
 8001cc8:	f003 0201 	and.w	r2, r3, #1
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd2:	693a      	ldr	r2, [r7, #16]
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	693a      	ldr	r2, [r7, #16]
 8001cdc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	f003 0303 	and.w	r3, r3, #3
 8001ce6:	2b03      	cmp	r3, #3
 8001ce8:	d017      	beq.n	8001d1a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	68db      	ldr	r3, [r3, #12]
 8001cee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	005b      	lsls	r3, r3, #1
 8001cf4:	2203      	movs	r2, #3
 8001cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfa:	43db      	mvns	r3, r3
 8001cfc:	693a      	ldr	r2, [r7, #16]
 8001cfe:	4013      	ands	r3, r2
 8001d00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	689a      	ldr	r2, [r3, #8]
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	005b      	lsls	r3, r3, #1
 8001d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0e:	693a      	ldr	r2, [r7, #16]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	693a      	ldr	r2, [r7, #16]
 8001d18:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	f003 0303 	and.w	r3, r3, #3
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	d123      	bne.n	8001d6e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	08da      	lsrs	r2, r3, #3
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	3208      	adds	r2, #8
 8001d2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d32:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	f003 0307 	and.w	r3, r3, #7
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	220f      	movs	r2, #15
 8001d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d42:	43db      	mvns	r3, r3
 8001d44:	693a      	ldr	r2, [r7, #16]
 8001d46:	4013      	ands	r3, r2
 8001d48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	691a      	ldr	r2, [r3, #16]
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	f003 0307 	and.w	r3, r3, #7
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5a:	693a      	ldr	r2, [r7, #16]
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	08da      	lsrs	r2, r3, #3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	3208      	adds	r2, #8
 8001d68:	6939      	ldr	r1, [r7, #16]
 8001d6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	005b      	lsls	r3, r3, #1
 8001d78:	2203      	movs	r2, #3
 8001d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7e:	43db      	mvns	r3, r3
 8001d80:	693a      	ldr	r2, [r7, #16]
 8001d82:	4013      	ands	r3, r2
 8001d84:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	f003 0203 	and.w	r2, r3, #3
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	005b      	lsls	r3, r3, #1
 8001d92:	fa02 f303 	lsl.w	r3, r2, r3
 8001d96:	693a      	ldr	r2, [r7, #16]
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	693a      	ldr	r2, [r7, #16]
 8001da0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	f000 80a6 	beq.w	8001efc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001db0:	4b5b      	ldr	r3, [pc, #364]	@ (8001f20 <HAL_GPIO_Init+0x2e4>)
 8001db2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001db4:	4a5a      	ldr	r2, [pc, #360]	@ (8001f20 <HAL_GPIO_Init+0x2e4>)
 8001db6:	f043 0301 	orr.w	r3, r3, #1
 8001dba:	6613      	str	r3, [r2, #96]	@ 0x60
 8001dbc:	4b58      	ldr	r3, [pc, #352]	@ (8001f20 <HAL_GPIO_Init+0x2e4>)
 8001dbe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001dc0:	f003 0301 	and.w	r3, r3, #1
 8001dc4:	60bb      	str	r3, [r7, #8]
 8001dc6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001dc8:	4a56      	ldr	r2, [pc, #344]	@ (8001f24 <HAL_GPIO_Init+0x2e8>)
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	089b      	lsrs	r3, r3, #2
 8001dce:	3302      	adds	r3, #2
 8001dd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dd4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	f003 0303 	and.w	r3, r3, #3
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	220f      	movs	r2, #15
 8001de0:	fa02 f303 	lsl.w	r3, r2, r3
 8001de4:	43db      	mvns	r3, r3
 8001de6:	693a      	ldr	r2, [r7, #16]
 8001de8:	4013      	ands	r3, r2
 8001dea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001df2:	d01f      	beq.n	8001e34 <HAL_GPIO_Init+0x1f8>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	4a4c      	ldr	r2, [pc, #304]	@ (8001f28 <HAL_GPIO_Init+0x2ec>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d019      	beq.n	8001e30 <HAL_GPIO_Init+0x1f4>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	4a4b      	ldr	r2, [pc, #300]	@ (8001f2c <HAL_GPIO_Init+0x2f0>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d013      	beq.n	8001e2c <HAL_GPIO_Init+0x1f0>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	4a4a      	ldr	r2, [pc, #296]	@ (8001f30 <HAL_GPIO_Init+0x2f4>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d00d      	beq.n	8001e28 <HAL_GPIO_Init+0x1ec>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	4a49      	ldr	r2, [pc, #292]	@ (8001f34 <HAL_GPIO_Init+0x2f8>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d007      	beq.n	8001e24 <HAL_GPIO_Init+0x1e8>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	4a48      	ldr	r2, [pc, #288]	@ (8001f38 <HAL_GPIO_Init+0x2fc>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d101      	bne.n	8001e20 <HAL_GPIO_Init+0x1e4>
 8001e1c:	2305      	movs	r3, #5
 8001e1e:	e00a      	b.n	8001e36 <HAL_GPIO_Init+0x1fa>
 8001e20:	2306      	movs	r3, #6
 8001e22:	e008      	b.n	8001e36 <HAL_GPIO_Init+0x1fa>
 8001e24:	2304      	movs	r3, #4
 8001e26:	e006      	b.n	8001e36 <HAL_GPIO_Init+0x1fa>
 8001e28:	2303      	movs	r3, #3
 8001e2a:	e004      	b.n	8001e36 <HAL_GPIO_Init+0x1fa>
 8001e2c:	2302      	movs	r3, #2
 8001e2e:	e002      	b.n	8001e36 <HAL_GPIO_Init+0x1fa>
 8001e30:	2301      	movs	r3, #1
 8001e32:	e000      	b.n	8001e36 <HAL_GPIO_Init+0x1fa>
 8001e34:	2300      	movs	r3, #0
 8001e36:	697a      	ldr	r2, [r7, #20]
 8001e38:	f002 0203 	and.w	r2, r2, #3
 8001e3c:	0092      	lsls	r2, r2, #2
 8001e3e:	4093      	lsls	r3, r2
 8001e40:	693a      	ldr	r2, [r7, #16]
 8001e42:	4313      	orrs	r3, r2
 8001e44:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e46:	4937      	ldr	r1, [pc, #220]	@ (8001f24 <HAL_GPIO_Init+0x2e8>)
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	089b      	lsrs	r3, r3, #2
 8001e4c:	3302      	adds	r3, #2
 8001e4e:	693a      	ldr	r2, [r7, #16]
 8001e50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e54:	4b39      	ldr	r3, [pc, #228]	@ (8001f3c <HAL_GPIO_Init+0x300>)
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	43db      	mvns	r3, r3
 8001e5e:	693a      	ldr	r2, [r7, #16]
 8001e60:	4013      	ands	r3, r2
 8001e62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d003      	beq.n	8001e78 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001e70:	693a      	ldr	r2, [r7, #16]
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001e78:	4a30      	ldr	r2, [pc, #192]	@ (8001f3c <HAL_GPIO_Init+0x300>)
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001e7e:	4b2f      	ldr	r3, [pc, #188]	@ (8001f3c <HAL_GPIO_Init+0x300>)
 8001e80:	68db      	ldr	r3, [r3, #12]
 8001e82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	43db      	mvns	r3, r3
 8001e88:	693a      	ldr	r2, [r7, #16]
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d003      	beq.n	8001ea2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001e9a:	693a      	ldr	r2, [r7, #16]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ea2:	4a26      	ldr	r2, [pc, #152]	@ (8001f3c <HAL_GPIO_Init+0x300>)
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001ea8:	4b24      	ldr	r3, [pc, #144]	@ (8001f3c <HAL_GPIO_Init+0x300>)
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	43db      	mvns	r3, r3
 8001eb2:	693a      	ldr	r2, [r7, #16]
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d003      	beq.n	8001ecc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001ec4:	693a      	ldr	r2, [r7, #16]
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ecc:	4a1b      	ldr	r2, [pc, #108]	@ (8001f3c <HAL_GPIO_Init+0x300>)
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001ed2:	4b1a      	ldr	r3, [pc, #104]	@ (8001f3c <HAL_GPIO_Init+0x300>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	43db      	mvns	r3, r3
 8001edc:	693a      	ldr	r2, [r7, #16]
 8001ede:	4013      	ands	r3, r2
 8001ee0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d003      	beq.n	8001ef6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001eee:	693a      	ldr	r2, [r7, #16]
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001ef6:	4a11      	ldr	r2, [pc, #68]	@ (8001f3c <HAL_GPIO_Init+0x300>)
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	3301      	adds	r3, #1
 8001f00:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	fa22 f303 	lsr.w	r3, r2, r3
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	f47f ae9d 	bne.w	8001c4c <HAL_GPIO_Init+0x10>
  }
}
 8001f12:	bf00      	nop
 8001f14:	bf00      	nop
 8001f16:	371c      	adds	r7, #28
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr
 8001f20:	40021000 	.word	0x40021000
 8001f24:	40010000 	.word	0x40010000
 8001f28:	48000400 	.word	0x48000400
 8001f2c:	48000800 	.word	0x48000800
 8001f30:	48000c00 	.word	0x48000c00
 8001f34:	48001000 	.word	0x48001000
 8001f38:	48001400 	.word	0x48001400
 8001f3c:	40010400 	.word	0x40010400

08001f40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	460b      	mov	r3, r1
 8001f4a:	807b      	strh	r3, [r7, #2]
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f50:	787b      	ldrb	r3, [r7, #1]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d003      	beq.n	8001f5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f56:	887a      	ldrh	r2, [r7, #2]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f5c:	e002      	b.n	8001f64 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f5e:	887a      	ldrh	r2, [r7, #2]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001f64:	bf00      	nop
 8001f66:	370c      	adds	r7, #12
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr

08001f70 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b085      	sub	sp, #20
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d141      	bne.n	8002002 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001f7e:	4b4b      	ldr	r3, [pc, #300]	@ (80020ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001f86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f8a:	d131      	bne.n	8001ff0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f8c:	4b47      	ldr	r3, [pc, #284]	@ (80020ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001f92:	4a46      	ldr	r2, [pc, #280]	@ (80020ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001f98:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f9c:	4b43      	ldr	r3, [pc, #268]	@ (80020ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001fa4:	4a41      	ldr	r2, [pc, #260]	@ (80020ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fa6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001faa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001fac:	4b40      	ldr	r3, [pc, #256]	@ (80020b0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	2232      	movs	r2, #50	@ 0x32
 8001fb2:	fb02 f303 	mul.w	r3, r2, r3
 8001fb6:	4a3f      	ldr	r2, [pc, #252]	@ (80020b4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001fb8:	fba2 2303 	umull	r2, r3, r2, r3
 8001fbc:	0c9b      	lsrs	r3, r3, #18
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fc2:	e002      	b.n	8001fca <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	3b01      	subs	r3, #1
 8001fc8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fca:	4b38      	ldr	r3, [pc, #224]	@ (80020ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fcc:	695b      	ldr	r3, [r3, #20]
 8001fce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fd2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001fd6:	d102      	bne.n	8001fde <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d1f2      	bne.n	8001fc4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001fde:	4b33      	ldr	r3, [pc, #204]	@ (80020ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fe0:	695b      	ldr	r3, [r3, #20]
 8001fe2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fe6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001fea:	d158      	bne.n	800209e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001fec:	2303      	movs	r3, #3
 8001fee:	e057      	b.n	80020a0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ff0:	4b2e      	ldr	r3, [pc, #184]	@ (80020ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ff2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001ff6:	4a2d      	ldr	r2, [pc, #180]	@ (80020ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ff8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001ffc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002000:	e04d      	b.n	800209e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002008:	d141      	bne.n	800208e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800200a:	4b28      	ldr	r3, [pc, #160]	@ (80020ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002012:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002016:	d131      	bne.n	800207c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002018:	4b24      	ldr	r3, [pc, #144]	@ (80020ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800201a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800201e:	4a23      	ldr	r2, [pc, #140]	@ (80020ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002020:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002024:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002028:	4b20      	ldr	r3, [pc, #128]	@ (80020ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002030:	4a1e      	ldr	r2, [pc, #120]	@ (80020ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002032:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002036:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002038:	4b1d      	ldr	r3, [pc, #116]	@ (80020b0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	2232      	movs	r2, #50	@ 0x32
 800203e:	fb02 f303 	mul.w	r3, r2, r3
 8002042:	4a1c      	ldr	r2, [pc, #112]	@ (80020b4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002044:	fba2 2303 	umull	r2, r3, r2, r3
 8002048:	0c9b      	lsrs	r3, r3, #18
 800204a:	3301      	adds	r3, #1
 800204c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800204e:	e002      	b.n	8002056 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	3b01      	subs	r3, #1
 8002054:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002056:	4b15      	ldr	r3, [pc, #84]	@ (80020ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002058:	695b      	ldr	r3, [r3, #20]
 800205a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800205e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002062:	d102      	bne.n	800206a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d1f2      	bne.n	8002050 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800206a:	4b10      	ldr	r3, [pc, #64]	@ (80020ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800206c:	695b      	ldr	r3, [r3, #20]
 800206e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002072:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002076:	d112      	bne.n	800209e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002078:	2303      	movs	r3, #3
 800207a:	e011      	b.n	80020a0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800207c:	4b0b      	ldr	r3, [pc, #44]	@ (80020ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800207e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002082:	4a0a      	ldr	r2, [pc, #40]	@ (80020ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002084:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002088:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800208c:	e007      	b.n	800209e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800208e:	4b07      	ldr	r3, [pc, #28]	@ (80020ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002096:	4a05      	ldr	r2, [pc, #20]	@ (80020ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002098:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800209c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800209e:	2300      	movs	r3, #0
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	3714      	adds	r7, #20
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr
 80020ac:	40007000 	.word	0x40007000
 80020b0:	2000002c 	.word	0x2000002c
 80020b4:	431bde83 	.word	0x431bde83

080020b8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80020bc:	4b05      	ldr	r3, [pc, #20]	@ (80020d4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	4a04      	ldr	r2, [pc, #16]	@ (80020d4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80020c2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020c6:	6093      	str	r3, [r2, #8]
}
 80020c8:	bf00      	nop
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr
 80020d2:	bf00      	nop
 80020d4:	40007000 	.word	0x40007000

080020d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b088      	sub	sp, #32
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d101      	bne.n	80020ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e2fe      	b.n	80026e8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0301 	and.w	r3, r3, #1
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d075      	beq.n	80021e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020f6:	4b97      	ldr	r3, [pc, #604]	@ (8002354 <HAL_RCC_OscConfig+0x27c>)
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	f003 030c 	and.w	r3, r3, #12
 80020fe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002100:	4b94      	ldr	r3, [pc, #592]	@ (8002354 <HAL_RCC_OscConfig+0x27c>)
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	f003 0303 	and.w	r3, r3, #3
 8002108:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800210a:	69bb      	ldr	r3, [r7, #24]
 800210c:	2b0c      	cmp	r3, #12
 800210e:	d102      	bne.n	8002116 <HAL_RCC_OscConfig+0x3e>
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	2b03      	cmp	r3, #3
 8002114:	d002      	beq.n	800211c <HAL_RCC_OscConfig+0x44>
 8002116:	69bb      	ldr	r3, [r7, #24]
 8002118:	2b08      	cmp	r3, #8
 800211a:	d10b      	bne.n	8002134 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800211c:	4b8d      	ldr	r3, [pc, #564]	@ (8002354 <HAL_RCC_OscConfig+0x27c>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002124:	2b00      	cmp	r3, #0
 8002126:	d05b      	beq.n	80021e0 <HAL_RCC_OscConfig+0x108>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d157      	bne.n	80021e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	e2d9      	b.n	80026e8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800213c:	d106      	bne.n	800214c <HAL_RCC_OscConfig+0x74>
 800213e:	4b85      	ldr	r3, [pc, #532]	@ (8002354 <HAL_RCC_OscConfig+0x27c>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a84      	ldr	r2, [pc, #528]	@ (8002354 <HAL_RCC_OscConfig+0x27c>)
 8002144:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002148:	6013      	str	r3, [r2, #0]
 800214a:	e01d      	b.n	8002188 <HAL_RCC_OscConfig+0xb0>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002154:	d10c      	bne.n	8002170 <HAL_RCC_OscConfig+0x98>
 8002156:	4b7f      	ldr	r3, [pc, #508]	@ (8002354 <HAL_RCC_OscConfig+0x27c>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a7e      	ldr	r2, [pc, #504]	@ (8002354 <HAL_RCC_OscConfig+0x27c>)
 800215c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002160:	6013      	str	r3, [r2, #0]
 8002162:	4b7c      	ldr	r3, [pc, #496]	@ (8002354 <HAL_RCC_OscConfig+0x27c>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a7b      	ldr	r2, [pc, #492]	@ (8002354 <HAL_RCC_OscConfig+0x27c>)
 8002168:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800216c:	6013      	str	r3, [r2, #0]
 800216e:	e00b      	b.n	8002188 <HAL_RCC_OscConfig+0xb0>
 8002170:	4b78      	ldr	r3, [pc, #480]	@ (8002354 <HAL_RCC_OscConfig+0x27c>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a77      	ldr	r2, [pc, #476]	@ (8002354 <HAL_RCC_OscConfig+0x27c>)
 8002176:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800217a:	6013      	str	r3, [r2, #0]
 800217c:	4b75      	ldr	r3, [pc, #468]	@ (8002354 <HAL_RCC_OscConfig+0x27c>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a74      	ldr	r2, [pc, #464]	@ (8002354 <HAL_RCC_OscConfig+0x27c>)
 8002182:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002186:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d013      	beq.n	80021b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002190:	f7ff fc42 	bl	8001a18 <HAL_GetTick>
 8002194:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002196:	e008      	b.n	80021aa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002198:	f7ff fc3e 	bl	8001a18 <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	2b64      	cmp	r3, #100	@ 0x64
 80021a4:	d901      	bls.n	80021aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80021a6:	2303      	movs	r3, #3
 80021a8:	e29e      	b.n	80026e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021aa:	4b6a      	ldr	r3, [pc, #424]	@ (8002354 <HAL_RCC_OscConfig+0x27c>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d0f0      	beq.n	8002198 <HAL_RCC_OscConfig+0xc0>
 80021b6:	e014      	b.n	80021e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b8:	f7ff fc2e 	bl	8001a18 <HAL_GetTick>
 80021bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021be:	e008      	b.n	80021d2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021c0:	f7ff fc2a 	bl	8001a18 <HAL_GetTick>
 80021c4:	4602      	mov	r2, r0
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	2b64      	cmp	r3, #100	@ 0x64
 80021cc:	d901      	bls.n	80021d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	e28a      	b.n	80026e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021d2:	4b60      	ldr	r3, [pc, #384]	@ (8002354 <HAL_RCC_OscConfig+0x27c>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d1f0      	bne.n	80021c0 <HAL_RCC_OscConfig+0xe8>
 80021de:	e000      	b.n	80021e2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 0302 	and.w	r3, r3, #2
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d075      	beq.n	80022da <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021ee:	4b59      	ldr	r3, [pc, #356]	@ (8002354 <HAL_RCC_OscConfig+0x27c>)
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	f003 030c 	and.w	r3, r3, #12
 80021f6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021f8:	4b56      	ldr	r3, [pc, #344]	@ (8002354 <HAL_RCC_OscConfig+0x27c>)
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	f003 0303 	and.w	r3, r3, #3
 8002200:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002202:	69bb      	ldr	r3, [r7, #24]
 8002204:	2b0c      	cmp	r3, #12
 8002206:	d102      	bne.n	800220e <HAL_RCC_OscConfig+0x136>
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	2b02      	cmp	r3, #2
 800220c:	d002      	beq.n	8002214 <HAL_RCC_OscConfig+0x13c>
 800220e:	69bb      	ldr	r3, [r7, #24]
 8002210:	2b04      	cmp	r3, #4
 8002212:	d11f      	bne.n	8002254 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002214:	4b4f      	ldr	r3, [pc, #316]	@ (8002354 <HAL_RCC_OscConfig+0x27c>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800221c:	2b00      	cmp	r3, #0
 800221e:	d005      	beq.n	800222c <HAL_RCC_OscConfig+0x154>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d101      	bne.n	800222c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e25d      	b.n	80026e8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800222c:	4b49      	ldr	r3, [pc, #292]	@ (8002354 <HAL_RCC_OscConfig+0x27c>)
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	691b      	ldr	r3, [r3, #16]
 8002238:	061b      	lsls	r3, r3, #24
 800223a:	4946      	ldr	r1, [pc, #280]	@ (8002354 <HAL_RCC_OscConfig+0x27c>)
 800223c:	4313      	orrs	r3, r2
 800223e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002240:	4b45      	ldr	r3, [pc, #276]	@ (8002358 <HAL_RCC_OscConfig+0x280>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4618      	mov	r0, r3
 8002246:	f7ff fb9b 	bl	8001980 <HAL_InitTick>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d043      	beq.n	80022d8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	e249      	b.n	80026e8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d023      	beq.n	80022a4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800225c:	4b3d      	ldr	r3, [pc, #244]	@ (8002354 <HAL_RCC_OscConfig+0x27c>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a3c      	ldr	r2, [pc, #240]	@ (8002354 <HAL_RCC_OscConfig+0x27c>)
 8002262:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002266:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002268:	f7ff fbd6 	bl	8001a18 <HAL_GetTick>
 800226c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800226e:	e008      	b.n	8002282 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002270:	f7ff fbd2 	bl	8001a18 <HAL_GetTick>
 8002274:	4602      	mov	r2, r0
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	2b02      	cmp	r3, #2
 800227c:	d901      	bls.n	8002282 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800227e:	2303      	movs	r3, #3
 8002280:	e232      	b.n	80026e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002282:	4b34      	ldr	r3, [pc, #208]	@ (8002354 <HAL_RCC_OscConfig+0x27c>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800228a:	2b00      	cmp	r3, #0
 800228c:	d0f0      	beq.n	8002270 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800228e:	4b31      	ldr	r3, [pc, #196]	@ (8002354 <HAL_RCC_OscConfig+0x27c>)
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	691b      	ldr	r3, [r3, #16]
 800229a:	061b      	lsls	r3, r3, #24
 800229c:	492d      	ldr	r1, [pc, #180]	@ (8002354 <HAL_RCC_OscConfig+0x27c>)
 800229e:	4313      	orrs	r3, r2
 80022a0:	604b      	str	r3, [r1, #4]
 80022a2:	e01a      	b.n	80022da <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022a4:	4b2b      	ldr	r3, [pc, #172]	@ (8002354 <HAL_RCC_OscConfig+0x27c>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a2a      	ldr	r2, [pc, #168]	@ (8002354 <HAL_RCC_OscConfig+0x27c>)
 80022aa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80022ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022b0:	f7ff fbb2 	bl	8001a18 <HAL_GetTick>
 80022b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80022b6:	e008      	b.n	80022ca <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022b8:	f7ff fbae 	bl	8001a18 <HAL_GetTick>
 80022bc:	4602      	mov	r2, r0
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d901      	bls.n	80022ca <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80022c6:	2303      	movs	r3, #3
 80022c8:	e20e      	b.n	80026e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80022ca:	4b22      	ldr	r3, [pc, #136]	@ (8002354 <HAL_RCC_OscConfig+0x27c>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d1f0      	bne.n	80022b8 <HAL_RCC_OscConfig+0x1e0>
 80022d6:	e000      	b.n	80022da <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022d8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0308 	and.w	r3, r3, #8
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d041      	beq.n	800236a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	695b      	ldr	r3, [r3, #20]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d01c      	beq.n	8002328 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022ee:	4b19      	ldr	r3, [pc, #100]	@ (8002354 <HAL_RCC_OscConfig+0x27c>)
 80022f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022f4:	4a17      	ldr	r2, [pc, #92]	@ (8002354 <HAL_RCC_OscConfig+0x27c>)
 80022f6:	f043 0301 	orr.w	r3, r3, #1
 80022fa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022fe:	f7ff fb8b 	bl	8001a18 <HAL_GetTick>
 8002302:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002304:	e008      	b.n	8002318 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002306:	f7ff fb87 	bl	8001a18 <HAL_GetTick>
 800230a:	4602      	mov	r2, r0
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	2b02      	cmp	r3, #2
 8002312:	d901      	bls.n	8002318 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002314:	2303      	movs	r3, #3
 8002316:	e1e7      	b.n	80026e8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002318:	4b0e      	ldr	r3, [pc, #56]	@ (8002354 <HAL_RCC_OscConfig+0x27c>)
 800231a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800231e:	f003 0302 	and.w	r3, r3, #2
 8002322:	2b00      	cmp	r3, #0
 8002324:	d0ef      	beq.n	8002306 <HAL_RCC_OscConfig+0x22e>
 8002326:	e020      	b.n	800236a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002328:	4b0a      	ldr	r3, [pc, #40]	@ (8002354 <HAL_RCC_OscConfig+0x27c>)
 800232a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800232e:	4a09      	ldr	r2, [pc, #36]	@ (8002354 <HAL_RCC_OscConfig+0x27c>)
 8002330:	f023 0301 	bic.w	r3, r3, #1
 8002334:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002338:	f7ff fb6e 	bl	8001a18 <HAL_GetTick>
 800233c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800233e:	e00d      	b.n	800235c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002340:	f7ff fb6a 	bl	8001a18 <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	2b02      	cmp	r3, #2
 800234c:	d906      	bls.n	800235c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800234e:	2303      	movs	r3, #3
 8002350:	e1ca      	b.n	80026e8 <HAL_RCC_OscConfig+0x610>
 8002352:	bf00      	nop
 8002354:	40021000 	.word	0x40021000
 8002358:	2000005c 	.word	0x2000005c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800235c:	4b8c      	ldr	r3, [pc, #560]	@ (8002590 <HAL_RCC_OscConfig+0x4b8>)
 800235e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002362:	f003 0302 	and.w	r3, r3, #2
 8002366:	2b00      	cmp	r3, #0
 8002368:	d1ea      	bne.n	8002340 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 0304 	and.w	r3, r3, #4
 8002372:	2b00      	cmp	r3, #0
 8002374:	f000 80a6 	beq.w	80024c4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002378:	2300      	movs	r3, #0
 800237a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800237c:	4b84      	ldr	r3, [pc, #528]	@ (8002590 <HAL_RCC_OscConfig+0x4b8>)
 800237e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002380:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d101      	bne.n	800238c <HAL_RCC_OscConfig+0x2b4>
 8002388:	2301      	movs	r3, #1
 800238a:	e000      	b.n	800238e <HAL_RCC_OscConfig+0x2b6>
 800238c:	2300      	movs	r3, #0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d00d      	beq.n	80023ae <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002392:	4b7f      	ldr	r3, [pc, #508]	@ (8002590 <HAL_RCC_OscConfig+0x4b8>)
 8002394:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002396:	4a7e      	ldr	r2, [pc, #504]	@ (8002590 <HAL_RCC_OscConfig+0x4b8>)
 8002398:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800239c:	6593      	str	r3, [r2, #88]	@ 0x58
 800239e:	4b7c      	ldr	r3, [pc, #496]	@ (8002590 <HAL_RCC_OscConfig+0x4b8>)
 80023a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023a6:	60fb      	str	r3, [r7, #12]
 80023a8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80023aa:	2301      	movs	r3, #1
 80023ac:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023ae:	4b79      	ldr	r3, [pc, #484]	@ (8002594 <HAL_RCC_OscConfig+0x4bc>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d118      	bne.n	80023ec <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023ba:	4b76      	ldr	r3, [pc, #472]	@ (8002594 <HAL_RCC_OscConfig+0x4bc>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a75      	ldr	r2, [pc, #468]	@ (8002594 <HAL_RCC_OscConfig+0x4bc>)
 80023c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023c6:	f7ff fb27 	bl	8001a18 <HAL_GetTick>
 80023ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023cc:	e008      	b.n	80023e0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023ce:	f7ff fb23 	bl	8001a18 <HAL_GetTick>
 80023d2:	4602      	mov	r2, r0
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	2b02      	cmp	r3, #2
 80023da:	d901      	bls.n	80023e0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80023dc:	2303      	movs	r3, #3
 80023de:	e183      	b.n	80026e8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023e0:	4b6c      	ldr	r3, [pc, #432]	@ (8002594 <HAL_RCC_OscConfig+0x4bc>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d0f0      	beq.n	80023ce <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d108      	bne.n	8002406 <HAL_RCC_OscConfig+0x32e>
 80023f4:	4b66      	ldr	r3, [pc, #408]	@ (8002590 <HAL_RCC_OscConfig+0x4b8>)
 80023f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023fa:	4a65      	ldr	r2, [pc, #404]	@ (8002590 <HAL_RCC_OscConfig+0x4b8>)
 80023fc:	f043 0301 	orr.w	r3, r3, #1
 8002400:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002404:	e024      	b.n	8002450 <HAL_RCC_OscConfig+0x378>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	2b05      	cmp	r3, #5
 800240c:	d110      	bne.n	8002430 <HAL_RCC_OscConfig+0x358>
 800240e:	4b60      	ldr	r3, [pc, #384]	@ (8002590 <HAL_RCC_OscConfig+0x4b8>)
 8002410:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002414:	4a5e      	ldr	r2, [pc, #376]	@ (8002590 <HAL_RCC_OscConfig+0x4b8>)
 8002416:	f043 0304 	orr.w	r3, r3, #4
 800241a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800241e:	4b5c      	ldr	r3, [pc, #368]	@ (8002590 <HAL_RCC_OscConfig+0x4b8>)
 8002420:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002424:	4a5a      	ldr	r2, [pc, #360]	@ (8002590 <HAL_RCC_OscConfig+0x4b8>)
 8002426:	f043 0301 	orr.w	r3, r3, #1
 800242a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800242e:	e00f      	b.n	8002450 <HAL_RCC_OscConfig+0x378>
 8002430:	4b57      	ldr	r3, [pc, #348]	@ (8002590 <HAL_RCC_OscConfig+0x4b8>)
 8002432:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002436:	4a56      	ldr	r2, [pc, #344]	@ (8002590 <HAL_RCC_OscConfig+0x4b8>)
 8002438:	f023 0301 	bic.w	r3, r3, #1
 800243c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002440:	4b53      	ldr	r3, [pc, #332]	@ (8002590 <HAL_RCC_OscConfig+0x4b8>)
 8002442:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002446:	4a52      	ldr	r2, [pc, #328]	@ (8002590 <HAL_RCC_OscConfig+0x4b8>)
 8002448:	f023 0304 	bic.w	r3, r3, #4
 800244c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d016      	beq.n	8002486 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002458:	f7ff fade 	bl	8001a18 <HAL_GetTick>
 800245c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800245e:	e00a      	b.n	8002476 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002460:	f7ff fada 	bl	8001a18 <HAL_GetTick>
 8002464:	4602      	mov	r2, r0
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800246e:	4293      	cmp	r3, r2
 8002470:	d901      	bls.n	8002476 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	e138      	b.n	80026e8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002476:	4b46      	ldr	r3, [pc, #280]	@ (8002590 <HAL_RCC_OscConfig+0x4b8>)
 8002478:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800247c:	f003 0302 	and.w	r3, r3, #2
 8002480:	2b00      	cmp	r3, #0
 8002482:	d0ed      	beq.n	8002460 <HAL_RCC_OscConfig+0x388>
 8002484:	e015      	b.n	80024b2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002486:	f7ff fac7 	bl	8001a18 <HAL_GetTick>
 800248a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800248c:	e00a      	b.n	80024a4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800248e:	f7ff fac3 	bl	8001a18 <HAL_GetTick>
 8002492:	4602      	mov	r2, r0
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	1ad3      	subs	r3, r2, r3
 8002498:	f241 3288 	movw	r2, #5000	@ 0x1388
 800249c:	4293      	cmp	r3, r2
 800249e:	d901      	bls.n	80024a4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80024a0:	2303      	movs	r3, #3
 80024a2:	e121      	b.n	80026e8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80024a4:	4b3a      	ldr	r3, [pc, #232]	@ (8002590 <HAL_RCC_OscConfig+0x4b8>)
 80024a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024aa:	f003 0302 	and.w	r3, r3, #2
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d1ed      	bne.n	800248e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80024b2:	7ffb      	ldrb	r3, [r7, #31]
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d105      	bne.n	80024c4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024b8:	4b35      	ldr	r3, [pc, #212]	@ (8002590 <HAL_RCC_OscConfig+0x4b8>)
 80024ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024bc:	4a34      	ldr	r2, [pc, #208]	@ (8002590 <HAL_RCC_OscConfig+0x4b8>)
 80024be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80024c2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 0320 	and.w	r3, r3, #32
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d03c      	beq.n	800254a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	699b      	ldr	r3, [r3, #24]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d01c      	beq.n	8002512 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80024d8:	4b2d      	ldr	r3, [pc, #180]	@ (8002590 <HAL_RCC_OscConfig+0x4b8>)
 80024da:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80024de:	4a2c      	ldr	r2, [pc, #176]	@ (8002590 <HAL_RCC_OscConfig+0x4b8>)
 80024e0:	f043 0301 	orr.w	r3, r3, #1
 80024e4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024e8:	f7ff fa96 	bl	8001a18 <HAL_GetTick>
 80024ec:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80024ee:	e008      	b.n	8002502 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80024f0:	f7ff fa92 	bl	8001a18 <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	d901      	bls.n	8002502 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80024fe:	2303      	movs	r3, #3
 8002500:	e0f2      	b.n	80026e8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002502:	4b23      	ldr	r3, [pc, #140]	@ (8002590 <HAL_RCC_OscConfig+0x4b8>)
 8002504:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002508:	f003 0302 	and.w	r3, r3, #2
 800250c:	2b00      	cmp	r3, #0
 800250e:	d0ef      	beq.n	80024f0 <HAL_RCC_OscConfig+0x418>
 8002510:	e01b      	b.n	800254a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002512:	4b1f      	ldr	r3, [pc, #124]	@ (8002590 <HAL_RCC_OscConfig+0x4b8>)
 8002514:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002518:	4a1d      	ldr	r2, [pc, #116]	@ (8002590 <HAL_RCC_OscConfig+0x4b8>)
 800251a:	f023 0301 	bic.w	r3, r3, #1
 800251e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002522:	f7ff fa79 	bl	8001a18 <HAL_GetTick>
 8002526:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002528:	e008      	b.n	800253c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800252a:	f7ff fa75 	bl	8001a18 <HAL_GetTick>
 800252e:	4602      	mov	r2, r0
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	2b02      	cmp	r3, #2
 8002536:	d901      	bls.n	800253c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002538:	2303      	movs	r3, #3
 800253a:	e0d5      	b.n	80026e8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800253c:	4b14      	ldr	r3, [pc, #80]	@ (8002590 <HAL_RCC_OscConfig+0x4b8>)
 800253e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002542:	f003 0302 	and.w	r3, r3, #2
 8002546:	2b00      	cmp	r3, #0
 8002548:	d1ef      	bne.n	800252a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	69db      	ldr	r3, [r3, #28]
 800254e:	2b00      	cmp	r3, #0
 8002550:	f000 80c9 	beq.w	80026e6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002554:	4b0e      	ldr	r3, [pc, #56]	@ (8002590 <HAL_RCC_OscConfig+0x4b8>)
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	f003 030c 	and.w	r3, r3, #12
 800255c:	2b0c      	cmp	r3, #12
 800255e:	f000 8083 	beq.w	8002668 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	69db      	ldr	r3, [r3, #28]
 8002566:	2b02      	cmp	r3, #2
 8002568:	d15e      	bne.n	8002628 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800256a:	4b09      	ldr	r3, [pc, #36]	@ (8002590 <HAL_RCC_OscConfig+0x4b8>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a08      	ldr	r2, [pc, #32]	@ (8002590 <HAL_RCC_OscConfig+0x4b8>)
 8002570:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002574:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002576:	f7ff fa4f 	bl	8001a18 <HAL_GetTick>
 800257a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800257c:	e00c      	b.n	8002598 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800257e:	f7ff fa4b 	bl	8001a18 <HAL_GetTick>
 8002582:	4602      	mov	r2, r0
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	1ad3      	subs	r3, r2, r3
 8002588:	2b02      	cmp	r3, #2
 800258a:	d905      	bls.n	8002598 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800258c:	2303      	movs	r3, #3
 800258e:	e0ab      	b.n	80026e8 <HAL_RCC_OscConfig+0x610>
 8002590:	40021000 	.word	0x40021000
 8002594:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002598:	4b55      	ldr	r3, [pc, #340]	@ (80026f0 <HAL_RCC_OscConfig+0x618>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d1ec      	bne.n	800257e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025a4:	4b52      	ldr	r3, [pc, #328]	@ (80026f0 <HAL_RCC_OscConfig+0x618>)
 80025a6:	68da      	ldr	r2, [r3, #12]
 80025a8:	4b52      	ldr	r3, [pc, #328]	@ (80026f4 <HAL_RCC_OscConfig+0x61c>)
 80025aa:	4013      	ands	r3, r2
 80025ac:	687a      	ldr	r2, [r7, #4]
 80025ae:	6a11      	ldr	r1, [r2, #32]
 80025b0:	687a      	ldr	r2, [r7, #4]
 80025b2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80025b4:	3a01      	subs	r2, #1
 80025b6:	0112      	lsls	r2, r2, #4
 80025b8:	4311      	orrs	r1, r2
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80025be:	0212      	lsls	r2, r2, #8
 80025c0:	4311      	orrs	r1, r2
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80025c6:	0852      	lsrs	r2, r2, #1
 80025c8:	3a01      	subs	r2, #1
 80025ca:	0552      	lsls	r2, r2, #21
 80025cc:	4311      	orrs	r1, r2
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80025d2:	0852      	lsrs	r2, r2, #1
 80025d4:	3a01      	subs	r2, #1
 80025d6:	0652      	lsls	r2, r2, #25
 80025d8:	4311      	orrs	r1, r2
 80025da:	687a      	ldr	r2, [r7, #4]
 80025dc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80025de:	06d2      	lsls	r2, r2, #27
 80025e0:	430a      	orrs	r2, r1
 80025e2:	4943      	ldr	r1, [pc, #268]	@ (80026f0 <HAL_RCC_OscConfig+0x618>)
 80025e4:	4313      	orrs	r3, r2
 80025e6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025e8:	4b41      	ldr	r3, [pc, #260]	@ (80026f0 <HAL_RCC_OscConfig+0x618>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a40      	ldr	r2, [pc, #256]	@ (80026f0 <HAL_RCC_OscConfig+0x618>)
 80025ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80025f2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80025f4:	4b3e      	ldr	r3, [pc, #248]	@ (80026f0 <HAL_RCC_OscConfig+0x618>)
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	4a3d      	ldr	r2, [pc, #244]	@ (80026f0 <HAL_RCC_OscConfig+0x618>)
 80025fa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80025fe:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002600:	f7ff fa0a 	bl	8001a18 <HAL_GetTick>
 8002604:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002606:	e008      	b.n	800261a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002608:	f7ff fa06 	bl	8001a18 <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	2b02      	cmp	r3, #2
 8002614:	d901      	bls.n	800261a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e066      	b.n	80026e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800261a:	4b35      	ldr	r3, [pc, #212]	@ (80026f0 <HAL_RCC_OscConfig+0x618>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d0f0      	beq.n	8002608 <HAL_RCC_OscConfig+0x530>
 8002626:	e05e      	b.n	80026e6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002628:	4b31      	ldr	r3, [pc, #196]	@ (80026f0 <HAL_RCC_OscConfig+0x618>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a30      	ldr	r2, [pc, #192]	@ (80026f0 <HAL_RCC_OscConfig+0x618>)
 800262e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002632:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002634:	f7ff f9f0 	bl	8001a18 <HAL_GetTick>
 8002638:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800263a:	e008      	b.n	800264e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800263c:	f7ff f9ec 	bl	8001a18 <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	2b02      	cmp	r3, #2
 8002648:	d901      	bls.n	800264e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800264a:	2303      	movs	r3, #3
 800264c:	e04c      	b.n	80026e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800264e:	4b28      	ldr	r3, [pc, #160]	@ (80026f0 <HAL_RCC_OscConfig+0x618>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d1f0      	bne.n	800263c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800265a:	4b25      	ldr	r3, [pc, #148]	@ (80026f0 <HAL_RCC_OscConfig+0x618>)
 800265c:	68da      	ldr	r2, [r3, #12]
 800265e:	4924      	ldr	r1, [pc, #144]	@ (80026f0 <HAL_RCC_OscConfig+0x618>)
 8002660:	4b25      	ldr	r3, [pc, #148]	@ (80026f8 <HAL_RCC_OscConfig+0x620>)
 8002662:	4013      	ands	r3, r2
 8002664:	60cb      	str	r3, [r1, #12]
 8002666:	e03e      	b.n	80026e6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	69db      	ldr	r3, [r3, #28]
 800266c:	2b01      	cmp	r3, #1
 800266e:	d101      	bne.n	8002674 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e039      	b.n	80026e8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002674:	4b1e      	ldr	r3, [pc, #120]	@ (80026f0 <HAL_RCC_OscConfig+0x618>)
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	f003 0203 	and.w	r2, r3, #3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6a1b      	ldr	r3, [r3, #32]
 8002684:	429a      	cmp	r2, r3
 8002686:	d12c      	bne.n	80026e2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002692:	3b01      	subs	r3, #1
 8002694:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002696:	429a      	cmp	r2, r3
 8002698:	d123      	bne.n	80026e2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026a4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d11b      	bne.n	80026e2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026b4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d113      	bne.n	80026e2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026c4:	085b      	lsrs	r3, r3, #1
 80026c6:	3b01      	subs	r3, #1
 80026c8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d109      	bne.n	80026e2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026d8:	085b      	lsrs	r3, r3, #1
 80026da:	3b01      	subs	r3, #1
 80026dc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026de:	429a      	cmp	r2, r3
 80026e0:	d001      	beq.n	80026e6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e000      	b.n	80026e8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80026e6:	2300      	movs	r3, #0
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3720      	adds	r7, #32
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	40021000 	.word	0x40021000
 80026f4:	019f800c 	.word	0x019f800c
 80026f8:	feeefffc 	.word	0xfeeefffc

080026fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b086      	sub	sp, #24
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002706:	2300      	movs	r3, #0
 8002708:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d101      	bne.n	8002714 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	e11e      	b.n	8002952 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002714:	4b91      	ldr	r3, [pc, #580]	@ (800295c <HAL_RCC_ClockConfig+0x260>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 030f 	and.w	r3, r3, #15
 800271c:	683a      	ldr	r2, [r7, #0]
 800271e:	429a      	cmp	r2, r3
 8002720:	d910      	bls.n	8002744 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002722:	4b8e      	ldr	r3, [pc, #568]	@ (800295c <HAL_RCC_ClockConfig+0x260>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f023 020f 	bic.w	r2, r3, #15
 800272a:	498c      	ldr	r1, [pc, #560]	@ (800295c <HAL_RCC_ClockConfig+0x260>)
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	4313      	orrs	r3, r2
 8002730:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002732:	4b8a      	ldr	r3, [pc, #552]	@ (800295c <HAL_RCC_ClockConfig+0x260>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 030f 	and.w	r3, r3, #15
 800273a:	683a      	ldr	r2, [r7, #0]
 800273c:	429a      	cmp	r2, r3
 800273e:	d001      	beq.n	8002744 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e106      	b.n	8002952 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 0301 	and.w	r3, r3, #1
 800274c:	2b00      	cmp	r3, #0
 800274e:	d073      	beq.n	8002838 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	2b03      	cmp	r3, #3
 8002756:	d129      	bne.n	80027ac <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002758:	4b81      	ldr	r3, [pc, #516]	@ (8002960 <HAL_RCC_ClockConfig+0x264>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d101      	bne.n	8002768 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	e0f4      	b.n	8002952 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002768:	f000 f966 	bl	8002a38 <RCC_GetSysClockFreqFromPLLSource>
 800276c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	4a7c      	ldr	r2, [pc, #496]	@ (8002964 <HAL_RCC_ClockConfig+0x268>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d93f      	bls.n	80027f6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002776:	4b7a      	ldr	r3, [pc, #488]	@ (8002960 <HAL_RCC_ClockConfig+0x264>)
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d009      	beq.n	8002796 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800278a:	2b00      	cmp	r3, #0
 800278c:	d033      	beq.n	80027f6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002792:	2b00      	cmp	r3, #0
 8002794:	d12f      	bne.n	80027f6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002796:	4b72      	ldr	r3, [pc, #456]	@ (8002960 <HAL_RCC_ClockConfig+0x264>)
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800279e:	4a70      	ldr	r2, [pc, #448]	@ (8002960 <HAL_RCC_ClockConfig+0x264>)
 80027a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80027a4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80027a6:	2380      	movs	r3, #128	@ 0x80
 80027a8:	617b      	str	r3, [r7, #20]
 80027aa:	e024      	b.n	80027f6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	2b02      	cmp	r3, #2
 80027b2:	d107      	bne.n	80027c4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027b4:	4b6a      	ldr	r3, [pc, #424]	@ (8002960 <HAL_RCC_ClockConfig+0x264>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d109      	bne.n	80027d4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e0c6      	b.n	8002952 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027c4:	4b66      	ldr	r3, [pc, #408]	@ (8002960 <HAL_RCC_ClockConfig+0x264>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d101      	bne.n	80027d4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e0be      	b.n	8002952 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80027d4:	f000 f8ce 	bl	8002974 <HAL_RCC_GetSysClockFreq>
 80027d8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	4a61      	ldr	r2, [pc, #388]	@ (8002964 <HAL_RCC_ClockConfig+0x268>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d909      	bls.n	80027f6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80027e2:	4b5f      	ldr	r3, [pc, #380]	@ (8002960 <HAL_RCC_ClockConfig+0x264>)
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80027ea:	4a5d      	ldr	r2, [pc, #372]	@ (8002960 <HAL_RCC_ClockConfig+0x264>)
 80027ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80027f0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80027f2:	2380      	movs	r3, #128	@ 0x80
 80027f4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80027f6:	4b5a      	ldr	r3, [pc, #360]	@ (8002960 <HAL_RCC_ClockConfig+0x264>)
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	f023 0203 	bic.w	r2, r3, #3
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	4957      	ldr	r1, [pc, #348]	@ (8002960 <HAL_RCC_ClockConfig+0x264>)
 8002804:	4313      	orrs	r3, r2
 8002806:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002808:	f7ff f906 	bl	8001a18 <HAL_GetTick>
 800280c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800280e:	e00a      	b.n	8002826 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002810:	f7ff f902 	bl	8001a18 <HAL_GetTick>
 8002814:	4602      	mov	r2, r0
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800281e:	4293      	cmp	r3, r2
 8002820:	d901      	bls.n	8002826 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002822:	2303      	movs	r3, #3
 8002824:	e095      	b.n	8002952 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002826:	4b4e      	ldr	r3, [pc, #312]	@ (8002960 <HAL_RCC_ClockConfig+0x264>)
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	f003 020c 	and.w	r2, r3, #12
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	429a      	cmp	r2, r3
 8002836:	d1eb      	bne.n	8002810 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0302 	and.w	r3, r3, #2
 8002840:	2b00      	cmp	r3, #0
 8002842:	d023      	beq.n	800288c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 0304 	and.w	r3, r3, #4
 800284c:	2b00      	cmp	r3, #0
 800284e:	d005      	beq.n	800285c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002850:	4b43      	ldr	r3, [pc, #268]	@ (8002960 <HAL_RCC_ClockConfig+0x264>)
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	4a42      	ldr	r2, [pc, #264]	@ (8002960 <HAL_RCC_ClockConfig+0x264>)
 8002856:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800285a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 0308 	and.w	r3, r3, #8
 8002864:	2b00      	cmp	r3, #0
 8002866:	d007      	beq.n	8002878 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002868:	4b3d      	ldr	r3, [pc, #244]	@ (8002960 <HAL_RCC_ClockConfig+0x264>)
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002870:	4a3b      	ldr	r2, [pc, #236]	@ (8002960 <HAL_RCC_ClockConfig+0x264>)
 8002872:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002876:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002878:	4b39      	ldr	r3, [pc, #228]	@ (8002960 <HAL_RCC_ClockConfig+0x264>)
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	4936      	ldr	r1, [pc, #216]	@ (8002960 <HAL_RCC_ClockConfig+0x264>)
 8002886:	4313      	orrs	r3, r2
 8002888:	608b      	str	r3, [r1, #8]
 800288a:	e008      	b.n	800289e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	2b80      	cmp	r3, #128	@ 0x80
 8002890:	d105      	bne.n	800289e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002892:	4b33      	ldr	r3, [pc, #204]	@ (8002960 <HAL_RCC_ClockConfig+0x264>)
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	4a32      	ldr	r2, [pc, #200]	@ (8002960 <HAL_RCC_ClockConfig+0x264>)
 8002898:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800289c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800289e:	4b2f      	ldr	r3, [pc, #188]	@ (800295c <HAL_RCC_ClockConfig+0x260>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 030f 	and.w	r3, r3, #15
 80028a6:	683a      	ldr	r2, [r7, #0]
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d21d      	bcs.n	80028e8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ac:	4b2b      	ldr	r3, [pc, #172]	@ (800295c <HAL_RCC_ClockConfig+0x260>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f023 020f 	bic.w	r2, r3, #15
 80028b4:	4929      	ldr	r1, [pc, #164]	@ (800295c <HAL_RCC_ClockConfig+0x260>)
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80028bc:	f7ff f8ac 	bl	8001a18 <HAL_GetTick>
 80028c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028c2:	e00a      	b.n	80028da <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028c4:	f7ff f8a8 	bl	8001a18 <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d901      	bls.n	80028da <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	e03b      	b.n	8002952 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028da:	4b20      	ldr	r3, [pc, #128]	@ (800295c <HAL_RCC_ClockConfig+0x260>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 030f 	and.w	r3, r3, #15
 80028e2:	683a      	ldr	r2, [r7, #0]
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d1ed      	bne.n	80028c4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 0304 	and.w	r3, r3, #4
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d008      	beq.n	8002906 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028f4:	4b1a      	ldr	r3, [pc, #104]	@ (8002960 <HAL_RCC_ClockConfig+0x264>)
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	4917      	ldr	r1, [pc, #92]	@ (8002960 <HAL_RCC_ClockConfig+0x264>)
 8002902:	4313      	orrs	r3, r2
 8002904:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0308 	and.w	r3, r3, #8
 800290e:	2b00      	cmp	r3, #0
 8002910:	d009      	beq.n	8002926 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002912:	4b13      	ldr	r3, [pc, #76]	@ (8002960 <HAL_RCC_ClockConfig+0x264>)
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	691b      	ldr	r3, [r3, #16]
 800291e:	00db      	lsls	r3, r3, #3
 8002920:	490f      	ldr	r1, [pc, #60]	@ (8002960 <HAL_RCC_ClockConfig+0x264>)
 8002922:	4313      	orrs	r3, r2
 8002924:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002926:	f000 f825 	bl	8002974 <HAL_RCC_GetSysClockFreq>
 800292a:	4602      	mov	r2, r0
 800292c:	4b0c      	ldr	r3, [pc, #48]	@ (8002960 <HAL_RCC_ClockConfig+0x264>)
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	091b      	lsrs	r3, r3, #4
 8002932:	f003 030f 	and.w	r3, r3, #15
 8002936:	490c      	ldr	r1, [pc, #48]	@ (8002968 <HAL_RCC_ClockConfig+0x26c>)
 8002938:	5ccb      	ldrb	r3, [r1, r3]
 800293a:	f003 031f 	and.w	r3, r3, #31
 800293e:	fa22 f303 	lsr.w	r3, r2, r3
 8002942:	4a0a      	ldr	r2, [pc, #40]	@ (800296c <HAL_RCC_ClockConfig+0x270>)
 8002944:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002946:	4b0a      	ldr	r3, [pc, #40]	@ (8002970 <HAL_RCC_ClockConfig+0x274>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4618      	mov	r0, r3
 800294c:	f7ff f818 	bl	8001980 <HAL_InitTick>
 8002950:	4603      	mov	r3, r0
}
 8002952:	4618      	mov	r0, r3
 8002954:	3718      	adds	r7, #24
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	40022000 	.word	0x40022000
 8002960:	40021000 	.word	0x40021000
 8002964:	04c4b400 	.word	0x04c4b400
 8002968:	080039a0 	.word	0x080039a0
 800296c:	2000002c 	.word	0x2000002c
 8002970:	2000005c 	.word	0x2000005c

08002974 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002974:	b480      	push	{r7}
 8002976:	b087      	sub	sp, #28
 8002978:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800297a:	4b2c      	ldr	r3, [pc, #176]	@ (8002a2c <HAL_RCC_GetSysClockFreq+0xb8>)
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	f003 030c 	and.w	r3, r3, #12
 8002982:	2b04      	cmp	r3, #4
 8002984:	d102      	bne.n	800298c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002986:	4b2a      	ldr	r3, [pc, #168]	@ (8002a30 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002988:	613b      	str	r3, [r7, #16]
 800298a:	e047      	b.n	8002a1c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800298c:	4b27      	ldr	r3, [pc, #156]	@ (8002a2c <HAL_RCC_GetSysClockFreq+0xb8>)
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	f003 030c 	and.w	r3, r3, #12
 8002994:	2b08      	cmp	r3, #8
 8002996:	d102      	bne.n	800299e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002998:	4b26      	ldr	r3, [pc, #152]	@ (8002a34 <HAL_RCC_GetSysClockFreq+0xc0>)
 800299a:	613b      	str	r3, [r7, #16]
 800299c:	e03e      	b.n	8002a1c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800299e:	4b23      	ldr	r3, [pc, #140]	@ (8002a2c <HAL_RCC_GetSysClockFreq+0xb8>)
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	f003 030c 	and.w	r3, r3, #12
 80029a6:	2b0c      	cmp	r3, #12
 80029a8:	d136      	bne.n	8002a18 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80029aa:	4b20      	ldr	r3, [pc, #128]	@ (8002a2c <HAL_RCC_GetSysClockFreq+0xb8>)
 80029ac:	68db      	ldr	r3, [r3, #12]
 80029ae:	f003 0303 	and.w	r3, r3, #3
 80029b2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80029b4:	4b1d      	ldr	r3, [pc, #116]	@ (8002a2c <HAL_RCC_GetSysClockFreq+0xb8>)
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	091b      	lsrs	r3, r3, #4
 80029ba:	f003 030f 	and.w	r3, r3, #15
 80029be:	3301      	adds	r3, #1
 80029c0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2b03      	cmp	r3, #3
 80029c6:	d10c      	bne.n	80029e2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80029c8:	4a1a      	ldr	r2, [pc, #104]	@ (8002a34 <HAL_RCC_GetSysClockFreq+0xc0>)
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80029d0:	4a16      	ldr	r2, [pc, #88]	@ (8002a2c <HAL_RCC_GetSysClockFreq+0xb8>)
 80029d2:	68d2      	ldr	r2, [r2, #12]
 80029d4:	0a12      	lsrs	r2, r2, #8
 80029d6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80029da:	fb02 f303 	mul.w	r3, r2, r3
 80029de:	617b      	str	r3, [r7, #20]
      break;
 80029e0:	e00c      	b.n	80029fc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80029e2:	4a13      	ldr	r2, [pc, #76]	@ (8002a30 <HAL_RCC_GetSysClockFreq+0xbc>)
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80029ea:	4a10      	ldr	r2, [pc, #64]	@ (8002a2c <HAL_RCC_GetSysClockFreq+0xb8>)
 80029ec:	68d2      	ldr	r2, [r2, #12]
 80029ee:	0a12      	lsrs	r2, r2, #8
 80029f0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80029f4:	fb02 f303 	mul.w	r3, r2, r3
 80029f8:	617b      	str	r3, [r7, #20]
      break;
 80029fa:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80029fc:	4b0b      	ldr	r3, [pc, #44]	@ (8002a2c <HAL_RCC_GetSysClockFreq+0xb8>)
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	0e5b      	lsrs	r3, r3, #25
 8002a02:	f003 0303 	and.w	r3, r3, #3
 8002a06:	3301      	adds	r3, #1
 8002a08:	005b      	lsls	r3, r3, #1
 8002a0a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002a0c:	697a      	ldr	r2, [r7, #20]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a14:	613b      	str	r3, [r7, #16]
 8002a16:	e001      	b.n	8002a1c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002a1c:	693b      	ldr	r3, [r7, #16]
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	371c      	adds	r7, #28
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr
 8002a2a:	bf00      	nop
 8002a2c:	40021000 	.word	0x40021000
 8002a30:	00f42400 	.word	0x00f42400
 8002a34:	007a1200 	.word	0x007a1200

08002a38 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b087      	sub	sp, #28
 8002a3c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002a3e:	4b1e      	ldr	r3, [pc, #120]	@ (8002ab8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002a40:	68db      	ldr	r3, [r3, #12]
 8002a42:	f003 0303 	and.w	r3, r3, #3
 8002a46:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a48:	4b1b      	ldr	r3, [pc, #108]	@ (8002ab8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	091b      	lsrs	r3, r3, #4
 8002a4e:	f003 030f 	and.w	r3, r3, #15
 8002a52:	3301      	adds	r3, #1
 8002a54:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	2b03      	cmp	r3, #3
 8002a5a:	d10c      	bne.n	8002a76 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002a5c:	4a17      	ldr	r2, [pc, #92]	@ (8002abc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a64:	4a14      	ldr	r2, [pc, #80]	@ (8002ab8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002a66:	68d2      	ldr	r2, [r2, #12]
 8002a68:	0a12      	lsrs	r2, r2, #8
 8002a6a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002a6e:	fb02 f303 	mul.w	r3, r2, r3
 8002a72:	617b      	str	r3, [r7, #20]
    break;
 8002a74:	e00c      	b.n	8002a90 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002a76:	4a12      	ldr	r2, [pc, #72]	@ (8002ac0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a7e:	4a0e      	ldr	r2, [pc, #56]	@ (8002ab8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002a80:	68d2      	ldr	r2, [r2, #12]
 8002a82:	0a12      	lsrs	r2, r2, #8
 8002a84:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002a88:	fb02 f303 	mul.w	r3, r2, r3
 8002a8c:	617b      	str	r3, [r7, #20]
    break;
 8002a8e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002a90:	4b09      	ldr	r3, [pc, #36]	@ (8002ab8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	0e5b      	lsrs	r3, r3, #25
 8002a96:	f003 0303 	and.w	r3, r3, #3
 8002a9a:	3301      	adds	r3, #1
 8002a9c:	005b      	lsls	r3, r3, #1
 8002a9e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002aa0:	697a      	ldr	r2, [r7, #20]
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aa8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002aaa:	687b      	ldr	r3, [r7, #4]
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	371c      	adds	r7, #28
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr
 8002ab8:	40021000 	.word	0x40021000
 8002abc:	007a1200 	.word	0x007a1200
 8002ac0:	00f42400 	.word	0x00f42400

08002ac4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b084      	sub	sp, #16
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d101      	bne.n	8002ad6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e09d      	b.n	8002c12 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d108      	bne.n	8002af0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002ae6:	d009      	beq.n	8002afc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2200      	movs	r2, #0
 8002aec:	61da      	str	r2, [r3, #28]
 8002aee:	e005      	b.n	8002afc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2200      	movs	r2, #0
 8002af4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2200      	movs	r2, #0
 8002afa:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2200      	movs	r2, #0
 8002b00:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d106      	bne.n	8002b1c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2200      	movs	r2, #0
 8002b12:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f7fe f84a 	bl	8000bb0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2202      	movs	r2, #2
 8002b20:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002b32:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002b3c:	d902      	bls.n	8002b44 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	60fb      	str	r3, [r7, #12]
 8002b42:	e002      	b.n	8002b4a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002b44:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002b48:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002b52:	d007      	beq.n	8002b64 <HAL_SPI_Init+0xa0>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002b5c:	d002      	beq.n	8002b64 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2200      	movs	r2, #0
 8002b62:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002b74:	431a      	orrs	r2, r3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	691b      	ldr	r3, [r3, #16]
 8002b7a:	f003 0302 	and.w	r3, r3, #2
 8002b7e:	431a      	orrs	r2, r3
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	695b      	ldr	r3, [r3, #20]
 8002b84:	f003 0301 	and.w	r3, r3, #1
 8002b88:	431a      	orrs	r2, r3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	699b      	ldr	r3, [r3, #24]
 8002b8e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b92:	431a      	orrs	r2, r3
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	69db      	ldr	r3, [r3, #28]
 8002b98:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002b9c:	431a      	orrs	r2, r3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6a1b      	ldr	r3, [r3, #32]
 8002ba2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ba6:	ea42 0103 	orr.w	r1, r2, r3
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bae:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	430a      	orrs	r2, r1
 8002bb8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	699b      	ldr	r3, [r3, #24]
 8002bbe:	0c1b      	lsrs	r3, r3, #16
 8002bc0:	f003 0204 	and.w	r2, r3, #4
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bc8:	f003 0310 	and.w	r3, r3, #16
 8002bcc:	431a      	orrs	r2, r3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bd2:	f003 0308 	and.w	r3, r3, #8
 8002bd6:	431a      	orrs	r2, r3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002be0:	ea42 0103 	orr.w	r1, r2, r3
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	430a      	orrs	r2, r1
 8002bf0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	69da      	ldr	r2, [r3, #28]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c00:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2200      	movs	r2, #0
 8002c06:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002c10:	2300      	movs	r3, #0
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3710      	adds	r7, #16
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}

08002c1a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c1a:	b580      	push	{r7, lr}
 8002c1c:	b088      	sub	sp, #32
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	60f8      	str	r0, [r7, #12]
 8002c22:	60b9      	str	r1, [r7, #8]
 8002c24:	603b      	str	r3, [r7, #0]
 8002c26:	4613      	mov	r3, r2
 8002c28:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d101      	bne.n	8002c3c <HAL_SPI_Transmit+0x22>
 8002c38:	2302      	movs	r3, #2
 8002c3a:	e15f      	b.n	8002efc <HAL_SPI_Transmit+0x2e2>
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2201      	movs	r2, #1
 8002c40:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002c44:	f7fe fee8 	bl	8001a18 <HAL_GetTick>
 8002c48:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002c4a:	88fb      	ldrh	r3, [r7, #6]
 8002c4c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d002      	beq.n	8002c60 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002c5a:	2302      	movs	r3, #2
 8002c5c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002c5e:	e148      	b.n	8002ef2 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d002      	beq.n	8002c6c <HAL_SPI_Transmit+0x52>
 8002c66:	88fb      	ldrh	r3, [r7, #6]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d102      	bne.n	8002c72 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002c70:	e13f      	b.n	8002ef2 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2203      	movs	r2, #3
 8002c76:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	68ba      	ldr	r2, [r7, #8]
 8002c84:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	88fa      	ldrh	r2, [r7, #6]
 8002c8a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	88fa      	ldrh	r2, [r7, #6]
 8002c90:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2200      	movs	r2, #0
 8002c96:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2200      	movs	r2, #0
 8002cac:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002cbc:	d10f      	bne.n	8002cde <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002ccc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002cdc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ce8:	2b40      	cmp	r3, #64	@ 0x40
 8002cea:	d007      	beq.n	8002cfc <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002cfa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002d04:	d94f      	bls.n	8002da6 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d002      	beq.n	8002d14 <HAL_SPI_Transmit+0xfa>
 8002d0e:	8afb      	ldrh	r3, [r7, #22]
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d142      	bne.n	8002d9a <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d18:	881a      	ldrh	r2, [r3, #0]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d24:	1c9a      	adds	r2, r3, #2
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	3b01      	subs	r3, #1
 8002d32:	b29a      	uxth	r2, r3
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002d38:	e02f      	b.n	8002d9a <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	f003 0302 	and.w	r3, r3, #2
 8002d44:	2b02      	cmp	r3, #2
 8002d46:	d112      	bne.n	8002d6e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d4c:	881a      	ldrh	r2, [r3, #0]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d58:	1c9a      	adds	r2, r3, #2
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d62:	b29b      	uxth	r3, r3
 8002d64:	3b01      	subs	r3, #1
 8002d66:	b29a      	uxth	r2, r3
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002d6c:	e015      	b.n	8002d9a <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d6e:	f7fe fe53 	bl	8001a18 <HAL_GetTick>
 8002d72:	4602      	mov	r2, r0
 8002d74:	69bb      	ldr	r3, [r7, #24]
 8002d76:	1ad3      	subs	r3, r2, r3
 8002d78:	683a      	ldr	r2, [r7, #0]
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d803      	bhi.n	8002d86 <HAL_SPI_Transmit+0x16c>
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d84:	d102      	bne.n	8002d8c <HAL_SPI_Transmit+0x172>
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d106      	bne.n	8002d9a <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8002d8c:	2303      	movs	r3, #3
 8002d8e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2201      	movs	r2, #1
 8002d94:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8002d98:	e0ab      	b.n	8002ef2 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d9e:	b29b      	uxth	r3, r3
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d1ca      	bne.n	8002d3a <HAL_SPI_Transmit+0x120>
 8002da4:	e080      	b.n	8002ea8 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d002      	beq.n	8002db4 <HAL_SPI_Transmit+0x19a>
 8002dae:	8afb      	ldrh	r3, [r7, #22]
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d174      	bne.n	8002e9e <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002db8:	b29b      	uxth	r3, r3
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d912      	bls.n	8002de4 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dc2:	881a      	ldrh	r2, [r3, #0]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dce:	1c9a      	adds	r2, r3, #2
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	3b02      	subs	r3, #2
 8002ddc:	b29a      	uxth	r2, r3
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002de2:	e05c      	b.n	8002e9e <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	330c      	adds	r3, #12
 8002dee:	7812      	ldrb	r2, [r2, #0]
 8002df0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002df6:	1c5a      	adds	r2, r3, #1
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e00:	b29b      	uxth	r3, r3
 8002e02:	3b01      	subs	r3, #1
 8002e04:	b29a      	uxth	r2, r3
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002e0a:	e048      	b.n	8002e9e <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	f003 0302 	and.w	r3, r3, #2
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	d12b      	bne.n	8002e72 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e1e:	b29b      	uxth	r3, r3
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d912      	bls.n	8002e4a <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e28:	881a      	ldrh	r2, [r3, #0]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e34:	1c9a      	adds	r2, r3, #2
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	3b02      	subs	r3, #2
 8002e42:	b29a      	uxth	r2, r3
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002e48:	e029      	b.n	8002e9e <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	330c      	adds	r3, #12
 8002e54:	7812      	ldrb	r2, [r2, #0]
 8002e56:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e5c:	1c5a      	adds	r2, r3, #1
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e66:	b29b      	uxth	r3, r3
 8002e68:	3b01      	subs	r3, #1
 8002e6a:	b29a      	uxth	r2, r3
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002e70:	e015      	b.n	8002e9e <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e72:	f7fe fdd1 	bl	8001a18 <HAL_GetTick>
 8002e76:	4602      	mov	r2, r0
 8002e78:	69bb      	ldr	r3, [r7, #24]
 8002e7a:	1ad3      	subs	r3, r2, r3
 8002e7c:	683a      	ldr	r2, [r7, #0]
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d803      	bhi.n	8002e8a <HAL_SPI_Transmit+0x270>
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e88:	d102      	bne.n	8002e90 <HAL_SPI_Transmit+0x276>
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d106      	bne.n	8002e9e <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8002e90:	2303      	movs	r3, #3
 8002e92:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2201      	movs	r2, #1
 8002e98:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8002e9c:	e029      	b.n	8002ef2 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ea2:	b29b      	uxth	r3, r3
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d1b1      	bne.n	8002e0c <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ea8:	69ba      	ldr	r2, [r7, #24]
 8002eaa:	6839      	ldr	r1, [r7, #0]
 8002eac:	68f8      	ldr	r0, [r7, #12]
 8002eae:	f000 fcf9 	bl	80038a4 <SPI_EndRxTxTransaction>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d002      	beq.n	8002ebe <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2220      	movs	r2, #32
 8002ebc:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d10a      	bne.n	8002edc <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	613b      	str	r3, [r7, #16]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	613b      	str	r3, [r7, #16]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	613b      	str	r3, [r7, #16]
 8002eda:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d002      	beq.n	8002eea <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	77fb      	strb	r3, [r7, #31]
 8002ee8:	e003      	b.n	8002ef2 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2201      	movs	r2, #1
 8002eee:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8002efa:	7ffb      	ldrb	r3, [r7, #31]
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3720      	adds	r7, #32
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}

08002f04 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b088      	sub	sp, #32
 8002f08:	af02      	add	r7, sp, #8
 8002f0a:	60f8      	str	r0, [r7, #12]
 8002f0c:	60b9      	str	r1, [r7, #8]
 8002f0e:	603b      	str	r3, [r7, #0]
 8002f10:	4613      	mov	r3, r2
 8002f12:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002f14:	2300      	movs	r3, #0
 8002f16:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d002      	beq.n	8002f2a <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8002f24:	2302      	movs	r3, #2
 8002f26:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002f28:	e11a      	b.n	8003160 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002f32:	d112      	bne.n	8002f5a <HAL_SPI_Receive+0x56>
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d10e      	bne.n	8002f5a <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2204      	movs	r2, #4
 8002f40:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002f44:	88fa      	ldrh	r2, [r7, #6]
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	9300      	str	r3, [sp, #0]
 8002f4a:	4613      	mov	r3, r2
 8002f4c:	68ba      	ldr	r2, [r7, #8]
 8002f4e:	68b9      	ldr	r1, [r7, #8]
 8002f50:	68f8      	ldr	r0, [r7, #12]
 8002f52:	f000 f90e 	bl	8003172 <HAL_SPI_TransmitReceive>
 8002f56:	4603      	mov	r3, r0
 8002f58:	e107      	b.n	800316a <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d101      	bne.n	8002f68 <HAL_SPI_Receive+0x64>
 8002f64:	2302      	movs	r3, #2
 8002f66:	e100      	b.n	800316a <HAL_SPI_Receive+0x266>
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002f70:	f7fe fd52 	bl	8001a18 <HAL_GetTick>
 8002f74:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d002      	beq.n	8002f82 <HAL_SPI_Receive+0x7e>
 8002f7c:	88fb      	ldrh	r3, [r7, #6]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d102      	bne.n	8002f88 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002f86:	e0eb      	b.n	8003160 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2204      	movs	r2, #4
 8002f8c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2200      	movs	r2, #0
 8002f94:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	68ba      	ldr	r2, [r7, #8]
 8002f9a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	88fa      	ldrh	r2, [r7, #6]
 8002fa0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	88fa      	ldrh	r2, [r7, #6]
 8002fa8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	68db      	ldr	r3, [r3, #12]
 8002fce:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002fd2:	d908      	bls.n	8002fe6 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	685a      	ldr	r2, [r3, #4]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002fe2:	605a      	str	r2, [r3, #4]
 8002fe4:	e007      	b.n	8002ff6 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	685a      	ldr	r2, [r3, #4]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002ff4:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002ffe:	d10f      	bne.n	8003020 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800300e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800301e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800302a:	2b40      	cmp	r3, #64	@ 0x40
 800302c:	d007      	beq.n	800303e <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800303c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	68db      	ldr	r3, [r3, #12]
 8003042:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003046:	d86f      	bhi.n	8003128 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003048:	e034      	b.n	80030b4 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	f003 0301 	and.w	r3, r3, #1
 8003054:	2b01      	cmp	r3, #1
 8003056:	d117      	bne.n	8003088 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f103 020c 	add.w	r2, r3, #12
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003064:	7812      	ldrb	r2, [r2, #0]
 8003066:	b2d2      	uxtb	r2, r2
 8003068:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800306e:	1c5a      	adds	r2, r3, #1
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800307a:	b29b      	uxth	r3, r3
 800307c:	3b01      	subs	r3, #1
 800307e:	b29a      	uxth	r2, r3
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8003086:	e015      	b.n	80030b4 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003088:	f7fe fcc6 	bl	8001a18 <HAL_GetTick>
 800308c:	4602      	mov	r2, r0
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	683a      	ldr	r2, [r7, #0]
 8003094:	429a      	cmp	r2, r3
 8003096:	d803      	bhi.n	80030a0 <HAL_SPI_Receive+0x19c>
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800309e:	d102      	bne.n	80030a6 <HAL_SPI_Receive+0x1a2>
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d106      	bne.n	80030b4 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 80030a6:	2303      	movs	r3, #3
 80030a8:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2201      	movs	r2, #1
 80030ae:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80030b2:	e055      	b.n	8003160 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80030ba:	b29b      	uxth	r3, r3
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d1c4      	bne.n	800304a <HAL_SPI_Receive+0x146>
 80030c0:	e038      	b.n	8003134 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	f003 0301 	and.w	r3, r3, #1
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d115      	bne.n	80030fc <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	68da      	ldr	r2, [r3, #12]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030da:	b292      	uxth	r2, r2
 80030dc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030e2:	1c9a      	adds	r2, r3, #2
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	3b01      	subs	r3, #1
 80030f2:	b29a      	uxth	r2, r3
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80030fa:	e015      	b.n	8003128 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80030fc:	f7fe fc8c 	bl	8001a18 <HAL_GetTick>
 8003100:	4602      	mov	r2, r0
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	683a      	ldr	r2, [r7, #0]
 8003108:	429a      	cmp	r2, r3
 800310a:	d803      	bhi.n	8003114 <HAL_SPI_Receive+0x210>
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003112:	d102      	bne.n	800311a <HAL_SPI_Receive+0x216>
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d106      	bne.n	8003128 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 800311a:	2303      	movs	r3, #3
 800311c:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2201      	movs	r2, #1
 8003122:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003126:	e01b      	b.n	8003160 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800312e:	b29b      	uxth	r3, r3
 8003130:	2b00      	cmp	r3, #0
 8003132:	d1c6      	bne.n	80030c2 <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003134:	693a      	ldr	r2, [r7, #16]
 8003136:	6839      	ldr	r1, [r7, #0]
 8003138:	68f8      	ldr	r0, [r7, #12]
 800313a:	f000 fb5b 	bl	80037f4 <SPI_EndRxTransaction>
 800313e:	4603      	mov	r3, r0
 8003140:	2b00      	cmp	r3, #0
 8003142:	d002      	beq.n	800314a <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2220      	movs	r2, #32
 8003148:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800314e:	2b00      	cmp	r3, #0
 8003150:	d002      	beq.n	8003158 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	75fb      	strb	r3, [r7, #23]
 8003156:	e003      	b.n	8003160 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2201      	movs	r2, #1
 800315c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2200      	movs	r2, #0
 8003164:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8003168:	7dfb      	ldrb	r3, [r7, #23]
}
 800316a:	4618      	mov	r0, r3
 800316c:	3718      	adds	r7, #24
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}

08003172 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003172:	b580      	push	{r7, lr}
 8003174:	b08a      	sub	sp, #40	@ 0x28
 8003176:	af00      	add	r7, sp, #0
 8003178:	60f8      	str	r0, [r7, #12]
 800317a:	60b9      	str	r1, [r7, #8]
 800317c:	607a      	str	r2, [r7, #4]
 800317e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003180:	2301      	movs	r3, #1
 8003182:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003184:	2300      	movs	r3, #0
 8003186:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003190:	2b01      	cmp	r3, #1
 8003192:	d101      	bne.n	8003198 <HAL_SPI_TransmitReceive+0x26>
 8003194:	2302      	movs	r3, #2
 8003196:	e20a      	b.n	80035ae <HAL_SPI_TransmitReceive+0x43c>
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2201      	movs	r2, #1
 800319c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80031a0:	f7fe fc3a 	bl	8001a18 <HAL_GetTick>
 80031a4:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80031ac:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80031b4:	887b      	ldrh	r3, [r7, #2]
 80031b6:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80031b8:	887b      	ldrh	r3, [r7, #2]
 80031ba:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80031bc:	7efb      	ldrb	r3, [r7, #27]
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d00e      	beq.n	80031e0 <HAL_SPI_TransmitReceive+0x6e>
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80031c8:	d106      	bne.n	80031d8 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d102      	bne.n	80031d8 <HAL_SPI_TransmitReceive+0x66>
 80031d2:	7efb      	ldrb	r3, [r7, #27]
 80031d4:	2b04      	cmp	r3, #4
 80031d6:	d003      	beq.n	80031e0 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80031d8:	2302      	movs	r3, #2
 80031da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80031de:	e1e0      	b.n	80035a2 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d005      	beq.n	80031f2 <HAL_SPI_TransmitReceive+0x80>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d002      	beq.n	80031f2 <HAL_SPI_TransmitReceive+0x80>
 80031ec:	887b      	ldrh	r3, [r7, #2]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d103      	bne.n	80031fa <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80031f8:	e1d3      	b.n	80035a2 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003200:	b2db      	uxtb	r3, r3
 8003202:	2b04      	cmp	r3, #4
 8003204:	d003      	beq.n	800320e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2205      	movs	r2, #5
 800320a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2200      	movs	r2, #0
 8003212:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	887a      	ldrh	r2, [r7, #2]
 800321e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	887a      	ldrh	r2, [r7, #2]
 8003226:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	68ba      	ldr	r2, [r7, #8]
 800322e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	887a      	ldrh	r2, [r7, #2]
 8003234:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	887a      	ldrh	r2, [r7, #2]
 800323a:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2200      	movs	r2, #0
 8003240:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2200      	movs	r2, #0
 8003246:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003250:	d802      	bhi.n	8003258 <HAL_SPI_TransmitReceive+0xe6>
 8003252:	8a3b      	ldrh	r3, [r7, #16]
 8003254:	2b01      	cmp	r3, #1
 8003256:	d908      	bls.n	800326a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	685a      	ldr	r2, [r3, #4]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003266:	605a      	str	r2, [r3, #4]
 8003268:	e007      	b.n	800327a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	685a      	ldr	r2, [r3, #4]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003278:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003284:	2b40      	cmp	r3, #64	@ 0x40
 8003286:	d007      	beq.n	8003298 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003296:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80032a0:	f240 8081 	bls.w	80033a6 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d002      	beq.n	80032b2 <HAL_SPI_TransmitReceive+0x140>
 80032ac:	8a7b      	ldrh	r3, [r7, #18]
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d16d      	bne.n	800338e <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032b6:	881a      	ldrh	r2, [r3, #0]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032c2:	1c9a      	adds	r2, r3, #2
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032cc:	b29b      	uxth	r3, r3
 80032ce:	3b01      	subs	r3, #1
 80032d0:	b29a      	uxth	r2, r3
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032d6:	e05a      	b.n	800338e <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	f003 0302 	and.w	r3, r3, #2
 80032e2:	2b02      	cmp	r3, #2
 80032e4:	d11b      	bne.n	800331e <HAL_SPI_TransmitReceive+0x1ac>
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032ea:	b29b      	uxth	r3, r3
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d016      	beq.n	800331e <HAL_SPI_TransmitReceive+0x1ac>
 80032f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d113      	bne.n	800331e <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032fa:	881a      	ldrh	r2, [r3, #0]
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003306:	1c9a      	adds	r2, r3, #2
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003310:	b29b      	uxth	r3, r3
 8003312:	3b01      	subs	r3, #1
 8003314:	b29a      	uxth	r2, r3
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800331a:	2300      	movs	r3, #0
 800331c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	f003 0301 	and.w	r3, r3, #1
 8003328:	2b01      	cmp	r3, #1
 800332a:	d11c      	bne.n	8003366 <HAL_SPI_TransmitReceive+0x1f4>
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003332:	b29b      	uxth	r3, r3
 8003334:	2b00      	cmp	r3, #0
 8003336:	d016      	beq.n	8003366 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	68da      	ldr	r2, [r3, #12]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003342:	b292      	uxth	r2, r2
 8003344:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800334a:	1c9a      	adds	r2, r3, #2
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003356:	b29b      	uxth	r3, r3
 8003358:	3b01      	subs	r3, #1
 800335a:	b29a      	uxth	r2, r3
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003362:	2301      	movs	r3, #1
 8003364:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003366:	f7fe fb57 	bl	8001a18 <HAL_GetTick>
 800336a:	4602      	mov	r2, r0
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003372:	429a      	cmp	r2, r3
 8003374:	d80b      	bhi.n	800338e <HAL_SPI_TransmitReceive+0x21c>
 8003376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800337c:	d007      	beq.n	800338e <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 800337e:	2303      	movs	r3, #3
 8003380:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2201      	movs	r2, #1
 8003388:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800338c:	e109      	b.n	80035a2 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003392:	b29b      	uxth	r3, r3
 8003394:	2b00      	cmp	r3, #0
 8003396:	d19f      	bne.n	80032d8 <HAL_SPI_TransmitReceive+0x166>
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800339e:	b29b      	uxth	r3, r3
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d199      	bne.n	80032d8 <HAL_SPI_TransmitReceive+0x166>
 80033a4:	e0e3      	b.n	800356e <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d003      	beq.n	80033b6 <HAL_SPI_TransmitReceive+0x244>
 80033ae:	8a7b      	ldrh	r3, [r7, #18]
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	f040 80cf 	bne.w	8003554 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d912      	bls.n	80033e6 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033c4:	881a      	ldrh	r2, [r3, #0]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033d0:	1c9a      	adds	r2, r3, #2
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033da:	b29b      	uxth	r3, r3
 80033dc:	3b02      	subs	r3, #2
 80033de:	b29a      	uxth	r2, r3
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80033e4:	e0b6      	b.n	8003554 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	330c      	adds	r3, #12
 80033f0:	7812      	ldrb	r2, [r2, #0]
 80033f2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033f8:	1c5a      	adds	r2, r3, #1
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003402:	b29b      	uxth	r3, r3
 8003404:	3b01      	subs	r3, #1
 8003406:	b29a      	uxth	r2, r3
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800340c:	e0a2      	b.n	8003554 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	f003 0302 	and.w	r3, r3, #2
 8003418:	2b02      	cmp	r3, #2
 800341a:	d134      	bne.n	8003486 <HAL_SPI_TransmitReceive+0x314>
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003420:	b29b      	uxth	r3, r3
 8003422:	2b00      	cmp	r3, #0
 8003424:	d02f      	beq.n	8003486 <HAL_SPI_TransmitReceive+0x314>
 8003426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003428:	2b01      	cmp	r3, #1
 800342a:	d12c      	bne.n	8003486 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003430:	b29b      	uxth	r3, r3
 8003432:	2b01      	cmp	r3, #1
 8003434:	d912      	bls.n	800345c <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800343a:	881a      	ldrh	r2, [r3, #0]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003446:	1c9a      	adds	r2, r3, #2
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003450:	b29b      	uxth	r3, r3
 8003452:	3b02      	subs	r3, #2
 8003454:	b29a      	uxth	r2, r3
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800345a:	e012      	b.n	8003482 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	330c      	adds	r3, #12
 8003466:	7812      	ldrb	r2, [r2, #0]
 8003468:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800346e:	1c5a      	adds	r2, r3, #1
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003478:	b29b      	uxth	r3, r3
 800347a:	3b01      	subs	r3, #1
 800347c:	b29a      	uxth	r2, r3
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003482:	2300      	movs	r3, #0
 8003484:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	f003 0301 	and.w	r3, r3, #1
 8003490:	2b01      	cmp	r3, #1
 8003492:	d148      	bne.n	8003526 <HAL_SPI_TransmitReceive+0x3b4>
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800349a:	b29b      	uxth	r3, r3
 800349c:	2b00      	cmp	r3, #0
 800349e:	d042      	beq.n	8003526 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80034a6:	b29b      	uxth	r3, r3
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d923      	bls.n	80034f4 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	68da      	ldr	r2, [r3, #12]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034b6:	b292      	uxth	r2, r2
 80034b8:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034be:	1c9a      	adds	r2, r3, #2
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	3b02      	subs	r3, #2
 80034ce:	b29a      	uxth	r2, r3
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80034dc:	b29b      	uxth	r3, r3
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d81f      	bhi.n	8003522 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	685a      	ldr	r2, [r3, #4]
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80034f0:	605a      	str	r2, [r3, #4]
 80034f2:	e016      	b.n	8003522 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f103 020c 	add.w	r2, r3, #12
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003500:	7812      	ldrb	r2, [r2, #0]
 8003502:	b2d2      	uxtb	r2, r2
 8003504:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800350a:	1c5a      	adds	r2, r3, #1
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003516:	b29b      	uxth	r3, r3
 8003518:	3b01      	subs	r3, #1
 800351a:	b29a      	uxth	r2, r3
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003522:	2301      	movs	r3, #1
 8003524:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003526:	f7fe fa77 	bl	8001a18 <HAL_GetTick>
 800352a:	4602      	mov	r2, r0
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	1ad3      	subs	r3, r2, r3
 8003530:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003532:	429a      	cmp	r2, r3
 8003534:	d803      	bhi.n	800353e <HAL_SPI_TransmitReceive+0x3cc>
 8003536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800353c:	d102      	bne.n	8003544 <HAL_SPI_TransmitReceive+0x3d2>
 800353e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003540:	2b00      	cmp	r3, #0
 8003542:	d107      	bne.n	8003554 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8003544:	2303      	movs	r3, #3
 8003546:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2201      	movs	r2, #1
 800354e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8003552:	e026      	b.n	80035a2 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003558:	b29b      	uxth	r3, r3
 800355a:	2b00      	cmp	r3, #0
 800355c:	f47f af57 	bne.w	800340e <HAL_SPI_TransmitReceive+0x29c>
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003566:	b29b      	uxth	r3, r3
 8003568:	2b00      	cmp	r3, #0
 800356a:	f47f af50 	bne.w	800340e <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800356e:	69fa      	ldr	r2, [r7, #28]
 8003570:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003572:	68f8      	ldr	r0, [r7, #12]
 8003574:	f000 f996 	bl	80038a4 <SPI_EndRxTxTransaction>
 8003578:	4603      	mov	r3, r0
 800357a:	2b00      	cmp	r3, #0
 800357c:	d005      	beq.n	800358a <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2220      	movs	r2, #32
 8003588:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800358e:	2b00      	cmp	r3, #0
 8003590:	d003      	beq.n	800359a <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003598:	e003      	b.n	80035a2 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2201      	movs	r2, #1
 800359e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2200      	movs	r2, #0
 80035a6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80035aa:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3728      	adds	r7, #40	@ 0x28
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
	...

080035b8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b088      	sub	sp, #32
 80035bc:	af00      	add	r7, sp, #0
 80035be:	60f8      	str	r0, [r7, #12]
 80035c0:	60b9      	str	r1, [r7, #8]
 80035c2:	603b      	str	r3, [r7, #0]
 80035c4:	4613      	mov	r3, r2
 80035c6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80035c8:	f7fe fa26 	bl	8001a18 <HAL_GetTick>
 80035cc:	4602      	mov	r2, r0
 80035ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035d0:	1a9b      	subs	r3, r3, r2
 80035d2:	683a      	ldr	r2, [r7, #0]
 80035d4:	4413      	add	r3, r2
 80035d6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80035d8:	f7fe fa1e 	bl	8001a18 <HAL_GetTick>
 80035dc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80035de:	4b39      	ldr	r3, [pc, #228]	@ (80036c4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	015b      	lsls	r3, r3, #5
 80035e4:	0d1b      	lsrs	r3, r3, #20
 80035e6:	69fa      	ldr	r2, [r7, #28]
 80035e8:	fb02 f303 	mul.w	r3, r2, r3
 80035ec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80035ee:	e054      	b.n	800369a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035f6:	d050      	beq.n	800369a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80035f8:	f7fe fa0e 	bl	8001a18 <HAL_GetTick>
 80035fc:	4602      	mov	r2, r0
 80035fe:	69bb      	ldr	r3, [r7, #24]
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	69fa      	ldr	r2, [r7, #28]
 8003604:	429a      	cmp	r2, r3
 8003606:	d902      	bls.n	800360e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003608:	69fb      	ldr	r3, [r7, #28]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d13d      	bne.n	800368a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	685a      	ldr	r2, [r3, #4]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800361c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003626:	d111      	bne.n	800364c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003630:	d004      	beq.n	800363c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800363a:	d107      	bne.n	800364c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800364a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003650:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003654:	d10f      	bne.n	8003676 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003664:	601a      	str	r2, [r3, #0]
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003674:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2201      	movs	r2, #1
 800367a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2200      	movs	r2, #0
 8003682:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003686:	2303      	movs	r3, #3
 8003688:	e017      	b.n	80036ba <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d101      	bne.n	8003694 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003690:	2300      	movs	r3, #0
 8003692:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	3b01      	subs	r3, #1
 8003698:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	689a      	ldr	r2, [r3, #8]
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	4013      	ands	r3, r2
 80036a4:	68ba      	ldr	r2, [r7, #8]
 80036a6:	429a      	cmp	r2, r3
 80036a8:	bf0c      	ite	eq
 80036aa:	2301      	moveq	r3, #1
 80036ac:	2300      	movne	r3, #0
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	461a      	mov	r2, r3
 80036b2:	79fb      	ldrb	r3, [r7, #7]
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d19b      	bne.n	80035f0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80036b8:	2300      	movs	r3, #0
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3720      	adds	r7, #32
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	2000002c 	.word	0x2000002c

080036c8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b08a      	sub	sp, #40	@ 0x28
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	60f8      	str	r0, [r7, #12]
 80036d0:	60b9      	str	r1, [r7, #8]
 80036d2:	607a      	str	r2, [r7, #4]
 80036d4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80036d6:	2300      	movs	r3, #0
 80036d8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80036da:	f7fe f99d 	bl	8001a18 <HAL_GetTick>
 80036de:	4602      	mov	r2, r0
 80036e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036e2:	1a9b      	subs	r3, r3, r2
 80036e4:	683a      	ldr	r2, [r7, #0]
 80036e6:	4413      	add	r3, r2
 80036e8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80036ea:	f7fe f995 	bl	8001a18 <HAL_GetTick>
 80036ee:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	330c      	adds	r3, #12
 80036f6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80036f8:	4b3d      	ldr	r3, [pc, #244]	@ (80037f0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	4613      	mov	r3, r2
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	4413      	add	r3, r2
 8003702:	00da      	lsls	r2, r3, #3
 8003704:	1ad3      	subs	r3, r2, r3
 8003706:	0d1b      	lsrs	r3, r3, #20
 8003708:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800370a:	fb02 f303 	mul.w	r3, r2, r3
 800370e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003710:	e060      	b.n	80037d4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003718:	d107      	bne.n	800372a <SPI_WaitFifoStateUntilTimeout+0x62>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d104      	bne.n	800372a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003720:	69fb      	ldr	r3, [r7, #28]
 8003722:	781b      	ldrb	r3, [r3, #0]
 8003724:	b2db      	uxtb	r3, r3
 8003726:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003728:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003730:	d050      	beq.n	80037d4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003732:	f7fe f971 	bl	8001a18 <HAL_GetTick>
 8003736:	4602      	mov	r2, r0
 8003738:	6a3b      	ldr	r3, [r7, #32]
 800373a:	1ad3      	subs	r3, r2, r3
 800373c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800373e:	429a      	cmp	r2, r3
 8003740:	d902      	bls.n	8003748 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003744:	2b00      	cmp	r3, #0
 8003746:	d13d      	bne.n	80037c4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	685a      	ldr	r2, [r3, #4]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003756:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003760:	d111      	bne.n	8003786 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800376a:	d004      	beq.n	8003776 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003774:	d107      	bne.n	8003786 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003784:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800378a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800378e:	d10f      	bne.n	80037b0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800379e:	601a      	str	r2, [r3, #0]
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80037ae:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2201      	movs	r2, #1
 80037b4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2200      	movs	r2, #0
 80037bc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80037c0:	2303      	movs	r3, #3
 80037c2:	e010      	b.n	80037e6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80037c4:	69bb      	ldr	r3, [r7, #24]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d101      	bne.n	80037ce <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80037ca:	2300      	movs	r3, #0
 80037cc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80037ce:	69bb      	ldr	r3, [r7, #24]
 80037d0:	3b01      	subs	r3, #1
 80037d2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	689a      	ldr	r2, [r3, #8]
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	4013      	ands	r3, r2
 80037de:	687a      	ldr	r2, [r7, #4]
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d196      	bne.n	8003712 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80037e4:	2300      	movs	r3, #0
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3728      	adds	r7, #40	@ 0x28
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	2000002c 	.word	0x2000002c

080037f4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b086      	sub	sp, #24
 80037f8:	af02      	add	r7, sp, #8
 80037fa:	60f8      	str	r0, [r7, #12]
 80037fc:	60b9      	str	r1, [r7, #8]
 80037fe:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003808:	d111      	bne.n	800382e <SPI_EndRxTransaction+0x3a>
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003812:	d004      	beq.n	800381e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800381c:	d107      	bne.n	800382e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800382c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	9300      	str	r3, [sp, #0]
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	2200      	movs	r2, #0
 8003836:	2180      	movs	r1, #128	@ 0x80
 8003838:	68f8      	ldr	r0, [r7, #12]
 800383a:	f7ff febd 	bl	80035b8 <SPI_WaitFlagStateUntilTimeout>
 800383e:	4603      	mov	r3, r0
 8003840:	2b00      	cmp	r3, #0
 8003842:	d007      	beq.n	8003854 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003848:	f043 0220 	orr.w	r2, r3, #32
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003850:	2303      	movs	r3, #3
 8003852:	e023      	b.n	800389c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800385c:	d11d      	bne.n	800389a <SPI_EndRxTransaction+0xa6>
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003866:	d004      	beq.n	8003872 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003870:	d113      	bne.n	800389a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	9300      	str	r3, [sp, #0]
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	2200      	movs	r2, #0
 800387a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800387e:	68f8      	ldr	r0, [r7, #12]
 8003880:	f7ff ff22 	bl	80036c8 <SPI_WaitFifoStateUntilTimeout>
 8003884:	4603      	mov	r3, r0
 8003886:	2b00      	cmp	r3, #0
 8003888:	d007      	beq.n	800389a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800388e:	f043 0220 	orr.w	r2, r3, #32
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	e000      	b.n	800389c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800389a:	2300      	movs	r3, #0
}
 800389c:	4618      	mov	r0, r3
 800389e:	3710      	adds	r7, #16
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}

080038a4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b086      	sub	sp, #24
 80038a8:	af02      	add	r7, sp, #8
 80038aa:	60f8      	str	r0, [r7, #12]
 80038ac:	60b9      	str	r1, [r7, #8]
 80038ae:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	9300      	str	r3, [sp, #0]
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	2200      	movs	r2, #0
 80038b8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80038bc:	68f8      	ldr	r0, [r7, #12]
 80038be:	f7ff ff03 	bl	80036c8 <SPI_WaitFifoStateUntilTimeout>
 80038c2:	4603      	mov	r3, r0
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d007      	beq.n	80038d8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038cc:	f043 0220 	orr.w	r2, r3, #32
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80038d4:	2303      	movs	r3, #3
 80038d6:	e027      	b.n	8003928 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	9300      	str	r3, [sp, #0]
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	2200      	movs	r2, #0
 80038e0:	2180      	movs	r1, #128	@ 0x80
 80038e2:	68f8      	ldr	r0, [r7, #12]
 80038e4:	f7ff fe68 	bl	80035b8 <SPI_WaitFlagStateUntilTimeout>
 80038e8:	4603      	mov	r3, r0
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d007      	beq.n	80038fe <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038f2:	f043 0220 	orr.w	r2, r3, #32
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80038fa:	2303      	movs	r3, #3
 80038fc:	e014      	b.n	8003928 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	9300      	str	r3, [sp, #0]
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	2200      	movs	r2, #0
 8003906:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800390a:	68f8      	ldr	r0, [r7, #12]
 800390c:	f7ff fedc 	bl	80036c8 <SPI_WaitFifoStateUntilTimeout>
 8003910:	4603      	mov	r3, r0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d007      	beq.n	8003926 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800391a:	f043 0220 	orr.w	r2, r3, #32
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	e000      	b.n	8003928 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003926:	2300      	movs	r3, #0
}
 8003928:	4618      	mov	r0, r3
 800392a:	3710      	adds	r7, #16
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}

08003930 <memset>:
 8003930:	4402      	add	r2, r0
 8003932:	4603      	mov	r3, r0
 8003934:	4293      	cmp	r3, r2
 8003936:	d100      	bne.n	800393a <memset+0xa>
 8003938:	4770      	bx	lr
 800393a:	f803 1b01 	strb.w	r1, [r3], #1
 800393e:	e7f9      	b.n	8003934 <memset+0x4>

08003940 <__libc_init_array>:
 8003940:	b570      	push	{r4, r5, r6, lr}
 8003942:	4d0d      	ldr	r5, [pc, #52]	@ (8003978 <__libc_init_array+0x38>)
 8003944:	4c0d      	ldr	r4, [pc, #52]	@ (800397c <__libc_init_array+0x3c>)
 8003946:	1b64      	subs	r4, r4, r5
 8003948:	10a4      	asrs	r4, r4, #2
 800394a:	2600      	movs	r6, #0
 800394c:	42a6      	cmp	r6, r4
 800394e:	d109      	bne.n	8003964 <__libc_init_array+0x24>
 8003950:	4d0b      	ldr	r5, [pc, #44]	@ (8003980 <__libc_init_array+0x40>)
 8003952:	4c0c      	ldr	r4, [pc, #48]	@ (8003984 <__libc_init_array+0x44>)
 8003954:	f000 f818 	bl	8003988 <_init>
 8003958:	1b64      	subs	r4, r4, r5
 800395a:	10a4      	asrs	r4, r4, #2
 800395c:	2600      	movs	r6, #0
 800395e:	42a6      	cmp	r6, r4
 8003960:	d105      	bne.n	800396e <__libc_init_array+0x2e>
 8003962:	bd70      	pop	{r4, r5, r6, pc}
 8003964:	f855 3b04 	ldr.w	r3, [r5], #4
 8003968:	4798      	blx	r3
 800396a:	3601      	adds	r6, #1
 800396c:	e7ee      	b.n	800394c <__libc_init_array+0xc>
 800396e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003972:	4798      	blx	r3
 8003974:	3601      	adds	r6, #1
 8003976:	e7f2      	b.n	800395e <__libc_init_array+0x1e>
 8003978:	080039b0 	.word	0x080039b0
 800397c:	080039b0 	.word	0x080039b0
 8003980:	080039b0 	.word	0x080039b0
 8003984:	080039b4 	.word	0x080039b4

08003988 <_init>:
 8003988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800398a:	bf00      	nop
 800398c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800398e:	bc08      	pop	{r3}
 8003990:	469e      	mov	lr, r3
 8003992:	4770      	bx	lr

08003994 <_fini>:
 8003994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003996:	bf00      	nop
 8003998:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800399a:	bc08      	pop	{r3}
 800399c:	469e      	mov	lr, r3
 800399e:	4770      	bx	lr


web_bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006cf4  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001600  08006ed4  08006ed4  00007ed4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080084d4  080084d4  0000a0cc  2**0
                  CONTENTS
  4 .ARM          00000008  080084d4  080084d4  000094d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080084dc  080084dc  0000a0cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080084dc  080084dc  000094dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080084e0  080084e0  000094e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000cc  20000000  080084e4  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000017ac  200000cc  080085b0  0000a0cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001878  080085b0  0000a878  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a0cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000adde  00000000  00000000  0000a0fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025a4  00000000  00000000  00014eda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c58  00000000  00000000  00017480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000948  00000000  00000000  000180d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000263f5  00000000  00000000  00018a20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cf43  00000000  00000000  0003ee15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ebcf1  00000000  00000000  0004bd58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00137a49  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d44  00000000  00000000  00137a8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004d  00000000  00000000  0013b7d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200000cc 	.word	0x200000cc
 80001fc:	00000000 	.word	0x00000000
 8000200:	08006ebc 	.word	0x08006ebc

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200000d0 	.word	0x200000d0
 800021c:	08006ebc 	.word	0x08006ebc

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b084      	sub	sp, #16
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 80002f8:	4b22      	ldr	r3, [pc, #136]	@ (8000384 <WIZCHIP_READ+0x94>)
 80002fa:	68db      	ldr	r3, [r3, #12]
 80002fc:	4798      	blx	r3
   WIZCHIP.CS._select();
 80002fe:	4b21      	ldr	r3, [pc, #132]	@ (8000384 <WIZCHIP_READ+0x94>)
 8000300:	695b      	ldr	r3, [r3, #20]
 8000302:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8000304:	4b1f      	ldr	r3, [pc, #124]	@ (8000384 <WIZCHIP_READ+0x94>)
 8000306:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000308:	2b00      	cmp	r3, #0
 800030a:	d003      	beq.n	8000314 <WIZCHIP_READ+0x24>
 800030c:	4b1d      	ldr	r3, [pc, #116]	@ (8000384 <WIZCHIP_READ+0x94>)
 800030e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000310:	2b00      	cmp	r3, #0
 8000312:	d114      	bne.n	800033e <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8000314:	4b1b      	ldr	r3, [pc, #108]	@ (8000384 <WIZCHIP_READ+0x94>)
 8000316:	6a1b      	ldr	r3, [r3, #32]
 8000318:	687a      	ldr	r2, [r7, #4]
 800031a:	0c12      	lsrs	r2, r2, #16
 800031c:	b2d2      	uxtb	r2, r2
 800031e:	4610      	mov	r0, r2
 8000320:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8000322:	4b18      	ldr	r3, [pc, #96]	@ (8000384 <WIZCHIP_READ+0x94>)
 8000324:	6a1b      	ldr	r3, [r3, #32]
 8000326:	687a      	ldr	r2, [r7, #4]
 8000328:	0a12      	lsrs	r2, r2, #8
 800032a:	b2d2      	uxtb	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8000330:	4b14      	ldr	r3, [pc, #80]	@ (8000384 <WIZCHIP_READ+0x94>)
 8000332:	6a1b      	ldr	r3, [r3, #32]
 8000334:	687a      	ldr	r2, [r7, #4]
 8000336:	b2d2      	uxtb	r2, r2
 8000338:	4610      	mov	r0, r2
 800033a:	4798      	blx	r3
 800033c:	e011      	b.n	8000362 <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	0c1b      	lsrs	r3, r3, #16
 8000342:	b2db      	uxtb	r3, r3
 8000344:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	0a1b      	lsrs	r3, r3, #8
 800034a:	b2db      	uxtb	r3, r3
 800034c:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	b2db      	uxtb	r3, r3
 8000352:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8000354:	4b0b      	ldr	r3, [pc, #44]	@ (8000384 <WIZCHIP_READ+0x94>)
 8000356:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000358:	f107 020c 	add.w	r2, r7, #12
 800035c:	2103      	movs	r1, #3
 800035e:	4610      	mov	r0, r2
 8000360:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 8000362:	4b08      	ldr	r3, [pc, #32]	@ (8000384 <WIZCHIP_READ+0x94>)
 8000364:	69db      	ldr	r3, [r3, #28]
 8000366:	4798      	blx	r3
 8000368:	4603      	mov	r3, r0
 800036a:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 800036c:	4b05      	ldr	r3, [pc, #20]	@ (8000384 <WIZCHIP_READ+0x94>)
 800036e:	699b      	ldr	r3, [r3, #24]
 8000370:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8000372:	4b04      	ldr	r3, [pc, #16]	@ (8000384 <WIZCHIP_READ+0x94>)
 8000374:	691b      	ldr	r3, [r3, #16]
 8000376:	4798      	blx	r3
   return ret;
 8000378:	7bfb      	ldrb	r3, [r7, #15]
}
 800037a:	4618      	mov	r0, r3
 800037c:	3710      	adds	r7, #16
 800037e:	46bd      	mov	sp, r7
 8000380:	bd80      	pop	{r7, pc}
 8000382:	bf00      	nop
 8000384:	2000003c 	.word	0x2000003c

08000388 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b084      	sub	sp, #16
 800038c:	af00      	add	r7, sp, #0
 800038e:	6078      	str	r0, [r7, #4]
 8000390:	460b      	mov	r3, r1
 8000392:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8000394:	4b22      	ldr	r3, [pc, #136]	@ (8000420 <WIZCHIP_WRITE+0x98>)
 8000396:	68db      	ldr	r3, [r3, #12]
 8000398:	4798      	blx	r3
   WIZCHIP.CS._select();
 800039a:	4b21      	ldr	r3, [pc, #132]	@ (8000420 <WIZCHIP_WRITE+0x98>)
 800039c:	695b      	ldr	r3, [r3, #20]
 800039e:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	f043 0304 	orr.w	r3, r3, #4
 80003a6:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80003a8:	4b1d      	ldr	r3, [pc, #116]	@ (8000420 <WIZCHIP_WRITE+0x98>)
 80003aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d119      	bne.n	80003e4 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80003b0:	4b1b      	ldr	r3, [pc, #108]	@ (8000420 <WIZCHIP_WRITE+0x98>)
 80003b2:	6a1b      	ldr	r3, [r3, #32]
 80003b4:	687a      	ldr	r2, [r7, #4]
 80003b6:	0c12      	lsrs	r2, r2, #16
 80003b8:	b2d2      	uxtb	r2, r2
 80003ba:	4610      	mov	r0, r2
 80003bc:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80003be:	4b18      	ldr	r3, [pc, #96]	@ (8000420 <WIZCHIP_WRITE+0x98>)
 80003c0:	6a1b      	ldr	r3, [r3, #32]
 80003c2:	687a      	ldr	r2, [r7, #4]
 80003c4:	0a12      	lsrs	r2, r2, #8
 80003c6:	b2d2      	uxtb	r2, r2
 80003c8:	4610      	mov	r0, r2
 80003ca:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80003cc:	4b14      	ldr	r3, [pc, #80]	@ (8000420 <WIZCHIP_WRITE+0x98>)
 80003ce:	6a1b      	ldr	r3, [r3, #32]
 80003d0:	687a      	ldr	r2, [r7, #4]
 80003d2:	b2d2      	uxtb	r2, r2
 80003d4:	4610      	mov	r0, r2
 80003d6:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 80003d8:	4b11      	ldr	r3, [pc, #68]	@ (8000420 <WIZCHIP_WRITE+0x98>)
 80003da:	6a1b      	ldr	r3, [r3, #32]
 80003dc:	78fa      	ldrb	r2, [r7, #3]
 80003de:	4610      	mov	r0, r2
 80003e0:	4798      	blx	r3
 80003e2:	e013      	b.n	800040c <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	0c1b      	lsrs	r3, r3, #16
 80003e8:	b2db      	uxtb	r3, r3
 80003ea:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	0a1b      	lsrs	r3, r3, #8
 80003f0:	b2db      	uxtb	r3, r3
 80003f2:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	b2db      	uxtb	r3, r3
 80003f8:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 80003fa:	78fb      	ldrb	r3, [r7, #3]
 80003fc:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 80003fe:	4b08      	ldr	r3, [pc, #32]	@ (8000420 <WIZCHIP_WRITE+0x98>)
 8000400:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000402:	f107 020c 	add.w	r2, r7, #12
 8000406:	2104      	movs	r1, #4
 8000408:	4610      	mov	r0, r2
 800040a:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 800040c:	4b04      	ldr	r3, [pc, #16]	@ (8000420 <WIZCHIP_WRITE+0x98>)
 800040e:	699b      	ldr	r3, [r3, #24]
 8000410:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8000412:	4b03      	ldr	r3, [pc, #12]	@ (8000420 <WIZCHIP_WRITE+0x98>)
 8000414:	691b      	ldr	r3, [r3, #16]
 8000416:	4798      	blx	r3
}
 8000418:	bf00      	nop
 800041a:	3710      	adds	r7, #16
 800041c:	46bd      	mov	sp, r7
 800041e:	bd80      	pop	{r7, pc}
 8000420:	2000003c 	.word	0x2000003c

08000424 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8000424:	b590      	push	{r4, r7, lr}
 8000426:	b087      	sub	sp, #28
 8000428:	af00      	add	r7, sp, #0
 800042a:	60f8      	str	r0, [r7, #12]
 800042c:	60b9      	str	r1, [r7, #8]
 800042e:	4613      	mov	r3, r2
 8000430:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8000432:	4b2b      	ldr	r3, [pc, #172]	@ (80004e0 <WIZCHIP_READ_BUF+0xbc>)
 8000434:	68db      	ldr	r3, [r3, #12]
 8000436:	4798      	blx	r3
   WIZCHIP.CS._select();
 8000438:	4b29      	ldr	r3, [pc, #164]	@ (80004e0 <WIZCHIP_READ_BUF+0xbc>)
 800043a:	695b      	ldr	r3, [r3, #20]
 800043c:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800043e:	4b28      	ldr	r3, [pc, #160]	@ (80004e0 <WIZCHIP_READ_BUF+0xbc>)
 8000440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000442:	2b00      	cmp	r3, #0
 8000444:	d003      	beq.n	800044e <WIZCHIP_READ_BUF+0x2a>
 8000446:	4b26      	ldr	r3, [pc, #152]	@ (80004e0 <WIZCHIP_READ_BUF+0xbc>)
 8000448:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800044a:	2b00      	cmp	r3, #0
 800044c:	d126      	bne.n	800049c <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800044e:	4b24      	ldr	r3, [pc, #144]	@ (80004e0 <WIZCHIP_READ_BUF+0xbc>)
 8000450:	6a1b      	ldr	r3, [r3, #32]
 8000452:	68fa      	ldr	r2, [r7, #12]
 8000454:	0c12      	lsrs	r2, r2, #16
 8000456:	b2d2      	uxtb	r2, r2
 8000458:	4610      	mov	r0, r2
 800045a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800045c:	4b20      	ldr	r3, [pc, #128]	@ (80004e0 <WIZCHIP_READ_BUF+0xbc>)
 800045e:	6a1b      	ldr	r3, [r3, #32]
 8000460:	68fa      	ldr	r2, [r7, #12]
 8000462:	0a12      	lsrs	r2, r2, #8
 8000464:	b2d2      	uxtb	r2, r2
 8000466:	4610      	mov	r0, r2
 8000468:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800046a:	4b1d      	ldr	r3, [pc, #116]	@ (80004e0 <WIZCHIP_READ_BUF+0xbc>)
 800046c:	6a1b      	ldr	r3, [r3, #32]
 800046e:	68fa      	ldr	r2, [r7, #12]
 8000470:	b2d2      	uxtb	r2, r2
 8000472:	4610      	mov	r0, r2
 8000474:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8000476:	2300      	movs	r3, #0
 8000478:	82fb      	strh	r3, [r7, #22]
 800047a:	e00a      	b.n	8000492 <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 800047c:	4b18      	ldr	r3, [pc, #96]	@ (80004e0 <WIZCHIP_READ_BUF+0xbc>)
 800047e:	69db      	ldr	r3, [r3, #28]
 8000480:	8afa      	ldrh	r2, [r7, #22]
 8000482:	68b9      	ldr	r1, [r7, #8]
 8000484:	188c      	adds	r4, r1, r2
 8000486:	4798      	blx	r3
 8000488:	4603      	mov	r3, r0
 800048a:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 800048c:	8afb      	ldrh	r3, [r7, #22]
 800048e:	3301      	adds	r3, #1
 8000490:	82fb      	strh	r3, [r7, #22]
 8000492:	8afa      	ldrh	r2, [r7, #22]
 8000494:	88fb      	ldrh	r3, [r7, #6]
 8000496:	429a      	cmp	r2, r3
 8000498:	d3f0      	bcc.n	800047c <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800049a:	e017      	b.n	80004cc <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 800049c:	68fb      	ldr	r3, [r7, #12]
 800049e:	0c1b      	lsrs	r3, r3, #16
 80004a0:	b2db      	uxtb	r3, r3
 80004a2:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80004a4:	68fb      	ldr	r3, [r7, #12]
 80004a6:	0a1b      	lsrs	r3, r3, #8
 80004a8:	b2db      	uxtb	r3, r3
 80004aa:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80004ac:	68fb      	ldr	r3, [r7, #12]
 80004ae:	b2db      	uxtb	r3, r3
 80004b0:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80004b2:	4b0b      	ldr	r3, [pc, #44]	@ (80004e0 <WIZCHIP_READ_BUF+0xbc>)
 80004b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80004b6:	f107 0210 	add.w	r2, r7, #16
 80004ba:	2103      	movs	r1, #3
 80004bc:	4610      	mov	r0, r2
 80004be:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 80004c0:	4b07      	ldr	r3, [pc, #28]	@ (80004e0 <WIZCHIP_READ_BUF+0xbc>)
 80004c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80004c4:	88fa      	ldrh	r2, [r7, #6]
 80004c6:	4611      	mov	r1, r2
 80004c8:	68b8      	ldr	r0, [r7, #8]
 80004ca:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 80004cc:	4b04      	ldr	r3, [pc, #16]	@ (80004e0 <WIZCHIP_READ_BUF+0xbc>)
 80004ce:	699b      	ldr	r3, [r3, #24]
 80004d0:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80004d2:	4b03      	ldr	r3, [pc, #12]	@ (80004e0 <WIZCHIP_READ_BUF+0xbc>)
 80004d4:	691b      	ldr	r3, [r3, #16]
 80004d6:	4798      	blx	r3
}
 80004d8:	bf00      	nop
 80004da:	371c      	adds	r7, #28
 80004dc:	46bd      	mov	sp, r7
 80004de:	bd90      	pop	{r4, r7, pc}
 80004e0:	2000003c 	.word	0x2000003c

080004e4 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b086      	sub	sp, #24
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	60f8      	str	r0, [r7, #12]
 80004ec:	60b9      	str	r1, [r7, #8]
 80004ee:	4613      	mov	r3, r2
 80004f0:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 80004f2:	4b2b      	ldr	r3, [pc, #172]	@ (80005a0 <WIZCHIP_WRITE_BUF+0xbc>)
 80004f4:	68db      	ldr	r3, [r3, #12]
 80004f6:	4798      	blx	r3
   WIZCHIP.CS._select();
 80004f8:	4b29      	ldr	r3, [pc, #164]	@ (80005a0 <WIZCHIP_WRITE_BUF+0xbc>)
 80004fa:	695b      	ldr	r3, [r3, #20]
 80004fc:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 80004fe:	68fb      	ldr	r3, [r7, #12]
 8000500:	f043 0304 	orr.w	r3, r3, #4
 8000504:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8000506:	4b26      	ldr	r3, [pc, #152]	@ (80005a0 <WIZCHIP_WRITE_BUF+0xbc>)
 8000508:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800050a:	2b00      	cmp	r3, #0
 800050c:	d126      	bne.n	800055c <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800050e:	4b24      	ldr	r3, [pc, #144]	@ (80005a0 <WIZCHIP_WRITE_BUF+0xbc>)
 8000510:	6a1b      	ldr	r3, [r3, #32]
 8000512:	68fa      	ldr	r2, [r7, #12]
 8000514:	0c12      	lsrs	r2, r2, #16
 8000516:	b2d2      	uxtb	r2, r2
 8000518:	4610      	mov	r0, r2
 800051a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800051c:	4b20      	ldr	r3, [pc, #128]	@ (80005a0 <WIZCHIP_WRITE_BUF+0xbc>)
 800051e:	6a1b      	ldr	r3, [r3, #32]
 8000520:	68fa      	ldr	r2, [r7, #12]
 8000522:	0a12      	lsrs	r2, r2, #8
 8000524:	b2d2      	uxtb	r2, r2
 8000526:	4610      	mov	r0, r2
 8000528:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800052a:	4b1d      	ldr	r3, [pc, #116]	@ (80005a0 <WIZCHIP_WRITE_BUF+0xbc>)
 800052c:	6a1b      	ldr	r3, [r3, #32]
 800052e:	68fa      	ldr	r2, [r7, #12]
 8000530:	b2d2      	uxtb	r2, r2
 8000532:	4610      	mov	r0, r2
 8000534:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8000536:	2300      	movs	r3, #0
 8000538:	82fb      	strh	r3, [r7, #22]
 800053a:	e00a      	b.n	8000552 <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 800053c:	4b18      	ldr	r3, [pc, #96]	@ (80005a0 <WIZCHIP_WRITE_BUF+0xbc>)
 800053e:	6a1b      	ldr	r3, [r3, #32]
 8000540:	8afa      	ldrh	r2, [r7, #22]
 8000542:	68b9      	ldr	r1, [r7, #8]
 8000544:	440a      	add	r2, r1
 8000546:	7812      	ldrb	r2, [r2, #0]
 8000548:	4610      	mov	r0, r2
 800054a:	4798      	blx	r3
		for(i = 0; i < len; i++)
 800054c:	8afb      	ldrh	r3, [r7, #22]
 800054e:	3301      	adds	r3, #1
 8000550:	82fb      	strh	r3, [r7, #22]
 8000552:	8afa      	ldrh	r2, [r7, #22]
 8000554:	88fb      	ldrh	r3, [r7, #6]
 8000556:	429a      	cmp	r2, r3
 8000558:	d3f0      	bcc.n	800053c <WIZCHIP_WRITE_BUF+0x58>
 800055a:	e017      	b.n	800058c <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 800055c:	68fb      	ldr	r3, [r7, #12]
 800055e:	0c1b      	lsrs	r3, r3, #16
 8000560:	b2db      	uxtb	r3, r3
 8000562:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	0a1b      	lsrs	r3, r3, #8
 8000568:	b2db      	uxtb	r3, r3
 800056a:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	b2db      	uxtb	r3, r3
 8000570:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8000572:	4b0b      	ldr	r3, [pc, #44]	@ (80005a0 <WIZCHIP_WRITE_BUF+0xbc>)
 8000574:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000576:	f107 0210 	add.w	r2, r7, #16
 800057a:	2103      	movs	r1, #3
 800057c:	4610      	mov	r0, r2
 800057e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 8000580:	4b07      	ldr	r3, [pc, #28]	@ (80005a0 <WIZCHIP_WRITE_BUF+0xbc>)
 8000582:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000584:	88fa      	ldrh	r2, [r7, #6]
 8000586:	4611      	mov	r1, r2
 8000588:	68b8      	ldr	r0, [r7, #8]
 800058a:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 800058c:	4b04      	ldr	r3, [pc, #16]	@ (80005a0 <WIZCHIP_WRITE_BUF+0xbc>)
 800058e:	699b      	ldr	r3, [r3, #24]
 8000590:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8000592:	4b03      	ldr	r3, [pc, #12]	@ (80005a0 <WIZCHIP_WRITE_BUF+0xbc>)
 8000594:	691b      	ldr	r3, [r3, #16]
 8000596:	4798      	blx	r3
}
 8000598:	bf00      	nop
 800059a:	3718      	adds	r7, #24
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	2000003c 	.word	0x2000003c

080005a4 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 80005a4:	b590      	push	{r4, r7, lr}
 80005a6:	b085      	sub	sp, #20
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	4603      	mov	r3, r0
 80005ac:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 80005ae:	2300      	movs	r3, #0
 80005b0:	81fb      	strh	r3, [r7, #14]
 80005b2:	2300      	movs	r3, #0
 80005b4:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 80005b6:	79fb      	ldrb	r3, [r7, #7]
 80005b8:	009b      	lsls	r3, r3, #2
 80005ba:	3301      	adds	r3, #1
 80005bc:	00db      	lsls	r3, r3, #3
 80005be:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80005c2:	4618      	mov	r0, r3
 80005c4:	f7ff fe94 	bl	80002f0 <WIZCHIP_READ>
 80005c8:	4603      	mov	r3, r0
 80005ca:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 80005cc:	89bb      	ldrh	r3, [r7, #12]
 80005ce:	021b      	lsls	r3, r3, #8
 80005d0:	b29c      	uxth	r4, r3
 80005d2:	79fb      	ldrb	r3, [r7, #7]
 80005d4:	009b      	lsls	r3, r3, #2
 80005d6:	3301      	adds	r3, #1
 80005d8:	00db      	lsls	r3, r3, #3
 80005da:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 80005de:	4618      	mov	r0, r3
 80005e0:	f7ff fe86 	bl	80002f0 <WIZCHIP_READ>
 80005e4:	4603      	mov	r3, r0
 80005e6:	4423      	add	r3, r4
 80005e8:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 80005ea:	89bb      	ldrh	r3, [r7, #12]
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d019      	beq.n	8000624 <getSn_TX_FSR+0x80>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 80005f0:	79fb      	ldrb	r3, [r7, #7]
 80005f2:	009b      	lsls	r3, r3, #2
 80005f4:	3301      	adds	r3, #1
 80005f6:	00db      	lsls	r3, r3, #3
 80005f8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80005fc:	4618      	mov	r0, r3
 80005fe:	f7ff fe77 	bl	80002f0 <WIZCHIP_READ>
 8000602:	4603      	mov	r3, r0
 8000604:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8000606:	89fb      	ldrh	r3, [r7, #14]
 8000608:	021b      	lsls	r3, r3, #8
 800060a:	b29c      	uxth	r4, r3
 800060c:	79fb      	ldrb	r3, [r7, #7]
 800060e:	009b      	lsls	r3, r3, #2
 8000610:	3301      	adds	r3, #1
 8000612:	00db      	lsls	r3, r3, #3
 8000614:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 8000618:	4618      	mov	r0, r3
 800061a:	f7ff fe69 	bl	80002f0 <WIZCHIP_READ>
 800061e:	4603      	mov	r3, r0
 8000620:	4423      	add	r3, r4
 8000622:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8000624:	89fa      	ldrh	r2, [r7, #14]
 8000626:	89bb      	ldrh	r3, [r7, #12]
 8000628:	429a      	cmp	r2, r3
 800062a:	d1c4      	bne.n	80005b6 <getSn_TX_FSR+0x12>
   return val;
 800062c:	89fb      	ldrh	r3, [r7, #14]
}
 800062e:	4618      	mov	r0, r3
 8000630:	3714      	adds	r7, #20
 8000632:	46bd      	mov	sp, r7
 8000634:	bd90      	pop	{r4, r7, pc}

08000636 <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 8000636:	b590      	push	{r4, r7, lr}
 8000638:	b085      	sub	sp, #20
 800063a:	af00      	add	r7, sp, #0
 800063c:	4603      	mov	r3, r0
 800063e:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8000640:	2300      	movs	r3, #0
 8000642:	81fb      	strh	r3, [r7, #14]
 8000644:	2300      	movs	r3, #0
 8000646:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 8000648:	79fb      	ldrb	r3, [r7, #7]
 800064a:	009b      	lsls	r3, r3, #2
 800064c:	3301      	adds	r3, #1
 800064e:	00db      	lsls	r3, r3, #3
 8000650:	f503 5318 	add.w	r3, r3, #9728	@ 0x2600
 8000654:	4618      	mov	r0, r3
 8000656:	f7ff fe4b 	bl	80002f0 <WIZCHIP_READ>
 800065a:	4603      	mov	r3, r0
 800065c:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 800065e:	89bb      	ldrh	r3, [r7, #12]
 8000660:	021b      	lsls	r3, r3, #8
 8000662:	b29c      	uxth	r4, r3
 8000664:	79fb      	ldrb	r3, [r7, #7]
 8000666:	009b      	lsls	r3, r3, #2
 8000668:	3301      	adds	r3, #1
 800066a:	00db      	lsls	r3, r3, #3
 800066c:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 8000670:	4618      	mov	r0, r3
 8000672:	f7ff fe3d 	bl	80002f0 <WIZCHIP_READ>
 8000676:	4603      	mov	r3, r0
 8000678:	4423      	add	r3, r4
 800067a:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 800067c:	89bb      	ldrh	r3, [r7, #12]
 800067e:	2b00      	cmp	r3, #0
 8000680:	d019      	beq.n	80006b6 <getSn_RX_RSR+0x80>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 8000682:	79fb      	ldrb	r3, [r7, #7]
 8000684:	009b      	lsls	r3, r3, #2
 8000686:	3301      	adds	r3, #1
 8000688:	00db      	lsls	r3, r3, #3
 800068a:	f503 5318 	add.w	r3, r3, #9728	@ 0x2600
 800068e:	4618      	mov	r0, r3
 8000690:	f7ff fe2e 	bl	80002f0 <WIZCHIP_READ>
 8000694:	4603      	mov	r3, r0
 8000696:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8000698:	89fb      	ldrh	r3, [r7, #14]
 800069a:	021b      	lsls	r3, r3, #8
 800069c:	b29c      	uxth	r4, r3
 800069e:	79fb      	ldrb	r3, [r7, #7]
 80006a0:	009b      	lsls	r3, r3, #2
 80006a2:	3301      	adds	r3, #1
 80006a4:	00db      	lsls	r3, r3, #3
 80006a6:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 80006aa:	4618      	mov	r0, r3
 80006ac:	f7ff fe20 	bl	80002f0 <WIZCHIP_READ>
 80006b0:	4603      	mov	r3, r0
 80006b2:	4423      	add	r3, r4
 80006b4:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 80006b6:	89fa      	ldrh	r2, [r7, #14]
 80006b8:	89bb      	ldrh	r3, [r7, #12]
 80006ba:	429a      	cmp	r2, r3
 80006bc:	d1c4      	bne.n	8000648 <getSn_RX_RSR+0x12>
   return val;
 80006be:	89fb      	ldrh	r3, [r7, #14]
}
 80006c0:	4618      	mov	r0, r3
 80006c2:	3714      	adds	r7, #20
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd90      	pop	{r4, r7, pc}

080006c8 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 80006c8:	b590      	push	{r4, r7, lr}
 80006ca:	b085      	sub	sp, #20
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	4603      	mov	r3, r0
 80006d0:	6039      	str	r1, [r7, #0]
 80006d2:	71fb      	strb	r3, [r7, #7]
 80006d4:	4613      	mov	r3, r2
 80006d6:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 80006d8:	2300      	movs	r3, #0
 80006da:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 80006dc:	2300      	movs	r3, #0
 80006de:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 80006e0:	88bb      	ldrh	r3, [r7, #4]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d046      	beq.n	8000774 <wiz_send_data+0xac>
   ptr = getSn_TX_WR(sn);
 80006e6:	79fb      	ldrb	r3, [r7, #7]
 80006e8:	009b      	lsls	r3, r3, #2
 80006ea:	3301      	adds	r3, #1
 80006ec:	00db      	lsls	r3, r3, #3
 80006ee:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 80006f2:	4618      	mov	r0, r3
 80006f4:	f7ff fdfc 	bl	80002f0 <WIZCHIP_READ>
 80006f8:	4603      	mov	r3, r0
 80006fa:	021b      	lsls	r3, r3, #8
 80006fc:	b29c      	uxth	r4, r3
 80006fe:	79fb      	ldrb	r3, [r7, #7]
 8000700:	009b      	lsls	r3, r3, #2
 8000702:	3301      	adds	r3, #1
 8000704:	00db      	lsls	r3, r3, #3
 8000706:	f503 5314 	add.w	r3, r3, #9472	@ 0x2500
 800070a:	4618      	mov	r0, r3
 800070c:	f7ff fdf0 	bl	80002f0 <WIZCHIP_READ>
 8000710:	4603      	mov	r3, r0
 8000712:	4423      	add	r3, r4
 8000714:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 8000716:	89fb      	ldrh	r3, [r7, #14]
 8000718:	021b      	lsls	r3, r3, #8
 800071a:	79fa      	ldrb	r2, [r7, #7]
 800071c:	0092      	lsls	r2, r2, #2
 800071e:	3202      	adds	r2, #2
 8000720:	00d2      	lsls	r2, r2, #3
 8000722:	4413      	add	r3, r2
 8000724:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 8000726:	88bb      	ldrh	r3, [r7, #4]
 8000728:	461a      	mov	r2, r3
 800072a:	6839      	ldr	r1, [r7, #0]
 800072c:	68b8      	ldr	r0, [r7, #8]
 800072e:	f7ff fed9 	bl	80004e4 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 8000732:	89fa      	ldrh	r2, [r7, #14]
 8000734:	88bb      	ldrh	r3, [r7, #4]
 8000736:	4413      	add	r3, r2
 8000738:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 800073a:	79fb      	ldrb	r3, [r7, #7]
 800073c:	009b      	lsls	r3, r3, #2
 800073e:	3301      	adds	r3, #1
 8000740:	00db      	lsls	r3, r3, #3
 8000742:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 8000746:	461a      	mov	r2, r3
 8000748:	89fb      	ldrh	r3, [r7, #14]
 800074a:	0a1b      	lsrs	r3, r3, #8
 800074c:	b29b      	uxth	r3, r3
 800074e:	b2db      	uxtb	r3, r3
 8000750:	4619      	mov	r1, r3
 8000752:	4610      	mov	r0, r2
 8000754:	f7ff fe18 	bl	8000388 <WIZCHIP_WRITE>
 8000758:	79fb      	ldrb	r3, [r7, #7]
 800075a:	009b      	lsls	r3, r3, #2
 800075c:	3301      	adds	r3, #1
 800075e:	00db      	lsls	r3, r3, #3
 8000760:	f503 5314 	add.w	r3, r3, #9472	@ 0x2500
 8000764:	461a      	mov	r2, r3
 8000766:	89fb      	ldrh	r3, [r7, #14]
 8000768:	b2db      	uxtb	r3, r3
 800076a:	4619      	mov	r1, r3
 800076c:	4610      	mov	r0, r2
 800076e:	f7ff fe0b 	bl	8000388 <WIZCHIP_WRITE>
 8000772:	e000      	b.n	8000776 <wiz_send_data+0xae>
   if(len == 0)  return;
 8000774:	bf00      	nop
}
 8000776:	3714      	adds	r7, #20
 8000778:	46bd      	mov	sp, r7
 800077a:	bd90      	pop	{r4, r7, pc}

0800077c <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 800077c:	b590      	push	{r4, r7, lr}
 800077e:	b085      	sub	sp, #20
 8000780:	af00      	add	r7, sp, #0
 8000782:	4603      	mov	r3, r0
 8000784:	6039      	str	r1, [r7, #0]
 8000786:	71fb      	strb	r3, [r7, #7]
 8000788:	4613      	mov	r3, r2
 800078a:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 800078c:	2300      	movs	r3, #0
 800078e:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8000790:	2300      	movs	r3, #0
 8000792:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 8000794:	88bb      	ldrh	r3, [r7, #4]
 8000796:	2b00      	cmp	r3, #0
 8000798:	d046      	beq.n	8000828 <wiz_recv_data+0xac>
   ptr = getSn_RX_RD(sn);
 800079a:	79fb      	ldrb	r3, [r7, #7]
 800079c:	009b      	lsls	r3, r3, #2
 800079e:	3301      	adds	r3, #1
 80007a0:	00db      	lsls	r3, r3, #3
 80007a2:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 80007a6:	4618      	mov	r0, r3
 80007a8:	f7ff fda2 	bl	80002f0 <WIZCHIP_READ>
 80007ac:	4603      	mov	r3, r0
 80007ae:	021b      	lsls	r3, r3, #8
 80007b0:	b29c      	uxth	r4, r3
 80007b2:	79fb      	ldrb	r3, [r7, #7]
 80007b4:	009b      	lsls	r3, r3, #2
 80007b6:	3301      	adds	r3, #1
 80007b8:	00db      	lsls	r3, r3, #3
 80007ba:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 80007be:	4618      	mov	r0, r3
 80007c0:	f7ff fd96 	bl	80002f0 <WIZCHIP_READ>
 80007c4:	4603      	mov	r3, r0
 80007c6:	4423      	add	r3, r4
 80007c8:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 80007ca:	89fb      	ldrh	r3, [r7, #14]
 80007cc:	021b      	lsls	r3, r3, #8
 80007ce:	79fa      	ldrb	r2, [r7, #7]
 80007d0:	0092      	lsls	r2, r2, #2
 80007d2:	3203      	adds	r2, #3
 80007d4:	00d2      	lsls	r2, r2, #3
 80007d6:	4413      	add	r3, r2
 80007d8:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 80007da:	88bb      	ldrh	r3, [r7, #4]
 80007dc:	461a      	mov	r2, r3
 80007de:	6839      	ldr	r1, [r7, #0]
 80007e0:	68b8      	ldr	r0, [r7, #8]
 80007e2:	f7ff fe1f 	bl	8000424 <WIZCHIP_READ_BUF>
   ptr += len;
 80007e6:	89fa      	ldrh	r2, [r7, #14]
 80007e8:	88bb      	ldrh	r3, [r7, #4]
 80007ea:	4413      	add	r3, r2
 80007ec:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 80007ee:	79fb      	ldrb	r3, [r7, #7]
 80007f0:	009b      	lsls	r3, r3, #2
 80007f2:	3301      	adds	r3, #1
 80007f4:	00db      	lsls	r3, r3, #3
 80007f6:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 80007fa:	461a      	mov	r2, r3
 80007fc:	89fb      	ldrh	r3, [r7, #14]
 80007fe:	0a1b      	lsrs	r3, r3, #8
 8000800:	b29b      	uxth	r3, r3
 8000802:	b2db      	uxtb	r3, r3
 8000804:	4619      	mov	r1, r3
 8000806:	4610      	mov	r0, r2
 8000808:	f7ff fdbe 	bl	8000388 <WIZCHIP_WRITE>
 800080c:	79fb      	ldrb	r3, [r7, #7]
 800080e:	009b      	lsls	r3, r3, #2
 8000810:	3301      	adds	r3, #1
 8000812:	00db      	lsls	r3, r3, #3
 8000814:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 8000818:	461a      	mov	r2, r3
 800081a:	89fb      	ldrh	r3, [r7, #14]
 800081c:	b2db      	uxtb	r3, r3
 800081e:	4619      	mov	r1, r3
 8000820:	4610      	mov	r0, r2
 8000822:	f7ff fdb1 	bl	8000388 <WIZCHIP_WRITE>
 8000826:	e000      	b.n	800082a <wiz_recv_data+0xae>
   if(len == 0) return;
 8000828:	bf00      	nop
}
 800082a:	3714      	adds	r7, #20
 800082c:	46bd      	mov	sp, r7
 800082e:	bd90      	pop	{r4, r7, pc}

08000830 <make_http_response_head>:
void make_http_response_head(
	char * buf, 	/**< pointer to response header to be made */
	char type, 	/**< response type */
	uint32_t len	/**< size of response header */
	)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b088      	sub	sp, #32
 8000834:	af00      	add	r7, sp, #0
 8000836:	60f8      	str	r0, [r7, #12]
 8000838:	460b      	mov	r3, r1
 800083a:	607a      	str	r2, [r7, #4]
 800083c:	72fb      	strb	r3, [r7, #11]
	char * head;
	char tmp[10];
			
	/*  file type*/
	if 	(type == PTYPE_HTML) 		head = RES_HTMLHEAD_OK;
 800083e:	7afb      	ldrb	r3, [r7, #11]
 8000840:	2b01      	cmp	r3, #1
 8000842:	d102      	bne.n	800084a <make_http_response_head+0x1a>
 8000844:	4b42      	ldr	r3, [pc, #264]	@ (8000950 <make_http_response_head+0x120>)
 8000846:	61fb      	str	r3, [r7, #28]
 8000848:	e061      	b.n	800090e <make_http_response_head+0xde>
	else if (type == PTYPE_GIF)		head = RES_GIFHEAD_OK;
 800084a:	7afb      	ldrb	r3, [r7, #11]
 800084c:	2b02      	cmp	r3, #2
 800084e:	d102      	bne.n	8000856 <make_http_response_head+0x26>
 8000850:	4b40      	ldr	r3, [pc, #256]	@ (8000954 <make_http_response_head+0x124>)
 8000852:	61fb      	str	r3, [r7, #28]
 8000854:	e05b      	b.n	800090e <make_http_response_head+0xde>
	else if (type == PTYPE_TEXT)	head = RES_TEXTHEAD_OK;
 8000856:	7afb      	ldrb	r3, [r7, #11]
 8000858:	2b03      	cmp	r3, #3
 800085a:	d102      	bne.n	8000862 <make_http_response_head+0x32>
 800085c:	4b3e      	ldr	r3, [pc, #248]	@ (8000958 <make_http_response_head+0x128>)
 800085e:	61fb      	str	r3, [r7, #28]
 8000860:	e055      	b.n	800090e <make_http_response_head+0xde>
	else if (type == PTYPE_JPEG)	head = RES_JPEGHEAD_OK;
 8000862:	7afb      	ldrb	r3, [r7, #11]
 8000864:	2b04      	cmp	r3, #4
 8000866:	d102      	bne.n	800086e <make_http_response_head+0x3e>
 8000868:	4b3c      	ldr	r3, [pc, #240]	@ (800095c <make_http_response_head+0x12c>)
 800086a:	61fb      	str	r3, [r7, #28]
 800086c:	e04f      	b.n	800090e <make_http_response_head+0xde>
	else if (type == PTYPE_FLASH)	head = RES_FLASHHEAD_OK;
 800086e:	7afb      	ldrb	r3, [r7, #11]
 8000870:	2b05      	cmp	r3, #5
 8000872:	d102      	bne.n	800087a <make_http_response_head+0x4a>
 8000874:	4b3a      	ldr	r3, [pc, #232]	@ (8000960 <make_http_response_head+0x130>)
 8000876:	61fb      	str	r3, [r7, #28]
 8000878:	e049      	b.n	800090e <make_http_response_head+0xde>
	else if (type == PTYPE_XML) 	head =  RES_XMLHEAD_OK;
 800087a:	7afb      	ldrb	r3, [r7, #11]
 800087c:	2b09      	cmp	r3, #9
 800087e:	d102      	bne.n	8000886 <make_http_response_head+0x56>
 8000880:	4b38      	ldr	r3, [pc, #224]	@ (8000964 <make_http_response_head+0x134>)
 8000882:	61fb      	str	r3, [r7, #28]
 8000884:	e043      	b.n	800090e <make_http_response_head+0xde>
	else if (type == PTYPE_CSS) 	head = RES_CSSHEAD_OK;
 8000886:	7afb      	ldrb	r3, [r7, #11]
 8000888:	2b0a      	cmp	r3, #10
 800088a:	d102      	bne.n	8000892 <make_http_response_head+0x62>
 800088c:	4b36      	ldr	r3, [pc, #216]	@ (8000968 <make_http_response_head+0x138>)
 800088e:	61fb      	str	r3, [r7, #28]
 8000890:	e03d      	b.n	800090e <make_http_response_head+0xde>
	else if (type == PTYPE_JSON)	head = RES_JSONHEAD_OK;
 8000892:	7afb      	ldrb	r3, [r7, #11]
 8000894:	2b0c      	cmp	r3, #12
 8000896:	d102      	bne.n	800089e <make_http_response_head+0x6e>
 8000898:	4b34      	ldr	r3, [pc, #208]	@ (800096c <make_http_response_head+0x13c>)
 800089a:	61fb      	str	r3, [r7, #28]
 800089c:	e037      	b.n	800090e <make_http_response_head+0xde>
	else if (type == PTYPE_JS)		head = RES_JSHEAD_OK;
 800089e:	7afb      	ldrb	r3, [r7, #11]
 80008a0:	2b0b      	cmp	r3, #11
 80008a2:	d102      	bne.n	80008aa <make_http_response_head+0x7a>
 80008a4:	4b32      	ldr	r3, [pc, #200]	@ (8000970 <make_http_response_head+0x140>)
 80008a6:	61fb      	str	r3, [r7, #28]
 80008a8:	e031      	b.n	800090e <make_http_response_head+0xde>
	else if (type == PTYPE_CGI)		head = RES_CGIHEAD_OK;
 80008aa:	7afb      	ldrb	r3, [r7, #11]
 80008ac:	2b08      	cmp	r3, #8
 80008ae:	d102      	bne.n	80008b6 <make_http_response_head+0x86>
 80008b0:	4b30      	ldr	r3, [pc, #192]	@ (8000974 <make_http_response_head+0x144>)
 80008b2:	61fb      	str	r3, [r7, #28]
 80008b4:	e02b      	b.n	800090e <make_http_response_head+0xde>
	else if (type == PTYPE_PNG)		head = RES_PNGHEAD_OK;
 80008b6:	7afb      	ldrb	r3, [r7, #11]
 80008b8:	2b0d      	cmp	r3, #13
 80008ba:	d102      	bne.n	80008c2 <make_http_response_head+0x92>
 80008bc:	4b2e      	ldr	r3, [pc, #184]	@ (8000978 <make_http_response_head+0x148>)
 80008be:	61fb      	str	r3, [r7, #28]
 80008c0:	e025      	b.n	800090e <make_http_response_head+0xde>
	else if (type == PTYPE_ICO)		head = RES_ICOHEAD_OK;
 80008c2:	7afb      	ldrb	r3, [r7, #11]
 80008c4:	2b0e      	cmp	r3, #14
 80008c6:	d102      	bne.n	80008ce <make_http_response_head+0x9e>
 80008c8:	4b2c      	ldr	r3, [pc, #176]	@ (800097c <make_http_response_head+0x14c>)
 80008ca:	61fb      	str	r3, [r7, #28]
 80008cc:	e01f      	b.n	800090e <make_http_response_head+0xde>
	else if (type == PTYPE_TTF)		head = RES_TTFHEAD_OK;
 80008ce:	7afb      	ldrb	r3, [r7, #11]
 80008d0:	2b14      	cmp	r3, #20
 80008d2:	d102      	bne.n	80008da <make_http_response_head+0xaa>
 80008d4:	4b2a      	ldr	r3, [pc, #168]	@ (8000980 <make_http_response_head+0x150>)
 80008d6:	61fb      	str	r3, [r7, #28]
 80008d8:	e019      	b.n	800090e <make_http_response_head+0xde>
	else if (type == PTYPE_OTF)		head = RES_OTFHEAD_OK;
 80008da:	7afb      	ldrb	r3, [r7, #11]
 80008dc:	2b15      	cmp	r3, #21
 80008de:	d102      	bne.n	80008e6 <make_http_response_head+0xb6>
 80008e0:	4b28      	ldr	r3, [pc, #160]	@ (8000984 <make_http_response_head+0x154>)
 80008e2:	61fb      	str	r3, [r7, #28]
 80008e4:	e013      	b.n	800090e <make_http_response_head+0xde>
	else if (type == PTYPE_WOFF)	head = RES_WOFFHEAD_OK;
 80008e6:	7afb      	ldrb	r3, [r7, #11]
 80008e8:	2b16      	cmp	r3, #22
 80008ea:	d102      	bne.n	80008f2 <make_http_response_head+0xc2>
 80008ec:	4b26      	ldr	r3, [pc, #152]	@ (8000988 <make_http_response_head+0x158>)
 80008ee:	61fb      	str	r3, [r7, #28]
 80008f0:	e00d      	b.n	800090e <make_http_response_head+0xde>
	else if (type == PTYPE_EOT)		head = RES_EOTHEAD_OK;
 80008f2:	7afb      	ldrb	r3, [r7, #11]
 80008f4:	2b17      	cmp	r3, #23
 80008f6:	d102      	bne.n	80008fe <make_http_response_head+0xce>
 80008f8:	4b24      	ldr	r3, [pc, #144]	@ (800098c <make_http_response_head+0x15c>)
 80008fa:	61fb      	str	r3, [r7, #28]
 80008fc:	e007      	b.n	800090e <make_http_response_head+0xde>
	else if (type == PTYPE_SVG)		head = RES_SVGHEAD_OK;
 80008fe:	7afb      	ldrb	r3, [r7, #11]
 8000900:	2b18      	cmp	r3, #24
 8000902:	d102      	bne.n	800090a <make_http_response_head+0xda>
 8000904:	4b22      	ldr	r3, [pc, #136]	@ (8000990 <make_http_response_head+0x160>)
 8000906:	61fb      	str	r3, [r7, #28]
 8000908:	e001      	b.n	800090e <make_http_response_head+0xde>
	{
		head = NULL;
		printf("\r\n\r\n-MAKE HEAD UNKNOWN-\r\n");
	}
#else
	else head = NULL;
 800090a:	2300      	movs	r3, #0
 800090c:	61fb      	str	r3, [r7, #28]
#endif	

	sprintf(tmp, "%ld", len);
 800090e:	f107 0310 	add.w	r3, r7, #16
 8000912:	687a      	ldr	r2, [r7, #4]
 8000914:	491f      	ldr	r1, [pc, #124]	@ (8000994 <make_http_response_head+0x164>)
 8000916:	4618      	mov	r0, r3
 8000918:	f005 fa34 	bl	8005d84 <siprintf>
	strcpy(buf, head);
 800091c:	69f9      	ldr	r1, [r7, #28]
 800091e:	68f8      	ldr	r0, [r7, #12]
 8000920:	f005 fc47 	bl	80061b2 <strcpy>
	strcat(buf, tmp);
 8000924:	f107 0310 	add.w	r3, r7, #16
 8000928:	4619      	mov	r1, r3
 800092a:	68f8      	ldr	r0, [r7, #12]
 800092c:	f005 fb2a 	bl	8005f84 <strcat>
	strcat(buf, "\r\n\r\n");
 8000930:	68f8      	ldr	r0, [r7, #12]
 8000932:	f7ff fc7f 	bl	8000234 <strlen>
 8000936:	4603      	mov	r3, r0
 8000938:	461a      	mov	r2, r3
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	4413      	add	r3, r2
 800093e:	4a16      	ldr	r2, [pc, #88]	@ (8000998 <make_http_response_head+0x168>)
 8000940:	6810      	ldr	r0, [r2, #0]
 8000942:	6018      	str	r0, [r3, #0]
 8000944:	7912      	ldrb	r2, [r2, #4]
 8000946:	711a      	strb	r2, [r3, #4]
}
 8000948:	bf00      	nop
 800094a:	3720      	adds	r7, #32
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	08006ed4 	.word	0x08006ed4
 8000954:	08006f28 	.word	0x08006f28
 8000958:	08006f64 	.word	0x08006f64
 800095c:	08006fa0 	.word	0x08006fa0
 8000960:	08006fdc 	.word	0x08006fdc
 8000964:	0800702c 	.word	0x0800702c
 8000968:	08007080 	.word	0x08007080
 800096c:	080070bc 	.word	0x080070bc
 8000970:	08007100 	.word	0x08007100
 8000974:	08007148 	.word	0x08007148
 8000978:	08007184 	.word	0x08007184
 800097c:	080071c0 	.word	0x080071c0
 8000980:	08007200 	.word	0x08007200
 8000984:	08007250 	.word	0x08007250
 8000988:	080072a0 	.word	0x080072a0
 800098c:	080072e8 	.word	0x080072e8
 8000990:	08007338 	.word	0x08007338
 8000994:	08007378 	.word	0x08007378
 8000998:	0800737c 	.word	0x0800737c

0800099c <find_http_uri_type>:
 */ 
void find_http_uri_type(
	uint8_t * type, 	/**< type to be returned */
	uint8_t * buff		/**< file name */
	) 
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b084      	sub	sp, #16
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
 80009a4:	6039      	str	r1, [r7, #0]
	/* Decide type according to extension*/

	char * buf;
	buf = (char *)buff;
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	60fb      	str	r3, [r7, #12]

	if 	(strstr(buf, ".htm")	|| strstr(buf, ".html"))	*type = PTYPE_HTML;
 80009aa:	499f      	ldr	r1, [pc, #636]	@ (8000c28 <find_http_uri_type+0x28c>)
 80009ac:	68f8      	ldr	r0, [r7, #12]
 80009ae:	f005 fb67 	bl	8006080 <strstr>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d106      	bne.n	80009c6 <find_http_uri_type+0x2a>
 80009b8:	499c      	ldr	r1, [pc, #624]	@ (8000c2c <find_http_uri_type+0x290>)
 80009ba:	68f8      	ldr	r0, [r7, #12]
 80009bc:	f005 fb60 	bl	8006080 <strstr>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d003      	beq.n	80009ce <find_http_uri_type+0x32>
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	2201      	movs	r2, #1
 80009ca:	701a      	strb	r2, [r3, #0]
 80009cc:	e127      	b.n	8000c1e <find_http_uri_type+0x282>
	else if (strstr(buf, ".gif"))							*type = PTYPE_GIF;
 80009ce:	4998      	ldr	r1, [pc, #608]	@ (8000c30 <find_http_uri_type+0x294>)
 80009d0:	68f8      	ldr	r0, [r7, #12]
 80009d2:	f005 fb55 	bl	8006080 <strstr>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d003      	beq.n	80009e4 <find_http_uri_type+0x48>
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	2202      	movs	r2, #2
 80009e0:	701a      	strb	r2, [r3, #0]
	else if (strstr(buf, ".otf") 	|| strstr(buf,".OTF"))	*type = PTYPE_OTF;
	else if (strstr(buf, ".woff") 	|| strstr(buf,".WOFF"))	*type = PTYPE_WOFF;
	else if (strstr(buf, ".eot") 	|| strstr(buf,".EOT"))	*type = PTYPE_EOT;
	else if (strstr(buf, ".svg") 	|| strstr(buf,".SVG"))	*type = PTYPE_SVG;
	else 													*type = PTYPE_ERR;
}
 80009e2:	e11c      	b.n	8000c1e <find_http_uri_type+0x282>
	else if (strstr(buf, ".text") 	|| strstr(buf,".txt"))	*type = PTYPE_TEXT;
 80009e4:	4993      	ldr	r1, [pc, #588]	@ (8000c34 <find_http_uri_type+0x298>)
 80009e6:	68f8      	ldr	r0, [r7, #12]
 80009e8:	f005 fb4a 	bl	8006080 <strstr>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d106      	bne.n	8000a00 <find_http_uri_type+0x64>
 80009f2:	4991      	ldr	r1, [pc, #580]	@ (8000c38 <find_http_uri_type+0x29c>)
 80009f4:	68f8      	ldr	r0, [r7, #12]
 80009f6:	f005 fb43 	bl	8006080 <strstr>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d003      	beq.n	8000a08 <find_http_uri_type+0x6c>
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	2203      	movs	r2, #3
 8000a04:	701a      	strb	r2, [r3, #0]
 8000a06:	e10a      	b.n	8000c1e <find_http_uri_type+0x282>
	else if (strstr(buf, ".jpeg") 	|| strstr(buf,".jpg"))	*type = PTYPE_JPEG;
 8000a08:	498c      	ldr	r1, [pc, #560]	@ (8000c3c <find_http_uri_type+0x2a0>)
 8000a0a:	68f8      	ldr	r0, [r7, #12]
 8000a0c:	f005 fb38 	bl	8006080 <strstr>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d106      	bne.n	8000a24 <find_http_uri_type+0x88>
 8000a16:	498a      	ldr	r1, [pc, #552]	@ (8000c40 <find_http_uri_type+0x2a4>)
 8000a18:	68f8      	ldr	r0, [r7, #12]
 8000a1a:	f005 fb31 	bl	8006080 <strstr>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d003      	beq.n	8000a2c <find_http_uri_type+0x90>
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	2204      	movs	r2, #4
 8000a28:	701a      	strb	r2, [r3, #0]
 8000a2a:	e0f8      	b.n	8000c1e <find_http_uri_type+0x282>
	else if (strstr(buf, ".swf")) 							*type = PTYPE_FLASH;
 8000a2c:	4985      	ldr	r1, [pc, #532]	@ (8000c44 <find_http_uri_type+0x2a8>)
 8000a2e:	68f8      	ldr	r0, [r7, #12]
 8000a30:	f005 fb26 	bl	8006080 <strstr>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d003      	beq.n	8000a42 <find_http_uri_type+0xa6>
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	2205      	movs	r2, #5
 8000a3e:	701a      	strb	r2, [r3, #0]
}
 8000a40:	e0ed      	b.n	8000c1e <find_http_uri_type+0x282>
	else if (strstr(buf, ".cgi") 	|| strstr(buf,".CGI"))	*type = PTYPE_CGI;
 8000a42:	4981      	ldr	r1, [pc, #516]	@ (8000c48 <find_http_uri_type+0x2ac>)
 8000a44:	68f8      	ldr	r0, [r7, #12]
 8000a46:	f005 fb1b 	bl	8006080 <strstr>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d106      	bne.n	8000a5e <find_http_uri_type+0xc2>
 8000a50:	497e      	ldr	r1, [pc, #504]	@ (8000c4c <find_http_uri_type+0x2b0>)
 8000a52:	68f8      	ldr	r0, [r7, #12]
 8000a54:	f005 fb14 	bl	8006080 <strstr>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d003      	beq.n	8000a66 <find_http_uri_type+0xca>
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	2208      	movs	r2, #8
 8000a62:	701a      	strb	r2, [r3, #0]
 8000a64:	e0db      	b.n	8000c1e <find_http_uri_type+0x282>
	else if (strstr(buf, ".json") 	|| strstr(buf,".JSON"))	*type = PTYPE_JSON;
 8000a66:	497a      	ldr	r1, [pc, #488]	@ (8000c50 <find_http_uri_type+0x2b4>)
 8000a68:	68f8      	ldr	r0, [r7, #12]
 8000a6a:	f005 fb09 	bl	8006080 <strstr>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d106      	bne.n	8000a82 <find_http_uri_type+0xe6>
 8000a74:	4977      	ldr	r1, [pc, #476]	@ (8000c54 <find_http_uri_type+0x2b8>)
 8000a76:	68f8      	ldr	r0, [r7, #12]
 8000a78:	f005 fb02 	bl	8006080 <strstr>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d003      	beq.n	8000a8a <find_http_uri_type+0xee>
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	220c      	movs	r2, #12
 8000a86:	701a      	strb	r2, [r3, #0]
 8000a88:	e0c9      	b.n	8000c1e <find_http_uri_type+0x282>
	else if (strstr(buf, ".js") 	|| strstr(buf,".JS"))	*type = PTYPE_JS;
 8000a8a:	4973      	ldr	r1, [pc, #460]	@ (8000c58 <find_http_uri_type+0x2bc>)
 8000a8c:	68f8      	ldr	r0, [r7, #12]
 8000a8e:	f005 faf7 	bl	8006080 <strstr>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d106      	bne.n	8000aa6 <find_http_uri_type+0x10a>
 8000a98:	4970      	ldr	r1, [pc, #448]	@ (8000c5c <find_http_uri_type+0x2c0>)
 8000a9a:	68f8      	ldr	r0, [r7, #12]
 8000a9c:	f005 faf0 	bl	8006080 <strstr>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d003      	beq.n	8000aae <find_http_uri_type+0x112>
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	220b      	movs	r2, #11
 8000aaa:	701a      	strb	r2, [r3, #0]
 8000aac:	e0b7      	b.n	8000c1e <find_http_uri_type+0x282>
	else if (strstr(buf, ".CGI") 	|| strstr(buf,".cgi"))	*type = PTYPE_CGI;
 8000aae:	4967      	ldr	r1, [pc, #412]	@ (8000c4c <find_http_uri_type+0x2b0>)
 8000ab0:	68f8      	ldr	r0, [r7, #12]
 8000ab2:	f005 fae5 	bl	8006080 <strstr>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d106      	bne.n	8000aca <find_http_uri_type+0x12e>
 8000abc:	4962      	ldr	r1, [pc, #392]	@ (8000c48 <find_http_uri_type+0x2ac>)
 8000abe:	68f8      	ldr	r0, [r7, #12]
 8000ac0:	f005 fade 	bl	8006080 <strstr>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d003      	beq.n	8000ad2 <find_http_uri_type+0x136>
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	2208      	movs	r2, #8
 8000ace:	701a      	strb	r2, [r3, #0]
 8000ad0:	e0a5      	b.n	8000c1e <find_http_uri_type+0x282>
	else if (strstr(buf, ".xml") 	|| strstr(buf,".XML"))	*type = PTYPE_XML;
 8000ad2:	4963      	ldr	r1, [pc, #396]	@ (8000c60 <find_http_uri_type+0x2c4>)
 8000ad4:	68f8      	ldr	r0, [r7, #12]
 8000ad6:	f005 fad3 	bl	8006080 <strstr>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d106      	bne.n	8000aee <find_http_uri_type+0x152>
 8000ae0:	4960      	ldr	r1, [pc, #384]	@ (8000c64 <find_http_uri_type+0x2c8>)
 8000ae2:	68f8      	ldr	r0, [r7, #12]
 8000ae4:	f005 facc 	bl	8006080 <strstr>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d003      	beq.n	8000af6 <find_http_uri_type+0x15a>
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	2209      	movs	r2, #9
 8000af2:	701a      	strb	r2, [r3, #0]
 8000af4:	e093      	b.n	8000c1e <find_http_uri_type+0x282>
	else if (strstr(buf, ".css") 	|| strstr(buf,".CSS"))	*type = PTYPE_CSS;
 8000af6:	495c      	ldr	r1, [pc, #368]	@ (8000c68 <find_http_uri_type+0x2cc>)
 8000af8:	68f8      	ldr	r0, [r7, #12]
 8000afa:	f005 fac1 	bl	8006080 <strstr>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d106      	bne.n	8000b12 <find_http_uri_type+0x176>
 8000b04:	4959      	ldr	r1, [pc, #356]	@ (8000c6c <find_http_uri_type+0x2d0>)
 8000b06:	68f8      	ldr	r0, [r7, #12]
 8000b08:	f005 faba 	bl	8006080 <strstr>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d003      	beq.n	8000b1a <find_http_uri_type+0x17e>
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	220a      	movs	r2, #10
 8000b16:	701a      	strb	r2, [r3, #0]
 8000b18:	e081      	b.n	8000c1e <find_http_uri_type+0x282>
	else if (strstr(buf, ".png") 	|| strstr(buf,".PNG"))	*type = PTYPE_PNG;
 8000b1a:	4955      	ldr	r1, [pc, #340]	@ (8000c70 <find_http_uri_type+0x2d4>)
 8000b1c:	68f8      	ldr	r0, [r7, #12]
 8000b1e:	f005 faaf 	bl	8006080 <strstr>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d106      	bne.n	8000b36 <find_http_uri_type+0x19a>
 8000b28:	4952      	ldr	r1, [pc, #328]	@ (8000c74 <find_http_uri_type+0x2d8>)
 8000b2a:	68f8      	ldr	r0, [r7, #12]
 8000b2c:	f005 faa8 	bl	8006080 <strstr>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d003      	beq.n	8000b3e <find_http_uri_type+0x1a2>
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	220d      	movs	r2, #13
 8000b3a:	701a      	strb	r2, [r3, #0]
 8000b3c:	e06f      	b.n	8000c1e <find_http_uri_type+0x282>
	else if (strstr(buf, ".ico") 	|| strstr(buf,".ICO"))	*type = PTYPE_ICO;
 8000b3e:	494e      	ldr	r1, [pc, #312]	@ (8000c78 <find_http_uri_type+0x2dc>)
 8000b40:	68f8      	ldr	r0, [r7, #12]
 8000b42:	f005 fa9d 	bl	8006080 <strstr>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d106      	bne.n	8000b5a <find_http_uri_type+0x1be>
 8000b4c:	494b      	ldr	r1, [pc, #300]	@ (8000c7c <find_http_uri_type+0x2e0>)
 8000b4e:	68f8      	ldr	r0, [r7, #12]
 8000b50:	f005 fa96 	bl	8006080 <strstr>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d003      	beq.n	8000b62 <find_http_uri_type+0x1c6>
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	220e      	movs	r2, #14
 8000b5e:	701a      	strb	r2, [r3, #0]
 8000b60:	e05d      	b.n	8000c1e <find_http_uri_type+0x282>
	else if (strstr(buf, ".ttf") 	|| strstr(buf,".TTF"))	*type = PTYPE_TTF;
 8000b62:	4947      	ldr	r1, [pc, #284]	@ (8000c80 <find_http_uri_type+0x2e4>)
 8000b64:	68f8      	ldr	r0, [r7, #12]
 8000b66:	f005 fa8b 	bl	8006080 <strstr>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d106      	bne.n	8000b7e <find_http_uri_type+0x1e2>
 8000b70:	4944      	ldr	r1, [pc, #272]	@ (8000c84 <find_http_uri_type+0x2e8>)
 8000b72:	68f8      	ldr	r0, [r7, #12]
 8000b74:	f005 fa84 	bl	8006080 <strstr>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d003      	beq.n	8000b86 <find_http_uri_type+0x1ea>
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	2214      	movs	r2, #20
 8000b82:	701a      	strb	r2, [r3, #0]
 8000b84:	e04b      	b.n	8000c1e <find_http_uri_type+0x282>
	else if (strstr(buf, ".otf") 	|| strstr(buf,".OTF"))	*type = PTYPE_OTF;
 8000b86:	4940      	ldr	r1, [pc, #256]	@ (8000c88 <find_http_uri_type+0x2ec>)
 8000b88:	68f8      	ldr	r0, [r7, #12]
 8000b8a:	f005 fa79 	bl	8006080 <strstr>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d106      	bne.n	8000ba2 <find_http_uri_type+0x206>
 8000b94:	493d      	ldr	r1, [pc, #244]	@ (8000c8c <find_http_uri_type+0x2f0>)
 8000b96:	68f8      	ldr	r0, [r7, #12]
 8000b98:	f005 fa72 	bl	8006080 <strstr>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d003      	beq.n	8000baa <find_http_uri_type+0x20e>
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	2215      	movs	r2, #21
 8000ba6:	701a      	strb	r2, [r3, #0]
 8000ba8:	e039      	b.n	8000c1e <find_http_uri_type+0x282>
	else if (strstr(buf, ".woff") 	|| strstr(buf,".WOFF"))	*type = PTYPE_WOFF;
 8000baa:	4939      	ldr	r1, [pc, #228]	@ (8000c90 <find_http_uri_type+0x2f4>)
 8000bac:	68f8      	ldr	r0, [r7, #12]
 8000bae:	f005 fa67 	bl	8006080 <strstr>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d106      	bne.n	8000bc6 <find_http_uri_type+0x22a>
 8000bb8:	4936      	ldr	r1, [pc, #216]	@ (8000c94 <find_http_uri_type+0x2f8>)
 8000bba:	68f8      	ldr	r0, [r7, #12]
 8000bbc:	f005 fa60 	bl	8006080 <strstr>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d003      	beq.n	8000bce <find_http_uri_type+0x232>
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	2216      	movs	r2, #22
 8000bca:	701a      	strb	r2, [r3, #0]
 8000bcc:	e027      	b.n	8000c1e <find_http_uri_type+0x282>
	else if (strstr(buf, ".eot") 	|| strstr(buf,".EOT"))	*type = PTYPE_EOT;
 8000bce:	4932      	ldr	r1, [pc, #200]	@ (8000c98 <find_http_uri_type+0x2fc>)
 8000bd0:	68f8      	ldr	r0, [r7, #12]
 8000bd2:	f005 fa55 	bl	8006080 <strstr>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d106      	bne.n	8000bea <find_http_uri_type+0x24e>
 8000bdc:	492f      	ldr	r1, [pc, #188]	@ (8000c9c <find_http_uri_type+0x300>)
 8000bde:	68f8      	ldr	r0, [r7, #12]
 8000be0:	f005 fa4e 	bl	8006080 <strstr>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d003      	beq.n	8000bf2 <find_http_uri_type+0x256>
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	2217      	movs	r2, #23
 8000bee:	701a      	strb	r2, [r3, #0]
 8000bf0:	e015      	b.n	8000c1e <find_http_uri_type+0x282>
	else if (strstr(buf, ".svg") 	|| strstr(buf,".SVG"))	*type = PTYPE_SVG;
 8000bf2:	492b      	ldr	r1, [pc, #172]	@ (8000ca0 <find_http_uri_type+0x304>)
 8000bf4:	68f8      	ldr	r0, [r7, #12]
 8000bf6:	f005 fa43 	bl	8006080 <strstr>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d106      	bne.n	8000c0e <find_http_uri_type+0x272>
 8000c00:	4928      	ldr	r1, [pc, #160]	@ (8000ca4 <find_http_uri_type+0x308>)
 8000c02:	68f8      	ldr	r0, [r7, #12]
 8000c04:	f005 fa3c 	bl	8006080 <strstr>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d003      	beq.n	8000c16 <find_http_uri_type+0x27a>
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	2218      	movs	r2, #24
 8000c12:	701a      	strb	r2, [r3, #0]
 8000c14:	e003      	b.n	8000c1e <find_http_uri_type+0x282>
	else 													*type = PTYPE_ERR;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	2200      	movs	r2, #0
 8000c1a:	701a      	strb	r2, [r3, #0]
}
 8000c1c:	e7ff      	b.n	8000c1e <find_http_uri_type+0x282>
 8000c1e:	bf00      	nop
 8000c20:	3710      	adds	r7, #16
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	08007384 	.word	0x08007384
 8000c2c:	0800738c 	.word	0x0800738c
 8000c30:	08007394 	.word	0x08007394
 8000c34:	0800739c 	.word	0x0800739c
 8000c38:	080073a4 	.word	0x080073a4
 8000c3c:	080073ac 	.word	0x080073ac
 8000c40:	080073b4 	.word	0x080073b4
 8000c44:	080073bc 	.word	0x080073bc
 8000c48:	080073c4 	.word	0x080073c4
 8000c4c:	080073cc 	.word	0x080073cc
 8000c50:	080073d4 	.word	0x080073d4
 8000c54:	080073dc 	.word	0x080073dc
 8000c58:	080073e4 	.word	0x080073e4
 8000c5c:	080073e8 	.word	0x080073e8
 8000c60:	080073ec 	.word	0x080073ec
 8000c64:	080073f4 	.word	0x080073f4
 8000c68:	080073fc 	.word	0x080073fc
 8000c6c:	08007404 	.word	0x08007404
 8000c70:	0800740c 	.word	0x0800740c
 8000c74:	08007414 	.word	0x08007414
 8000c78:	0800741c 	.word	0x0800741c
 8000c7c:	08007424 	.word	0x08007424
 8000c80:	0800742c 	.word	0x0800742c
 8000c84:	08007434 	.word	0x08007434
 8000c88:	0800743c 	.word	0x0800743c
 8000c8c:	08007444 	.word	0x08007444
 8000c90:	0800744c 	.word	0x0800744c
 8000c94:	08007454 	.word	0x08007454
 8000c98:	0800745c 	.word	0x0800745c
 8000c9c:	08007464 	.word	0x08007464
 8000ca0:	0800746c 	.word	0x0800746c
 8000ca4:	08007474 	.word	0x08007474

08000ca8 <parse_http_request>:
 */ 
void parse_http_request(
	st_http_request * request, 	/**< request to be returned */
	uint8_t * buf				/**< pointer to be parsed */
	)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b084      	sub	sp, #16
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
 8000cb0:	6039      	str	r1, [r7, #0]
  char * nexttok;
  nexttok = strtok((char*)buf," ");
 8000cb2:	4932      	ldr	r1, [pc, #200]	@ (8000d7c <parse_http_request+0xd4>)
 8000cb4:	6838      	ldr	r0, [r7, #0]
 8000cb6:	f005 f987 	bl	8005fc8 <strtok>
 8000cba:	60f8      	str	r0, [r7, #12]
  if(!nexttok)
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d103      	bne.n	8000cca <parse_http_request+0x22>
  {
    request->METHOD = METHOD_ERR;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	701a      	strb	r2, [r3, #0]
    return;
 8000cc8:	e054      	b.n	8000d74 <parse_http_request+0xcc>
  }
  if(!strcmp(nexttok, "GET") || !strcmp(nexttok,"get"))
 8000cca:	492d      	ldr	r1, [pc, #180]	@ (8000d80 <parse_http_request+0xd8>)
 8000ccc:	68f8      	ldr	r0, [r7, #12]
 8000cce:	f7ff faa7 	bl	8000220 <strcmp>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d006      	beq.n	8000ce6 <parse_http_request+0x3e>
 8000cd8:	492a      	ldr	r1, [pc, #168]	@ (8000d84 <parse_http_request+0xdc>)
 8000cda:	68f8      	ldr	r0, [r7, #12]
 8000cdc:	f7ff faa0 	bl	8000220 <strcmp>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d108      	bne.n	8000cf8 <parse_http_request+0x50>
  {
    request->METHOD = METHOD_GET;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	2201      	movs	r2, #1
 8000cea:	701a      	strb	r2, [r3, #0]
    nexttok = strtok(NULL," ");
 8000cec:	4923      	ldr	r1, [pc, #140]	@ (8000d7c <parse_http_request+0xd4>)
 8000cee:	2000      	movs	r0, #0
 8000cf0:	f005 f96a 	bl	8005fc8 <strtok>
 8000cf4:	60f8      	str	r0, [r7, #12]
 8000cf6:	e030      	b.n	8000d5a <parse_http_request+0xb2>

  }
  else if (!strcmp(nexttok, "HEAD") || !strcmp(nexttok,"head"))
 8000cf8:	4923      	ldr	r1, [pc, #140]	@ (8000d88 <parse_http_request+0xe0>)
 8000cfa:	68f8      	ldr	r0, [r7, #12]
 8000cfc:	f7ff fa90 	bl	8000220 <strcmp>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d006      	beq.n	8000d14 <parse_http_request+0x6c>
 8000d06:	4921      	ldr	r1, [pc, #132]	@ (8000d8c <parse_http_request+0xe4>)
 8000d08:	68f8      	ldr	r0, [r7, #12]
 8000d0a:	f7ff fa89 	bl	8000220 <strcmp>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d108      	bne.n	8000d26 <parse_http_request+0x7e>
  {
    request->METHOD = METHOD_HEAD;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	2202      	movs	r2, #2
 8000d18:	701a      	strb	r2, [r3, #0]
    nexttok = strtok(NULL," ");
 8000d1a:	4918      	ldr	r1, [pc, #96]	@ (8000d7c <parse_http_request+0xd4>)
 8000d1c:	2000      	movs	r0, #0
 8000d1e:	f005 f953 	bl	8005fc8 <strtok>
 8000d22:	60f8      	str	r0, [r7, #12]
 8000d24:	e019      	b.n	8000d5a <parse_http_request+0xb2>

  }
  else if (!strcmp(nexttok, "POST") || !strcmp(nexttok,"post"))
 8000d26:	491a      	ldr	r1, [pc, #104]	@ (8000d90 <parse_http_request+0xe8>)
 8000d28:	68f8      	ldr	r0, [r7, #12]
 8000d2a:	f7ff fa79 	bl	8000220 <strcmp>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d006      	beq.n	8000d42 <parse_http_request+0x9a>
 8000d34:	4917      	ldr	r1, [pc, #92]	@ (8000d94 <parse_http_request+0xec>)
 8000d36:	68f8      	ldr	r0, [r7, #12]
 8000d38:	f7ff fa72 	bl	8000220 <strcmp>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d108      	bne.n	8000d54 <parse_http_request+0xac>
  {
    nexttok = strtok(NULL,"\0");
 8000d42:	4915      	ldr	r1, [pc, #84]	@ (8000d98 <parse_http_request+0xf0>)
 8000d44:	2000      	movs	r0, #0
 8000d46:	f005 f93f 	bl	8005fc8 <strtok>
 8000d4a:	60f8      	str	r0, [r7, #12]
    request->METHOD = METHOD_POST;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	2203      	movs	r2, #3
 8000d50:	701a      	strb	r2, [r3, #0]
 8000d52:	e002      	b.n	8000d5a <parse_http_request+0xb2>
  }
  else
  {
    request->METHOD = METHOD_ERR;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	2200      	movs	r2, #0
 8000d58:	701a      	strb	r2, [r3, #0]
  }

  if(!nexttok)
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d103      	bne.n	8000d68 <parse_http_request+0xc0>
  {
    request->METHOD = METHOD_ERR;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	2200      	movs	r2, #0
 8000d64:	701a      	strb	r2, [r3, #0]
    return;
 8000d66:	e005      	b.n	8000d74 <parse_http_request+0xcc>
  }
  strcpy((char *)request->URI, nexttok);
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	3302      	adds	r3, #2
 8000d6c:	68f9      	ldr	r1, [r7, #12]
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f005 fa1f 	bl	80061b2 <strcpy>
}
 8000d74:	3710      	adds	r7, #16
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	0800747c 	.word	0x0800747c
 8000d80:	08007480 	.word	0x08007480
 8000d84:	08007484 	.word	0x08007484
 8000d88:	08007488 	.word	0x08007488
 8000d8c:	08007490 	.word	0x08007490
 8000d90:	08007498 	.word	0x08007498
 8000d94:	080074a0 	.word	0x080074a0
 8000d98:	080074a8 	.word	0x080074a8

08000d9c <get_http_uri_name>:
	return uri_name;
}
#else

uint8_t get_http_uri_name(uint8_t * uri, uint8_t * uri_buf)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b084      	sub	sp, #16
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
 8000da4:	6039      	str	r1, [r7, #0]
	uint8_t * uri_ptr;
	if(!uri) return 0;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d101      	bne.n	8000db0 <get_http_uri_name+0x14>
 8000dac:	2300      	movs	r3, #0
 8000dae:	e017      	b.n	8000de0 <get_http_uri_name+0x44>

	strcpy((char *)uri_buf, (char *)uri);
 8000db0:	6879      	ldr	r1, [r7, #4]
 8000db2:	6838      	ldr	r0, [r7, #0]
 8000db4:	f005 f9fd 	bl	80061b2 <strcpy>

	uri_ptr = (uint8_t *)strtok((char *)uri_buf, " ?");
 8000db8:	490b      	ldr	r1, [pc, #44]	@ (8000de8 <get_http_uri_name+0x4c>)
 8000dba:	6838      	ldr	r0, [r7, #0]
 8000dbc:	f005 f904 	bl	8005fc8 <strtok>
 8000dc0:	60f8      	str	r0, [r7, #12]

	if(strcmp((char *)uri_ptr,"/")) uri_ptr++;
 8000dc2:	490a      	ldr	r1, [pc, #40]	@ (8000dec <get_http_uri_name+0x50>)
 8000dc4:	68f8      	ldr	r0, [r7, #12]
 8000dc6:	f7ff fa2b 	bl	8000220 <strcmp>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d002      	beq.n	8000dd6 <get_http_uri_name+0x3a>
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	3301      	adds	r3, #1
 8000dd4:	60fb      	str	r3, [r7, #12]
	strcpy((char *)uri_buf, (char *)uri_ptr);
 8000dd6:	68f9      	ldr	r1, [r7, #12]
 8000dd8:	6838      	ldr	r0, [r7, #0]
 8000dda:	f005 f9ea 	bl	80061b2 <strcpy>

#ifdef _HTTPPARSER_DEBUG_
	printf("  uri_name = %s\r\n", uri_buf);
#endif

	return 1;
 8000dde:	2301      	movs	r3, #1
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	3710      	adds	r7, #16
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	080074c4 	.word	0x080074c4
 8000dec:	080074c8 	.word	0x080074c8

08000df0 <mid>:
 * @param s2 The end string to be researched
 * @param sub The string between s1 and s2
 * @return The length value atfer working
 */
void mid(char* src, char* s1, char* s2, char* sub)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b088      	sub	sp, #32
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	60f8      	str	r0, [r7, #12]
 8000df8:	60b9      	str	r1, [r7, #8]
 8000dfa:	607a      	str	r2, [r7, #4]
 8000dfc:	603b      	str	r3, [r7, #0]
	char* sub1;
	char* sub2;
	uint16_t n;

	sub1=strstr((char*)src,(char*)s1);
 8000dfe:	68b9      	ldr	r1, [r7, #8]
 8000e00:	68f8      	ldr	r0, [r7, #12]
 8000e02:	f005 f93d 	bl	8006080 <strstr>
 8000e06:	61f8      	str	r0, [r7, #28]
	sub1+=strlen((char*)s1);
 8000e08:	68b8      	ldr	r0, [r7, #8]
 8000e0a:	f7ff fa13 	bl	8000234 <strlen>
 8000e0e:	4602      	mov	r2, r0
 8000e10:	69fb      	ldr	r3, [r7, #28]
 8000e12:	4413      	add	r3, r2
 8000e14:	61fb      	str	r3, [r7, #28]
	sub2=strstr((char*)sub1,(char*)s2);
 8000e16:	6879      	ldr	r1, [r7, #4]
 8000e18:	69f8      	ldr	r0, [r7, #28]
 8000e1a:	f005 f931 	bl	8006080 <strstr>
 8000e1e:	61b8      	str	r0, [r7, #24]

	n=sub2-sub1;
 8000e20:	69ba      	ldr	r2, [r7, #24]
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	1ad3      	subs	r3, r2, r3
 8000e26:	82fb      	strh	r3, [r7, #22]
	strncpy((char*)sub,(char*)sub1,n);
 8000e28:	8afb      	ldrh	r3, [r7, #22]
 8000e2a:	461a      	mov	r2, r3
 8000e2c:	69f9      	ldr	r1, [r7, #28]
 8000e2e:	6838      	ldr	r0, [r7, #0]
 8000e30:	f005 f8b7 	bl	8005fa2 <strncpy>
	sub[n]='\0';
 8000e34:	8afb      	ldrh	r3, [r7, #22]
 8000e36:	683a      	ldr	r2, [r7, #0]
 8000e38:	4413      	add	r3, r2
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	701a      	strb	r2, [r3, #0]
}
 8000e3e:	bf00      	nop
 8000e40:	3720      	adds	r7, #32
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}

08000e46 <default_mcu_reset>:

/*****************************************************************************
 * Public functions
 ****************************************************************************/
// Callback functions definition: MCU Reset / WDT Reset
void default_mcu_reset(void) {;}
 8000e46:	b480      	push	{r7}
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	bf00      	nop
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr

08000e54 <default_wdt_reset>:
void default_wdt_reset(void) {;}
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	bf00      	nop
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
	...

08000e64 <httpServer_Sockinit>:
void (*HTTPServer_ReStart)(void) = default_mcu_reset;
void (*HTTPServer_WDT_Reset)(void) = default_wdt_reset;

void httpServer_Sockinit(uint8_t cnt, uint8_t * socklist)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b085      	sub	sp, #20
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	6039      	str	r1, [r7, #0]
 8000e6e:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	for(i = 0; i < cnt; i++)
 8000e70:	2300      	movs	r3, #0
 8000e72:	73fb      	strb	r3, [r7, #15]
 8000e74:	e009      	b.n	8000e8a <httpServer_Sockinit+0x26>
	{
		// Mapping the H/W socket numbers to the sequential index numbers
		HTTPSock_Num[i] = socklist[i];
 8000e76:	7bfb      	ldrb	r3, [r7, #15]
 8000e78:	683a      	ldr	r2, [r7, #0]
 8000e7a:	441a      	add	r2, r3
 8000e7c:	7bfb      	ldrb	r3, [r7, #15]
 8000e7e:	7811      	ldrb	r1, [r2, #0]
 8000e80:	4a07      	ldr	r2, [pc, #28]	@ (8000ea0 <httpServer_Sockinit+0x3c>)
 8000e82:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < cnt; i++)
 8000e84:	7bfb      	ldrb	r3, [r7, #15]
 8000e86:	3301      	adds	r3, #1
 8000e88:	73fb      	strb	r3, [r7, #15]
 8000e8a:	7bfa      	ldrb	r2, [r7, #15]
 8000e8c:	79fb      	ldrb	r3, [r7, #7]
 8000e8e:	429a      	cmp	r2, r3
 8000e90:	d3f1      	bcc.n	8000e76 <httpServer_Sockinit+0x12>
	}
}
 8000e92:	bf00      	nop
 8000e94:	bf00      	nop
 8000e96:	3714      	adds	r7, #20
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr
 8000ea0:	200000e8 	.word	0x200000e8

08000ea4 <getHTTPSocketNum>:

static uint8_t getHTTPSocketNum(uint8_t seqnum)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	71fb      	strb	r3, [r7, #7]
	// Return the 'H/W socket number' corresponding to the index number
	return HTTPSock_Num[seqnum];
 8000eae:	79fb      	ldrb	r3, [r7, #7]
 8000eb0:	4a03      	ldr	r2, [pc, #12]	@ (8000ec0 <getHTTPSocketNum+0x1c>)
 8000eb2:	5cd3      	ldrb	r3, [r2, r3]
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	370c      	adds	r7, #12
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr
 8000ec0:	200000e8 	.word	0x200000e8

08000ec4 <getHTTPSequenceNum>:

static int8_t getHTTPSequenceNum(uint8_t socket)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b085      	sub	sp, #20
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	4603      	mov	r3, r0
 8000ecc:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	for(i = 0; i < _WIZCHIP_SOCK_NUM_; i++)
 8000ece:	2300      	movs	r3, #0
 8000ed0:	73fb      	strb	r3, [r7, #15]
 8000ed2:	e00b      	b.n	8000eec <getHTTPSequenceNum+0x28>
		if(HTTPSock_Num[i] == socket) return i;
 8000ed4:	7bfb      	ldrb	r3, [r7, #15]
 8000ed6:	4a0b      	ldr	r2, [pc, #44]	@ (8000f04 <getHTTPSequenceNum+0x40>)
 8000ed8:	5cd3      	ldrb	r3, [r2, r3]
 8000eda:	79fa      	ldrb	r2, [r7, #7]
 8000edc:	429a      	cmp	r2, r3
 8000ede:	d102      	bne.n	8000ee6 <getHTTPSequenceNum+0x22>
 8000ee0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ee4:	e007      	b.n	8000ef6 <getHTTPSequenceNum+0x32>
	for(i = 0; i < _WIZCHIP_SOCK_NUM_; i++)
 8000ee6:	7bfb      	ldrb	r3, [r7, #15]
 8000ee8:	3301      	adds	r3, #1
 8000eea:	73fb      	strb	r3, [r7, #15]
 8000eec:	7bfb      	ldrb	r3, [r7, #15]
 8000eee:	2b07      	cmp	r3, #7
 8000ef0:	d9f0      	bls.n	8000ed4 <getHTTPSequenceNum+0x10>

	return -1;
 8000ef2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3714      	adds	r7, #20
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	200000e8 	.word	0x200000e8

08000f08 <httpServer_init>:

void httpServer_init(uint8_t * tx_buf, uint8_t * rx_buf, uint8_t cnt, uint8_t * socklist)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	60f8      	str	r0, [r7, #12]
 8000f10:	60b9      	str	r1, [r7, #8]
 8000f12:	603b      	str	r3, [r7, #0]
 8000f14:	4613      	mov	r3, r2
 8000f16:	71fb      	strb	r3, [r7, #7]
	// User's shared buffer
	pHTTP_TX = tx_buf;
 8000f18:	4a07      	ldr	r2, [pc, #28]	@ (8000f38 <httpServer_init+0x30>)
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	6013      	str	r3, [r2, #0]
	pHTTP_RX = rx_buf;
 8000f1e:	4a07      	ldr	r2, [pc, #28]	@ (8000f3c <httpServer_init+0x34>)
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	6013      	str	r3, [r2, #0]

	// H/W Socket number mapping
	httpServer_Sockinit(cnt, socklist);
 8000f24:	79fb      	ldrb	r3, [r7, #7]
 8000f26:	6839      	ldr	r1, [r7, #0]
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f7ff ff9b 	bl	8000e64 <httpServer_Sockinit>
}
 8000f2e:	bf00      	nop
 8000f30:	3710      	adds	r7, #16
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	20000100 	.word	0x20000100
 8000f3c:	20000104 	.word	0x20000104

08000f40 <reg_httpServer_cbfunc>:


/* Register the call back functions for HTTP Server */
void reg_httpServer_cbfunc(void(*mcu_reset)(void), void(*wdt_reset)(void))
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	6039      	str	r1, [r7, #0]
	// Callback: HW Reset and WDT reset function for each MCU platforms
	if(mcu_reset) HTTPServer_ReStart = mcu_reset;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d002      	beq.n	8000f56 <reg_httpServer_cbfunc+0x16>
 8000f50:	4a07      	ldr	r2, [pc, #28]	@ (8000f70 <reg_httpServer_cbfunc+0x30>)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6013      	str	r3, [r2, #0]
	if(wdt_reset) HTTPServer_WDT_Reset = wdt_reset;
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d002      	beq.n	8000f62 <reg_httpServer_cbfunc+0x22>
 8000f5c:	4a05      	ldr	r2, [pc, #20]	@ (8000f74 <reg_httpServer_cbfunc+0x34>)
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	6013      	str	r3, [r2, #0]
}
 8000f62:	bf00      	nop
 8000f64:	370c      	adds	r7, #12
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	20000000 	.word	0x20000000
 8000f74:	20000004 	.word	0x20000004

08000f78 <httpServer_run>:


void httpServer_run(uint8_t seqnum)
{
 8000f78:	b590      	push	{r4, r7, lr}
 8000f7a:	b089      	sub	sp, #36	@ 0x24
 8000f7c:	af02      	add	r7, sp, #8
 8000f7e:	4603      	mov	r3, r0
 8000f80:	71fb      	strb	r3, [r7, #7]
	uint8_t s;	// socket number
	uint16_t len;
	uint32_t gettime = 0;
 8000f82:	2300      	movs	r3, #0
 8000f84:	613b      	str	r3, [r7, #16]

#ifdef _HTTPSERVER_DEBUG_
	uint8_t destip[4] = {0, };
 8000f86:	2300      	movs	r3, #0
 8000f88:	60bb      	str	r3, [r7, #8]
	uint16_t destport = 0;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	81fb      	strh	r3, [r7, #14]
#endif

	http_request = (st_http_request *)pHTTP_RX;		// Structure of HTTP Request
 8000f8e:	4bc2      	ldr	r3, [pc, #776]	@ (8001298 <httpServer_run+0x320>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4ac2      	ldr	r2, [pc, #776]	@ (800129c <httpServer_run+0x324>)
 8000f94:	6013      	str	r3, [r2, #0]
	parsed_http_request = (st_http_request *)pHTTP_TX;
 8000f96:	4bc2      	ldr	r3, [pc, #776]	@ (80012a0 <httpServer_run+0x328>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4ac2      	ldr	r2, [pc, #776]	@ (80012a4 <httpServer_run+0x32c>)
 8000f9c:	6013      	str	r3, [r2, #0]

	// Get the H/W socket number
	s = getHTTPSocketNum(seqnum);
 8000f9e:	79fb      	ldrb	r3, [r7, #7]
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f7ff ff7f 	bl	8000ea4 <getHTTPSocketNum>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	737b      	strb	r3, [r7, #13]

	/* HTTP Service Start */
	switch(getSn_SR(s))
 8000faa:	7b7b      	ldrb	r3, [r7, #13]
 8000fac:	009b      	lsls	r3, r3, #2
 8000fae:	3301      	adds	r3, #1
 8000fb0:	00db      	lsls	r3, r3, #3
 8000fb2:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f7ff f99a 	bl	80002f0 <WIZCHIP_READ>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b1c      	cmp	r3, #28
 8000fc0:	f200 81ad 	bhi.w	800131e <httpServer_run+0x3a6>
 8000fc4:	a201      	add	r2, pc, #4	@ (adr r2, 8000fcc <httpServer_run+0x54>)
 8000fc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fca:	bf00      	nop
 8000fcc:	080012e9 	.word	0x080012e9
 8000fd0:	0800131f 	.word	0x0800131f
 8000fd4:	0800131f 	.word	0x0800131f
 8000fd8:	0800131f 	.word	0x0800131f
 8000fdc:	0800131f 	.word	0x0800131f
 8000fe0:	0800131f 	.word	0x0800131f
 8000fe4:	0800131f 	.word	0x0800131f
 8000fe8:	0800131f 	.word	0x0800131f
 8000fec:	0800131f 	.word	0x0800131f
 8000ff0:	0800131f 	.word	0x0800131f
 8000ff4:	0800131f 	.word	0x0800131f
 8000ff8:	0800131f 	.word	0x0800131f
 8000ffc:	0800131f 	.word	0x0800131f
 8001000:	0800131f 	.word	0x0800131f
 8001004:	0800131f 	.word	0x0800131f
 8001008:	0800131f 	.word	0x0800131f
 800100c:	0800131f 	.word	0x0800131f
 8001010:	0800131f 	.word	0x0800131f
 8001014:	0800131f 	.word	0x0800131f
 8001018:	08001315 	.word	0x08001315
 800101c:	0800131f 	.word	0x0800131f
 8001020:	0800131f 	.word	0x0800131f
 8001024:	0800131f 	.word	0x0800131f
 8001028:	08001041 	.word	0x08001041
 800102c:	0800131f 	.word	0x0800131f
 8001030:	0800131f 	.word	0x0800131f
 8001034:	0800131f 	.word	0x0800131f
 8001038:	0800131f 	.word	0x0800131f
 800103c:	080012d5 	.word	0x080012d5
	{
		case SOCK_ESTABLISHED:
			// Interrupt clear
			if(getSn_IR(s) & Sn_IR_CON)
 8001040:	7b7b      	ldrb	r3, [r7, #13]
 8001042:	009b      	lsls	r3, r3, #2
 8001044:	3301      	adds	r3, #1
 8001046:	00db      	lsls	r3, r3, #3
 8001048:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800104c:	4618      	mov	r0, r3
 800104e:	f7ff f94f 	bl	80002f0 <WIZCHIP_READ>
 8001052:	4603      	mov	r3, r0
 8001054:	f003 0301 	and.w	r3, r3, #1
 8001058:	2b00      	cmp	r3, #0
 800105a:	d009      	beq.n	8001070 <httpServer_run+0xf8>
			{
				setSn_IR(s, Sn_IR_CON);
 800105c:	7b7b      	ldrb	r3, [r7, #13]
 800105e:	009b      	lsls	r3, r3, #2
 8001060:	3301      	adds	r3, #1
 8001062:	00db      	lsls	r3, r3, #3
 8001064:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001068:	2101      	movs	r1, #1
 800106a:	4618      	mov	r0, r3
 800106c:	f7ff f98c 	bl	8000388 <WIZCHIP_WRITE>
			}

			// HTTP Process states
			switch(HTTPSock_Status[seqnum].sock_status)
 8001070:	79fb      	ldrb	r3, [r7, #7]
 8001072:	4a8d      	ldr	r2, [pc, #564]	@ (80012a8 <httpServer_run+0x330>)
 8001074:	2194      	movs	r1, #148	@ 0x94
 8001076:	fb01 f303 	mul.w	r3, r1, r3
 800107a:	4413      	add	r3, r2
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	2b04      	cmp	r3, #4
 8001080:	f000 80db 	beq.w	800123a <httpServer_run+0x2c2>
 8001084:	2b04      	cmp	r3, #4
 8001086:	f300 8105 	bgt.w	8001294 <httpServer_run+0x31c>
 800108a:	2b00      	cmp	r3, #0
 800108c:	d003      	beq.n	8001096 <httpServer_run+0x11e>
 800108e:	2b03      	cmp	r3, #3
 8001090:	f000 80b2 	beq.w	80011f8 <httpServer_run+0x280>
#endif
					http_disconnect(s);
					break;

				default :
					break;
 8001094:	e0fe      	b.n	8001294 <httpServer_run+0x31c>
					if ((len = getSn_RX_RSR(s)) > 0)
 8001096:	7b7b      	ldrb	r3, [r7, #13]
 8001098:	4618      	mov	r0, r3
 800109a:	f7ff facc 	bl	8000636 <getSn_RX_RSR>
 800109e:	4603      	mov	r3, r0
 80010a0:	82fb      	strh	r3, [r7, #22]
 80010a2:	8afb      	ldrh	r3, [r7, #22]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	f000 8111 	beq.w	80012cc <httpServer_run+0x354>
						if (len > DATA_BUF_SIZE) len = DATA_BUF_SIZE;
 80010aa:	8afb      	ldrh	r3, [r7, #22]
 80010ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80010b0:	d902      	bls.n	80010b8 <httpServer_run+0x140>
 80010b2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80010b6:	82fb      	strh	r3, [r7, #22]
						len = recv(s, (uint8_t *)http_request, len);
 80010b8:	4b78      	ldr	r3, [pc, #480]	@ (800129c <httpServer_run+0x324>)
 80010ba:	6819      	ldr	r1, [r3, #0]
 80010bc:	8afa      	ldrh	r2, [r7, #22]
 80010be:	7b7b      	ldrb	r3, [r7, #13]
 80010c0:	4618      	mov	r0, r3
 80010c2:	f001 fc53 	bl	800296c <recv>
 80010c6:	4603      	mov	r3, r0
 80010c8:	82fb      	strh	r3, [r7, #22]
						*(((uint8_t *)http_request) + len) = '\0';
 80010ca:	4b74      	ldr	r3, [pc, #464]	@ (800129c <httpServer_run+0x324>)
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	8afb      	ldrh	r3, [r7, #22]
 80010d0:	4413      	add	r3, r2
 80010d2:	2200      	movs	r2, #0
 80010d4:	701a      	strb	r2, [r3, #0]
						parse_http_request(parsed_http_request, (uint8_t *)http_request);
 80010d6:	4b73      	ldr	r3, [pc, #460]	@ (80012a4 <httpServer_run+0x32c>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4a70      	ldr	r2, [pc, #448]	@ (800129c <httpServer_run+0x324>)
 80010dc:	6812      	ldr	r2, [r2, #0]
 80010de:	4611      	mov	r1, r2
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff fde1 	bl	8000ca8 <parse_http_request>
						getSn_DIPR(s, destip);
 80010e6:	7b7b      	ldrb	r3, [r7, #13]
 80010e8:	009b      	lsls	r3, r3, #2
 80010ea:	3301      	adds	r3, #1
 80010ec:	00db      	lsls	r3, r3, #3
 80010ee:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
 80010f2:	4618      	mov	r0, r3
 80010f4:	f107 0308 	add.w	r3, r7, #8
 80010f8:	2204      	movs	r2, #4
 80010fa:	4619      	mov	r1, r3
 80010fc:	f7ff f992 	bl	8000424 <WIZCHIP_READ_BUF>
						destport = getSn_DPORT(s);
 8001100:	7b7b      	ldrb	r3, [r7, #13]
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	3301      	adds	r3, #1
 8001106:	00db      	lsls	r3, r3, #3
 8001108:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff f8ef 	bl	80002f0 <WIZCHIP_READ>
 8001112:	4603      	mov	r3, r0
 8001114:	021b      	lsls	r3, r3, #8
 8001116:	b29c      	uxth	r4, r3
 8001118:	7b7b      	ldrb	r3, [r7, #13]
 800111a:	009b      	lsls	r3, r3, #2
 800111c:	3301      	adds	r3, #1
 800111e:	00db      	lsls	r3, r3, #3
 8001120:	f503 5388 	add.w	r3, r3, #4352	@ 0x1100
 8001124:	4618      	mov	r0, r3
 8001126:	f7ff f8e3 	bl	80002f0 <WIZCHIP_READ>
 800112a:	4603      	mov	r3, r0
 800112c:	4423      	add	r3, r4
 800112e:	81fb      	strh	r3, [r7, #14]
						printf("\r\n");
 8001130:	485e      	ldr	r0, [pc, #376]	@ (80012ac <httpServer_run+0x334>)
 8001132:	f004 fe1f 	bl	8005d74 <puts>
						printf("> HTTPSocket[%d] : HTTP Request received ", s);
 8001136:	7b7b      	ldrb	r3, [r7, #13]
 8001138:	4619      	mov	r1, r3
 800113a:	485d      	ldr	r0, [pc, #372]	@ (80012b0 <httpServer_run+0x338>)
 800113c:	f004 fdb2 	bl	8005ca4 <iprintf>
						printf("from %d.%d.%d.%d : %d\r\n", destip[0], destip[1], destip[2], destip[3], destport);
 8001140:	7a3b      	ldrb	r3, [r7, #8]
 8001142:	4619      	mov	r1, r3
 8001144:	7a7b      	ldrb	r3, [r7, #9]
 8001146:	4618      	mov	r0, r3
 8001148:	7abb      	ldrb	r3, [r7, #10]
 800114a:	461c      	mov	r4, r3
 800114c:	7afb      	ldrb	r3, [r7, #11]
 800114e:	461a      	mov	r2, r3
 8001150:	89fb      	ldrh	r3, [r7, #14]
 8001152:	9301      	str	r3, [sp, #4]
 8001154:	9200      	str	r2, [sp, #0]
 8001156:	4623      	mov	r3, r4
 8001158:	4602      	mov	r2, r0
 800115a:	4856      	ldr	r0, [pc, #344]	@ (80012b4 <httpServer_run+0x33c>)
 800115c:	f004 fda2 	bl	8005ca4 <iprintf>
						printf("> HTTPSocket[%d] : [State] STATE_HTTP_REQ_DONE\r\n", s);
 8001160:	7b7b      	ldrb	r3, [r7, #13]
 8001162:	4619      	mov	r1, r3
 8001164:	4854      	ldr	r0, [pc, #336]	@ (80012b8 <httpServer_run+0x340>)
 8001166:	f004 fd9d 	bl	8005ca4 <iprintf>
						http_process_handler(s, parsed_http_request);
 800116a:	4b4e      	ldr	r3, [pc, #312]	@ (80012a4 <httpServer_run+0x32c>)
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	7b7b      	ldrb	r3, [r7, #13]
 8001170:	4611      	mov	r1, r2
 8001172:	4618      	mov	r0, r3
 8001174:	f000 fafe 	bl	8001774 <http_process_handler>
						gettime = get_httpServer_timecount();
 8001178:	f000 fd7e 	bl	8001c78 <get_httpServer_timecount>
 800117c:	6138      	str	r0, [r7, #16]
						while(getSn_TX_FSR(s) != (getSn_TxMAX(s)))
 800117e:	e00c      	b.n	800119a <httpServer_run+0x222>
							if((get_httpServer_timecount() - gettime) > 3)
 8001180:	f000 fd7a 	bl	8001c78 <get_httpServer_timecount>
 8001184:	4602      	mov	r2, r0
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	1ad3      	subs	r3, r2, r3
 800118a:	2b03      	cmp	r3, #3
 800118c:	d905      	bls.n	800119a <httpServer_run+0x222>
								printf("> HTTPSocket[%d] : [State] STATE_HTTP_REQ_DONE: TX Buffer clear timeout\r\n", s);
 800118e:	7b7b      	ldrb	r3, [r7, #13]
 8001190:	4619      	mov	r1, r3
 8001192:	484a      	ldr	r0, [pc, #296]	@ (80012bc <httpServer_run+0x344>)
 8001194:	f004 fd86 	bl	8005ca4 <iprintf>
								break;
 8001198:	e012      	b.n	80011c0 <httpServer_run+0x248>
						while(getSn_TX_FSR(s) != (getSn_TxMAX(s)))
 800119a:	7b7b      	ldrb	r3, [r7, #13]
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff fa01 	bl	80005a4 <getSn_TX_FSR>
 80011a2:	4603      	mov	r3, r0
 80011a4:	461c      	mov	r4, r3
 80011a6:	7b7b      	ldrb	r3, [r7, #13]
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	3301      	adds	r3, #1
 80011ac:	00db      	lsls	r3, r3, #3
 80011ae:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 80011b2:	4618      	mov	r0, r3
 80011b4:	f7ff f89c 	bl	80002f0 <WIZCHIP_READ>
 80011b8:	4603      	mov	r3, r0
 80011ba:	029b      	lsls	r3, r3, #10
 80011bc:	429c      	cmp	r4, r3
 80011be:	d1df      	bne.n	8001180 <httpServer_run+0x208>
						if(HTTPSock_Status[seqnum].file_len > 0) HTTPSock_Status[seqnum].sock_status = STATE_HTTP_RES_INPROC;
 80011c0:	79fb      	ldrb	r3, [r7, #7]
 80011c2:	4a39      	ldr	r2, [pc, #228]	@ (80012a8 <httpServer_run+0x330>)
 80011c4:	2194      	movs	r1, #148	@ 0x94
 80011c6:	fb01 f303 	mul.w	r3, r1, r3
 80011ca:	4413      	add	r3, r2
 80011cc:	3388      	adds	r3, #136	@ 0x88
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d008      	beq.n	80011e6 <httpServer_run+0x26e>
 80011d4:	79fb      	ldrb	r3, [r7, #7]
 80011d6:	4a34      	ldr	r2, [pc, #208]	@ (80012a8 <httpServer_run+0x330>)
 80011d8:	2194      	movs	r1, #148	@ 0x94
 80011da:	fb01 f303 	mul.w	r3, r1, r3
 80011de:	4413      	add	r3, r2
 80011e0:	2203      	movs	r2, #3
 80011e2:	701a      	strb	r2, [r3, #0]
					break;
 80011e4:	e072      	b.n	80012cc <httpServer_run+0x354>
						else HTTPSock_Status[seqnum].sock_status = STATE_HTTP_RES_DONE; // Send the 'HTTP response' end
 80011e6:	79fb      	ldrb	r3, [r7, #7]
 80011e8:	4a2f      	ldr	r2, [pc, #188]	@ (80012a8 <httpServer_run+0x330>)
 80011ea:	2194      	movs	r1, #148	@ 0x94
 80011ec:	fb01 f303 	mul.w	r3, r1, r3
 80011f0:	4413      	add	r3, r2
 80011f2:	2204      	movs	r2, #4
 80011f4:	701a      	strb	r2, [r3, #0]
					break;
 80011f6:	e069      	b.n	80012cc <httpServer_run+0x354>
					printf("> HTTPSocket[%d] : [State] STATE_HTTP_RES_INPROC\r\n", s);
 80011f8:	7b7b      	ldrb	r3, [r7, #13]
 80011fa:	4619      	mov	r1, r3
 80011fc:	4830      	ldr	r0, [pc, #192]	@ (80012c0 <httpServer_run+0x348>)
 80011fe:	f004 fd51 	bl	8005ca4 <iprintf>
					send_http_response_body(s, 0, http_response, 0, 0);
 8001202:	4b30      	ldr	r3, [pc, #192]	@ (80012c4 <httpServer_run+0x34c>)
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	7b78      	ldrb	r0, [r7, #13]
 8001208:	2300      	movs	r3, #0
 800120a:	9300      	str	r3, [sp, #0]
 800120c:	2300      	movs	r3, #0
 800120e:	2100      	movs	r1, #0
 8001210:	f000 f916 	bl	8001440 <send_http_response_body>
					if(HTTPSock_Status[seqnum].file_len == 0) HTTPSock_Status[seqnum].sock_status = STATE_HTTP_RES_DONE;
 8001214:	79fb      	ldrb	r3, [r7, #7]
 8001216:	4a24      	ldr	r2, [pc, #144]	@ (80012a8 <httpServer_run+0x330>)
 8001218:	2194      	movs	r1, #148	@ 0x94
 800121a:	fb01 f303 	mul.w	r3, r1, r3
 800121e:	4413      	add	r3, r2
 8001220:	3388      	adds	r3, #136	@ 0x88
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d153      	bne.n	80012d0 <httpServer_run+0x358>
 8001228:	79fb      	ldrb	r3, [r7, #7]
 800122a:	4a1f      	ldr	r2, [pc, #124]	@ (80012a8 <httpServer_run+0x330>)
 800122c:	2194      	movs	r1, #148	@ 0x94
 800122e:	fb01 f303 	mul.w	r3, r1, r3
 8001232:	4413      	add	r3, r2
 8001234:	2204      	movs	r2, #4
 8001236:	701a      	strb	r2, [r3, #0]
					break;
 8001238:	e04a      	b.n	80012d0 <httpServer_run+0x358>
					printf("> HTTPSocket[%d] : [State] STATE_HTTP_RES_DONE\r\n", s);
 800123a:	7b7b      	ldrb	r3, [r7, #13]
 800123c:	4619      	mov	r1, r3
 800123e:	4822      	ldr	r0, [pc, #136]	@ (80012c8 <httpServer_run+0x350>)
 8001240:	f004 fd30 	bl	8005ca4 <iprintf>
					HTTPSock_Status[seqnum].file_len = 0;
 8001244:	79fb      	ldrb	r3, [r7, #7]
 8001246:	4a18      	ldr	r2, [pc, #96]	@ (80012a8 <httpServer_run+0x330>)
 8001248:	2194      	movs	r1, #148	@ 0x94
 800124a:	fb01 f303 	mul.w	r3, r1, r3
 800124e:	4413      	add	r3, r2
 8001250:	3388      	adds	r3, #136	@ 0x88
 8001252:	2200      	movs	r2, #0
 8001254:	601a      	str	r2, [r3, #0]
					HTTPSock_Status[seqnum].file_offset = 0;
 8001256:	79fb      	ldrb	r3, [r7, #7]
 8001258:	4a13      	ldr	r2, [pc, #76]	@ (80012a8 <httpServer_run+0x330>)
 800125a:	2194      	movs	r1, #148	@ 0x94
 800125c:	fb01 f303 	mul.w	r3, r1, r3
 8001260:	4413      	add	r3, r2
 8001262:	338c      	adds	r3, #140	@ 0x8c
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
					HTTPSock_Status[seqnum].file_start = 0;
 8001268:	79fb      	ldrb	r3, [r7, #7]
 800126a:	4a0f      	ldr	r2, [pc, #60]	@ (80012a8 <httpServer_run+0x330>)
 800126c:	2194      	movs	r1, #148	@ 0x94
 800126e:	fb01 f303 	mul.w	r3, r1, r3
 8001272:	4413      	add	r3, r2
 8001274:	3384      	adds	r3, #132	@ 0x84
 8001276:	2200      	movs	r2, #0
 8001278:	601a      	str	r2, [r3, #0]
					HTTPSock_Status[seqnum].sock_status = STATE_HTTP_IDLE;
 800127a:	79fb      	ldrb	r3, [r7, #7]
 800127c:	4a0a      	ldr	r2, [pc, #40]	@ (80012a8 <httpServer_run+0x330>)
 800127e:	2194      	movs	r1, #148	@ 0x94
 8001280:	fb01 f303 	mul.w	r3, r1, r3
 8001284:	4413      	add	r3, r2
 8001286:	2200      	movs	r2, #0
 8001288:	701a      	strb	r2, [r3, #0]
					http_disconnect(s);
 800128a:	7b7b      	ldrb	r3, [r7, #13]
 800128c:	4618      	mov	r0, r3
 800128e:	f000 fa4f 	bl	8001730 <http_disconnect>
					break;
 8001292:	e01e      	b.n	80012d2 <httpServer_run+0x35a>
					break;
 8001294:	bf00      	nop
 8001296:	e045      	b.n	8001324 <httpServer_run+0x3ac>
 8001298:	20000104 	.word	0x20000104
 800129c:	200000f0 	.word	0x200000f0
 80012a0:	20000100 	.word	0x20000100
 80012a4:	200000f4 	.word	0x200000f4
 80012a8:	2000010c 	.word	0x2000010c
 80012ac:	080074d0 	.word	0x080074d0
 80012b0:	080074d4 	.word	0x080074d4
 80012b4:	08007500 	.word	0x08007500
 80012b8:	08007518 	.word	0x08007518
 80012bc:	0800754c 	.word	0x0800754c
 80012c0:	08007598 	.word	0x08007598
 80012c4:	200000f8 	.word	0x200000f8
 80012c8:	080075cc 	.word	0x080075cc
					break;
 80012cc:	bf00      	nop
 80012ce:	e029      	b.n	8001324 <httpServer_run+0x3ac>
					break;
 80012d0:	bf00      	nop
			}
			break;
 80012d2:	e027      	b.n	8001324 <httpServer_run+0x3ac>

		case SOCK_CLOSE_WAIT:
#ifdef _HTTPSERVER_DEBUG_
		printf("> HTTPSocket[%d] : ClOSE_WAIT\r\n", s);	// if a peer requests to close the current connection
 80012d4:	7b7b      	ldrb	r3, [r7, #13]
 80012d6:	4619      	mov	r1, r3
 80012d8:	4814      	ldr	r0, [pc, #80]	@ (800132c <httpServer_run+0x3b4>)
 80012da:	f004 fce3 	bl	8005ca4 <iprintf>
#endif
			disconnect(s);
 80012de:	7b7b      	ldrb	r3, [r7, #13]
 80012e0:	4618      	mov	r0, r3
 80012e2:	f001 f9f5 	bl	80026d0 <disconnect>
			break;
 80012e6:	e01d      	b.n	8001324 <httpServer_run+0x3ac>

		case SOCK_CLOSED:
#ifdef _HTTPSERVER_DEBUG_
			printf("> HTTPSocket[%d] : CLOSED\r\n", s);
 80012e8:	7b7b      	ldrb	r3, [r7, #13]
 80012ea:	4619      	mov	r1, r3
 80012ec:	4810      	ldr	r0, [pc, #64]	@ (8001330 <httpServer_run+0x3b8>)
 80012ee:	f004 fcd9 	bl	8005ca4 <iprintf>
#endif
			if(socket(s, Sn_MR_TCP, HTTP_SERVER_PORT, 0x00) == s)    /* Reinitialize the socket */
 80012f2:	7b78      	ldrb	r0, [r7, #13]
 80012f4:	2300      	movs	r3, #0
 80012f6:	2250      	movs	r2, #80	@ 0x50
 80012f8:	2101      	movs	r1, #1
 80012fa:	f001 f807 	bl	800230c <socket>
 80012fe:	4603      	mov	r3, r0
 8001300:	461a      	mov	r2, r3
 8001302:	7b7b      	ldrb	r3, [r7, #13]
 8001304:	429a      	cmp	r2, r3
 8001306:	d10c      	bne.n	8001322 <httpServer_run+0x3aa>
			{
#ifdef _HTTPSERVER_DEBUG_
				printf("> HTTPSocket[%d] : OPEN\r\n", s);
 8001308:	7b7b      	ldrb	r3, [r7, #13]
 800130a:	4619      	mov	r1, r3
 800130c:	4809      	ldr	r0, [pc, #36]	@ (8001334 <httpServer_run+0x3bc>)
 800130e:	f004 fcc9 	bl	8005ca4 <iprintf>
#endif
			}
			break;
 8001312:	e006      	b.n	8001322 <httpServer_run+0x3aa>

		case SOCK_INIT:
			listen(s);
 8001314:	7b7b      	ldrb	r3, [r7, #13]
 8001316:	4618      	mov	r0, r3
 8001318:	f001 f990 	bl	800263c <listen>
			break;
 800131c:	e002      	b.n	8001324 <httpServer_run+0x3ac>

		case SOCK_LISTEN:
			break;

		default :
			break;
 800131e:	bf00      	nop
 8001320:	e000      	b.n	8001324 <httpServer_run+0x3ac>
			break;
 8001322:	bf00      	nop
	} // end of switch

#ifdef _USE_WATCHDOG_
	HTTPServer_WDT_Reset();
#endif
}
 8001324:	bf00      	nop
 8001326:	371c      	adds	r7, #28
 8001328:	46bd      	mov	sp, r7
 800132a:	bd90      	pop	{r4, r7, pc}
 800132c:	08007600 	.word	0x08007600
 8001330:	08007620 	.word	0x08007620
 8001334:	0800763c 	.word	0x0800763c

08001338 <send_http_response_header>:

////////////////////////////////////////////
// Private Functions
////////////////////////////////////////////
static void send_http_response_header(uint8_t s, uint8_t content_type, uint32_t body_len, uint16_t http_status)
{
 8001338:	b590      	push	{r4, r7, lr}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	603a      	str	r2, [r7, #0]
 8001340:	461a      	mov	r2, r3
 8001342:	4603      	mov	r3, r0
 8001344:	71fb      	strb	r3, [r7, #7]
 8001346:	460b      	mov	r3, r1
 8001348:	71bb      	strb	r3, [r7, #6]
 800134a:	4613      	mov	r3, r2
 800134c:	80bb      	strh	r3, [r7, #4]
	switch(http_status)
 800134e:	88bb      	ldrh	r3, [r7, #4]
 8001350:	f5b3 7fca 	cmp.w	r3, #404	@ 0x194
 8001354:	d032      	beq.n	80013bc <send_http_response_header+0x84>
 8001356:	f5b3 7fca 	cmp.w	r3, #404	@ 0x194
 800135a:	dc3e      	bgt.n	80013da <send_http_response_header+0xa2>
 800135c:	2bc8      	cmp	r3, #200	@ 0xc8
 800135e:	d003      	beq.n	8001368 <send_http_response_header+0x30>
 8001360:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8001364:	d01b      	beq.n	800139e <send_http_response_header+0x66>
			printf("> HTTPSocket[%d] : HTTP Response Header - STATUS_NOT_FOUND\r\n", s);
#endif
			memcpy(http_response, ERROR_HTML_PAGE, sizeof(ERROR_HTML_PAGE));
			break;
		default:
			break;
 8001366:	e038      	b.n	80013da <send_http_response_header+0xa2>
			if((content_type != PTYPE_CGI) && (content_type != PTYPE_XML)) // CGI/XML type request does not respond HTTP header
 8001368:	79bb      	ldrb	r3, [r7, #6]
 800136a:	2b08      	cmp	r3, #8
 800136c:	d00f      	beq.n	800138e <send_http_response_header+0x56>
 800136e:	79bb      	ldrb	r3, [r7, #6]
 8001370:	2b09      	cmp	r3, #9
 8001372:	d00c      	beq.n	800138e <send_http_response_header+0x56>
			printf("> HTTPSocket[%d] : HTTP Response Header - STATUS_OK\r\n", s);
 8001374:	79fb      	ldrb	r3, [r7, #7]
 8001376:	4619      	mov	r1, r3
 8001378:	4829      	ldr	r0, [pc, #164]	@ (8001420 <send_http_response_header+0xe8>)
 800137a:	f004 fc93 	bl	8005ca4 <iprintf>
				make_http_response_head((char*)http_response, content_type, body_len);
 800137e:	4b29      	ldr	r3, [pc, #164]	@ (8001424 <send_http_response_header+0xec>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	79b9      	ldrb	r1, [r7, #6]
 8001384:	683a      	ldr	r2, [r7, #0]
 8001386:	4618      	mov	r0, r3
 8001388:	f7ff fa52 	bl	8000830 <make_http_response_head>
			break;
 800138c:	e026      	b.n	80013dc <send_http_response_header+0xa4>
			printf("> HTTPSocket[%d] : HTTP Response Header - NONE / CGI or XML\r\n", s);
 800138e:	79fb      	ldrb	r3, [r7, #7]
 8001390:	4619      	mov	r1, r3
 8001392:	4825      	ldr	r0, [pc, #148]	@ (8001428 <send_http_response_header+0xf0>)
 8001394:	f004 fc86 	bl	8005ca4 <iprintf>
				http_status = 0;
 8001398:	2300      	movs	r3, #0
 800139a:	80bb      	strh	r3, [r7, #4]
			break;
 800139c:	e01e      	b.n	80013dc <send_http_response_header+0xa4>
			printf("> HTTPSocket[%d] : HTTP Response Header - STATUS_BAD_REQ\r\n", s);
 800139e:	79fb      	ldrb	r3, [r7, #7]
 80013a0:	4619      	mov	r1, r3
 80013a2:	4822      	ldr	r0, [pc, #136]	@ (800142c <send_http_response_header+0xf4>)
 80013a4:	f004 fc7e 	bl	8005ca4 <iprintf>
			memcpy(http_response, ERROR_REQUEST_PAGE, sizeof(ERROR_REQUEST_PAGE));
 80013a8:	4b1e      	ldr	r3, [pc, #120]	@ (8001424 <send_http_response_header+0xec>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a20      	ldr	r2, [pc, #128]	@ (8001430 <send_http_response_header+0xf8>)
 80013ae:	4618      	mov	r0, r3
 80013b0:	4611      	mov	r1, r2
 80013b2:	2376      	movs	r3, #118	@ 0x76
 80013b4:	461a      	mov	r2, r3
 80013b6:	f004 ff04 	bl	80061c2 <memcpy>
			break;
 80013ba:	e00f      	b.n	80013dc <send_http_response_header+0xa4>
			printf("> HTTPSocket[%d] : HTTP Response Header - STATUS_NOT_FOUND\r\n", s);
 80013bc:	79fb      	ldrb	r3, [r7, #7]
 80013be:	4619      	mov	r1, r3
 80013c0:	481c      	ldr	r0, [pc, #112]	@ (8001434 <send_http_response_header+0xfc>)
 80013c2:	f004 fc6f 	bl	8005ca4 <iprintf>
			memcpy(http_response, ERROR_HTML_PAGE, sizeof(ERROR_HTML_PAGE));
 80013c6:	4b17      	ldr	r3, [pc, #92]	@ (8001424 <send_http_response_header+0xec>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a1b      	ldr	r2, [pc, #108]	@ (8001438 <send_http_response_header+0x100>)
 80013cc:	4618      	mov	r0, r3
 80013ce:	4611      	mov	r1, r2
 80013d0:	2399      	movs	r3, #153	@ 0x99
 80013d2:	461a      	mov	r2, r3
 80013d4:	f004 fef5 	bl	80061c2 <memcpy>
			break;
 80013d8:	e000      	b.n	80013dc <send_http_response_header+0xa4>
			break;
 80013da:	bf00      	nop
	}

	// Send the HTTP Response 'header'
	if(http_status)
 80013dc:	88bb      	ldrh	r3, [r7, #4]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d01a      	beq.n	8001418 <send_http_response_header+0xe0>
	{
#ifdef _HTTPSERVER_DEBUG_
		printf("> HTTPSocket[%d] : [Send] HTTP Response Header [ %d ]byte\r\n", s, (uint16_t)strlen((char *)http_response));
 80013e2:	79fc      	ldrb	r4, [r7, #7]
 80013e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001424 <send_http_response_header+0xec>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4618      	mov	r0, r3
 80013ea:	f7fe ff23 	bl	8000234 <strlen>
 80013ee:	4603      	mov	r3, r0
 80013f0:	b29b      	uxth	r3, r3
 80013f2:	461a      	mov	r2, r3
 80013f4:	4621      	mov	r1, r4
 80013f6:	4811      	ldr	r0, [pc, #68]	@ (800143c <send_http_response_header+0x104>)
 80013f8:	f004 fc54 	bl	8005ca4 <iprintf>
#endif
		send(s, http_response, strlen((char *)http_response));
 80013fc:	4b09      	ldr	r3, [pc, #36]	@ (8001424 <send_http_response_header+0xec>)
 80013fe:	681c      	ldr	r4, [r3, #0]
 8001400:	4b08      	ldr	r3, [pc, #32]	@ (8001424 <send_http_response_header+0xec>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4618      	mov	r0, r3
 8001406:	f7fe ff15 	bl	8000234 <strlen>
 800140a:	4603      	mov	r3, r0
 800140c:	b29a      	uxth	r2, r3
 800140e:	79fb      	ldrb	r3, [r7, #7]
 8001410:	4621      	mov	r1, r4
 8001412:	4618      	mov	r0, r3
 8001414:	f001 f9ce 	bl	80027b4 <send>
	}
}
 8001418:	bf00      	nop
 800141a:	370c      	adds	r7, #12
 800141c:	46bd      	mov	sp, r7
 800141e:	bd90      	pop	{r4, r7, pc}
 8001420:	08007658 	.word	0x08007658
 8001424:	200000f8 	.word	0x200000f8
 8001428:	08007690 	.word	0x08007690
 800142c:	080076d0 	.word	0x080076d0
 8001430:	08007d58 	.word	0x08007d58
 8001434:	0800770c 	.word	0x0800770c
 8001438:	08007cbc 	.word	0x08007cbc
 800143c:	0800774c 	.word	0x0800774c

08001440 <send_http_response_body>:

static void send_http_response_body(uint8_t s, uint8_t * uri_name, uint8_t * buf, uint32_t start_addr, uint32_t file_len)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b086      	sub	sp, #24
 8001444:	af00      	add	r7, sp, #0
 8001446:	60b9      	str	r1, [r7, #8]
 8001448:	607a      	str	r2, [r7, #4]
 800144a:	603b      	str	r3, [r7, #0]
 800144c:	4603      	mov	r3, r0
 800144e:	73fb      	strb	r3, [r7, #15]
	int8_t get_seqnum;
	uint32_t send_len;

	uint8_t flag_datasend_end = 0;
 8001450:	2300      	movs	r3, #0
 8001452:	74fb      	strb	r3, [r7, #19]
#endif
#ifdef _USE_FLASH_
	uint32_t addr = 0;
#endif

	if((get_seqnum = getHTTPSequenceNum(s)) == -1) return; // exception handling; invalid number
 8001454:	7bfb      	ldrb	r3, [r7, #15]
 8001456:	4618      	mov	r0, r3
 8001458:	f7ff fd34 	bl	8000ec4 <getHTTPSequenceNum>
 800145c:	4603      	mov	r3, r0
 800145e:	74bb      	strb	r3, [r7, #18]
 8001460:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8001464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001468:	f000 811b 	beq.w	80016a2 <send_http_response_body+0x262>

	// Send the HTTP Response 'body'; requested file
	if(!HTTPSock_Status[get_seqnum].file_len) // ### Send HTTP response body: First part ###
 800146c:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8001470:	4a8e      	ldr	r2, [pc, #568]	@ (80016ac <send_http_response_body+0x26c>)
 8001472:	2194      	movs	r1, #148	@ 0x94
 8001474:	fb01 f303 	mul.w	r3, r1, r3
 8001478:	4413      	add	r3, r2
 800147a:	3388      	adds	r3, #136	@ 0x88
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d150      	bne.n	8001524 <send_http_response_body+0xe4>
	{
		if (file_len > DATA_BUF_SIZE - 1)
 8001482:	6a3b      	ldr	r3, [r7, #32]
 8001484:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001488:	d343      	bcc.n	8001512 <send_http_response_body+0xd2>
		{
			HTTPSock_Status[get_seqnum].file_start = start_addr;
 800148a:	f997 3012 	ldrsb.w	r3, [r7, #18]
 800148e:	4a87      	ldr	r2, [pc, #540]	@ (80016ac <send_http_response_body+0x26c>)
 8001490:	2194      	movs	r1, #148	@ 0x94
 8001492:	fb01 f303 	mul.w	r3, r1, r3
 8001496:	4413      	add	r3, r2
 8001498:	3384      	adds	r3, #132	@ 0x84
 800149a:	683a      	ldr	r2, [r7, #0]
 800149c:	601a      	str	r2, [r3, #0]
			HTTPSock_Status[get_seqnum].file_len = file_len;
 800149e:	f997 3012 	ldrsb.w	r3, [r7, #18]
 80014a2:	4a82      	ldr	r2, [pc, #520]	@ (80016ac <send_http_response_body+0x26c>)
 80014a4:	2194      	movs	r1, #148	@ 0x94
 80014a6:	fb01 f303 	mul.w	r3, r1, r3
 80014aa:	4413      	add	r3, r2
 80014ac:	3388      	adds	r3, #136	@ 0x88
 80014ae:	6a3a      	ldr	r2, [r7, #32]
 80014b0:	601a      	str	r2, [r3, #0]
			send_len = DATA_BUF_SIZE - 1;
 80014b2:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80014b6:	617b      	str	r3, [r7, #20]

/////////////////////////////////////////////////////////////////////////////////////////////////
// ## 20141219 Eric added, for 'File object structure' (fs) allocation reduced (8 -> 1)
			memset(HTTPSock_Status[get_seqnum].file_name, 0x00, MAX_CONTENT_NAME_LEN);
 80014b8:	f997 3012 	ldrsb.w	r3, [r7, #18]
 80014bc:	2294      	movs	r2, #148	@ 0x94
 80014be:	fb02 f303 	mul.w	r3, r2, r3
 80014c2:	4a7a      	ldr	r2, [pc, #488]	@ (80016ac <send_http_response_body+0x26c>)
 80014c4:	4413      	add	r3, r2
 80014c6:	3301      	adds	r3, #1
 80014c8:	2280      	movs	r2, #128	@ 0x80
 80014ca:	2100      	movs	r1, #0
 80014cc:	4618      	mov	r0, r3
 80014ce:	f004 fd51 	bl	8005f74 <memset>
			strcpy((char *)HTTPSock_Status[get_seqnum].file_name, (char *)uri_name);
 80014d2:	f997 3012 	ldrsb.w	r3, [r7, #18]
 80014d6:	2294      	movs	r2, #148	@ 0x94
 80014d8:	fb02 f303 	mul.w	r3, r2, r3
 80014dc:	4a73      	ldr	r2, [pc, #460]	@ (80016ac <send_http_response_body+0x26c>)
 80014de:	4413      	add	r3, r2
 80014e0:	3301      	adds	r3, #1
 80014e2:	68b9      	ldr	r1, [r7, #8]
 80014e4:	4618      	mov	r0, r3
 80014e6:	f004 fe64 	bl	80061b2 <strcpy>
#ifdef _HTTPSERVER_DEBUG_
			printf("> HTTPSocket[%d] : HTTP Response body - file name [ %s ]\r\n", s, HTTPSock_Status[get_seqnum].file_name);
 80014ea:	7bf9      	ldrb	r1, [r7, #15]
 80014ec:	f997 3012 	ldrsb.w	r3, [r7, #18]
 80014f0:	2294      	movs	r2, #148	@ 0x94
 80014f2:	fb02 f303 	mul.w	r3, r2, r3
 80014f6:	4a6d      	ldr	r2, [pc, #436]	@ (80016ac <send_http_response_body+0x26c>)
 80014f8:	4413      	add	r3, r2
 80014fa:	3301      	adds	r3, #1
 80014fc:	461a      	mov	r2, r3
 80014fe:	486c      	ldr	r0, [pc, #432]	@ (80016b0 <send_http_response_body+0x270>)
 8001500:	f004 fbd0 	bl	8005ca4 <iprintf>
#endif
/////////////////////////////////////////////////////////////////////////////////////////////////

#ifdef _HTTPSERVER_DEBUG_
			printf("> HTTPSocket[%d] : HTTP Response body - file len [ %ld ]byte\r\n", s, file_len);
 8001504:	7bfb      	ldrb	r3, [r7, #15]
 8001506:	6a3a      	ldr	r2, [r7, #32]
 8001508:	4619      	mov	r1, r3
 800150a:	486a      	ldr	r0, [pc, #424]	@ (80016b4 <send_http_response_body+0x274>)
 800150c:	f004 fbca 	bl	8005ca4 <iprintf>
 8001510:	e03a      	b.n	8001588 <send_http_response_body+0x148>
#endif
		}
		else
		{
			// Send process end
			send_len = file_len;
 8001512:	6a3b      	ldr	r3, [r7, #32]
 8001514:	617b      	str	r3, [r7, #20]

#ifdef _HTTPSERVER_DEBUG_
			printf("> HTTPSocket[%d] : HTTP Response end - file len [ %ld ]byte\r\n", s, send_len);
 8001516:	7bfb      	ldrb	r3, [r7, #15]
 8001518:	697a      	ldr	r2, [r7, #20]
 800151a:	4619      	mov	r1, r3
 800151c:	4866      	ldr	r0, [pc, #408]	@ (80016b8 <send_http_response_body+0x278>)
 800151e:	f004 fbc1 	bl	8005ca4 <iprintf>
 8001522:	e031      	b.n	8001588 <send_http_response_body+0x148>
		if(HTTPSock_Status[get_seqnum]->storage_type == DATAFLASH)
		{
			addr = HTTPSock_Status[get_seqnum].file_start + HTTPSock_Status[get_seqnum].file_offset;
		}
#endif
		send_len = HTTPSock_Status[get_seqnum].file_len - HTTPSock_Status[get_seqnum].file_offset;
 8001524:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8001528:	4a60      	ldr	r2, [pc, #384]	@ (80016ac <send_http_response_body+0x26c>)
 800152a:	2194      	movs	r1, #148	@ 0x94
 800152c:	fb01 f303 	mul.w	r3, r1, r3
 8001530:	4413      	add	r3, r2
 8001532:	3388      	adds	r3, #136	@ 0x88
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	f997 3012 	ldrsb.w	r3, [r7, #18]
 800153a:	495c      	ldr	r1, [pc, #368]	@ (80016ac <send_http_response_body+0x26c>)
 800153c:	2094      	movs	r0, #148	@ 0x94
 800153e:	fb00 f303 	mul.w	r3, r0, r3
 8001542:	440b      	add	r3, r1
 8001544:	338c      	adds	r3, #140	@ 0x8c
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	617b      	str	r3, [r7, #20]

		if(send_len > DATA_BUF_SIZE - 1)
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001552:	d303      	bcc.n	800155c <send_http_response_body+0x11c>
		{
			send_len = DATA_BUF_SIZE - 1;
 8001554:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8001558:	617b      	str	r3, [r7, #20]
 800155a:	e00f      	b.n	800157c <send_http_response_body+0x13c>
			//HTTPSock_Status[get_seqnum]->file_offset += send_len;
		}
		else
		{
#ifdef _HTTPSERVER_DEBUG_
			printf("> HTTPSocket[%d] : HTTP Response end - file len [ %ld ]byte\r\n", s, HTTPSock_Status[get_seqnum].file_len);
 800155c:	7bf9      	ldrb	r1, [r7, #15]
 800155e:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8001562:	4a52      	ldr	r2, [pc, #328]	@ (80016ac <send_http_response_body+0x26c>)
 8001564:	2094      	movs	r0, #148	@ 0x94
 8001566:	fb00 f303 	mul.w	r3, r0, r3
 800156a:	4413      	add	r3, r2
 800156c:	3388      	adds	r3, #136	@ 0x88
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	461a      	mov	r2, r3
 8001572:	4851      	ldr	r0, [pc, #324]	@ (80016b8 <send_http_response_body+0x278>)
 8001574:	f004 fb96 	bl	8005ca4 <iprintf>
#endif
			// Send process end
			flag_datasend_end = 1;
 8001578:	2301      	movs	r3, #1
 800157a:	74fb      	strb	r3, [r7, #19]
		}
#ifdef _HTTPSERVER_DEBUG_
			printf("> HTTPSocket[%d] : HTTP Response body - send len [ %ld ]byte\r\n", s, send_len);
 800157c:	7bfb      	ldrb	r3, [r7, #15]
 800157e:	697a      	ldr	r2, [r7, #20]
 8001580:	4619      	mov	r1, r3
 8001582:	484e      	ldr	r0, [pc, #312]	@ (80016bc <send_http_response_body+0x27c>)
 8001584:	f004 fb8e 	bl	8005ca4 <iprintf>
	//HTTPSock_Status[get_seqnum]->storage_type == CODEFLASH
	//HTTPSock_Status[get_seqnum]->storage_type == SDCARD
	//HTTPSock_Status[get_seqnum]->storage_type == DATAFLASH
/*****************************************************/

	if(HTTPSock_Status[get_seqnum].storage_type == CODEFLASH)
 8001588:	f997 3012 	ldrsb.w	r3, [r7, #18]
 800158c:	4a47      	ldr	r2, [pc, #284]	@ (80016ac <send_http_response_body+0x26c>)
 800158e:	2194      	movs	r1, #148	@ 0x94
 8001590:	fb01 f303 	mul.w	r3, r1, r3
 8001594:	4413      	add	r3, r2
 8001596:	3390      	adds	r3, #144	@ 0x90
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	2b01      	cmp	r3, #1
 800159c:	d125      	bne.n	80015ea <send_http_response_body+0x1aa>
	{
		if(HTTPSock_Status[get_seqnum].file_len) start_addr = HTTPSock_Status[get_seqnum].file_start;
 800159e:	f997 3012 	ldrsb.w	r3, [r7, #18]
 80015a2:	4a42      	ldr	r2, [pc, #264]	@ (80016ac <send_http_response_body+0x26c>)
 80015a4:	2194      	movs	r1, #148	@ 0x94
 80015a6:	fb01 f303 	mul.w	r3, r1, r3
 80015aa:	4413      	add	r3, r2
 80015ac:	3388      	adds	r3, #136	@ 0x88
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d009      	beq.n	80015c8 <send_http_response_body+0x188>
 80015b4:	f997 3012 	ldrsb.w	r3, [r7, #18]
 80015b8:	4a3c      	ldr	r2, [pc, #240]	@ (80016ac <send_http_response_body+0x26c>)
 80015ba:	2194      	movs	r1, #148	@ 0x94
 80015bc:	fb01 f303 	mul.w	r3, r1, r3
 80015c0:	4413      	add	r3, r2
 80015c2:	3384      	adds	r3, #132	@ 0x84
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	603b      	str	r3, [r7, #0]
		read_userReg_webContent(start_addr, &buf[0], HTTPSock_Status[get_seqnum].file_offset, send_len);
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	b298      	uxth	r0, r3
 80015cc:	f997 3012 	ldrsb.w	r3, [r7, #18]
 80015d0:	4a36      	ldr	r2, [pc, #216]	@ (80016ac <send_http_response_body+0x26c>)
 80015d2:	2194      	movs	r1, #148	@ 0x94
 80015d4:	fb01 f303 	mul.w	r3, r1, r3
 80015d8:	4413      	add	r3, r2
 80015da:	338c      	adds	r3, #140	@ 0x8c
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	b29b      	uxth	r3, r3
 80015e2:	6879      	ldr	r1, [r7, #4]
 80015e4:	f000 fbf2 	bl	8001dcc <read_userReg_webContent>
 80015e8:	e001      	b.n	80015ee <send_http_response_body+0x1ae>
		*(buf+send_len+1) = 0; // Insert '/0' for indicates the 'End of String' (null terminated)
	}
#endif
	else
	{
		send_len = 0;
 80015ea:	2300      	movs	r3, #0
 80015ec:	617b      	str	r3, [r7, #20]
	}
	// Requested content send to HTTP client
#ifdef _HTTPSERVER_DEBUG_
	printf("> HTTPSocket[%d] : [Send] HTTP Response body [ %ld ]byte\r\n", s, send_len);
 80015ee:	7bfb      	ldrb	r3, [r7, #15]
 80015f0:	697a      	ldr	r2, [r7, #20]
 80015f2:	4619      	mov	r1, r3
 80015f4:	4832      	ldr	r0, [pc, #200]	@ (80016c0 <send_http_response_body+0x280>)
 80015f6:	f004 fb55 	bl	8005ca4 <iprintf>
#endif

	if(send_len) send(s, buf, send_len);
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d007      	beq.n	8001610 <send_http_response_body+0x1d0>
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	b29a      	uxth	r2, r3
 8001604:	7bfb      	ldrb	r3, [r7, #15]
 8001606:	6879      	ldr	r1, [r7, #4]
 8001608:	4618      	mov	r0, r3
 800160a:	f001 f8d3 	bl	80027b4 <send>
 800160e:	e001      	b.n	8001614 <send_http_response_body+0x1d4>
	else flag_datasend_end = 1;
 8001610:	2301      	movs	r3, #1
 8001612:	74fb      	strb	r3, [r7, #19]

	if(flag_datasend_end)
 8001614:	7cfb      	ldrb	r3, [r7, #19]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d020      	beq.n	800165c <send_http_response_body+0x21c>
	{
		HTTPSock_Status[get_seqnum].file_start = 0;
 800161a:	f997 3012 	ldrsb.w	r3, [r7, #18]
 800161e:	4a23      	ldr	r2, [pc, #140]	@ (80016ac <send_http_response_body+0x26c>)
 8001620:	2194      	movs	r1, #148	@ 0x94
 8001622:	fb01 f303 	mul.w	r3, r1, r3
 8001626:	4413      	add	r3, r2
 8001628:	3384      	adds	r3, #132	@ 0x84
 800162a:	2200      	movs	r2, #0
 800162c:	601a      	str	r2, [r3, #0]
		HTTPSock_Status[get_seqnum].file_len = 0;
 800162e:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8001632:	4a1e      	ldr	r2, [pc, #120]	@ (80016ac <send_http_response_body+0x26c>)
 8001634:	2194      	movs	r1, #148	@ 0x94
 8001636:	fb01 f303 	mul.w	r3, r1, r3
 800163a:	4413      	add	r3, r2
 800163c:	3388      	adds	r3, #136	@ 0x88
 800163e:	2200      	movs	r2, #0
 8001640:	601a      	str	r2, [r3, #0]
		HTTPSock_Status[get_seqnum].file_offset = 0;
 8001642:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8001646:	4a19      	ldr	r2, [pc, #100]	@ (80016ac <send_http_response_body+0x26c>)
 8001648:	2194      	movs	r1, #148	@ 0x94
 800164a:	fb01 f303 	mul.w	r3, r1, r3
 800164e:	4413      	add	r3, r2
 8001650:	338c      	adds	r3, #140	@ 0x8c
 8001652:	2200      	movs	r2, #0
 8001654:	601a      	str	r2, [r3, #0]
		flag_datasend_end = 0;
 8001656:	2300      	movs	r3, #0
 8001658:	74fb      	strb	r3, [r7, #19]
 800165a:	e023      	b.n	80016a4 <send_http_response_body+0x264>
	}
	else
	{
		HTTPSock_Status[get_seqnum].file_offset += send_len;
 800165c:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8001660:	4a12      	ldr	r2, [pc, #72]	@ (80016ac <send_http_response_body+0x26c>)
 8001662:	2194      	movs	r1, #148	@ 0x94
 8001664:	fb01 f303 	mul.w	r3, r1, r3
 8001668:	4413      	add	r3, r2
 800166a:	338c      	adds	r3, #140	@ 0x8c
 800166c:	6819      	ldr	r1, [r3, #0]
 800166e:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8001672:	697a      	ldr	r2, [r7, #20]
 8001674:	440a      	add	r2, r1
 8001676:	490d      	ldr	r1, [pc, #52]	@ (80016ac <send_http_response_body+0x26c>)
 8001678:	2094      	movs	r0, #148	@ 0x94
 800167a:	fb00 f303 	mul.w	r3, r0, r3
 800167e:	440b      	add	r3, r1
 8001680:	338c      	adds	r3, #140	@ 0x8c
 8001682:	601a      	str	r2, [r3, #0]
#ifdef _HTTPSERVER_DEBUG_
		printf("> HTTPSocket[%d] : HTTP Response body - offset [ %ld ]\r\n", s, HTTPSock_Status[get_seqnum].file_offset);
 8001684:	7bf9      	ldrb	r1, [r7, #15]
 8001686:	f997 3012 	ldrsb.w	r3, [r7, #18]
 800168a:	4a08      	ldr	r2, [pc, #32]	@ (80016ac <send_http_response_body+0x26c>)
 800168c:	2094      	movs	r0, #148	@ 0x94
 800168e:	fb00 f303 	mul.w	r3, r0, r3
 8001692:	4413      	add	r3, r2
 8001694:	338c      	adds	r3, #140	@ 0x8c
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	461a      	mov	r2, r3
 800169a:	480a      	ldr	r0, [pc, #40]	@ (80016c4 <send_http_response_body+0x284>)
 800169c:	f004 fb02 	bl	8005ca4 <iprintf>
 80016a0:	e000      	b.n	80016a4 <send_http_response_body+0x264>
	if((get_seqnum = getHTTPSequenceNum(s)) == -1) return; // exception handling; invalid number
 80016a2:	bf00      	nop
// ## 20141219 Eric added, for 'File object structure' (fs) allocation reduced (8 -> 1)
#ifdef _USE_SDCARD_
	f_close(&fs);
#endif
// ## 20141219 added end
}
 80016a4:	3718      	adds	r7, #24
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	2000010c 	.word	0x2000010c
 80016b0:	08007788 	.word	0x08007788
 80016b4:	080077c4 	.word	0x080077c4
 80016b8:	08007804 	.word	0x08007804
 80016bc:	08007844 	.word	0x08007844
 80016c0:	08007884 	.word	0x08007884
 80016c4:	080078c0 	.word	0x080078c0

080016c8 <send_http_response_cgi>:

static void send_http_response_cgi(uint8_t s, uint8_t * buf, uint8_t * http_body, uint16_t file_len)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b088      	sub	sp, #32
 80016cc:	af02      	add	r7, sp, #8
 80016ce:	60b9      	str	r1, [r7, #8]
 80016d0:	607a      	str	r2, [r7, #4]
 80016d2:	461a      	mov	r2, r3
 80016d4:	4603      	mov	r3, r0
 80016d6:	73fb      	strb	r3, [r7, #15]
 80016d8:	4613      	mov	r3, r2
 80016da:	81bb      	strh	r3, [r7, #12]
	uint16_t send_len = 0;
 80016dc:	2300      	movs	r3, #0
 80016de:	82fb      	strh	r3, [r7, #22]

#ifdef _HTTPSERVER_DEBUG_
	printf("> HTTPSocket[%d] : HTTP Response Header + Body - CGI\r\n", s);
 80016e0:	7bfb      	ldrb	r3, [r7, #15]
 80016e2:	4619      	mov	r1, r3
 80016e4:	480e      	ldr	r0, [pc, #56]	@ (8001720 <send_http_response_cgi+0x58>)
 80016e6:	f004 fadd 	bl	8005ca4 <iprintf>
#endif
	send_len = sprintf((char *)buf, "%s%d\r\n\r\n%s", RES_CGIHEAD_OK, file_len, http_body);
 80016ea:	89ba      	ldrh	r2, [r7, #12]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	9300      	str	r3, [sp, #0]
 80016f0:	4613      	mov	r3, r2
 80016f2:	4a0c      	ldr	r2, [pc, #48]	@ (8001724 <send_http_response_cgi+0x5c>)
 80016f4:	490c      	ldr	r1, [pc, #48]	@ (8001728 <send_http_response_cgi+0x60>)
 80016f6:	68b8      	ldr	r0, [r7, #8]
 80016f8:	f004 fb44 	bl	8005d84 <siprintf>
 80016fc:	4603      	mov	r3, r0
 80016fe:	82fb      	strh	r3, [r7, #22]
#ifdef _HTTPSERVER_DEBUG_
	printf("> HTTPSocket[%d] : HTTP Response Header + Body - send len [ %d ]byte\r\n", s, send_len);
 8001700:	7bfb      	ldrb	r3, [r7, #15]
 8001702:	8afa      	ldrh	r2, [r7, #22]
 8001704:	4619      	mov	r1, r3
 8001706:	4809      	ldr	r0, [pc, #36]	@ (800172c <send_http_response_cgi+0x64>)
 8001708:	f004 facc 	bl	8005ca4 <iprintf>
#endif

	send(s, buf, send_len);
 800170c:	8afa      	ldrh	r2, [r7, #22]
 800170e:	7bfb      	ldrb	r3, [r7, #15]
 8001710:	68b9      	ldr	r1, [r7, #8]
 8001712:	4618      	mov	r0, r3
 8001714:	f001 f84e 	bl	80027b4 <send>
}
 8001718:	bf00      	nop
 800171a:	3718      	adds	r7, #24
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	080078fc 	.word	0x080078fc
 8001724:	08007934 	.word	0x08007934
 8001728:	08007970 	.word	0x08007970
 800172c:	0800797c 	.word	0x0800797c

08001730 <http_disconnect>:


static int8_t http_disconnect(uint8_t sn)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	4603      	mov	r3, r0
 8001738:	71fb      	strb	r3, [r7, #7]
	setSn_CR(sn,Sn_CR_DISCON);
 800173a:	79fb      	ldrb	r3, [r7, #7]
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	3301      	adds	r3, #1
 8001740:	00db      	lsls	r3, r3, #3
 8001742:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8001746:	2108      	movs	r1, #8
 8001748:	4618      	mov	r0, r3
 800174a:	f7fe fe1d 	bl	8000388 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 800174e:	bf00      	nop
 8001750:	79fb      	ldrb	r3, [r7, #7]
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	3301      	adds	r3, #1
 8001756:	00db      	lsls	r3, r3, #3
 8001758:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800175c:	4618      	mov	r0, r3
 800175e:	f7fe fdc7 	bl	80002f0 <WIZCHIP_READ>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d1f3      	bne.n	8001750 <http_disconnect+0x20>

	return SOCK_OK;
 8001768:	2301      	movs	r3, #1
}
 800176a:	4618      	mov	r0, r3
 800176c:	3708      	adds	r7, #8
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
	...

08001774 <http_process_handler>:


static void http_process_handler(uint8_t s, st_http_request * p_http_request)
{
 8001774:	b5b0      	push	{r4, r5, r7, lr}
 8001776:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 800177a:	af02      	add	r7, sp, #8
 800177c:	4602      	mov	r2, r0
 800177e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8001782:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8001786:	6019      	str	r1, [r3, #0]
 8001788:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800178c:	f2a3 2319 	subw	r3, r3, #537	@ 0x219
 8001790:	701a      	strb	r2, [r3, #0]
	uint8_t * uri_name;
	uint32_t content_addr = 0;
 8001792:	2300      	movs	r3, #0
 8001794:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
	uint16_t content_num = 0;
 8001798:	2300      	movs	r3, #0
 800179a:	f8a7 3212 	strh.w	r3, [r7, #530]	@ 0x212
	uint32_t file_len = 0;
 800179e:	2300      	movs	r3, #0
 80017a0:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c

	uint8_t uri_buf[MAX_URI_SIZE]={0x00, };
 80017a4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80017a8:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80017ac:	2200      	movs	r2, #0
 80017ae:	601a      	str	r2, [r3, #0]
 80017b0:	3304      	adds	r3, #4
 80017b2:	f44f 72fe 	mov.w	r2, #508	@ 0x1fc
 80017b6:	2100      	movs	r1, #0
 80017b8:	4618      	mov	r0, r3
 80017ba:	f004 fbdb 	bl	8005f74 <memset>

	uint16_t http_status;
	int8_t get_seqnum;
	uint8_t content_found;

	if((get_seqnum = getHTTPSequenceNum(s)) == -1) return; // exception handling; invalid number
 80017be:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80017c2:	f2a3 2319 	subw	r3, r3, #537	@ 0x219
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	4618      	mov	r0, r3
 80017ca:	f7ff fb7b 	bl	8000ec4 <getHTTPSequenceNum>
 80017ce:	4603      	mov	r3, r0
 80017d0:	f887 3218 	strb.w	r3, [r7, #536]	@ 0x218
 80017d4:	f997 3218 	ldrsb.w	r3, [r7, #536]	@ 0x218
 80017d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017dc:	f000 822f 	beq.w	8001c3e <http_process_handler+0x4ca>

	http_status = 0;
 80017e0:	2300      	movs	r3, #0
 80017e2:	f8a7 321a 	strh.w	r3, [r7, #538]	@ 0x21a
	http_response = pHTTP_RX;
 80017e6:	4baf      	ldr	r3, [pc, #700]	@ (8001aa4 <http_process_handler+0x330>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4aaf      	ldr	r2, [pc, #700]	@ (8001aa8 <http_process_handler+0x334>)
 80017ec:	6013      	str	r3, [r2, #0]
	file_len = 0;
 80017ee:	2300      	movs	r3, #0
 80017f0:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c

	//method Analyze
	switch (p_http_request->METHOD)
 80017f4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80017f8:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	2b03      	cmp	r3, #3
 8001802:	f000 816f 	beq.w	8001ae4 <http_process_handler+0x370>
 8001806:	2b03      	cmp	r3, #3
 8001808:	f300 8208 	bgt.w	8001c1c <http_process_handler+0x4a8>
 800180c:	2b00      	cmp	r3, #0
 800180e:	d007      	beq.n	8001820 <http_process_handler+0xac>
 8001810:	2b00      	cmp	r3, #0
 8001812:	f2c0 8203 	blt.w	8001c1c <http_process_handler+0x4a8>
 8001816:	3b01      	subs	r3, #1
 8001818:	2b01      	cmp	r3, #1
 800181a:	f200 81ff 	bhi.w	8001c1c <http_process_handler+0x4a8>
 800181e:	e010      	b.n	8001842 <http_process_handler+0xce>
	{
		case METHOD_ERR :
			http_status = STATUS_BAD_REQ;
 8001820:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8001824:	f8a7 321a 	strh.w	r3, [r7, #538]	@ 0x21a
			send_http_response_header(s, 0, 0, http_status);
 8001828:	f8b7 221a 	ldrh.w	r2, [r7, #538]	@ 0x21a
 800182c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8001830:	f2a3 2319 	subw	r3, r3, #537	@ 0x219
 8001834:	7818      	ldrb	r0, [r3, #0]
 8001836:	4613      	mov	r3, r2
 8001838:	2200      	movs	r2, #0
 800183a:	2100      	movs	r1, #0
 800183c:	f7ff fd7c 	bl	8001338 <send_http_response_header>
			break;
 8001840:	e200      	b.n	8001c44 <http_process_handler+0x4d0>

		case METHOD_HEAD :
		case METHOD_GET :
			get_http_uri_name(p_http_request->URI, uri_buf);
 8001842:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8001846:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	3302      	adds	r3, #2
 800184e:	f107 020c 	add.w	r2, r7, #12
 8001852:	4611      	mov	r1, r2
 8001854:	4618      	mov	r0, r3
 8001856:	f7ff faa1 	bl	8000d9c <get_http_uri_name>
			uri_name = uri_buf;
 800185a:	f107 030c 	add.w	r3, r7, #12
 800185e:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214

			if (!strcmp((char *)uri_name, "/")) strcpy((char *)uri_name, INITIAL_WEBPAGE);	// If URI is "/", respond by index.html
 8001862:	4992      	ldr	r1, [pc, #584]	@ (8001aac <http_process_handler+0x338>)
 8001864:	f8d7 0214 	ldr.w	r0, [r7, #532]	@ 0x214
 8001868:	f7fe fcda 	bl	8000220 <strcmp>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d10b      	bne.n	800188a <http_process_handler+0x116>
 8001872:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8001876:	498e      	ldr	r1, [pc, #568]	@ (8001ab0 <http_process_handler+0x33c>)
 8001878:	461a      	mov	r2, r3
 800187a:	460b      	mov	r3, r1
 800187c:	cb03      	ldmia	r3!, {r0, r1}
 800187e:	6010      	str	r0, [r2, #0]
 8001880:	6051      	str	r1, [r2, #4]
 8001882:	8819      	ldrh	r1, [r3, #0]
 8001884:	789b      	ldrb	r3, [r3, #2]
 8001886:	8111      	strh	r1, [r2, #8]
 8001888:	7293      	strb	r3, [r2, #10]
			if (!strcmp((char *)uri_name, "m")) strcpy((char *)uri_name, M_INITIAL_WEBPAGE);
 800188a:	498a      	ldr	r1, [pc, #552]	@ (8001ab4 <http_process_handler+0x340>)
 800188c:	f8d7 0214 	ldr.w	r0, [r7, #532]	@ 0x214
 8001890:	f7fe fcc6 	bl	8000220 <strcmp>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d10a      	bne.n	80018b0 <http_process_handler+0x13c>
 800189a:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800189e:	4a86      	ldr	r2, [pc, #536]	@ (8001ab8 <http_process_handler+0x344>)
 80018a0:	461c      	mov	r4, r3
 80018a2:	4613      	mov	r3, r2
 80018a4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80018a6:	6020      	str	r0, [r4, #0]
 80018a8:	6061      	str	r1, [r4, #4]
 80018aa:	60a2      	str	r2, [r4, #8]
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	7323      	strb	r3, [r4, #12]
			if (!strcmp((char *)uri_name, "mobile")) strcpy((char *)uri_name, MOBILE_INITIAL_WEBPAGE);
 80018b0:	4982      	ldr	r1, [pc, #520]	@ (8001abc <http_process_handler+0x348>)
 80018b2:	f8d7 0214 	ldr.w	r0, [r7, #532]	@ 0x214
 80018b6:	f7fe fcb3 	bl	8000220 <strcmp>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d10b      	bne.n	80018d8 <http_process_handler+0x164>
 80018c0:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80018c4:	4a7e      	ldr	r2, [pc, #504]	@ (8001ac0 <http_process_handler+0x34c>)
 80018c6:	461d      	mov	r5, r3
 80018c8:	4614      	mov	r4, r2
 80018ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018cc:	6028      	str	r0, [r5, #0]
 80018ce:	6069      	str	r1, [r5, #4]
 80018d0:	60aa      	str	r2, [r5, #8]
 80018d2:	60eb      	str	r3, [r5, #12]
 80018d4:	8823      	ldrh	r3, [r4, #0]
 80018d6:	822b      	strh	r3, [r5, #16]
			find_http_uri_type(&p_http_request->TYPE, uri_name);	// Checking requested file types (HTML, TEXT, GIF, JPEG and Etc. are included)
 80018d8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80018dc:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	3301      	adds	r3, #1
 80018e4:	f8d7 1214 	ldr.w	r1, [r7, #532]	@ 0x214
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7ff f857 	bl	800099c <find_http_uri_type>

#ifdef _HTTPSERVER_DEBUG_
			printf("\r\n> HTTPSocket[%d] : HTTP Method GET\r\n", s);
 80018ee:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80018f2:	f2a3 2319 	subw	r3, r3, #537	@ 0x219
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	4619      	mov	r1, r3
 80018fa:	4872      	ldr	r0, [pc, #456]	@ (8001ac4 <http_process_handler+0x350>)
 80018fc:	f004 f9d2 	bl	8005ca4 <iprintf>
			printf("> HTTPSocket[%d] : Request Type = %d\r\n", s, p_http_request->TYPE);
 8001900:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8001904:	f2a3 2319 	subw	r3, r3, #537	@ 0x219
 8001908:	7819      	ldrb	r1, [r3, #0]
 800190a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800190e:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	785b      	ldrb	r3, [r3, #1]
 8001916:	461a      	mov	r2, r3
 8001918:	486b      	ldr	r0, [pc, #428]	@ (8001ac8 <http_process_handler+0x354>)
 800191a:	f004 f9c3 	bl	8005ca4 <iprintf>
			printf("> HTTPSocket[%d] : Request URI = %s\r\n", s, uri_name);
 800191e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8001922:	f2a3 2319 	subw	r3, r3, #537	@ 0x219
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	f8d7 2214 	ldr.w	r2, [r7, #532]	@ 0x214
 800192c:	4619      	mov	r1, r3
 800192e:	4867      	ldr	r0, [pc, #412]	@ (8001acc <http_process_handler+0x358>)
 8001930:	f004 f9b8 	bl	8005ca4 <iprintf>
#endif

			if(p_http_request->TYPE == PTYPE_CGI)
 8001934:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8001938:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	785b      	ldrb	r3, [r3, #1]
 8001940:	2b08      	cmp	r3, #8
 8001942:	d131      	bne.n	80019a8 <http_process_handler+0x234>
			{
				content_found = http_get_cgi_handler(uri_name, pHTTP_TX, &file_len);
 8001944:	4b62      	ldr	r3, [pc, #392]	@ (8001ad0 <http_process_handler+0x35c>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f507 7203 	add.w	r2, r7, #524	@ 0x20c
 800194c:	4619      	mov	r1, r3
 800194e:	f8d7 0214 	ldr.w	r0, [r7, #532]	@ 0x214
 8001952:	f000 fa79 	bl	8001e48 <http_get_cgi_handler>
 8001956:	4603      	mov	r3, r0
 8001958:	f887 3219 	strb.w	r3, [r7, #537]	@ 0x219
				if(content_found && (file_len <= (DATA_BUF_SIZE-(strlen(RES_CGIHEAD_OK)+8))))
 800195c:	f897 3219 	ldrb.w	r3, [r7, #537]	@ 0x219
 8001960:	2b00      	cmp	r3, #0
 8001962:	d015      	beq.n	8001990 <http_process_handler+0x21c>
 8001964:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8001968:	f240 72be 	movw	r2, #1982	@ 0x7be
 800196c:	4293      	cmp	r3, r2
 800196e:	d80f      	bhi.n	8001990 <http_process_handler+0x21c>
				{
					send_http_response_cgi(s, http_response, pHTTP_TX, (uint16_t)file_len);
 8001970:	4b4d      	ldr	r3, [pc, #308]	@ (8001aa8 <http_process_handler+0x334>)
 8001972:	6819      	ldr	r1, [r3, #0]
 8001974:	4b56      	ldr	r3, [pc, #344]	@ (8001ad0 <http_process_handler+0x35c>)
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 800197c:	b29c      	uxth	r4, r3
 800197e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8001982:	f2a3 2319 	subw	r3, r3, #537	@ 0x219
 8001986:	7818      	ldrb	r0, [r3, #0]
 8001988:	4623      	mov	r3, r4
 800198a:	f7ff fe9d 	bl	80016c8 <send_http_response_cgi>
				if(http_status == STATUS_OK)
				{
					send_http_response_body(s, uri_name, http_response, content_addr, file_len);
				}
			}
			break;
 800198e:	e158      	b.n	8001c42 <http_process_handler+0x4ce>
					send_http_response_header(s, PTYPE_CGI, 0, STATUS_NOT_FOUND);
 8001990:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8001994:	f2a3 2319 	subw	r3, r3, #537	@ 0x219
 8001998:	7818      	ldrb	r0, [r3, #0]
 800199a:	f44f 73ca 	mov.w	r3, #404	@ 0x194
 800199e:	2200      	movs	r2, #0
 80019a0:	2108      	movs	r1, #8
 80019a2:	f7ff fcc9 	bl	8001338 <send_http_response_header>
			break;
 80019a6:	e14c      	b.n	8001c42 <http_process_handler+0x4ce>
				if(find_userReg_webContent(uri_buf, &content_num, &file_len))
 80019a8:	f507 7203 	add.w	r2, r7, #524	@ 0x20c
 80019ac:	f207 2112 	addw	r1, r7, #530	@ 0x212
 80019b0:	f107 030c 	add.w	r3, r7, #12
 80019b4:	4618      	mov	r0, r3
 80019b6:	f000 f9cd 	bl	8001d54 <find_userReg_webContent>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d011      	beq.n	80019e4 <http_process_handler+0x270>
					content_found = 1; // Web content found in code flash memory
 80019c0:	2301      	movs	r3, #1
 80019c2:	f887 3219 	strb.w	r3, [r7, #537]	@ 0x219
					content_addr = (uint32_t)content_num;
 80019c6:	f8b7 3212 	ldrh.w	r3, [r7, #530]	@ 0x212
 80019ca:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
					HTTPSock_Status[get_seqnum].storage_type = CODEFLASH;
 80019ce:	f997 3218 	ldrsb.w	r3, [r7, #536]	@ 0x218
 80019d2:	4a40      	ldr	r2, [pc, #256]	@ (8001ad4 <http_process_handler+0x360>)
 80019d4:	2194      	movs	r1, #148	@ 0x94
 80019d6:	fb01 f303 	mul.w	r3, r1, r3
 80019da:	4413      	add	r3, r2
 80019dc:	3390      	adds	r3, #144	@ 0x90
 80019de:	2201      	movs	r2, #1
 80019e0:	701a      	strb	r2, [r3, #0]
 80019e2:	e002      	b.n	80019ea <http_process_handler+0x276>
					content_found = 0; // fail to find content
 80019e4:	2300      	movs	r3, #0
 80019e6:	f887 3219 	strb.w	r3, [r7, #537]	@ 0x219
				if(!content_found)
 80019ea:	f897 3219 	ldrb.w	r3, [r7, #537]	@ 0x219
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d10d      	bne.n	8001a0e <http_process_handler+0x29a>
					printf("> HTTPSocket[%d] : Unknown Page Request\r\n", s);
 80019f2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80019f6:	f2a3 2319 	subw	r3, r3, #537	@ 0x219
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	4619      	mov	r1, r3
 80019fe:	4836      	ldr	r0, [pc, #216]	@ (8001ad8 <http_process_handler+0x364>)
 8001a00:	f004 f950 	bl	8005ca4 <iprintf>
					http_status = STATUS_NOT_FOUND;
 8001a04:	f44f 73ca 	mov.w	r3, #404	@ 0x194
 8001a08:	f8a7 321a 	strh.w	r3, [r7, #538]	@ 0x21a
 8001a0c:	e011      	b.n	8001a32 <http_process_handler+0x2be>
					printf("> HTTPSocket[%d] : Find Content [%s] ok - Start [%ld] len [ %ld ]byte\r\n", s, uri_name, content_addr, file_len);
 8001a0e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8001a12:	f2a3 2319 	subw	r3, r3, #537	@ 0x219
 8001a16:	7819      	ldrb	r1, [r3, #0]
 8001a18:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8001a1c:	9300      	str	r3, [sp, #0]
 8001a1e:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8001a22:	f8d7 2214 	ldr.w	r2, [r7, #532]	@ 0x214
 8001a26:	482d      	ldr	r0, [pc, #180]	@ (8001adc <http_process_handler+0x368>)
 8001a28:	f004 f93c 	bl	8005ca4 <iprintf>
					http_status = STATUS_OK;
 8001a2c:	23c8      	movs	r3, #200	@ 0xc8
 8001a2e:	f8a7 321a 	strh.w	r3, [r7, #538]	@ 0x21a
				if(http_status)
 8001a32:	f8b7 321a 	ldrh.w	r3, [r7, #538]	@ 0x21a
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d01c      	beq.n	8001a74 <http_process_handler+0x300>
					printf("> HTTPSocket[%d] : Requested content len = [ %ld ]byte\r\n", s, file_len);
 8001a3a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8001a3e:	f2a3 2319 	subw	r3, r3, #537	@ 0x219
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	f8d7 220c 	ldr.w	r2, [r7, #524]	@ 0x20c
 8001a48:	4619      	mov	r1, r3
 8001a4a:	4825      	ldr	r0, [pc, #148]	@ (8001ae0 <http_process_handler+0x36c>)
 8001a4c:	f004 f92a 	bl	8005ca4 <iprintf>
					send_http_response_header(s, p_http_request->TYPE, file_len, http_status);
 8001a50:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8001a54:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	7859      	ldrb	r1, [r3, #1]
 8001a5c:	f8d7 220c 	ldr.w	r2, [r7, #524]	@ 0x20c
 8001a60:	f8b7 421a 	ldrh.w	r4, [r7, #538]	@ 0x21a
 8001a64:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8001a68:	f2a3 2319 	subw	r3, r3, #537	@ 0x219
 8001a6c:	7818      	ldrb	r0, [r3, #0]
 8001a6e:	4623      	mov	r3, r4
 8001a70:	f7ff fc62 	bl	8001338 <send_http_response_header>
				if(http_status == STATUS_OK)
 8001a74:	f8b7 321a 	ldrh.w	r3, [r7, #538]	@ 0x21a
 8001a78:	2bc8      	cmp	r3, #200	@ 0xc8
 8001a7a:	f040 80e2 	bne.w	8001c42 <http_process_handler+0x4ce>
					send_http_response_body(s, uri_name, http_response, content_addr, file_len);
 8001a7e:	4b0a      	ldr	r3, [pc, #40]	@ (8001aa8 <http_process_handler+0x334>)
 8001a80:	6819      	ldr	r1, [r3, #0]
 8001a82:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8001a86:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8001a8a:	f2a2 2219 	subw	r2, r2, #537	@ 0x219
 8001a8e:	7810      	ldrb	r0, [r2, #0]
 8001a90:	9300      	str	r3, [sp, #0]
 8001a92:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8001a96:	460a      	mov	r2, r1
 8001a98:	f8d7 1214 	ldr.w	r1, [r7, #532]	@ 0x214
 8001a9c:	f7ff fcd0 	bl	8001440 <send_http_response_body>
			break;
 8001aa0:	e0cf      	b.n	8001c42 <http_process_handler+0x4ce>
 8001aa2:	bf00      	nop
 8001aa4:	20000104 	.word	0x20000104
 8001aa8:	200000f8 	.word	0x200000f8
 8001aac:	080079c4 	.word	0x080079c4
 8001ab0:	080079c8 	.word	0x080079c8
 8001ab4:	080079d4 	.word	0x080079d4
 8001ab8:	080079d8 	.word	0x080079d8
 8001abc:	080079e8 	.word	0x080079e8
 8001ac0:	080079f0 	.word	0x080079f0
 8001ac4:	08007a04 	.word	0x08007a04
 8001ac8:	08007a2c 	.word	0x08007a2c
 8001acc:	08007a54 	.word	0x08007a54
 8001ad0:	20000100 	.word	0x20000100
 8001ad4:	2000010c 	.word	0x2000010c
 8001ad8:	08007a7c 	.word	0x08007a7c
 8001adc:	08007aa8 	.word	0x08007aa8
 8001ae0:	08007af0 	.word	0x08007af0

		case METHOD_POST :
			mid((char *)p_http_request->URI, "/", " HTTP", (char *)uri_buf);
 8001ae4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8001ae8:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	1c98      	adds	r0, r3, #2
 8001af0:	f107 030c 	add.w	r3, r7, #12
 8001af4:	4a55      	ldr	r2, [pc, #340]	@ (8001c4c <http_process_handler+0x4d8>)
 8001af6:	4956      	ldr	r1, [pc, #344]	@ (8001c50 <http_process_handler+0x4dc>)
 8001af8:	f7ff f97a 	bl	8000df0 <mid>
			uri_name = uri_buf;
 8001afc:	f107 030c 	add.w	r3, r7, #12
 8001b00:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
			find_http_uri_type(&p_http_request->TYPE, uri_name);	// Check file type (HTML, TEXT, GIF, JPEG are included)
 8001b04:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8001b08:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	3301      	adds	r3, #1
 8001b10:	f8d7 1214 	ldr.w	r1, [r7, #532]	@ 0x214
 8001b14:	4618      	mov	r0, r3
 8001b16:	f7fe ff41 	bl	800099c <find_http_uri_type>

#ifdef _HTTPSERVER_DEBUG_
			printf("\r\n> HTTPSocket[%d] : HTTP Method POST\r\n", s);
 8001b1a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8001b1e:	f2a3 2319 	subw	r3, r3, #537	@ 0x219
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	4619      	mov	r1, r3
 8001b26:	484b      	ldr	r0, [pc, #300]	@ (8001c54 <http_process_handler+0x4e0>)
 8001b28:	f004 f8bc 	bl	8005ca4 <iprintf>
			printf("> HTTPSocket[%d] : Request URI = %s ", s, uri_name);
 8001b2c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8001b30:	f2a3 2319 	subw	r3, r3, #537	@ 0x219
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	f8d7 2214 	ldr.w	r2, [r7, #532]	@ 0x214
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	4846      	ldr	r0, [pc, #280]	@ (8001c58 <http_process_handler+0x4e4>)
 8001b3e:	f004 f8b1 	bl	8005ca4 <iprintf>
			printf("Type = %d\r\n", p_http_request->TYPE);
 8001b42:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8001b46:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	785b      	ldrb	r3, [r3, #1]
 8001b4e:	4619      	mov	r1, r3
 8001b50:	4842      	ldr	r0, [pc, #264]	@ (8001c5c <http_process_handler+0x4e8>)
 8001b52:	f004 f8a7 	bl	8005ca4 <iprintf>
#endif

			if(p_http_request->TYPE == PTYPE_CGI)	// HTTP POST Method; CGI Process
 8001b56:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8001b5a:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	785b      	ldrb	r3, [r3, #1]
 8001b62:	2b08      	cmp	r3, #8
 8001b64:	d14d      	bne.n	8001c02 <http_process_handler+0x48e>
			{
				content_found = http_post_cgi_handler(uri_name, p_http_request, http_response, &file_len);
 8001b66:	4b3e      	ldr	r3, [pc, #248]	@ (8001c60 <http_process_handler+0x4ec>)
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	f507 7303 	add.w	r3, r7, #524	@ 0x20c
 8001b6e:	f507 7108 	add.w	r1, r7, #544	@ 0x220
 8001b72:	f5a1 7108 	sub.w	r1, r1, #544	@ 0x220
 8001b76:	6809      	ldr	r1, [r1, #0]
 8001b78:	f8d7 0214 	ldr.w	r0, [r7, #532]	@ 0x214
 8001b7c:	f000 f990 	bl	8001ea0 <http_post_cgi_handler>
 8001b80:	4603      	mov	r3, r0
 8001b82:	f887 3219 	strb.w	r3, [r7, #537]	@ 0x219
#ifdef _HTTPSERVER_DEBUG_
				printf("> HTTPSocket[%d] : [CGI: %s] / Response len [ %ld ]byte\r\n", s, content_found?"Content found":"Content not found", file_len);
 8001b86:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8001b8a:	f2a3 2319 	subw	r3, r3, #537	@ 0x219
 8001b8e:	7819      	ldrb	r1, [r3, #0]
 8001b90:	f897 3219 	ldrb.w	r3, [r7, #537]	@ 0x219
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d001      	beq.n	8001b9c <http_process_handler+0x428>
 8001b98:	4a32      	ldr	r2, [pc, #200]	@ (8001c64 <http_process_handler+0x4f0>)
 8001b9a:	e000      	b.n	8001b9e <http_process_handler+0x42a>
 8001b9c:	4a32      	ldr	r2, [pc, #200]	@ (8001c68 <http_process_handler+0x4f4>)
 8001b9e:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8001ba2:	4832      	ldr	r0, [pc, #200]	@ (8001c6c <http_process_handler+0x4f8>)
 8001ba4:	f004 f87e 	bl	8005ca4 <iprintf>
#endif
				if(content_found && (file_len <= (DATA_BUF_SIZE-(strlen(RES_CGIHEAD_OK)+8))))
 8001ba8:	f897 3219 	ldrb.w	r3, [r7, #537]	@ 0x219
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d01c      	beq.n	8001bea <http_process_handler+0x476>
 8001bb0:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8001bb4:	f240 72be 	movw	r2, #1982	@ 0x7be
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d816      	bhi.n	8001bea <http_process_handler+0x476>
				{
					send_http_response_cgi(s, pHTTP_TX, http_response, (uint16_t)file_len);
 8001bbc:	4b2c      	ldr	r3, [pc, #176]	@ (8001c70 <http_process_handler+0x4fc>)
 8001bbe:	6819      	ldr	r1, [r3, #0]
 8001bc0:	4b27      	ldr	r3, [pc, #156]	@ (8001c60 <http_process_handler+0x4ec>)
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8001bc8:	b29c      	uxth	r4, r3
 8001bca:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8001bce:	f2a3 2319 	subw	r3, r3, #537	@ 0x219
 8001bd2:	7818      	ldrb	r0, [r3, #0]
 8001bd4:	4623      	mov	r3, r4
 8001bd6:	f7ff fd77 	bl	80016c8 <send_http_response_cgi>

					// Reset the H/W for apply to the change configuration information
					if(content_found == HTTP_RESET) HTTPServer_ReStart();
 8001bda:	f897 3219 	ldrb.w	r3, [r7, #537]	@ 0x219
 8001bde:	2b02      	cmp	r3, #2
 8001be0:	d11b      	bne.n	8001c1a <http_process_handler+0x4a6>
 8001be2:	4b24      	ldr	r3, [pc, #144]	@ (8001c74 <http_process_handler+0x500>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4798      	blx	r3
 8001be8:	e017      	b.n	8001c1a <http_process_handler+0x4a6>
				}
				else
				{
					send_http_response_header(s, PTYPE_CGI, 0, STATUS_NOT_FOUND);
 8001bea:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8001bee:	f2a3 2319 	subw	r3, r3, #537	@ 0x219
 8001bf2:	7818      	ldrb	r0, [r3, #0]
 8001bf4:	f44f 73ca 	mov.w	r3, #404	@ 0x194
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	2108      	movs	r1, #8
 8001bfc:	f7ff fb9c 	bl	8001338 <send_http_response_header>
			}
			else	// HTTP POST Method; Content not found
			{
				send_http_response_header(s, 0, 0, STATUS_NOT_FOUND);
			}
			break;
 8001c00:	e020      	b.n	8001c44 <http_process_handler+0x4d0>
				send_http_response_header(s, 0, 0, STATUS_NOT_FOUND);
 8001c02:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8001c06:	f2a3 2319 	subw	r3, r3, #537	@ 0x219
 8001c0a:	7818      	ldrb	r0, [r3, #0]
 8001c0c:	f44f 73ca 	mov.w	r3, #404	@ 0x194
 8001c10:	2200      	movs	r2, #0
 8001c12:	2100      	movs	r1, #0
 8001c14:	f7ff fb90 	bl	8001338 <send_http_response_header>
			break;
 8001c18:	e014      	b.n	8001c44 <http_process_handler+0x4d0>
 8001c1a:	e013      	b.n	8001c44 <http_process_handler+0x4d0>

		default :
			http_status = STATUS_BAD_REQ;
 8001c1c:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8001c20:	f8a7 321a 	strh.w	r3, [r7, #538]	@ 0x21a
			send_http_response_header(s, 0, 0, http_status);
 8001c24:	f8b7 221a 	ldrh.w	r2, [r7, #538]	@ 0x21a
 8001c28:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8001c2c:	f2a3 2319 	subw	r3, r3, #537	@ 0x219
 8001c30:	7818      	ldrb	r0, [r3, #0]
 8001c32:	4613      	mov	r3, r2
 8001c34:	2200      	movs	r2, #0
 8001c36:	2100      	movs	r1, #0
 8001c38:	f7ff fb7e 	bl	8001338 <send_http_response_header>
			break;
 8001c3c:	e002      	b.n	8001c44 <http_process_handler+0x4d0>
	if((get_seqnum = getHTTPSequenceNum(s)) == -1) return; // exception handling; invalid number
 8001c3e:	bf00      	nop
 8001c40:	e000      	b.n	8001c44 <http_process_handler+0x4d0>
			break;
 8001c42:	bf00      	nop
	}
}
 8001c44:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bdb0      	pop	{r4, r5, r7, pc}
 8001c4c:	08007b2c 	.word	0x08007b2c
 8001c50:	080079c4 	.word	0x080079c4
 8001c54:	08007b34 	.word	0x08007b34
 8001c58:	08007b5c 	.word	0x08007b5c
 8001c5c:	08007b84 	.word	0x08007b84
 8001c60:	200000f8 	.word	0x200000f8
 8001c64:	08007b90 	.word	0x08007b90
 8001c68:	08007ba0 	.word	0x08007ba0
 8001c6c:	08007bb4 	.word	0x08007bb4
 8001c70:	20000100 	.word	0x20000100
 8001c74:	20000000 	.word	0x20000000

08001c78 <get_httpServer_timecount>:
{
	httpServer_tick_1s++;
}

uint32_t get_httpServer_timecount(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
	return httpServer_tick_1s;
 8001c7c:	4b03      	ldr	r3, [pc, #12]	@ (8001c8c <get_httpServer_timecount+0x14>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	20000108 	.word	0x20000108

08001c90 <reg_httpServer_webContent>:

void reg_httpServer_webContent(uint8_t * content_name, uint8_t * content)
{
 8001c90:	b590      	push	{r4, r7, lr}
 8001c92:	b085      	sub	sp, #20
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	6039      	str	r1, [r7, #0]
	uint16_t name_len;
	uint32_t content_len;

	if(content_name == NULL || content == NULL)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d04e      	beq.n	8001d3e <reg_httpServer_webContent+0xae>
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d04b      	beq.n	8001d3e <reg_httpServer_webContent+0xae>
	{
		return;
	}
	else if(total_content_cnt >= MAX_CONTENT_CALLBACK)
 8001ca6:	4b29      	ldr	r3, [pc, #164]	@ (8001d4c <reg_httpServer_webContent+0xbc>)
 8001ca8:	881b      	ldrh	r3, [r3, #0]
 8001caa:	2b13      	cmp	r3, #19
 8001cac:	d849      	bhi.n	8001d42 <reg_httpServer_webContent+0xb2>
	{
		return;
	}

	name_len = strlen((char *)content_name);
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f7fe fac0 	bl	8000234 <strlen>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	81fb      	strh	r3, [r7, #14]
	content_len = strlen((char *)content);
 8001cb8:	6838      	ldr	r0, [r7, #0]
 8001cba:	f7fe fabb 	bl	8000234 <strlen>
 8001cbe:	60b8      	str	r0, [r7, #8]

	web_content[total_content_cnt].content_name = malloc(name_len+1);
 8001cc0:	89fb      	ldrh	r3, [r7, #14]
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	4b21      	ldr	r3, [pc, #132]	@ (8001d4c <reg_httpServer_webContent+0xbc>)
 8001cc8:	881b      	ldrh	r3, [r3, #0]
 8001cca:	461c      	mov	r4, r3
 8001ccc:	4610      	mov	r0, r2
 8001cce:	f003 fe71 	bl	80059b4 <malloc>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	4a1e      	ldr	r2, [pc, #120]	@ (8001d50 <reg_httpServer_webContent+0xc0>)
 8001cd8:	4623      	mov	r3, r4
 8001cda:	005b      	lsls	r3, r3, #1
 8001cdc:	4423      	add	r3, r4
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	4413      	add	r3, r2
 8001ce2:	6019      	str	r1, [r3, #0]
	strcpy((char *)web_content[total_content_cnt].content_name, (const char *)content_name);
 8001ce4:	4b19      	ldr	r3, [pc, #100]	@ (8001d4c <reg_httpServer_webContent+0xbc>)
 8001ce6:	881b      	ldrh	r3, [r3, #0]
 8001ce8:	4619      	mov	r1, r3
 8001cea:	4a19      	ldr	r2, [pc, #100]	@ (8001d50 <reg_httpServer_webContent+0xc0>)
 8001cec:	460b      	mov	r3, r1
 8001cee:	005b      	lsls	r3, r3, #1
 8001cf0:	440b      	add	r3, r1
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	4413      	add	r3, r2
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	6879      	ldr	r1, [r7, #4]
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f004 fa59 	bl	80061b2 <strcpy>
	web_content[total_content_cnt].content_len = content_len;
 8001d00:	4b12      	ldr	r3, [pc, #72]	@ (8001d4c <reg_httpServer_webContent+0xbc>)
 8001d02:	881b      	ldrh	r3, [r3, #0]
 8001d04:	4619      	mov	r1, r3
 8001d06:	4a12      	ldr	r2, [pc, #72]	@ (8001d50 <reg_httpServer_webContent+0xc0>)
 8001d08:	460b      	mov	r3, r1
 8001d0a:	005b      	lsls	r3, r3, #1
 8001d0c:	440b      	add	r3, r1
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	4413      	add	r3, r2
 8001d12:	3304      	adds	r3, #4
 8001d14:	68ba      	ldr	r2, [r7, #8]
 8001d16:	601a      	str	r2, [r3, #0]
	web_content[total_content_cnt].content = content;
 8001d18:	4b0c      	ldr	r3, [pc, #48]	@ (8001d4c <reg_httpServer_webContent+0xbc>)
 8001d1a:	881b      	ldrh	r3, [r3, #0]
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	4a0c      	ldr	r2, [pc, #48]	@ (8001d50 <reg_httpServer_webContent+0xc0>)
 8001d20:	460b      	mov	r3, r1
 8001d22:	005b      	lsls	r3, r3, #1
 8001d24:	440b      	add	r3, r1
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	4413      	add	r3, r2
 8001d2a:	3308      	adds	r3, #8
 8001d2c:	683a      	ldr	r2, [r7, #0]
 8001d2e:	601a      	str	r2, [r3, #0]

	total_content_cnt++;
 8001d30:	4b06      	ldr	r3, [pc, #24]	@ (8001d4c <reg_httpServer_webContent+0xbc>)
 8001d32:	881b      	ldrh	r3, [r3, #0]
 8001d34:	3301      	adds	r3, #1
 8001d36:	b29a      	uxth	r2, r3
 8001d38:	4b04      	ldr	r3, [pc, #16]	@ (8001d4c <reg_httpServer_webContent+0xbc>)
 8001d3a:	801a      	strh	r2, [r3, #0]
 8001d3c:	e002      	b.n	8001d44 <reg_httpServer_webContent+0xb4>
		return;
 8001d3e:	bf00      	nop
 8001d40:	e000      	b.n	8001d44 <reg_httpServer_webContent+0xb4>
		return;
 8001d42:	bf00      	nop
}
 8001d44:	3714      	adds	r7, #20
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd90      	pop	{r4, r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	200000fc 	.word	0x200000fc
 8001d50:	200005ac 	.word	0x200005ac

08001d54 <find_userReg_webContent>:

	return ret;
}

uint8_t find_userReg_webContent(uint8_t * content_name, uint16_t * content_num, uint32_t * file_len)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b086      	sub	sp, #24
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	60f8      	str	r0, [r7, #12]
 8001d5c:	60b9      	str	r1, [r7, #8]
 8001d5e:	607a      	str	r2, [r7, #4]
	uint16_t i;
	uint8_t ret = 0; // '0' means 'File Not Found'
 8001d60:	2300      	movs	r3, #0
 8001d62:	757b      	strb	r3, [r7, #21]

	for(i = 0; i < total_content_cnt; i++)
 8001d64:	2300      	movs	r3, #0
 8001d66:	82fb      	strh	r3, [r7, #22]
 8001d68:	e022      	b.n	8001db0 <find_userReg_webContent+0x5c>
	{
		if(!strcmp((char *)content_name, (char *)web_content[i].content_name))
 8001d6a:	8afa      	ldrh	r2, [r7, #22]
 8001d6c:	4915      	ldr	r1, [pc, #84]	@ (8001dc4 <find_userReg_webContent+0x70>)
 8001d6e:	4613      	mov	r3, r2
 8001d70:	005b      	lsls	r3, r3, #1
 8001d72:	4413      	add	r3, r2
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	440b      	add	r3, r1
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	68f8      	ldr	r0, [r7, #12]
 8001d7e:	f7fe fa4f 	bl	8000220 <strcmp>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d110      	bne.n	8001daa <find_userReg_webContent+0x56>
		{
			*file_len = web_content[i].content_len;
 8001d88:	8afa      	ldrh	r2, [r7, #22]
 8001d8a:	490e      	ldr	r1, [pc, #56]	@ (8001dc4 <find_userReg_webContent+0x70>)
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	005b      	lsls	r3, r3, #1
 8001d90:	4413      	add	r3, r2
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	440b      	add	r3, r1
 8001d96:	3304      	adds	r3, #4
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	601a      	str	r2, [r3, #0]
			*content_num = i;
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	8afa      	ldrh	r2, [r7, #22]
 8001da2:	801a      	strh	r2, [r3, #0]
			ret = 1; // If the requested content found, ret set to '1' (Found)
 8001da4:	2301      	movs	r3, #1
 8001da6:	757b      	strb	r3, [r7, #21]
			break;
 8001da8:	e007      	b.n	8001dba <find_userReg_webContent+0x66>
	for(i = 0; i < total_content_cnt; i++)
 8001daa:	8afb      	ldrh	r3, [r7, #22]
 8001dac:	3301      	adds	r3, #1
 8001dae:	82fb      	strh	r3, [r7, #22]
 8001db0:	4b05      	ldr	r3, [pc, #20]	@ (8001dc8 <find_userReg_webContent+0x74>)
 8001db2:	881b      	ldrh	r3, [r3, #0]
 8001db4:	8afa      	ldrh	r2, [r7, #22]
 8001db6:	429a      	cmp	r2, r3
 8001db8:	d3d7      	bcc.n	8001d6a <find_userReg_webContent+0x16>
		}
	}
	return ret;
 8001dba:	7d7b      	ldrb	r3, [r7, #21]
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3718      	adds	r7, #24
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	200005ac 	.word	0x200005ac
 8001dc8:	200000fc 	.word	0x200000fc

08001dcc <read_userReg_webContent>:


uint16_t read_userReg_webContent(uint16_t content_num, uint8_t * buf, uint32_t offset, uint16_t size)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b086      	sub	sp, #24
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	60b9      	str	r1, [r7, #8]
 8001dd4:	607a      	str	r2, [r7, #4]
 8001dd6:	461a      	mov	r2, r3
 8001dd8:	4603      	mov	r3, r0
 8001dda:	81fb      	strh	r3, [r7, #14]
 8001ddc:	4613      	mov	r3, r2
 8001dde:	81bb      	strh	r3, [r7, #12]
	uint16_t ret = 0;
 8001de0:	2300      	movs	r3, #0
 8001de2:	827b      	strh	r3, [r7, #18]
	uint8_t * ptr;

	if(content_num > total_content_cnt) return 0;
 8001de4:	4b16      	ldr	r3, [pc, #88]	@ (8001e40 <read_userReg_webContent+0x74>)
 8001de6:	881b      	ldrh	r3, [r3, #0]
 8001de8:	89fa      	ldrh	r2, [r7, #14]
 8001dea:	429a      	cmp	r2, r3
 8001dec:	d901      	bls.n	8001df2 <read_userReg_webContent+0x26>
 8001dee:	2300      	movs	r3, #0
 8001df0:	e021      	b.n	8001e36 <read_userReg_webContent+0x6a>

	ptr = web_content[content_num].content;
 8001df2:	89fa      	ldrh	r2, [r7, #14]
 8001df4:	4913      	ldr	r1, [pc, #76]	@ (8001e44 <read_userReg_webContent+0x78>)
 8001df6:	4613      	mov	r3, r2
 8001df8:	005b      	lsls	r3, r3, #1
 8001dfa:	4413      	add	r3, r2
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	440b      	add	r3, r1
 8001e00:	3308      	adds	r3, #8
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	617b      	str	r3, [r7, #20]
	if(offset) ptr += offset;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d003      	beq.n	8001e14 <read_userReg_webContent+0x48>
 8001e0c:	697a      	ldr	r2, [r7, #20]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4413      	add	r3, r2
 8001e12:	617b      	str	r3, [r7, #20]

	strncpy((char *)buf, (char *)ptr, size);
 8001e14:	89bb      	ldrh	r3, [r7, #12]
 8001e16:	461a      	mov	r2, r3
 8001e18:	6979      	ldr	r1, [r7, #20]
 8001e1a:	68b8      	ldr	r0, [r7, #8]
 8001e1c:	f004 f8c1 	bl	8005fa2 <strncpy>
	*(buf+size) = 0; // Insert '/0' for indicates the 'End of String' (null terminated)
 8001e20:	89bb      	ldrh	r3, [r7, #12]
 8001e22:	68ba      	ldr	r2, [r7, #8]
 8001e24:	4413      	add	r3, r2
 8001e26:	2200      	movs	r2, #0
 8001e28:	701a      	strb	r2, [r3, #0]

	ret = strlen((void *)buf);
 8001e2a:	68b8      	ldr	r0, [r7, #8]
 8001e2c:	f7fe fa02 	bl	8000234 <strlen>
 8001e30:	4603      	mov	r3, r0
 8001e32:	827b      	strh	r3, [r7, #18]
	return ret;
 8001e34:	8a7b      	ldrh	r3, [r7, #18]
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3718      	adds	r7, #24
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	200000fc 	.word	0x200000fc
 8001e44:	200005ac 	.word	0x200005ac

08001e48 <http_get_cgi_handler>:
#include <string.h>
#include <stdlib.h>
#include "httpUtil.h"

uint8_t http_get_cgi_handler(uint8_t * uri_name, uint8_t * buf, uint32_t * file_len)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b086      	sub	sp, #24
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	60f8      	str	r0, [r7, #12]
 8001e50:	60b9      	str	r1, [r7, #8]
 8001e52:	607a      	str	r2, [r7, #4]
	uint8_t ret = HTTP_OK;
 8001e54:	2301      	movs	r3, #1
 8001e56:	75fb      	strb	r3, [r7, #23]
	uint16_t len = 0;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	82bb      	strh	r3, [r7, #20]

	if(predefined_get_cgi_processor(uri_name, buf, &len))
 8001e5c:	f107 0314 	add.w	r3, r7, #20
 8001e60:	461a      	mov	r2, r3
 8001e62:	68b9      	ldr	r1, [r7, #8]
 8001e64:	68f8      	ldr	r0, [r7, #12]
 8001e66:	f000 f859 	bl	8001f1c <predefined_get_cgi_processor>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d108      	bne.n	8001e82 <http_get_cgi_handler+0x3a>
	{
		;
	}
	else if(strcmp((const char *)uri_name, "example.cgi") == 0)
 8001e70:	490a      	ldr	r1, [pc, #40]	@ (8001e9c <http_get_cgi_handler+0x54>)
 8001e72:	68f8      	ldr	r0, [r7, #12]
 8001e74:	f7fe f9d4 	bl	8000220 <strcmp>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d001      	beq.n	8001e82 <http_get_cgi_handler+0x3a>
		;
	}
	else
	{
		// CGI file not found
		ret = HTTP_FAILED;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	75fb      	strb	r3, [r7, #23]
	}

	if(ret)	*file_len = len;
 8001e82:	7dfb      	ldrb	r3, [r7, #23]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d003      	beq.n	8001e90 <http_get_cgi_handler+0x48>
 8001e88:	8abb      	ldrh	r3, [r7, #20]
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	601a      	str	r2, [r3, #0]
	return ret;
 8001e90:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3718      	adds	r7, #24
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	08007ca0 	.word	0x08007ca0

08001ea0 <http_post_cgi_handler>:

uint8_t http_post_cgi_handler(uint8_t * uri_name, st_http_request * p_http_request, uint8_t * buf, uint32_t * file_len)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b086      	sub	sp, #24
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	60f8      	str	r0, [r7, #12]
 8001ea8:	60b9      	str	r1, [r7, #8]
 8001eaa:	607a      	str	r2, [r7, #4]
 8001eac:	603b      	str	r3, [r7, #0]
	uint8_t ret = HTTP_OK;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	75fb      	strb	r3, [r7, #23]
	uint16_t len = 0;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	82bb      	strh	r3, [r7, #20]
	uint8_t val = 0;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	75bb      	strb	r3, [r7, #22]

	if(predefined_set_cgi_processor(uri_name, p_http_request->URI, buf, &len))
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	1c99      	adds	r1, r3, #2
 8001ebe:	f107 0314 	add.w	r3, r7, #20
 8001ec2:	687a      	ldr	r2, [r7, #4]
 8001ec4:	68f8      	ldr	r0, [r7, #12]
 8001ec6:	f000 f836 	bl	8001f36 <predefined_set_cgi_processor>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d114      	bne.n	8001efa <http_post_cgi_handler+0x5a>
	{
		;
	}
	else if(strcmp((const char *)uri_name, "example.cgi") == 0)
 8001ed0:	4910      	ldr	r1, [pc, #64]	@ (8001f14 <http_post_cgi_handler+0x74>)
 8001ed2:	68f8      	ldr	r0, [r7, #12]
 8001ed4:	f7fe f9a4 	bl	8000220 <strcmp>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d10b      	bne.n	8001ef6 <http_post_cgi_handler+0x56>
	{
		// To do
		val = 1;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	75bb      	strb	r3, [r7, #22]
		len = sprintf((char *)buf, "%d", val);
 8001ee2:	7dbb      	ldrb	r3, [r7, #22]
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	490c      	ldr	r1, [pc, #48]	@ (8001f18 <http_post_cgi_handler+0x78>)
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f003 ff4b 	bl	8005d84 <siprintf>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	b29b      	uxth	r3, r3
 8001ef2:	82bb      	strh	r3, [r7, #20]
 8001ef4:	e001      	b.n	8001efa <http_post_cgi_handler+0x5a>
	}
	else
	{
		// CGI file not found
		ret = HTTP_FAILED;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	75fb      	strb	r3, [r7, #23]
	}

	if(ret)	*file_len = len;
 8001efa:	7dfb      	ldrb	r3, [r7, #23]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d003      	beq.n	8001f08 <http_post_cgi_handler+0x68>
 8001f00:	8abb      	ldrh	r3, [r7, #20]
 8001f02:	461a      	mov	r2, r3
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	601a      	str	r2, [r3, #0]
	return ret;
 8001f08:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3718      	adds	r7, #24
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	08007ca0 	.word	0x08007ca0
 8001f18:	08007cac 	.word	0x08007cac

08001f1c <predefined_get_cgi_processor>:

uint8_t predefined_get_cgi_processor(uint8_t * uri_name, uint8_t * buf, uint16_t * len)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b085      	sub	sp, #20
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	60f8      	str	r0, [r7, #12]
 8001f24:	60b9      	str	r1, [r7, #8]
 8001f26:	607a      	str	r2, [r7, #4]
	;
}
 8001f28:	bf00      	nop
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3714      	adds	r7, #20
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr

08001f36 <predefined_set_cgi_processor>:

uint8_t predefined_set_cgi_processor(uint8_t * uri_name, uint8_t * uri, uint8_t * buf, uint16_t * en)
{
 8001f36:	b480      	push	{r7}
 8001f38:	b085      	sub	sp, #20
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	60f8      	str	r0, [r7, #12]
 8001f3e:	60b9      	str	r1, [r7, #8]
 8001f40:	607a      	str	r2, [r7, #4]
 8001f42:	603b      	str	r3, [r7, #0]
	;
}
 8001f44:	bf00      	nop
 8001f46:	4618      	mov	r0, r3
 8001f48:	3714      	adds	r7, #20
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr
	...

08001f54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f5a:	f001 fd3a 	bl	80039d2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f5e:	f000 f871 	bl	8002044 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f62:	f000 f8ed 	bl	8002140 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001f66:	f000 f8ad 	bl	80020c4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  reg_wizchip_cs_cbfunc(cs_select, cs_deselect);
 8001f6a:	4926      	ldr	r1, [pc, #152]	@ (8002004 <main+0xb0>)
 8001f6c:	4826      	ldr	r0, [pc, #152]	@ (8002008 <main+0xb4>)
 8001f6e:	f000 ff97 	bl	8002ea0 <reg_wizchip_cs_cbfunc>
  reg_wizchip_spi_cbfunc(spi_readbyte, spi_writebyte);
 8001f72:	4926      	ldr	r1, [pc, #152]	@ (800200c <main+0xb8>)
 8001f74:	4826      	ldr	r0, [pc, #152]	@ (8002010 <main+0xbc>)
 8001f76:	f000 ffb9 	bl	8002eec <reg_wizchip_spi_cbfunc>
  reg_wizchip_cris_cbfunc(cris_enter, cris_exit);
 8001f7a:	4926      	ldr	r1, [pc, #152]	@ (8002014 <main+0xc0>)
 8001f7c:	4826      	ldr	r0, [pc, #152]	@ (8002018 <main+0xc4>)
 8001f7e:	f000 ff69 	bl	8002e54 <reg_wizchip_cris_cbfunc>
  reg_wizchip_spiburst_cbfunc(spi_readburst, spi_writeburst);
 8001f82:	4926      	ldr	r1, [pc, #152]	@ (800201c <main+0xc8>)
 8001f84:	4826      	ldr	r0, [pc, #152]	@ (8002020 <main+0xcc>)
 8001f86:	f000 ffdd 	bl	8002f44 <reg_wizchip_spiburst_cbfunc>

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	2180      	movs	r1, #128	@ 0x80
 8001f8e:	4825      	ldr	r0, [pc, #148]	@ (8002024 <main+0xd0>)
 8001f90:	f002 f818 	bl	8003fc4 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8001f94:	2001      	movs	r0, #1
 8001f96:	f001 fd8d 	bl	8003ab4 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	2180      	movs	r1, #128	@ 0x80
 8001f9e:	4821      	ldr	r0, [pc, #132]	@ (8002024 <main+0xd0>)
 8001fa0:	f002 f810 	bl	8003fc4 <HAL_GPIO_WritePin>
  HAL_Delay(1600);
 8001fa4:	f44f 60c8 	mov.w	r0, #1600	@ 0x640
 8001fa8:	f001 fd84 	bl	8003ab4 <HAL_Delay>

  ctlnetwork(CN_SET_NETINFO, (void*)&gSetNetInfo);
 8001fac:	491e      	ldr	r1, [pc, #120]	@ (8002028 <main+0xd4>)
 8001fae:	2000      	movs	r0, #0
 8001fb0:	f001 f8e4 	bl	800317c <ctlnetwork>
  ctlwizchip(CW_INIT_WIZCHIP,(void*)buffer_size_tx_rx);
 8001fb4:	491d      	ldr	r1, [pc, #116]	@ (800202c <main+0xd8>)
 8001fb6:	2004      	movs	r0, #4
 8001fb8:	f000 fff0 	bl	8002f9c <ctlwizchip>

  socket(0,Sn_MR_TCP,5555,SF_TCP_NODELAY | SF_IO_NONBLOCK);
 8001fbc:	2321      	movs	r3, #33	@ 0x21
 8001fbe:	f241 52b3 	movw	r2, #5555	@ 0x15b3
 8001fc2:	2101      	movs	r1, #1
 8001fc4:	2000      	movs	r0, #0
 8001fc6:	f000 f9a1 	bl	800230c <socket>

  httpServer_init(http_tx_buff,http_rx_buff,5,socknumlist);
 8001fca:	4b19      	ldr	r3, [pc, #100]	@ (8002030 <main+0xdc>)
 8001fcc:	2205      	movs	r2, #5
 8001fce:	4919      	ldr	r1, [pc, #100]	@ (8002034 <main+0xe0>)
 8001fd0:	4819      	ldr	r0, [pc, #100]	@ (8002038 <main+0xe4>)
 8001fd2:	f7fe ff99 	bl	8000f08 <httpServer_init>
  reg_httpServer_cbfunc(NULL, NULL);
 8001fd6:	2100      	movs	r1, #0
 8001fd8:	2000      	movs	r0, #0
 8001fda:	f7fe ffb1 	bl	8000f40 <reg_httpServer_cbfunc>
  reg_httpServer_webContent((uint8_t*)"index.html", (uint8_t*)webpage);
 8001fde:	4917      	ldr	r1, [pc, #92]	@ (800203c <main+0xe8>)
 8001fe0:	4817      	ldr	r0, [pc, #92]	@ (8002040 <main+0xec>)
 8001fe2:	f7ff fe55 	bl	8001c90 <reg_httpServer_webContent>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  for(uint16_t i = 0; i < sizeof(socknumlist); i++)
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	80fb      	strh	r3, [r7, #6]
 8001fea:	e007      	b.n	8001ffc <main+0xa8>
	  {
	  	httpServer_run(i);
 8001fec:	88fb      	ldrh	r3, [r7, #6]
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f7fe ffc1 	bl	8000f78 <httpServer_run>
	  for(uint16_t i = 0; i < sizeof(socknumlist); i++)
 8001ff6:	88fb      	ldrh	r3, [r7, #6]
 8001ff8:	3301      	adds	r3, #1
 8001ffa:	80fb      	strh	r3, [r7, #6]
 8001ffc:	88fb      	ldrh	r3, [r7, #6]
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	d9f4      	bls.n	8001fec <main+0x98>
 8002002:	e7f0      	b.n	8001fe6 <main+0x92>
 8002004:	08002219 	.word	0x08002219
 8002008:	08002201 	.word	0x08002201
 800200c:	0800228d 	.word	0x0800228d
 8002010:	0800226d 	.word	0x0800226d
 8002014:	0800224f 	.word	0x0800224f
 8002018:	08002231 	.word	0x08002231
 800201c:	080022d9 	.word	0x080022d9
 8002020:	080022b1 	.word	0x080022b1
 8002024:	48000800 	.word	0x48000800
 8002028:	20000008 	.word	0x20000008
 800202c:	20000020 	.word	0x20000020
 8002030:	20000030 	.word	0x20000030
 8002034:	20000700 	.word	0x20000700
 8002038:	20000f00 	.word	0x20000f00
 800203c:	08007dd0 	.word	0x08007dd0
 8002040:	08007cb0 	.word	0x08007cb0

08002044 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b094      	sub	sp, #80	@ 0x50
 8002048:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800204a:	f107 0318 	add.w	r3, r7, #24
 800204e:	2238      	movs	r2, #56	@ 0x38
 8002050:	2100      	movs	r1, #0
 8002052:	4618      	mov	r0, r3
 8002054:	f003 ff8e 	bl	8005f74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002058:	1d3b      	adds	r3, r7, #4
 800205a:	2200      	movs	r2, #0
 800205c:	601a      	str	r2, [r3, #0]
 800205e:	605a      	str	r2, [r3, #4]
 8002060:	609a      	str	r2, [r3, #8]
 8002062:	60da      	str	r2, [r3, #12]
 8002064:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002066:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800206a:	f001 ffc3 	bl	8003ff4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800206e:	2302      	movs	r3, #2
 8002070:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002072:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002076:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002078:	2340      	movs	r3, #64	@ 0x40
 800207a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800207c:	2300      	movs	r3, #0
 800207e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002080:	f107 0318 	add.w	r3, r7, #24
 8002084:	4618      	mov	r0, r3
 8002086:	f002 f869 	bl	800415c <HAL_RCC_OscConfig>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d001      	beq.n	8002094 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8002090:	f000 f936 	bl	8002300 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002094:	230f      	movs	r3, #15
 8002096:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002098:	2301      	movs	r3, #1
 800209a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800209c:	2300      	movs	r3, #0
 800209e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80020a0:	2300      	movs	r3, #0
 80020a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80020a4:	2300      	movs	r3, #0
 80020a6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80020a8:	1d3b      	adds	r3, r7, #4
 80020aa:	2100      	movs	r1, #0
 80020ac:	4618      	mov	r0, r3
 80020ae:	f002 fb67 	bl	8004780 <HAL_RCC_ClockConfig>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d001      	beq.n	80020bc <SystemClock_Config+0x78>
  {
    Error_Handler();
 80020b8:	f000 f922 	bl	8002300 <Error_Handler>
  }
}
 80020bc:	bf00      	nop
 80020be:	3750      	adds	r7, #80	@ 0x50
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}

080020c4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80020c8:	4b1b      	ldr	r3, [pc, #108]	@ (8002138 <MX_SPI1_Init+0x74>)
 80020ca:	4a1c      	ldr	r2, [pc, #112]	@ (800213c <MX_SPI1_Init+0x78>)
 80020cc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80020ce:	4b1a      	ldr	r3, [pc, #104]	@ (8002138 <MX_SPI1_Init+0x74>)
 80020d0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80020d4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80020d6:	4b18      	ldr	r3, [pc, #96]	@ (8002138 <MX_SPI1_Init+0x74>)
 80020d8:	2200      	movs	r2, #0
 80020da:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80020dc:	4b16      	ldr	r3, [pc, #88]	@ (8002138 <MX_SPI1_Init+0x74>)
 80020de:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80020e2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80020e4:	4b14      	ldr	r3, [pc, #80]	@ (8002138 <MX_SPI1_Init+0x74>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80020ea:	4b13      	ldr	r3, [pc, #76]	@ (8002138 <MX_SPI1_Init+0x74>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80020f0:	4b11      	ldr	r3, [pc, #68]	@ (8002138 <MX_SPI1_Init+0x74>)
 80020f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80020f6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80020f8:	4b0f      	ldr	r3, [pc, #60]	@ (8002138 <MX_SPI1_Init+0x74>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80020fe:	4b0e      	ldr	r3, [pc, #56]	@ (8002138 <MX_SPI1_Init+0x74>)
 8002100:	2200      	movs	r2, #0
 8002102:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002104:	4b0c      	ldr	r3, [pc, #48]	@ (8002138 <MX_SPI1_Init+0x74>)
 8002106:	2200      	movs	r2, #0
 8002108:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800210a:	4b0b      	ldr	r3, [pc, #44]	@ (8002138 <MX_SPI1_Init+0x74>)
 800210c:	2200      	movs	r2, #0
 800210e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002110:	4b09      	ldr	r3, [pc, #36]	@ (8002138 <MX_SPI1_Init+0x74>)
 8002112:	2207      	movs	r2, #7
 8002114:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002116:	4b08      	ldr	r3, [pc, #32]	@ (8002138 <MX_SPI1_Init+0x74>)
 8002118:	2200      	movs	r2, #0
 800211a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800211c:	4b06      	ldr	r3, [pc, #24]	@ (8002138 <MX_SPI1_Init+0x74>)
 800211e:	2208      	movs	r2, #8
 8002120:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002122:	4805      	ldr	r0, [pc, #20]	@ (8002138 <MX_SPI1_Init+0x74>)
 8002124:	f002 fd10 	bl	8004b48 <HAL_SPI_Init>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d001      	beq.n	8002132 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800212e:	f000 f8e7 	bl	8002300 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002132:	bf00      	nop
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	2000069c 	.word	0x2000069c
 800213c:	40013000 	.word	0x40013000

08002140 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b088      	sub	sp, #32
 8002144:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002146:	f107 030c 	add.w	r3, r7, #12
 800214a:	2200      	movs	r2, #0
 800214c:	601a      	str	r2, [r3, #0]
 800214e:	605a      	str	r2, [r3, #4]
 8002150:	609a      	str	r2, [r3, #8]
 8002152:	60da      	str	r2, [r3, #12]
 8002154:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002156:	4b27      	ldr	r3, [pc, #156]	@ (80021f4 <MX_GPIO_Init+0xb4>)
 8002158:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800215a:	4a26      	ldr	r2, [pc, #152]	@ (80021f4 <MX_GPIO_Init+0xb4>)
 800215c:	f043 0301 	orr.w	r3, r3, #1
 8002160:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002162:	4b24      	ldr	r3, [pc, #144]	@ (80021f4 <MX_GPIO_Init+0xb4>)
 8002164:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002166:	f003 0301 	and.w	r3, r3, #1
 800216a:	60bb      	str	r3, [r7, #8]
 800216c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800216e:	4b21      	ldr	r3, [pc, #132]	@ (80021f4 <MX_GPIO_Init+0xb4>)
 8002170:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002172:	4a20      	ldr	r2, [pc, #128]	@ (80021f4 <MX_GPIO_Init+0xb4>)
 8002174:	f043 0304 	orr.w	r3, r3, #4
 8002178:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800217a:	4b1e      	ldr	r3, [pc, #120]	@ (80021f4 <MX_GPIO_Init+0xb4>)
 800217c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800217e:	f003 0304 	and.w	r3, r3, #4
 8002182:	607b      	str	r3, [r7, #4]
 8002184:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002186:	4b1b      	ldr	r3, [pc, #108]	@ (80021f4 <MX_GPIO_Init+0xb4>)
 8002188:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800218a:	4a1a      	ldr	r2, [pc, #104]	@ (80021f4 <MX_GPIO_Init+0xb4>)
 800218c:	f043 0302 	orr.w	r3, r3, #2
 8002190:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002192:	4b18      	ldr	r3, [pc, #96]	@ (80021f4 <MX_GPIO_Init+0xb4>)
 8002194:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002196:	f003 0302 	and.w	r3, r3, #2
 800219a:	603b      	str	r3, [r7, #0]
 800219c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(W5500_RST_GPIO_Port, W5500_RST_Pin, GPIO_PIN_RESET);
 800219e:	2200      	movs	r2, #0
 80021a0:	2180      	movs	r1, #128	@ 0x80
 80021a2:	4815      	ldr	r0, [pc, #84]	@ (80021f8 <MX_GPIO_Init+0xb8>)
 80021a4:	f001 ff0e 	bl	8003fc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80021a8:	2200      	movs	r2, #0
 80021aa:	2140      	movs	r1, #64	@ 0x40
 80021ac:	4813      	ldr	r0, [pc, #76]	@ (80021fc <MX_GPIO_Init+0xbc>)
 80021ae:	f001 ff09 	bl	8003fc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : W5500_RST_Pin */
  GPIO_InitStruct.Pin = W5500_RST_Pin;
 80021b2:	2380      	movs	r3, #128	@ 0x80
 80021b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021b6:	2301      	movs	r3, #1
 80021b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ba:	2300      	movs	r3, #0
 80021bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021be:	2300      	movs	r3, #0
 80021c0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(W5500_RST_GPIO_Port, &GPIO_InitStruct);
 80021c2:	f107 030c 	add.w	r3, r7, #12
 80021c6:	4619      	mov	r1, r3
 80021c8:	480b      	ldr	r0, [pc, #44]	@ (80021f8 <MX_GPIO_Init+0xb8>)
 80021ca:	f001 fd79 	bl	8003cc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 80021ce:	2340      	movs	r3, #64	@ 0x40
 80021d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021d2:	2301      	movs	r3, #1
 80021d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d6:	2300      	movs	r3, #0
 80021d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021da:	2300      	movs	r3, #0
 80021dc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80021de:	f107 030c 	add.w	r3, r7, #12
 80021e2:	4619      	mov	r1, r3
 80021e4:	4805      	ldr	r0, [pc, #20]	@ (80021fc <MX_GPIO_Init+0xbc>)
 80021e6:	f001 fd6b 	bl	8003cc0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80021ea:	bf00      	nop
 80021ec:	3720      	adds	r7, #32
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	40021000 	.word	0x40021000
 80021f8:	48000800 	.word	0x48000800
 80021fc:	48000400 	.word	0x48000400

08002200 <cs_select>:

/* USER CODE BEGIN 4 */
void 	cs_select(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, RESET);
 8002204:	2200      	movs	r2, #0
 8002206:	2140      	movs	r1, #64	@ 0x40
 8002208:	4802      	ldr	r0, [pc, #8]	@ (8002214 <cs_select+0x14>)
 800220a:	f001 fedb 	bl	8003fc4 <HAL_GPIO_WritePin>
}
 800220e:	bf00      	nop
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	48000400 	.word	0x48000400

08002218 <cs_deselect>:

void 	cs_deselect(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, SET);
 800221c:	2201      	movs	r2, #1
 800221e:	2140      	movs	r1, #64	@ 0x40
 8002220:	4802      	ldr	r0, [pc, #8]	@ (800222c <cs_deselect+0x14>)
 8002222:	f001 fecf 	bl	8003fc4 <HAL_GPIO_WritePin>
}
 8002226:	bf00      	nop
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	48000400 	.word	0x48000400

08002230 <cris_enter>:

void 	cris_enter(void)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	2301      	movs	r3, #1
 8002238:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	f383 8810 	msr	PRIMASK, r3
}
 8002240:	bf00      	nop
	__set_PRIMASK(1);
}
 8002242:	bf00      	nop
 8002244:	370c      	adds	r7, #12
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr

0800224e <cris_exit>:

void 	cris_exit(void)
{
 800224e:	b480      	push	{r7}
 8002250:	b083      	sub	sp, #12
 8002252:	af00      	add	r7, sp, #0
 8002254:	2300      	movs	r3, #0
 8002256:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	f383 8810 	msr	PRIMASK, r3
}
 800225e:	bf00      	nop
	__set_PRIMASK(0);
}
 8002260:	bf00      	nop
 8002262:	370c      	adds	r7, #12
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr

0800226c <spi_readbyte>:

uint8_t spi_readbyte(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
	uint8_t data;
	HAL_SPI_Receive(&hspi1,&data,1,100);
 8002272:	1df9      	adds	r1, r7, #7
 8002274:	2364      	movs	r3, #100	@ 0x64
 8002276:	2201      	movs	r2, #1
 8002278:	4803      	ldr	r0, [pc, #12]	@ (8002288 <spi_readbyte+0x1c>)
 800227a:	f002 fe85 	bl	8004f88 <HAL_SPI_Receive>
	return data;
 800227e:	79fb      	ldrb	r3, [r7, #7]
}
 8002280:	4618      	mov	r0, r3
 8002282:	3708      	adds	r7, #8
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	2000069c 	.word	0x2000069c

0800228c <spi_writebyte>:

void 	spi_writebyte(uint8_t wb)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
 8002292:	4603      	mov	r3, r0
 8002294:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi1,&wb,1,100);
 8002296:	1df9      	adds	r1, r7, #7
 8002298:	2364      	movs	r3, #100	@ 0x64
 800229a:	2201      	movs	r2, #1
 800229c:	4803      	ldr	r0, [pc, #12]	@ (80022ac <spi_writebyte+0x20>)
 800229e:	f002 fcfe 	bl	8004c9e <HAL_SPI_Transmit>
}
 80022a2:	bf00      	nop
 80022a4:	3708      	adds	r7, #8
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	2000069c 	.word	0x2000069c

080022b0 <spi_readburst>:

void 	spi_readburst(uint8_t* pBuf, uint16_t len)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	460b      	mov	r3, r1
 80022ba:	807b      	strh	r3, [r7, #2]
	HAL_SPI_Receive(&hspi1, pBuf, len, HAL_MAX_DELAY);
 80022bc:	887a      	ldrh	r2, [r7, #2]
 80022be:	f04f 33ff 	mov.w	r3, #4294967295
 80022c2:	6879      	ldr	r1, [r7, #4]
 80022c4:	4803      	ldr	r0, [pc, #12]	@ (80022d4 <spi_readburst+0x24>)
 80022c6:	f002 fe5f 	bl	8004f88 <HAL_SPI_Receive>
}
 80022ca:	bf00      	nop
 80022cc:	3708      	adds	r7, #8
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	2000069c 	.word	0x2000069c

080022d8 <spi_writeburst>:

void 	spi_writeburst(uint8_t* pBuf, uint16_t len)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	460b      	mov	r3, r1
 80022e2:	807b      	strh	r3, [r7, #2]
	HAL_SPI_Transmit(&hspi1, pBuf, len, HAL_MAX_DELAY);
 80022e4:	887a      	ldrh	r2, [r7, #2]
 80022e6:	f04f 33ff 	mov.w	r3, #4294967295
 80022ea:	6879      	ldr	r1, [r7, #4]
 80022ec:	4803      	ldr	r0, [pc, #12]	@ (80022fc <spi_writeburst+0x24>)
 80022ee:	f002 fcd6 	bl	8004c9e <HAL_SPI_Transmit>
}
 80022f2:	bf00      	nop
 80022f4:	3708      	adds	r7, #8
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	2000069c 	.word	0x2000069c

08002300 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002304:	b672      	cpsid	i
}
 8002306:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002308:	bf00      	nop
 800230a:	e7fd      	b.n	8002308 <Error_Handler+0x8>

0800230c <socket>:




int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{ 
 800230c:	b590      	push	{r4, r7, lr}
 800230e:	b089      	sub	sp, #36	@ 0x24
 8002310:	af00      	add	r7, sp, #0
 8002312:	4604      	mov	r4, r0
 8002314:	4608      	mov	r0, r1
 8002316:	4611      	mov	r1, r2
 8002318:	461a      	mov	r2, r3
 800231a:	4623      	mov	r3, r4
 800231c:	71fb      	strb	r3, [r7, #7]
 800231e:	4603      	mov	r3, r0
 8002320:	71bb      	strb	r3, [r7, #6]
 8002322:	460b      	mov	r3, r1
 8002324:	80bb      	strh	r3, [r7, #4]
 8002326:	4613      	mov	r3, r2
 8002328:	70fb      	strb	r3, [r7, #3]

   uint8_t taddr[16];
   uint16_t local_port=0;
 800232a:	2300      	movs	r3, #0
 800232c:	83fb      	strh	r3, [r7, #30]
   CHECK_SOCKNUM(); 
 800232e:	79fb      	ldrb	r3, [r7, #7]
 8002330:	2b08      	cmp	r3, #8
 8002332:	d902      	bls.n	800233a <socket+0x2e>
 8002334:	f04f 33ff 	mov.w	r3, #4294967295
 8002338:	e103      	b.n	8002542 <socket+0x236>
   switch (protocol & 0x0F)
 800233a:	79bb      	ldrb	r3, [r7, #6]
 800233c:	f003 030f 	and.w	r3, r3, #15
 8002340:	3b01      	subs	r3, #1
 8002342:	2b0d      	cmp	r3, #13
 8002344:	d82c      	bhi.n	80023a0 <socket+0x94>
 8002346:	a201      	add	r2, pc, #4	@ (adr r2, 800234c <socket+0x40>)
 8002348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800234c:	08002385 	.word	0x08002385
 8002350:	080023a7 	.word	0x080023a7
 8002354:	080023a7 	.word	0x080023a7
 8002358:	080023a7 	.word	0x080023a7
 800235c:	080023a1 	.word	0x080023a1
 8002360:	080023a1 	.word	0x080023a1
 8002364:	080023a1 	.word	0x080023a1
 8002368:	080023a1 	.word	0x080023a1
 800236c:	080023a1 	.word	0x080023a1
 8002370:	080023a7 	.word	0x080023a7
 8002374:	080023a7 	.word	0x080023a7
 8002378:	080023a1 	.word	0x080023a1
 800237c:	080023a1 	.word	0x080023a1
 8002380:	080023a7 	.word	0x080023a7
         break;
#else  
         case Sn_MR_TCP :
         {
            uint8_t taddr;
            getSIPR((uint8_t*)&taddr);
 8002384:	f107 030b 	add.w	r3, r7, #11
 8002388:	2204      	movs	r2, #4
 800238a:	4619      	mov	r1, r3
 800238c:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8002390:	f7fe f848 	bl	8000424 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8002394:	7afb      	ldrb	r3, [r7, #11]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d107      	bne.n	80023aa <socket+0x9e>
 800239a:	f06f 0302 	mvn.w	r3, #2
 800239e:	e0d0      	b.n	8002542 <socket+0x236>
      case Sn_MR_MACRAW :
      case Sn_MR_IPRAW4 :
      case Sn_MR_IPRAW6 :
         break; 
      default :
        return SOCKERR_SOCKMODE;
 80023a0:	f06f 0304 	mvn.w	r3, #4
 80023a4:	e0cd      	b.n	8002542 <socket+0x236>
         break; 
 80023a6:	bf00      	nop
 80023a8:	e000      	b.n	80023ac <socket+0xa0>
            break;
 80023aa:	bf00      	nop
   } 

   if((flag & 0x04)) return SOCKERR_SOCKFLAG;
 80023ac:	78fb      	ldrb	r3, [r7, #3]
 80023ae:	f003 0304 	and.w	r3, r3, #4
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d002      	beq.n	80023bc <socket+0xb0>
 80023b6:	f06f 0305 	mvn.w	r3, #5
 80023ba:	e0c2      	b.n	8002542 <socket+0x236>
   if(flag != 0)
 80023bc:	78fb      	ldrb	r3, [r7, #3]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d028      	beq.n	8002414 <socket+0x108>
   {
      switch(protocol)
 80023c2:	79bb      	ldrb	r3, [r7, #6]
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d002      	beq.n	80023ce <socket+0xc2>
 80023c8:	2b02      	cmp	r3, #2
 80023ca:	d008      	beq.n	80023de <socket+0xd2>
         break;

#endif 

         default:
            break;
 80023cc:	e022      	b.n	8002414 <socket+0x108>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 80023ce:	78fb      	ldrb	r3, [r7, #3]
 80023d0:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d11a      	bne.n	800240e <socket+0x102>
 80023d8:	f06f 0305 	mvn.w	r3, #5
 80023dc:	e0b1      	b.n	8002542 <socket+0x236>
   	      if(flag & SF_IGMP_VER2)
 80023de:	78fb      	ldrb	r3, [r7, #3]
 80023e0:	f003 0320 	and.w	r3, r3, #32
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d006      	beq.n	80023f6 <socket+0xea>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 80023e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	db02      	blt.n	80023f6 <socket+0xea>
 80023f0:	f06f 0305 	mvn.w	r3, #5
 80023f4:	e0a5      	b.n	8002542 <socket+0x236>
      	      if(flag & SF_UNI_BLOCK)
 80023f6:	78fb      	ldrb	r3, [r7, #3]
 80023f8:	f003 0310 	and.w	r3, r3, #16
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d008      	beq.n	8002412 <socket+0x106>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8002400:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002404:	2b00      	cmp	r3, #0
 8002406:	db04      	blt.n	8002412 <socket+0x106>
 8002408:	f06f 0305 	mvn.w	r3, #5
 800240c:	e099      	b.n	8002542 <socket+0x236>
   	      break;
 800240e:	bf00      	nop
 8002410:	e000      	b.n	8002414 <socket+0x108>
         break;
 8002412:	bf00      	nop
      }
   }
   close(sn);
 8002414:	79fb      	ldrb	r3, [r7, #7]
 8002416:	4618      	mov	r0, r3
 8002418:	f000 f8a2 	bl	8002560 <close>
   setSn_MR(sn,(protocol | (flag & 0xF0)));
 800241c:	79fb      	ldrb	r3, [r7, #7]
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	3301      	adds	r3, #1
 8002422:	00db      	lsls	r3, r3, #3
 8002424:	4618      	mov	r0, r3
 8002426:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800242a:	f023 030f 	bic.w	r3, r3, #15
 800242e:	b25a      	sxtb	r2, r3
 8002430:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002434:	4313      	orrs	r3, r2
 8002436:	b25b      	sxtb	r3, r3
 8002438:	b2db      	uxtb	r3, r3
 800243a:	4619      	mov	r1, r3
 800243c:	f7fd ffa4 	bl	8000388 <WIZCHIP_WRITE>
#ifdef IPV6_AVAILABLE
   setSn_MR2(sn, flag & 0x03);  
#endif 
   if(!port)
 8002440:	88bb      	ldrh	r3, [r7, #4]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d110      	bne.n	8002468 <socket+0x15c>
   {
      port = sock_any_port++;
 8002446:	4b41      	ldr	r3, [pc, #260]	@ (800254c <socket+0x240>)
 8002448:	881b      	ldrh	r3, [r3, #0]
 800244a:	1c5a      	adds	r2, r3, #1
 800244c:	b291      	uxth	r1, r2
 800244e:	4a3f      	ldr	r2, [pc, #252]	@ (800254c <socket+0x240>)
 8002450:	8011      	strh	r1, [r2, #0]
 8002452:	80bb      	strh	r3, [r7, #4]
      if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8002454:	4b3d      	ldr	r3, [pc, #244]	@ (800254c <socket+0x240>)
 8002456:	881b      	ldrh	r3, [r3, #0]
 8002458:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 800245c:	4293      	cmp	r3, r2
 800245e:	d103      	bne.n	8002468 <socket+0x15c>
 8002460:	4b3a      	ldr	r3, [pc, #232]	@ (800254c <socket+0x240>)
 8002462:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8002466:	801a      	strh	r2, [r3, #0]
   }
   setSn_PORTR(sn,port);
 8002468:	79fb      	ldrb	r3, [r7, #7]
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	3301      	adds	r3, #1
 800246e:	00db      	lsls	r3, r3, #3
 8002470:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002474:	461a      	mov	r2, r3
 8002476:	88bb      	ldrh	r3, [r7, #4]
 8002478:	0a1b      	lsrs	r3, r3, #8
 800247a:	b29b      	uxth	r3, r3
 800247c:	b2db      	uxtb	r3, r3
 800247e:	4619      	mov	r1, r3
 8002480:	4610      	mov	r0, r2
 8002482:	f7fd ff81 	bl	8000388 <WIZCHIP_WRITE>
 8002486:	79fb      	ldrb	r3, [r7, #7]
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	3301      	adds	r3, #1
 800248c:	00db      	lsls	r3, r3, #3
 800248e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002492:	461a      	mov	r2, r3
 8002494:	88bb      	ldrh	r3, [r7, #4]
 8002496:	b2db      	uxtb	r3, r3
 8002498:	4619      	mov	r1, r3
 800249a:	4610      	mov	r0, r2
 800249c:	f7fd ff74 	bl	8000388 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 80024a0:	79fb      	ldrb	r3, [r7, #7]
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	3301      	adds	r3, #1
 80024a6:	00db      	lsls	r3, r3, #3
 80024a8:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80024ac:	2101      	movs	r1, #1
 80024ae:	4618      	mov	r0, r3
 80024b0:	f7fd ff6a 	bl	8000388 <WIZCHIP_WRITE>

   while(getSn_CR(sn));
 80024b4:	bf00      	nop
 80024b6:	79fb      	ldrb	r3, [r7, #7]
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	3301      	adds	r3, #1
 80024bc:	00db      	lsls	r3, r3, #3
 80024be:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80024c2:	4618      	mov	r0, r3
 80024c4:	f7fd ff14 	bl	80002f0 <WIZCHIP_READ>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d1f3      	bne.n	80024b6 <socket+0x1aa>

   sock_io_mode &= ~(1 <<sn);
 80024ce:	79fb      	ldrb	r3, [r7, #7]
 80024d0:	2201      	movs	r2, #1
 80024d2:	fa02 f303 	lsl.w	r3, r2, r3
 80024d6:	b21b      	sxth	r3, r3
 80024d8:	43db      	mvns	r3, r3
 80024da:	b21a      	sxth	r2, r3
 80024dc:	4b1c      	ldr	r3, [pc, #112]	@ (8002550 <socket+0x244>)
 80024de:	881b      	ldrh	r3, [r3, #0]
 80024e0:	b21b      	sxth	r3, r3
 80024e2:	4013      	ands	r3, r2
 80024e4:	b21b      	sxth	r3, r3
 80024e6:	b29a      	uxth	r2, r3
 80024e8:	4b19      	ldr	r3, [pc, #100]	@ (8002550 <socket+0x244>)
 80024ea:	801a      	strh	r2, [r3, #0]
   sock_io_mode |= ((flag & (SF_IO_NONBLOCK>>3)) << sn);
 80024ec:	4b18      	ldr	r3, [pc, #96]	@ (8002550 <socket+0x244>)
 80024ee:	881a      	ldrh	r2, [r3, #0]
 80024f0:	4b17      	ldr	r3, [pc, #92]	@ (8002550 <socket+0x244>)
 80024f2:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 80024f4:	79fb      	ldrb	r3, [r7, #7]
 80024f6:	2201      	movs	r2, #1
 80024f8:	fa02 f303 	lsl.w	r3, r2, r3
 80024fc:	b21b      	sxth	r3, r3
 80024fe:	43db      	mvns	r3, r3
 8002500:	b21a      	sxth	r2, r3
 8002502:	4b14      	ldr	r3, [pc, #80]	@ (8002554 <socket+0x248>)
 8002504:	881b      	ldrh	r3, [r3, #0]
 8002506:	b21b      	sxth	r3, r3
 8002508:	4013      	ands	r3, r2
 800250a:	b21b      	sxth	r3, r3
 800250c:	b29a      	uxth	r2, r3
 800250e:	4b11      	ldr	r3, [pc, #68]	@ (8002554 <socket+0x248>)
 8002510:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8002512:	79fb      	ldrb	r3, [r7, #7]
 8002514:	4a10      	ldr	r2, [pc, #64]	@ (8002558 <socket+0x24c>)
 8002516:	2100      	movs	r1, #0
 8002518:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   sock_pack_info[sn] = PACK_NONE;
 800251c:	79fb      	ldrb	r3, [r7, #7]
 800251e:	4a0f      	ldr	r2, [pc, #60]	@ (800255c <socket+0x250>)
 8002520:	2100      	movs	r1, #0
 8002522:	54d1      	strb	r1, [r2, r3]

   while(getSn_SR(sn) == SOCK_CLOSED) ;
 8002524:	bf00      	nop
 8002526:	79fb      	ldrb	r3, [r7, #7]
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	3301      	adds	r3, #1
 800252c:	00db      	lsls	r3, r3, #3
 800252e:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8002532:	4618      	mov	r0, r3
 8002534:	f7fd fedc 	bl	80002f0 <WIZCHIP_READ>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d0f3      	beq.n	8002526 <socket+0x21a>
//   printf("[%d]%d\r\n", sn, getSn_PORTR(sn));
   return sn;
 800253e:	f997 3007 	ldrsb.w	r3, [r7, #7]
}  
 8002542:	4618      	mov	r0, r3
 8002544:	3724      	adds	r7, #36	@ 0x24
 8002546:	46bd      	mov	sp, r7
 8002548:	bd90      	pop	{r4, r7, pc}
 800254a:	bf00      	nop
 800254c:	20000034 	.word	0x20000034
 8002550:	20001700 	.word	0x20001700
 8002554:	20001702 	.word	0x20001702
 8002558:	20001704 	.word	0x20001704
 800255c:	20001714 	.word	0x20001714

08002560 <close>:


int8_t close(uint8_t sn)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
 8002566:	4603      	mov	r3, r0
 8002568:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 800256a:	79fb      	ldrb	r3, [r7, #7]
 800256c:	2b08      	cmp	r3, #8
 800256e:	d902      	bls.n	8002576 <close+0x16>
 8002570:	f04f 33ff 	mov.w	r3, #4294967295
 8002574:	e055      	b.n	8002622 <close+0xc2>
   setSn_CR(sn,Sn_CR_CLOSE);
 8002576:	79fb      	ldrb	r3, [r7, #7]
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	3301      	adds	r3, #1
 800257c:	00db      	lsls	r3, r3, #3
 800257e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002582:	2110      	movs	r1, #16
 8002584:	4618      	mov	r0, r3
 8002586:	f7fd feff 	bl	8000388 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while( getSn_CR(sn) );
 800258a:	bf00      	nop
 800258c:	79fb      	ldrb	r3, [r7, #7]
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	3301      	adds	r3, #1
 8002592:	00db      	lsls	r3, r3, #3
 8002594:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002598:	4618      	mov	r0, r3
 800259a:	f7fd fea9 	bl	80002f0 <WIZCHIP_READ>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d1f3      	bne.n	800258c <close+0x2c>
   /* clear all interrupt of SOCKETn. */
   setSn_IR(sn, 0xFF);  	
 80025a4:	79fb      	ldrb	r3, [r7, #7]
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	3301      	adds	r3, #1
 80025aa:	00db      	lsls	r3, r3, #3
 80025ac:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80025b0:	211f      	movs	r1, #31
 80025b2:	4618      	mov	r0, r3
 80025b4:	f7fd fee8 	bl	8000388 <WIZCHIP_WRITE>
   //setSn_IRCLR(sn, 0xFF);  
   /* Release the sock_io_mode of SOCKETn. */
   sock_io_mode &= ~(1<<sn); 
 80025b8:	79fb      	ldrb	r3, [r7, #7]
 80025ba:	2201      	movs	r2, #1
 80025bc:	fa02 f303 	lsl.w	r3, r2, r3
 80025c0:	b21b      	sxth	r3, r3
 80025c2:	43db      	mvns	r3, r3
 80025c4:	b21a      	sxth	r2, r3
 80025c6:	4b19      	ldr	r3, [pc, #100]	@ (800262c <close+0xcc>)
 80025c8:	881b      	ldrh	r3, [r3, #0]
 80025ca:	b21b      	sxth	r3, r3
 80025cc:	4013      	ands	r3, r2
 80025ce:	b21b      	sxth	r3, r3
 80025d0:	b29a      	uxth	r2, r3
 80025d2:	4b16      	ldr	r3, [pc, #88]	@ (800262c <close+0xcc>)
 80025d4:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 80025d6:	79fb      	ldrb	r3, [r7, #7]
 80025d8:	4a15      	ldr	r2, [pc, #84]	@ (8002630 <close+0xd0>)
 80025da:	2100      	movs	r1, #0
 80025dc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   sock_is_sending &= ~(1<<sn);
 80025e0:	79fb      	ldrb	r3, [r7, #7]
 80025e2:	2201      	movs	r2, #1
 80025e4:	fa02 f303 	lsl.w	r3, r2, r3
 80025e8:	b21b      	sxth	r3, r3
 80025ea:	43db      	mvns	r3, r3
 80025ec:	b21a      	sxth	r2, r3
 80025ee:	4b11      	ldr	r3, [pc, #68]	@ (8002634 <close+0xd4>)
 80025f0:	881b      	ldrh	r3, [r3, #0]
 80025f2:	b21b      	sxth	r3, r3
 80025f4:	4013      	ands	r3, r2
 80025f6:	b21b      	sxth	r3, r3
 80025f8:	b29a      	uxth	r2, r3
 80025fa:	4b0e      	ldr	r3, [pc, #56]	@ (8002634 <close+0xd4>)
 80025fc:	801a      	strh	r2, [r3, #0]
   sock_pack_info[sn] = PACK_NONE;
 80025fe:	79fb      	ldrb	r3, [r7, #7]
 8002600:	4a0d      	ldr	r2, [pc, #52]	@ (8002638 <close+0xd8>)
 8002602:	2100      	movs	r1, #0
 8002604:	54d1      	strb	r1, [r2, r3]
   while(getSn_SR(sn) != SOCK_CLOSED);
 8002606:	bf00      	nop
 8002608:	79fb      	ldrb	r3, [r7, #7]
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	3301      	adds	r3, #1
 800260e:	00db      	lsls	r3, r3, #3
 8002610:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8002614:	4618      	mov	r0, r3
 8002616:	f7fd fe6b 	bl	80002f0 <WIZCHIP_READ>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d1f3      	bne.n	8002608 <close+0xa8>
   return SOCK_OK;
 8002620:	2301      	movs	r3, #1
}
 8002622:	4618      	mov	r0, r3
 8002624:	3708      	adds	r7, #8
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	20001700 	.word	0x20001700
 8002630:	20001704 	.word	0x20001704
 8002634:	20001702 	.word	0x20001702
 8002638:	20001714 	.word	0x20001714

0800263c <listen>:


int8_t listen(uint8_t sn)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
 8002642:	4603      	mov	r3, r0
 8002644:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 8002646:	79fb      	ldrb	r3, [r7, #7]
 8002648:	2b08      	cmp	r3, #8
 800264a:	d902      	bls.n	8002652 <listen+0x16>
 800264c:	f04f 33ff 	mov.w	r3, #4294967295
 8002650:	e03a      	b.n	80026c8 <listen+0x8c>
   CHECK_SOCKINIT();
 8002652:	79fb      	ldrb	r3, [r7, #7]
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	3301      	adds	r3, #1
 8002658:	00db      	lsls	r3, r3, #3
 800265a:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 800265e:	4618      	mov	r0, r3
 8002660:	f7fd fe46 	bl	80002f0 <WIZCHIP_READ>
 8002664:	4603      	mov	r3, r0
 8002666:	2b13      	cmp	r3, #19
 8002668:	d002      	beq.n	8002670 <listen+0x34>
 800266a:	f06f 0302 	mvn.w	r3, #2
 800266e:	e02b      	b.n	80026c8 <listen+0x8c>
   setSn_CR(sn,Sn_CR_LISTEN);
 8002670:	79fb      	ldrb	r3, [r7, #7]
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	3301      	adds	r3, #1
 8002676:	00db      	lsls	r3, r3, #3
 8002678:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800267c:	2102      	movs	r1, #2
 800267e:	4618      	mov	r0, r3
 8002680:	f7fd fe82 	bl	8000388 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8002684:	bf00      	nop
 8002686:	79fb      	ldrb	r3, [r7, #7]
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	3301      	adds	r3, #1
 800268c:	00db      	lsls	r3, r3, #3
 800268e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002692:	4618      	mov	r0, r3
 8002694:	f7fd fe2c 	bl	80002f0 <WIZCHIP_READ>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d1f3      	bne.n	8002686 <listen+0x4a>
   while(getSn_SR(sn) != SOCK_LISTEN)
 800269e:	e006      	b.n	80026ae <listen+0x72>
   {
      close(sn);
 80026a0:	79fb      	ldrb	r3, [r7, #7]
 80026a2:	4618      	mov	r0, r3
 80026a4:	f7ff ff5c 	bl	8002560 <close>
      return SOCKERR_SOCKCLOSED;
 80026a8:	f06f 0303 	mvn.w	r3, #3
 80026ac:	e00c      	b.n	80026c8 <listen+0x8c>
   while(getSn_SR(sn) != SOCK_LISTEN)
 80026ae:	79fb      	ldrb	r3, [r7, #7]
 80026b0:	009b      	lsls	r3, r3, #2
 80026b2:	3301      	adds	r3, #1
 80026b4:	00db      	lsls	r3, r3, #3
 80026b6:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80026ba:	4618      	mov	r0, r3
 80026bc:	f7fd fe18 	bl	80002f0 <WIZCHIP_READ>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b14      	cmp	r3, #20
 80026c4:	d1ec      	bne.n	80026a0 <listen+0x64>
   }
   return SOCK_OK;
 80026c6:	2301      	movs	r3, #1
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	3708      	adds	r7, #8
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}

080026d0 <disconnect>:
   } 
   return SOCK_OK;
}

int8_t disconnect(uint8_t sn)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	4603      	mov	r3, r0
 80026d8:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 80026da:	79fb      	ldrb	r3, [r7, #7]
 80026dc:	2b08      	cmp	r3, #8
 80026de:	d902      	bls.n	80026e6 <disconnect+0x16>
 80026e0:	f04f 33ff 	mov.w	r3, #4294967295
 80026e4:	e05f      	b.n	80027a6 <disconnect+0xd6>
   CHECK_TCPMODE();
 80026e6:	79fb      	ldrb	r3, [r7, #7]
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	3301      	adds	r3, #1
 80026ec:	00db      	lsls	r3, r3, #3
 80026ee:	4618      	mov	r0, r3
 80026f0:	f7fd fdfe 	bl	80002f0 <WIZCHIP_READ>
 80026f4:	4603      	mov	r3, r0
 80026f6:	f003 0303 	and.w	r3, r3, #3
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d002      	beq.n	8002704 <disconnect+0x34>
 80026fe:	f06f 0304 	mvn.w	r3, #4
 8002702:	e050      	b.n	80027a6 <disconnect+0xd6>
   if(getSn_SR(sn) != SOCK_CLOSED)
 8002704:	79fb      	ldrb	r3, [r7, #7]
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	3301      	adds	r3, #1
 800270a:	00db      	lsls	r3, r3, #3
 800270c:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8002710:	4618      	mov	r0, r3
 8002712:	f7fd fded 	bl	80002f0 <WIZCHIP_READ>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d043      	beq.n	80027a4 <disconnect+0xd4>
   {
      setSn_CR(sn,Sn_CR_DISCON);
 800271c:	79fb      	ldrb	r3, [r7, #7]
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	3301      	adds	r3, #1
 8002722:	00db      	lsls	r3, r3, #3
 8002724:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002728:	2108      	movs	r1, #8
 800272a:	4618      	mov	r0, r3
 800272c:	f7fd fe2c 	bl	8000388 <WIZCHIP_WRITE>
      /* wait to process the command... */
      while(getSn_CR(sn));
 8002730:	bf00      	nop
 8002732:	79fb      	ldrb	r3, [r7, #7]
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	3301      	adds	r3, #1
 8002738:	00db      	lsls	r3, r3, #3
 800273a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800273e:	4618      	mov	r0, r3
 8002740:	f7fd fdd6 	bl	80002f0 <WIZCHIP_READ>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d1f3      	bne.n	8002732 <disconnect+0x62>
      if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 800274a:	4b19      	ldr	r3, [pc, #100]	@ (80027b0 <disconnect+0xe0>)
 800274c:	881b      	ldrh	r3, [r3, #0]
 800274e:	461a      	mov	r2, r3
 8002750:	79fb      	ldrb	r3, [r7, #7]
 8002752:	fa42 f303 	asr.w	r3, r2, r3
 8002756:	f003 0301 	and.w	r3, r3, #1
 800275a:	2b00      	cmp	r3, #0
 800275c:	d016      	beq.n	800278c <disconnect+0xbc>
 800275e:	2300      	movs	r3, #0
 8002760:	e021      	b.n	80027a6 <disconnect+0xd6>
      while(getSn_SR(sn) != SOCK_CLOSED)
      {
         if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 8002762:	79fb      	ldrb	r3, [r7, #7]
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	3301      	adds	r3, #1
 8002768:	00db      	lsls	r3, r3, #3
 800276a:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800276e:	4618      	mov	r0, r3
 8002770:	f7fd fdbe 	bl	80002f0 <WIZCHIP_READ>
 8002774:	4603      	mov	r3, r0
 8002776:	f003 0308 	and.w	r3, r3, #8
 800277a:	2b00      	cmp	r3, #0
 800277c:	d006      	beq.n	800278c <disconnect+0xbc>
         {
            close(sn);
 800277e:	79fb      	ldrb	r3, [r7, #7]
 8002780:	4618      	mov	r0, r3
 8002782:	f7ff feed 	bl	8002560 <close>
            return SOCKERR_TIMEOUT;
 8002786:	f06f 030c 	mvn.w	r3, #12
 800278a:	e00c      	b.n	80027a6 <disconnect+0xd6>
      while(getSn_SR(sn) != SOCK_CLOSED)
 800278c:	79fb      	ldrb	r3, [r7, #7]
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	3301      	adds	r3, #1
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8002798:	4618      	mov	r0, r3
 800279a:	f7fd fda9 	bl	80002f0 <WIZCHIP_READ>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d1de      	bne.n	8002762 <disconnect+0x92>
         }
      }
   }
   return SOCK_OK;
 80027a4:	2301      	movs	r3, #1
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3708      	adds	r7, #8
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	20001700 	.word	0x20001700

080027b4 <send>:


#if 1
int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b084      	sub	sp, #16
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	4603      	mov	r3, r0
 80027bc:	6039      	str	r1, [r7, #0]
 80027be:	71fb      	strb	r3, [r7, #7]
 80027c0:	4613      	mov	r3, r2
 80027c2:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 80027c4:	2300      	movs	r3, #0
 80027c6:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 80027c8:	2300      	movs	r3, #0
 80027ca:	81bb      	strh	r3, [r7, #12]
    */
   //CHECK_SOCKNUM();
   //CHECK_TCPMODE(Sn_MR_TCP4);
   /************/

   freesize = getSn_TxMAX(sn);
 80027cc:	79fb      	ldrb	r3, [r7, #7]
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	3301      	adds	r3, #1
 80027d2:	00db      	lsls	r3, r3, #3
 80027d4:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 80027d8:	4618      	mov	r0, r3
 80027da:	f7fd fd89 	bl	80002f0 <WIZCHIP_READ>
 80027de:	4603      	mov	r3, r0
 80027e0:	029b      	lsls	r3, r3, #10
 80027e2:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 80027e4:	88ba      	ldrh	r2, [r7, #4]
 80027e6:	89bb      	ldrh	r3, [r7, #12]
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d901      	bls.n	80027f0 <send+0x3c>
 80027ec:	89bb      	ldrh	r3, [r7, #12]
 80027ee:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = (uint16_t)getSn_TX_FSR(sn);
 80027f0:	79fb      	ldrb	r3, [r7, #7]
 80027f2:	4618      	mov	r0, r3
 80027f4:	f7fd fed6 	bl	80005a4 <getSn_TX_FSR>
 80027f8:	4603      	mov	r3, r0
 80027fa:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 80027fc:	79fb      	ldrb	r3, [r7, #7]
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	3301      	adds	r3, #1
 8002802:	00db      	lsls	r3, r3, #3
 8002804:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8002808:	4618      	mov	r0, r3
 800280a:	f7fd fd71 	bl	80002f0 <WIZCHIP_READ>
 800280e:	4603      	mov	r3, r0
 8002810:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 8002812:	7bfb      	ldrb	r3, [r7, #15]
 8002814:	2b17      	cmp	r3, #23
 8002816:	d00c      	beq.n	8002832 <send+0x7e>
 8002818:	7bfb      	ldrb	r3, [r7, #15]
 800281a:	2b1c      	cmp	r3, #28
 800281c:	d009      	beq.n	8002832 <send+0x7e>
      {
         if(tmp == SOCK_CLOSED) close(sn);
 800281e:	7bfb      	ldrb	r3, [r7, #15]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d103      	bne.n	800282c <send+0x78>
 8002824:	79fb      	ldrb	r3, [r7, #7]
 8002826:	4618      	mov	r0, r3
 8002828:	f7ff fe9a 	bl	8002560 <close>
         return SOCKERR_SOCKSTATUS;
 800282c:	f06f 0306 	mvn.w	r3, #6
 8002830:	e093      	b.n	800295a <send+0x1a6>
      }
      if(len <= freesize) break;
 8002832:	88ba      	ldrh	r2, [r7, #4]
 8002834:	89bb      	ldrh	r3, [r7, #12]
 8002836:	429a      	cmp	r2, r3
 8002838:	d90b      	bls.n	8002852 <send+0x9e>
      if( sock_io_mode & (1<<sn) ) return SOCK_BUSY;  
 800283a:	4b4a      	ldr	r3, [pc, #296]	@ (8002964 <send+0x1b0>)
 800283c:	881b      	ldrh	r3, [r3, #0]
 800283e:	461a      	mov	r2, r3
 8002840:	79fb      	ldrb	r3, [r7, #7]
 8002842:	fa42 f303 	asr.w	r3, r2, r3
 8002846:	f003 0301 	and.w	r3, r3, #1
 800284a:	2b00      	cmp	r3, #0
 800284c:	d0d0      	beq.n	80027f0 <send+0x3c>
 800284e:	2300      	movs	r3, #0
 8002850:	e083      	b.n	800295a <send+0x1a6>
      if(len <= freesize) break;
 8002852:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 8002854:	88ba      	ldrh	r2, [r7, #4]
 8002856:	79fb      	ldrb	r3, [r7, #7]
 8002858:	6839      	ldr	r1, [r7, #0]
 800285a:	4618      	mov	r0, r3
 800285c:	f7fd ff34 	bl	80006c8 <wiz_send_data>
   if(sock_is_sending & (1<<sn))
 8002860:	4b41      	ldr	r3, [pc, #260]	@ (8002968 <send+0x1b4>)
 8002862:	881b      	ldrh	r3, [r3, #0]
 8002864:	461a      	mov	r2, r3
 8002866:	79fb      	ldrb	r3, [r7, #7]
 8002868:	fa42 f303 	asr.w	r3, r2, r3
 800286c:	f003 0301 	and.w	r3, r3, #1
 8002870:	2b00      	cmp	r3, #0
 8002872:	d04d      	beq.n	8002910 <send+0x15c>
   {
      while ( !(getSn_IR(sn) & Sn_IR_SENDOK) )
 8002874:	e034      	b.n	80028e0 <send+0x12c>
      {    
         tmp = getSn_SR(sn);
 8002876:	79fb      	ldrb	r3, [r7, #7]
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	3301      	adds	r3, #1
 800287c:	00db      	lsls	r3, r3, #3
 800287e:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8002882:	4618      	mov	r0, r3
 8002884:	f7fd fd34 	bl	80002f0 <WIZCHIP_READ>
 8002888:	4603      	mov	r3, r0
 800288a:	73fb      	strb	r3, [r7, #15]
         if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT) )
 800288c:	7bfb      	ldrb	r3, [r7, #15]
 800288e:	2b17      	cmp	r3, #23
 8002890:	d01a      	beq.n	80028c8 <send+0x114>
 8002892:	7bfb      	ldrb	r3, [r7, #15]
 8002894:	2b1c      	cmp	r3, #28
 8002896:	d017      	beq.n	80028c8 <send+0x114>
         {
            if( (tmp == SOCK_CLOSED) || (getSn_IR(sn) & Sn_IR_TIMEOUT) ) close(sn);
 8002898:	7bfb      	ldrb	r3, [r7, #15]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d00d      	beq.n	80028ba <send+0x106>
 800289e:	79fb      	ldrb	r3, [r7, #7]
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	3301      	adds	r3, #1
 80028a4:	00db      	lsls	r3, r3, #3
 80028a6:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80028aa:	4618      	mov	r0, r3
 80028ac:	f7fd fd20 	bl	80002f0 <WIZCHIP_READ>
 80028b0:	4603      	mov	r3, r0
 80028b2:	f003 0308 	and.w	r3, r3, #8
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d003      	beq.n	80028c2 <send+0x10e>
 80028ba:	79fb      	ldrb	r3, [r7, #7]
 80028bc:	4618      	mov	r0, r3
 80028be:	f7ff fe4f 	bl	8002560 <close>
            return SOCKERR_SOCKSTATUS;
 80028c2:	f06f 0306 	mvn.w	r3, #6
 80028c6:	e048      	b.n	800295a <send+0x1a6>
         }
         if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 80028c8:	4b26      	ldr	r3, [pc, #152]	@ (8002964 <send+0x1b0>)
 80028ca:	881b      	ldrh	r3, [r3, #0]
 80028cc:	461a      	mov	r2, r3
 80028ce:	79fb      	ldrb	r3, [r7, #7]
 80028d0:	fa42 f303 	asr.w	r3, r2, r3
 80028d4:	f003 0301 	and.w	r3, r3, #1
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d001      	beq.n	80028e0 <send+0x12c>
 80028dc:	2300      	movs	r3, #0
 80028de:	e03c      	b.n	800295a <send+0x1a6>
      while ( !(getSn_IR(sn) & Sn_IR_SENDOK) )
 80028e0:	79fb      	ldrb	r3, [r7, #7]
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	3301      	adds	r3, #1
 80028e6:	00db      	lsls	r3, r3, #3
 80028e8:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80028ec:	4618      	mov	r0, r3
 80028ee:	f7fd fcff 	bl	80002f0 <WIZCHIP_READ>
 80028f2:	4603      	mov	r3, r0
 80028f4:	f003 0310 	and.w	r3, r3, #16
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d0bc      	beq.n	8002876 <send+0xc2>
      } 
      setSn_IR(sn, Sn_IR_SENDOK);
 80028fc:	79fb      	ldrb	r3, [r7, #7]
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	3301      	adds	r3, #1
 8002902:	00db      	lsls	r3, r3, #3
 8002904:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002908:	2110      	movs	r1, #16
 800290a:	4618      	mov	r0, r3
 800290c:	f7fd fd3c 	bl	8000388 <WIZCHIP_WRITE>
   }
   setSn_CR(sn,Sn_CR_SEND);
 8002910:	79fb      	ldrb	r3, [r7, #7]
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	3301      	adds	r3, #1
 8002916:	00db      	lsls	r3, r3, #3
 8002918:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800291c:	2120      	movs	r1, #32
 800291e:	4618      	mov	r0, r3
 8002920:	f7fd fd32 	bl	8000388 <WIZCHIP_WRITE>
 
   while(getSn_CR(sn));   // wait to process the command...
 8002924:	bf00      	nop
 8002926:	79fb      	ldrb	r3, [r7, #7]
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	3301      	adds	r3, #1
 800292c:	00db      	lsls	r3, r3, #3
 800292e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002932:	4618      	mov	r0, r3
 8002934:	f7fd fcdc 	bl	80002f0 <WIZCHIP_READ>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d1f3      	bne.n	8002926 <send+0x172>
   sock_is_sending |= (1<<sn);
 800293e:	79fb      	ldrb	r3, [r7, #7]
 8002940:	2201      	movs	r2, #1
 8002942:	fa02 f303 	lsl.w	r3, r2, r3
 8002946:	b21a      	sxth	r2, r3
 8002948:	4b07      	ldr	r3, [pc, #28]	@ (8002968 <send+0x1b4>)
 800294a:	881b      	ldrh	r3, [r3, #0]
 800294c:	b21b      	sxth	r3, r3
 800294e:	4313      	orrs	r3, r2
 8002950:	b21b      	sxth	r3, r3
 8002952:	b29a      	uxth	r2, r3
 8002954:	4b04      	ldr	r3, [pc, #16]	@ (8002968 <send+0x1b4>)
 8002956:	801a      	strh	r2, [r3, #0]
 
   return len;
 8002958:	88bb      	ldrh	r3, [r7, #4]
}
 800295a:	4618      	mov	r0, r3
 800295c:	3710      	adds	r7, #16
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	20001700 	.word	0x20001700
 8002968:	20001702 	.word	0x20001702

0800296c <recv>:
 
   return len;
}
#endif 
int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b084      	sub	sp, #16
 8002970:	af00      	add	r7, sp, #0
 8002972:	4603      	mov	r3, r0
 8002974:	6039      	str	r1, [r7, #0]
 8002976:	71fb      	strb	r3, [r7, #7]
 8002978:	4613      	mov	r3, r2
 800297a:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 800297c:	2300      	movs	r3, #0
 800297e:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 8002980:	2300      	movs	r3, #0
 8002982:	81bb      	strh	r3, [r7, #12]
   //CHECK_SOCKNUM();
   //CHECK_TCPMODE();
   //CHECK_SOCKDATA();
   /************/
 
   recvsize = getSn_RxMAX(sn); 
 8002984:	79fb      	ldrb	r3, [r7, #7]
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	3301      	adds	r3, #1
 800298a:	00db      	lsls	r3, r3, #3
 800298c:	f503 53f0 	add.w	r3, r3, #7680	@ 0x1e00
 8002990:	4618      	mov	r0, r3
 8002992:	f7fd fcad 	bl	80002f0 <WIZCHIP_READ>
 8002996:	4603      	mov	r3, r0
 8002998:	029b      	lsls	r3, r3, #10
 800299a:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 800299c:	89ba      	ldrh	r2, [r7, #12]
 800299e:	88bb      	ldrh	r3, [r7, #4]
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d201      	bcs.n	80029a8 <recv+0x3c>
 80029a4:	89bb      	ldrh	r3, [r7, #12]
 80029a6:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      recvsize = (uint16_t)getSn_RX_RSR(sn);
 80029a8:	79fb      	ldrb	r3, [r7, #7]
 80029aa:	4618      	mov	r0, r3
 80029ac:	f7fd fe43 	bl	8000636 <getSn_RX_RSR>
 80029b0:	4603      	mov	r3, r0
 80029b2:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 80029b4:	79fb      	ldrb	r3, [r7, #7]
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	3301      	adds	r3, #1
 80029ba:	00db      	lsls	r3, r3, #3
 80029bc:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80029c0:	4618      	mov	r0, r3
 80029c2:	f7fd fc95 	bl	80002f0 <WIZCHIP_READ>
 80029c6:	4603      	mov	r3, r0
 80029c8:	73fb      	strb	r3, [r7, #15]
      if (tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT)
 80029ca:	7bfb      	ldrb	r3, [r7, #15]
 80029cc:	2b17      	cmp	r3, #23
 80029ce:	d00c      	beq.n	80029ea <recv+0x7e>
 80029d0:	7bfb      	ldrb	r3, [r7, #15]
 80029d2:	2b1c      	cmp	r3, #28
 80029d4:	d009      	beq.n	80029ea <recv+0x7e>
      {
         if(tmp == SOCK_CLOSED) close(sn);
 80029d6:	7bfb      	ldrb	r3, [r7, #15]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d103      	bne.n	80029e4 <recv+0x78>
 80029dc:	79fb      	ldrb	r3, [r7, #7]
 80029de:	4618      	mov	r0, r3
 80029e0:	f7ff fdbe 	bl	8002560 <close>
         return SOCKERR_SOCKSTATUS;
 80029e4:	f06f 0306 	mvn.w	r3, #6
 80029e8:	e033      	b.n	8002a52 <recv+0xe6>
      }
      if(recvsize) break;
 80029ea:	89bb      	ldrh	r3, [r7, #12]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d10b      	bne.n	8002a08 <recv+0x9c>
      if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 80029f0:	4b1a      	ldr	r3, [pc, #104]	@ (8002a5c <recv+0xf0>)
 80029f2:	881b      	ldrh	r3, [r3, #0]
 80029f4:	461a      	mov	r2, r3
 80029f6:	79fb      	ldrb	r3, [r7, #7]
 80029f8:	fa42 f303 	asr.w	r3, r2, r3
 80029fc:	f003 0301 	and.w	r3, r3, #1
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d0d1      	beq.n	80029a8 <recv+0x3c>
 8002a04:	2300      	movs	r3, #0
 8002a06:	e024      	b.n	8002a52 <recv+0xe6>
      if(recvsize) break;
 8002a08:	bf00      	nop
   }
   if(recvsize < len) len = recvsize;
 8002a0a:	89ba      	ldrh	r2, [r7, #12]
 8002a0c:	88bb      	ldrh	r3, [r7, #4]
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d201      	bcs.n	8002a16 <recv+0xaa>
 8002a12:	89bb      	ldrh	r3, [r7, #12]
 8002a14:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len); 
 8002a16:	88ba      	ldrh	r2, [r7, #4]
 8002a18:	79fb      	ldrb	r3, [r7, #7]
 8002a1a:	6839      	ldr	r1, [r7, #0]
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f7fd fead 	bl	800077c <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV); 
 8002a22:	79fb      	ldrb	r3, [r7, #7]
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	3301      	adds	r3, #1
 8002a28:	00db      	lsls	r3, r3, #3
 8002a2a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002a2e:	2140      	movs	r1, #64	@ 0x40
 8002a30:	4618      	mov	r0, r3
 8002a32:	f7fd fca9 	bl	8000388 <WIZCHIP_WRITE>
   while(getSn_CR(sn));  
 8002a36:	bf00      	nop
 8002a38:	79fb      	ldrb	r3, [r7, #7]
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	3301      	adds	r3, #1
 8002a3e:	00db      	lsls	r3, r3, #3
 8002a40:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002a44:	4618      	mov	r0, r3
 8002a46:	f7fd fc53 	bl	80002f0 <WIZCHIP_READ>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d1f3      	bne.n	8002a38 <recv+0xcc>
   return len;
 8002a50:	88bb      	ldrh	r3, [r7, #4]
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3710      	adds	r7, #16
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	20001700 	.word	0x20001700

08002a60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b082      	sub	sp, #8
 8002a64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a66:	4b0f      	ldr	r3, [pc, #60]	@ (8002aa4 <HAL_MspInit+0x44>)
 8002a68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a6a:	4a0e      	ldr	r2, [pc, #56]	@ (8002aa4 <HAL_MspInit+0x44>)
 8002a6c:	f043 0301 	orr.w	r3, r3, #1
 8002a70:	6613      	str	r3, [r2, #96]	@ 0x60
 8002a72:	4b0c      	ldr	r3, [pc, #48]	@ (8002aa4 <HAL_MspInit+0x44>)
 8002a74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a76:	f003 0301 	and.w	r3, r3, #1
 8002a7a:	607b      	str	r3, [r7, #4]
 8002a7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a7e:	4b09      	ldr	r3, [pc, #36]	@ (8002aa4 <HAL_MspInit+0x44>)
 8002a80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a82:	4a08      	ldr	r2, [pc, #32]	@ (8002aa4 <HAL_MspInit+0x44>)
 8002a84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a88:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a8a:	4b06      	ldr	r3, [pc, #24]	@ (8002aa4 <HAL_MspInit+0x44>)
 8002a8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a92:	603b      	str	r3, [r7, #0]
 8002a94:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002a96:	f001 fb51 	bl	800413c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a9a:	bf00      	nop
 8002a9c:	3708      	adds	r7, #8
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	40021000 	.word	0x40021000

08002aa8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b08a      	sub	sp, #40	@ 0x28
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ab0:	f107 0314 	add.w	r3, r7, #20
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	601a      	str	r2, [r3, #0]
 8002ab8:	605a      	str	r2, [r3, #4]
 8002aba:	609a      	str	r2, [r3, #8]
 8002abc:	60da      	str	r2, [r3, #12]
 8002abe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a17      	ldr	r2, [pc, #92]	@ (8002b24 <HAL_SPI_MspInit+0x7c>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d128      	bne.n	8002b1c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002aca:	4b17      	ldr	r3, [pc, #92]	@ (8002b28 <HAL_SPI_MspInit+0x80>)
 8002acc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ace:	4a16      	ldr	r2, [pc, #88]	@ (8002b28 <HAL_SPI_MspInit+0x80>)
 8002ad0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002ad4:	6613      	str	r3, [r2, #96]	@ 0x60
 8002ad6:	4b14      	ldr	r3, [pc, #80]	@ (8002b28 <HAL_SPI_MspInit+0x80>)
 8002ad8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ada:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ade:	613b      	str	r3, [r7, #16]
 8002ae0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ae2:	4b11      	ldr	r3, [pc, #68]	@ (8002b28 <HAL_SPI_MspInit+0x80>)
 8002ae4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ae6:	4a10      	ldr	r2, [pc, #64]	@ (8002b28 <HAL_SPI_MspInit+0x80>)
 8002ae8:	f043 0301 	orr.w	r3, r3, #1
 8002aec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002aee:	4b0e      	ldr	r3, [pc, #56]	@ (8002b28 <HAL_SPI_MspInit+0x80>)
 8002af0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002af2:	f003 0301 	and.w	r3, r3, #1
 8002af6:	60fb      	str	r3, [r7, #12]
 8002af8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002afa:	23e0      	movs	r3, #224	@ 0xe0
 8002afc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002afe:	2302      	movs	r3, #2
 8002b00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b02:	2300      	movs	r3, #0
 8002b04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b06:	2300      	movs	r3, #0
 8002b08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002b0a:	2305      	movs	r3, #5
 8002b0c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b0e:	f107 0314 	add.w	r3, r7, #20
 8002b12:	4619      	mov	r1, r3
 8002b14:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002b18:	f001 f8d2 	bl	8003cc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002b1c:	bf00      	nop
 8002b1e:	3728      	adds	r7, #40	@ 0x28
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	40013000 	.word	0x40013000
 8002b28:	40021000 	.word	0x40021000

08002b2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002b30:	bf00      	nop
 8002b32:	e7fd      	b.n	8002b30 <NMI_Handler+0x4>

08002b34 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b34:	b480      	push	{r7}
 8002b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b38:	bf00      	nop
 8002b3a:	e7fd      	b.n	8002b38 <HardFault_Handler+0x4>

08002b3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b40:	bf00      	nop
 8002b42:	e7fd      	b.n	8002b40 <MemManage_Handler+0x4>

08002b44 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b44:	b480      	push	{r7}
 8002b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b48:	bf00      	nop
 8002b4a:	e7fd      	b.n	8002b48 <BusFault_Handler+0x4>

08002b4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b50:	bf00      	nop
 8002b52:	e7fd      	b.n	8002b50 <UsageFault_Handler+0x4>

08002b54 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b54:	b480      	push	{r7}
 8002b56:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b58:	bf00      	nop
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr

08002b62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b62:	b480      	push	{r7}
 8002b64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b66:	bf00      	nop
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr

08002b70 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b70:	b480      	push	{r7}
 8002b72:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b74:	bf00      	nop
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr

08002b7e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b7e:	b580      	push	{r7, lr}
 8002b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b82:	f000 ff79 	bl	8003a78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b86:	bf00      	nop
 8002b88:	bd80      	pop	{r7, pc}

08002b8a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002b8a:	b480      	push	{r7}
 8002b8c:	af00      	add	r7, sp, #0
  return 1;
 8002b8e:	2301      	movs	r3, #1
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr

08002b9a <_kill>:

int _kill(int pid, int sig)
{
 8002b9a:	b580      	push	{r7, lr}
 8002b9c:	b082      	sub	sp, #8
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	6078      	str	r0, [r7, #4]
 8002ba2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002ba4:	f003 fad8 	bl	8006158 <__errno>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2216      	movs	r2, #22
 8002bac:	601a      	str	r2, [r3, #0]
  return -1;
 8002bae:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3708      	adds	r7, #8
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}

08002bba <_exit>:

void _exit (int status)
{
 8002bba:	b580      	push	{r7, lr}
 8002bbc:	b082      	sub	sp, #8
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002bc2:	f04f 31ff 	mov.w	r1, #4294967295
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f7ff ffe7 	bl	8002b9a <_kill>
  while (1) {}    /* Make sure we hang here */
 8002bcc:	bf00      	nop
 8002bce:	e7fd      	b.n	8002bcc <_exit+0x12>

08002bd0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b086      	sub	sp, #24
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	60f8      	str	r0, [r7, #12]
 8002bd8:	60b9      	str	r1, [r7, #8]
 8002bda:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bdc:	2300      	movs	r3, #0
 8002bde:	617b      	str	r3, [r7, #20]
 8002be0:	e00a      	b.n	8002bf8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002be2:	f3af 8000 	nop.w
 8002be6:	4601      	mov	r1, r0
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	1c5a      	adds	r2, r3, #1
 8002bec:	60ba      	str	r2, [r7, #8]
 8002bee:	b2ca      	uxtb	r2, r1
 8002bf0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	3301      	adds	r3, #1
 8002bf6:	617b      	str	r3, [r7, #20]
 8002bf8:	697a      	ldr	r2, [r7, #20]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	dbf0      	blt.n	8002be2 <_read+0x12>
  }

  return len;
 8002c00:	687b      	ldr	r3, [r7, #4]
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3718      	adds	r7, #24
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}

08002c0a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002c0a:	b580      	push	{r7, lr}
 8002c0c:	b086      	sub	sp, #24
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	60f8      	str	r0, [r7, #12]
 8002c12:	60b9      	str	r1, [r7, #8]
 8002c14:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c16:	2300      	movs	r3, #0
 8002c18:	617b      	str	r3, [r7, #20]
 8002c1a:	e009      	b.n	8002c30 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	1c5a      	adds	r2, r3, #1
 8002c20:	60ba      	str	r2, [r7, #8]
 8002c22:	781b      	ldrb	r3, [r3, #0]
 8002c24:	4618      	mov	r0, r3
 8002c26:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	3301      	adds	r3, #1
 8002c2e:	617b      	str	r3, [r7, #20]
 8002c30:	697a      	ldr	r2, [r7, #20]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	429a      	cmp	r2, r3
 8002c36:	dbf1      	blt.n	8002c1c <_write+0x12>
  }
  return len;
 8002c38:	687b      	ldr	r3, [r7, #4]
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3718      	adds	r7, #24
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}

08002c42 <_close>:

int _close(int file)
{
 8002c42:	b480      	push	{r7}
 8002c44:	b083      	sub	sp, #12
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002c4a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	370c      	adds	r7, #12
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr

08002c5a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c5a:	b480      	push	{r7}
 8002c5c:	b083      	sub	sp, #12
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	6078      	str	r0, [r7, #4]
 8002c62:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002c6a:	605a      	str	r2, [r3, #4]
  return 0;
 8002c6c:	2300      	movs	r3, #0
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	370c      	adds	r7, #12
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr

08002c7a <_isatty>:

int _isatty(int file)
{
 8002c7a:	b480      	push	{r7}
 8002c7c:	b083      	sub	sp, #12
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002c82:	2301      	movs	r3, #1
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	370c      	adds	r7, #12
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr

08002c90 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b085      	sub	sp, #20
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	60f8      	str	r0, [r7, #12]
 8002c98:	60b9      	str	r1, [r7, #8]
 8002c9a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002c9c:	2300      	movs	r3, #0
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3714      	adds	r7, #20
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr
	...

08002cac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b086      	sub	sp, #24
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002cb4:	4a14      	ldr	r2, [pc, #80]	@ (8002d08 <_sbrk+0x5c>)
 8002cb6:	4b15      	ldr	r3, [pc, #84]	@ (8002d0c <_sbrk+0x60>)
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002cc0:	4b13      	ldr	r3, [pc, #76]	@ (8002d10 <_sbrk+0x64>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d102      	bne.n	8002cce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002cc8:	4b11      	ldr	r3, [pc, #68]	@ (8002d10 <_sbrk+0x64>)
 8002cca:	4a12      	ldr	r2, [pc, #72]	@ (8002d14 <_sbrk+0x68>)
 8002ccc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002cce:	4b10      	ldr	r3, [pc, #64]	@ (8002d10 <_sbrk+0x64>)
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4413      	add	r3, r2
 8002cd6:	693a      	ldr	r2, [r7, #16]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d207      	bcs.n	8002cec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002cdc:	f003 fa3c 	bl	8006158 <__errno>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	220c      	movs	r2, #12
 8002ce4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ce6:	f04f 33ff 	mov.w	r3, #4294967295
 8002cea:	e009      	b.n	8002d00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002cec:	4b08      	ldr	r3, [pc, #32]	@ (8002d10 <_sbrk+0x64>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002cf2:	4b07      	ldr	r3, [pc, #28]	@ (8002d10 <_sbrk+0x64>)
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4413      	add	r3, r2
 8002cfa:	4a05      	ldr	r2, [pc, #20]	@ (8002d10 <_sbrk+0x64>)
 8002cfc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3718      	adds	r7, #24
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	20020000 	.word	0x20020000
 8002d0c:	00000400 	.word	0x00000400
 8002d10:	2000171c 	.word	0x2000171c
 8002d14:	20001878 	.word	0x20001878

08002d18 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002d1c:	4b06      	ldr	r3, [pc, #24]	@ (8002d38 <SystemInit+0x20>)
 8002d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d22:	4a05      	ldr	r2, [pc, #20]	@ (8002d38 <SystemInit+0x20>)
 8002d24:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002d28:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d2c:	bf00      	nop
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr
 8002d36:	bf00      	nop
 8002d38:	e000ed00 	.word	0xe000ed00

08002d3c <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8002d3c:	b480      	push	{r7}
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	bf00      	nop
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr

08002d4a <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 8002d4a:	b480      	push	{r7}
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	bf00      	nop
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr

08002d58 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8002d58:	b480      	push	{r7}
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	bf00      	nop
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr

08002d66 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8002d66:	b480      	push	{r7}
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	bf00      	nop
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr

08002d74 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8002d74:	b480      	push	{r7}
 8002d76:	b083      	sub	sp, #12
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	4618      	mov	r0, r3
 8002d84:	370c      	adds	r7, #12
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr

08002d8e <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8002d8e:	b480      	push	{r7}
 8002d90:	b083      	sub	sp, #12
 8002d92:	af00      	add	r7, sp, #0
 8002d94:	6078      	str	r0, [r7, #4]
 8002d96:	460b      	mov	r3, r1
 8002d98:	70fb      	strb	r3, [r7, #3]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	78fa      	ldrb	r2, [r7, #3]
 8002d9e:	701a      	strb	r2, [r3, #0]
 8002da0:	bf00      	nop
 8002da2:	370c      	adds	r7, #12
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr

08002dac <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8002dac:	b480      	push	{r7}
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	2300      	movs	r3, #0
 8002db2:	4618      	mov	r0, r3
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr

08002dbc <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	71fb      	strb	r3, [r7, #7]
 8002dc6:	bf00      	nop
 8002dc8:	370c      	adds	r7, #12
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr
	...

08002dd4 <wizchip_spi_readburst>:
 */
//void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}; 
#if 1
// 20231018 taylor
void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len)
{
 8002dd4:	b590      	push	{r4, r7, lr}
 8002dd6:	b085      	sub	sp, #20
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	460b      	mov	r3, r1
 8002dde:	807b      	strh	r3, [r7, #2]
	for(uint16_t i=0; i<len; i++)
 8002de0:	2300      	movs	r3, #0
 8002de2:	81fb      	strh	r3, [r7, #14]
 8002de4:	e00a      	b.n	8002dfc <wizchip_spi_readburst+0x28>
	{
		*pBuf++ = WIZCHIP.IF.SPI._read_byte();
 8002de6:	4b0a      	ldr	r3, [pc, #40]	@ (8002e10 <wizchip_spi_readburst+0x3c>)
 8002de8:	69db      	ldr	r3, [r3, #28]
 8002dea:	687c      	ldr	r4, [r7, #4]
 8002dec:	1c62      	adds	r2, r4, #1
 8002dee:	607a      	str	r2, [r7, #4]
 8002df0:	4798      	blx	r3
 8002df2:	4603      	mov	r3, r0
 8002df4:	7023      	strb	r3, [r4, #0]
	for(uint16_t i=0; i<len; i++)
 8002df6:	89fb      	ldrh	r3, [r7, #14]
 8002df8:	3301      	adds	r3, #1
 8002dfa:	81fb      	strh	r3, [r7, #14]
 8002dfc:	89fa      	ldrh	r2, [r7, #14]
 8002dfe:	887b      	ldrh	r3, [r7, #2]
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d3f0      	bcc.n	8002de6 <wizchip_spi_readburst+0x12>
	}
}
 8002e04:	bf00      	nop
 8002e06:	bf00      	nop
 8002e08:	3714      	adds	r7, #20
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd90      	pop	{r4, r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	2000003c 	.word	0x2000003c

08002e14 <wizchip_spi_writeburst>:
 */
//void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
#if 1
// 20231018 taylor
void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b084      	sub	sp, #16
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
 8002e1c:	460b      	mov	r3, r1
 8002e1e:	807b      	strh	r3, [r7, #2]
	for(uint16_t i=0; i<len; i++)
 8002e20:	2300      	movs	r3, #0
 8002e22:	81fb      	strh	r3, [r7, #14]
 8002e24:	e00a      	b.n	8002e3c <wizchip_spi_writeburst+0x28>
	{
		WIZCHIP.IF.SPI._write_byte(*pBuf++);
 8002e26:	4b0a      	ldr	r3, [pc, #40]	@ (8002e50 <wizchip_spi_writeburst+0x3c>)
 8002e28:	6a1a      	ldr	r2, [r3, #32]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	1c59      	adds	r1, r3, #1
 8002e2e:	6079      	str	r1, [r7, #4]
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	4618      	mov	r0, r3
 8002e34:	4790      	blx	r2
	for(uint16_t i=0; i<len; i++)
 8002e36:	89fb      	ldrh	r3, [r7, #14]
 8002e38:	3301      	adds	r3, #1
 8002e3a:	81fb      	strh	r3, [r7, #14]
 8002e3c:	89fa      	ldrh	r2, [r7, #14]
 8002e3e:	887b      	ldrh	r3, [r7, #2]
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d3f0      	bcc.n	8002e26 <wizchip_spi_writeburst+0x12>
	}
}
 8002e44:	bf00      	nop
 8002e46:	bf00      	nop
 8002e48:	3710      	adds	r7, #16
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	2000003c 	.word	0x2000003c

08002e54 <reg_wizchip_cris_cbfunc>:
static uint8_t      _DNS6_[16];    ///< DSN server IPv6 address
static ipconf_mode  _IPMODE_;      ///< IP configuration mode
#endif

void reg_wizchip_cris_cbfunc(void(*cris_en)(void), void(*cris_ex)(void))
{
 8002e54:	b480      	push	{r7}
 8002e56:	b083      	sub	sp, #12
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
 8002e5c:	6039      	str	r1, [r7, #0]
   if(!cris_en || !cris_ex)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d002      	beq.n	8002e6a <reg_wizchip_cris_cbfunc+0x16>
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d106      	bne.n	8002e78 <reg_wizchip_cris_cbfunc+0x24>
   {
      WIZCHIP.CRIS._enter = wizchip_cris_enter;
 8002e6a:	4b0a      	ldr	r3, [pc, #40]	@ (8002e94 <reg_wizchip_cris_cbfunc+0x40>)
 8002e6c:	4a0a      	ldr	r2, [pc, #40]	@ (8002e98 <reg_wizchip_cris_cbfunc+0x44>)
 8002e6e:	60da      	str	r2, [r3, #12]
      WIZCHIP.CRIS._exit  = wizchip_cris_exit;
 8002e70:	4b08      	ldr	r3, [pc, #32]	@ (8002e94 <reg_wizchip_cris_cbfunc+0x40>)
 8002e72:	4a0a      	ldr	r2, [pc, #40]	@ (8002e9c <reg_wizchip_cris_cbfunc+0x48>)
 8002e74:	611a      	str	r2, [r3, #16]
 8002e76:	e006      	b.n	8002e86 <reg_wizchip_cris_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CRIS._enter = cris_en;
 8002e78:	4a06      	ldr	r2, [pc, #24]	@ (8002e94 <reg_wizchip_cris_cbfunc+0x40>)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	60d3      	str	r3, [r2, #12]
      WIZCHIP.CRIS._exit  = cris_ex;
 8002e7e:	4a05      	ldr	r2, [pc, #20]	@ (8002e94 <reg_wizchip_cris_cbfunc+0x40>)
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	6113      	str	r3, [r2, #16]
   }
}
 8002e84:	bf00      	nop
 8002e86:	bf00      	nop
 8002e88:	370c      	adds	r7, #12
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr
 8002e92:	bf00      	nop
 8002e94:	2000003c 	.word	0x2000003c
 8002e98:	08002d3d 	.word	0x08002d3d
 8002e9c:	08002d4b 	.word	0x08002d4b

08002ea0 <reg_wizchip_cs_cbfunc>:

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
 8002ea8:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d002      	beq.n	8002eb6 <reg_wizchip_cs_cbfunc+0x16>
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d106      	bne.n	8002ec4 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 8002eb6:	4b0a      	ldr	r3, [pc, #40]	@ (8002ee0 <reg_wizchip_cs_cbfunc+0x40>)
 8002eb8:	4a0a      	ldr	r2, [pc, #40]	@ (8002ee4 <reg_wizchip_cs_cbfunc+0x44>)
 8002eba:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8002ebc:	4b08      	ldr	r3, [pc, #32]	@ (8002ee0 <reg_wizchip_cs_cbfunc+0x40>)
 8002ebe:	4a0a      	ldr	r2, [pc, #40]	@ (8002ee8 <reg_wizchip_cs_cbfunc+0x48>)
 8002ec0:	619a      	str	r2, [r3, #24]
 8002ec2:	e006      	b.n	8002ed2 <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8002ec4:	4a06      	ldr	r2, [pc, #24]	@ (8002ee0 <reg_wizchip_cs_cbfunc+0x40>)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 8002eca:	4a05      	ldr	r2, [pc, #20]	@ (8002ee0 <reg_wizchip_cs_cbfunc+0x40>)
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	6193      	str	r3, [r2, #24]
   }
}
 8002ed0:	bf00      	nop
 8002ed2:	bf00      	nop
 8002ed4:	370c      	adds	r7, #12
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr
 8002ede:	bf00      	nop
 8002ee0:	2000003c 	.word	0x2000003c
 8002ee4:	08002d59 	.word	0x08002d59
 8002ee8:	08002d67 	.word	0x08002d67

08002eec <reg_wizchip_spi_cbfunc>:
   else           WIZCHIP.IF.SPI._write_burst = spi_wbuf;
}
#else 

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 8002eec:	b480      	push	{r7}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
 8002ef4:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8002ef6:	bf00      	nop
 8002ef8:	4b0f      	ldr	r3, [pc, #60]	@ (8002f38 <reg_wizchip_spi_cbfunc+0x4c>)
 8002efa:	881b      	ldrh	r3, [r3, #0]
 8002efc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d0f9      	beq.n	8002ef8 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d002      	beq.n	8002f10 <reg_wizchip_spi_cbfunc+0x24>
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d106      	bne.n	8002f1e <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8002f10:	4b09      	ldr	r3, [pc, #36]	@ (8002f38 <reg_wizchip_spi_cbfunc+0x4c>)
 8002f12:	4a0a      	ldr	r2, [pc, #40]	@ (8002f3c <reg_wizchip_spi_cbfunc+0x50>)
 8002f14:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 8002f16:	4b08      	ldr	r3, [pc, #32]	@ (8002f38 <reg_wizchip_spi_cbfunc+0x4c>)
 8002f18:	4a09      	ldr	r2, [pc, #36]	@ (8002f40 <reg_wizchip_spi_cbfunc+0x54>)
 8002f1a:	621a      	str	r2, [r3, #32]
 8002f1c:	e006      	b.n	8002f2c <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 8002f1e:	4a06      	ldr	r2, [pc, #24]	@ (8002f38 <reg_wizchip_spi_cbfunc+0x4c>)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8002f24:	4a04      	ldr	r2, [pc, #16]	@ (8002f38 <reg_wizchip_spi_cbfunc+0x4c>)
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	6213      	str	r3, [r2, #32]
   }
}
 8002f2a:	bf00      	nop
 8002f2c:	bf00      	nop
 8002f2e:	370c      	adds	r7, #12
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr
 8002f38:	2000003c 	.word	0x2000003c
 8002f3c:	08002dad 	.word	0x08002dad
 8002f40:	08002dbd 	.word	0x08002dbd

08002f44 <reg_wizchip_spiburst_cbfunc>:
#endif 

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8002f4e:	bf00      	nop
 8002f50:	4b0f      	ldr	r3, [pc, #60]	@ (8002f90 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8002f52:	881b      	ldrh	r3, [r3, #0]
 8002f54:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d0f9      	beq.n	8002f50 <reg_wizchip_spiburst_cbfunc+0xc>

   if(!spi_rb || !spi_wb)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d002      	beq.n	8002f68 <reg_wizchip_spiburst_cbfunc+0x24>
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d106      	bne.n	8002f76 <reg_wizchip_spiburst_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
 8002f68:	4b09      	ldr	r3, [pc, #36]	@ (8002f90 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8002f6a:	4a0a      	ldr	r2, [pc, #40]	@ (8002f94 <reg_wizchip_spiburst_cbfunc+0x50>)
 8002f6c:	625a      	str	r2, [r3, #36]	@ 0x24
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
 8002f6e:	4b08      	ldr	r3, [pc, #32]	@ (8002f90 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8002f70:	4a09      	ldr	r2, [pc, #36]	@ (8002f98 <reg_wizchip_spiburst_cbfunc+0x54>)
 8002f72:	629a      	str	r2, [r3, #40]	@ 0x28
 8002f74:	e006      	b.n	8002f84 <reg_wizchip_spiburst_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
 8002f76:	4a06      	ldr	r2, [pc, #24]	@ (8002f90 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6253      	str	r3, [r2, #36]	@ 0x24
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
 8002f7c:	4a04      	ldr	r2, [pc, #16]	@ (8002f90 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	6293      	str	r3, [r2, #40]	@ 0x28
   }
}
 8002f82:	bf00      	nop
 8002f84:	bf00      	nop
 8002f86:	370c      	adds	r7, #12
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr
 8002f90:	2000003c 	.word	0x2000003c
 8002f94:	08002dd5 	.word	0x08002dd5
 8002f98:	08002e15 	.word	0x08002e15

08002f9c <ctlwizchip>:
   }
}
#endif

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 8002f9c:	b590      	push	{r4, r7, lr}
 8002f9e:	b087      	sub	sp, #28
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	6039      	str	r1, [r7, #0]
 8002fa6:	71fb      	strb	r3, [r7, #7]
//teddy 240122
#if	_WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500 || _WIZCHIP_ == W6100 || _WIZCHIP_ == W6300
   uint8_t tmp = *(uint8_t*) arg;
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	781b      	ldrb	r3, [r3, #0]
 8002fac:	75fb      	strb	r3, [r7, #23]
#endif
   uint8_t* ptmp[2] = {0,0};
 8002fae:	2300      	movs	r3, #0
 8002fb0:	60fb      	str	r3, [r7, #12]
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	613b      	str	r3, [r7, #16]
   switch(cwtype)
 8002fb6:	79fb      	ldrb	r3, [r7, #7]
 8002fb8:	3b03      	subs	r3, #3
 8002fba:	2b14      	cmp	r3, #20
 8002fbc:	f200 80d3 	bhi.w	8003166 <ctlwizchip+0x1ca>
 8002fc0:	a201      	add	r2, pc, #4	@ (adr r2, 8002fc8 <ctlwizchip+0x2c>)
 8002fc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fc6:	bf00      	nop
 8002fc8:	0800301d 	.word	0x0800301d
 8002fcc:	08003023 	.word	0x08003023
 8002fd0:	0800304f 	.word	0x0800304f
 8002fd4:	08003043 	.word	0x08003043
 8002fd8:	0800305d 	.word	0x0800305d
 8002fdc:	08003069 	.word	0x08003069
 8002fe0:	08003077 	.word	0x08003077
 8002fe4:	0800309d 	.word	0x0800309d
 8002fe8:	08003167 	.word	0x08003167
 8002fec:	08003167 	.word	0x08003167
 8002ff0:	080030bf 	.word	0x080030bf
 8002ff4:	08003167 	.word	0x08003167
 8002ff8:	08003167 	.word	0x08003167
 8002ffc:	08003167 	.word	0x08003167
 8003000:	08003103 	.word	0x08003103
 8003004:	08003109 	.word	0x08003109
 8003008:	08003111 	.word	0x08003111
 800300c:	08003119 	.word	0x08003119
 8003010:	08003121 	.word	0x08003121
 8003014:	0800312f 	.word	0x0800312f
 8003018:	0800314b 	.word	0x0800314b
      case CW_GET_SYSLOCK:
         *(uint8_t*)arg = getSYSR() >> 5;
         break;
#endif
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 800301c:	f000 f8ec 	bl	80031f8 <wizchip_sw_reset>
         break;
 8003020:	e0a4      	b.n	800316c <ctlwizchip+0x1d0>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d004      	beq.n	8003032 <ctlwizchip+0x96>
         {
            ptmp[0] = (uint8_t*)arg;
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	60fb      	str	r3, [r7, #12]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	3308      	adds	r3, #8
 8003030:	613b      	str	r3, [r7, #16]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	693a      	ldr	r2, [r7, #16]
 8003036:	4611      	mov	r1, r2
 8003038:	4618      	mov	r0, r3
 800303a:	f000 f929 	bl	8003290 <wizchip_init>
 800303e:	4603      	mov	r3, r0
 8003040:	e095      	b.n	800316e <ctlwizchip+0x1d2>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	881b      	ldrh	r3, [r3, #0]
 8003046:	4618      	mov	r0, r3
 8003048:	f000 f9ae 	bl	80033a8 <wizchip_clrinterrupt>
         break;
 800304c:	e08e      	b.n	800316c <ctlwizchip+0x1d0>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 800304e:	f000 f9df 	bl	8003410 <wizchip_getinterrupt>
 8003052:	4603      	mov	r3, r0
 8003054:	461a      	mov	r2, r3
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	801a      	strh	r2, [r3, #0]
         break;
 800305a:	e087      	b.n	800316c <ctlwizchip+0x1d0>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	881b      	ldrh	r3, [r3, #0]
 8003060:	4618      	mov	r0, r3
 8003062:	f000 f9f9 	bl	8003458 <wizchip_setinterruptmask>
         break;         
 8003066:	e081      	b.n	800316c <ctlwizchip+0x1d0>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 8003068:	f000 fa11 	bl	800348e <wizchip_getinterruptmask>
 800306c:	4603      	mov	r3, r0
 800306e:	461a      	mov	r2, r3
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	801a      	strh	r2, [r3, #0]
         break;
 8003074:	e07a      	b.n	800316c <ctlwizchip+0x1d0>
   //M20150601 : This can be supported by W5200, W5500
   //#if _WIZCHIP_ > W5100
   #if (_WIZCHIP_ == W5200 || _WIZCHIP_ == W5500)
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	881b      	ldrh	r3, [r3, #0]
 800307a:	0a1b      	lsrs	r3, r3, #8
 800307c:	b29b      	uxth	r3, r3
 800307e:	b2db      	uxtb	r3, r3
 8003080:	4619      	mov	r1, r3
 8003082:	f44f 5098 	mov.w	r0, #4864	@ 0x1300
 8003086:	f7fd f97f 	bl	8000388 <WIZCHIP_WRITE>
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	881b      	ldrh	r3, [r3, #0]
 800308e:	b2db      	uxtb	r3, r3
 8003090:	4619      	mov	r1, r3
 8003092:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 8003096:	f7fd f977 	bl	8000388 <WIZCHIP_WRITE>
         break;
 800309a:	e067      	b.n	800316c <ctlwizchip+0x1d0>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
 800309c:	f44f 5098 	mov.w	r0, #4864	@ 0x1300
 80030a0:	f7fd f926 	bl	80002f0 <WIZCHIP_READ>
 80030a4:	4603      	mov	r3, r0
 80030a6:	021b      	lsls	r3, r3, #8
 80030a8:	b29c      	uxth	r4, r3
 80030aa:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 80030ae:	f7fd f91f 	bl	80002f0 <WIZCHIP_READ>
 80030b2:	4603      	mov	r3, r0
 80030b4:	4423      	add	r3, r4
 80030b6:	b29a      	uxth	r2, r3
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	801a      	strh	r2, [r3, #0]
         break;
 80030bc:	e056      	b.n	800316c <ctlwizchip+0x1d0>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTPTMR();
         break;   
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 80030be:	4b2e      	ldr	r3, [pc, #184]	@ (8003178 <ctlwizchip+0x1dc>)
 80030c0:	789a      	ldrb	r2, [r3, #2]
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	3301      	adds	r3, #1
 80030ca:	4a2b      	ldr	r2, [pc, #172]	@ (8003178 <ctlwizchip+0x1dc>)
 80030cc:	78d2      	ldrb	r2, [r2, #3]
 80030ce:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	3302      	adds	r3, #2
 80030d4:	4a28      	ldr	r2, [pc, #160]	@ (8003178 <ctlwizchip+0x1dc>)
 80030d6:	7912      	ldrb	r2, [r2, #4]
 80030d8:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	3303      	adds	r3, #3
 80030de:	4a26      	ldr	r2, [pc, #152]	@ (8003178 <ctlwizchip+0x1dc>)
 80030e0:	7952      	ldrb	r2, [r2, #5]
 80030e2:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	3304      	adds	r3, #4
 80030e8:	4a23      	ldr	r2, [pc, #140]	@ (8003178 <ctlwizchip+0x1dc>)
 80030ea:	7992      	ldrb	r2, [r2, #6]
 80030ec:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = WIZCHIP.id[5];
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	3305      	adds	r3, #5
 80030f2:	4a21      	ldr	r2, [pc, #132]	@ (8003178 <ctlwizchip+0x1dc>)
 80030f4:	79d2      	ldrb	r2, [r2, #7]
 80030f6:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[6] = 0;
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	3306      	adds	r3, #6
 80030fc:	2200      	movs	r2, #0
 80030fe:	701a      	strb	r2, [r3, #0]
         break;
 8003100:	e034      	b.n	800316c <ctlwizchip+0x1d0>
   #endif
#endif
//teddy 240122
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5500 || _WIZCHIP_ == W6100 || _WIZCHIP_ == W6300
      case CW_RESET_PHY:
         wizphy_reset();
 8003102:	f000 fa15 	bl	8003530 <wizphy_reset>
         break;
 8003106:	e031      	b.n	800316c <ctlwizchip+0x1d0>
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
 8003108:	6838      	ldr	r0, [r7, #0]
 800310a:	f000 fa38 	bl	800357e <wizphy_setphyconf>
         break;
 800310e:	e02d      	b.n	800316c <ctlwizchip+0x1d0>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
 8003110:	6838      	ldr	r0, [r7, #0]
 8003112:	f000 fa77 	bl	8003604 <wizphy_getphyconf>
         break;
 8003116:	e029      	b.n	800316c <ctlwizchip+0x1d0>
      case CW_GET_PHYSTATUS:
#if 1
    	  // 20231012 taylor
   #if _WIZCHIP_ == W5500
         wizphy_getphystat((wiz_PhyConf*)arg);
 8003118:	6838      	ldr	r0, [r7, #0]
 800311a:	f000 fadd 	bl	80036d8 <wizphy_getphystat>
   #endif
#else
         wizphy_getphystat((wiz_PhyConf*)arg);
#endif
         break;
 800311e:	e025      	b.n	800316c <ctlwizchip+0x1d0>
	  //teddy 240122
      #if _WIZCHIP_ == W6100 ||_WIZCHIP_ == W6300
        wizphy_setphypmode(*(uint8_t*)arg);
        break;
      #else
         return wizphy_setphypmode(*(uint8_t*)arg);
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	4618      	mov	r0, r3
 8003126:	f000 faf5 	bl	8003714 <wizphy_setphypmode>
 800312a:	4603      	mov	r3, r0
 800312c:	e01f      	b.n	800316e <ctlwizchip+0x1d2>
      #endif
   #endif
   //teddy 240122
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500 || _WIZCHIP_ == W6100 || _WIZCHIP_ == W6300
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
 800312e:	f000 f9e6 	bl	80034fe <wizphy_getphypmode>
 8003132:	4603      	mov	r3, r0
 8003134:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8003136:	7dfb      	ldrb	r3, [r7, #23]
 8003138:	2bff      	cmp	r3, #255	@ 0xff
 800313a:	d102      	bne.n	8003142 <ctlwizchip+0x1a6>
 800313c:	f04f 33ff 	mov.w	r3, #4294967295
 8003140:	e015      	b.n	800316e <ctlwizchip+0x1d2>
         *(uint8_t*)arg = tmp;
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	7dfa      	ldrb	r2, [r7, #23]
 8003146:	701a      	strb	r2, [r3, #0]
         break;
 8003148:	e010      	b.n	800316c <ctlwizchip+0x1d0>
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
 800314a:	f000 f9c2 	bl	80034d2 <wizphy_getphylink>
 800314e:	4603      	mov	r3, r0
 8003150:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8003152:	7dfb      	ldrb	r3, [r7, #23]
 8003154:	2bff      	cmp	r3, #255	@ 0xff
 8003156:	d102      	bne.n	800315e <ctlwizchip+0x1c2>
 8003158:	f04f 33ff 	mov.w	r3, #4294967295
 800315c:	e007      	b.n	800316e <ctlwizchip+0x1d2>
         *(uint8_t*)arg = tmp;
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	7dfa      	ldrb	r2, [r7, #23]
 8003162:	701a      	strb	r2, [r3, #0]
         break;
 8003164:	e002      	b.n	800316c <ctlwizchip+0x1d0>
   #endif      
      default:
         return -1;
 8003166:	f04f 33ff 	mov.w	r3, #4294967295
 800316a:	e000      	b.n	800316e <ctlwizchip+0x1d2>
   }
   return 0;
 800316c:	2300      	movs	r3, #0
}
 800316e:	4618      	mov	r0, r3
 8003170:	371c      	adds	r7, #28
 8003172:	46bd      	mov	sp, r7
 8003174:	bd90      	pop	{r4, r7, pc}
 8003176:	bf00      	nop
 8003178:	2000003c 	.word	0x2000003c

0800317c <ctlnetwork>:


int8_t ctlnetwork(ctlnetwork_type cntype, void* arg)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b082      	sub	sp, #8
 8003180:	af00      	add	r7, sp, #0
 8003182:	4603      	mov	r3, r0
 8003184:	6039      	str	r1, [r7, #0]
 8003186:	71fb      	strb	r3, [r7, #7]
   
   switch(cntype)
 8003188:	79fb      	ldrb	r3, [r7, #7]
 800318a:	2b05      	cmp	r3, #5
 800318c:	d82c      	bhi.n	80031e8 <ctlnetwork+0x6c>
 800318e:	a201      	add	r2, pc, #4	@ (adr r2, 8003194 <ctlnetwork+0x18>)
 8003190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003194:	080031ad 	.word	0x080031ad
 8003198:	080031b5 	.word	0x080031b5
 800319c:	080031bd 	.word	0x080031bd
 80031a0:	080031cb 	.word	0x080031cb
 80031a4:	080031d9 	.word	0x080031d9
 80031a8:	080031e1 	.word	0x080031e1
   {
      case CN_SET_NETINFO:
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 80031ac:	6838      	ldr	r0, [r7, #0]
 80031ae:	f000 fafb 	bl	80037a8 <wizchip_setnetinfo>
         break;
 80031b2:	e01c      	b.n	80031ee <ctlnetwork+0x72>
      case CN_GET_NETINFO:
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 80031b4:	6838      	ldr	r0, [r7, #0]
 80031b6:	f000 fb37 	bl	8003828 <wizchip_getnetinfo>
         break;
 80031ba:	e018      	b.n	80031ee <ctlnetwork+0x72>
      case CN_SET_NETMODE:
#if (_WIZCHIP_ == W5100 || _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5300 || _WIZCHIP_ == W5500)
         return wizchip_setnetmode(*(netmode_type*)arg);
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	781b      	ldrb	r3, [r3, #0]
 80031c0:	4618      	mov	r0, r3
 80031c2:	f000 fb71 	bl	80038a8 <wizchip_setnetmode>
 80031c6:	4603      	mov	r3, r0
 80031c8:	e012      	b.n	80031f0 <ctlnetwork+0x74>
		 //teddy 240122
      #elif ((_WIZCHIP_ == 6100)||(_WIZCHIP_ == W6300))
         wizchip_setnetmode(*(netmode_type*)arg);
      #endif
      case CN_GET_NETMODE:
         *(netmode_type*)arg = wizchip_getnetmode();
 80031ca:	f000 fb8f 	bl	80038ec <wizchip_getnetmode>
 80031ce:	4603      	mov	r3, r0
 80031d0:	461a      	mov	r2, r3
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	701a      	strb	r2, [r3, #0]
         break;
 80031d6:	e00a      	b.n	80031ee <ctlnetwork+0x72>
      case CN_SET_TIMEOUT:
         wizchip_settimeout((wiz_NetTimeout*)arg);
 80031d8:	6838      	ldr	r0, [r7, #0]
 80031da:	f000 fb8f 	bl	80038fc <wizchip_settimeout>
         break;
 80031de:	e006      	b.n	80031ee <ctlnetwork+0x72>
      case CN_GET_TIMEOUT:
         wizchip_gettimeout((wiz_NetTimeout*)arg);
 80031e0:	6838      	ldr	r0, [r7, #0]
 80031e2:	f000 fbac 	bl	800393e <wizchip_gettimeout>
         break;
 80031e6:	e002      	b.n	80031ee <ctlnetwork+0x72>
      case CN_GET_PREFER:
    	  *(uint8_t*)arg= getSLPSR();
         break;
#endif   
      default:
         return -1;
 80031e8:	f04f 33ff 	mov.w	r3, #4294967295
 80031ec:	e000      	b.n	80031f0 <ctlnetwork+0x74>
   }
   return 0;
 80031ee:	2300      	movs	r3, #0
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	3708      	adds	r7, #8
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}

080031f8 <wizchip_sw_reset>:

void wizchip_sw_reset(void)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b086      	sub	sp, #24
 80031fc:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 80031fe:	1d3b      	adds	r3, r7, #4
 8003200:	2206      	movs	r2, #6
 8003202:	4619      	mov	r1, r3
 8003204:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8003208:	f7fd f90c 	bl	8000424 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 800320c:	f107 0314 	add.w	r3, r7, #20
 8003210:	2204      	movs	r2, #4
 8003212:	4619      	mov	r1, r3
 8003214:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8003218:	f7fd f904 	bl	8000424 <WIZCHIP_READ_BUF>
 800321c:	f107 0310 	add.w	r3, r7, #16
 8003220:	2204      	movs	r2, #4
 8003222:	4619      	mov	r1, r3
 8003224:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8003228:	f7fd f8fc 	bl	8000424 <WIZCHIP_READ_BUF>
 800322c:	f107 030c 	add.w	r3, r7, #12
 8003230:	2204      	movs	r2, #4
 8003232:	4619      	mov	r1, r3
 8003234:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8003238:	f7fd f8f4 	bl	8000424 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 800323c:	2180      	movs	r1, #128	@ 0x80
 800323e:	2000      	movs	r0, #0
 8003240:	f7fd f8a2 	bl	8000388 <WIZCHIP_WRITE>
   getMR(); // for delay
 8003244:	2000      	movs	r0, #0
 8003246:	f7fd f853 	bl	80002f0 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 800324a:	1d3b      	adds	r3, r7, #4
 800324c:	2206      	movs	r2, #6
 800324e:	4619      	mov	r1, r3
 8003250:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8003254:	f7fd f946 	bl	80004e4 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8003258:	f107 0314 	add.w	r3, r7, #20
 800325c:	2204      	movs	r2, #4
 800325e:	4619      	mov	r1, r3
 8003260:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8003264:	f7fd f93e 	bl	80004e4 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8003268:	f107 0310 	add.w	r3, r7, #16
 800326c:	2204      	movs	r2, #4
 800326e:	4619      	mov	r1, r3
 8003270:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8003274:	f7fd f936 	bl	80004e4 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8003278:	f107 030c 	add.w	r3, r7, #12
 800327c:	2204      	movs	r2, #4
 800327e:	4619      	mov	r1, r3
 8003280:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8003284:	f7fd f92e 	bl	80004e4 <WIZCHIP_WRITE_BUF>
  setLLAR(lla);
  setGUAR(gua);
  if(islock & SYSR_CHPL) CHIPLOCK();
  if(islock & SYSR_NETL) NETLOCK();
#endif
}
 8003288:	bf00      	nop
 800328a:	3718      	adds	r7, #24
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}

08003290 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b084      	sub	sp, #16
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 800329a:	2300      	movs	r3, #0
 800329c:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 800329e:	f7ff ffab 	bl	80031f8 <wizchip_sw_reset>
   if(txsize)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d03b      	beq.n	8003320 <wizchip_init+0x90>
   {
      tmp = 0;
 80032a8:	2300      	movs	r3, #0
 80032aa:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80032ac:	2300      	movs	r3, #0
 80032ae:	73fb      	strb	r3, [r7, #15]
 80032b0:	e015      	b.n	80032de <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 80032b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	4413      	add	r3, r2
 80032ba:	781a      	ldrb	r2, [r3, #0]
 80032bc:	7bbb      	ldrb	r3, [r7, #14]
 80032be:	4413      	add	r3, r2
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#elif  _WIZCHIP_ == W6300
			if(tmp > 32) return -1;
#else
			if(tmp > 16) return -1;
 80032c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80032c8:	2b10      	cmp	r3, #16
 80032ca:	dd02      	ble.n	80032d2 <wizchip_init+0x42>
 80032cc:	f04f 33ff 	mov.w	r3, #4294967295
 80032d0:	e066      	b.n	80033a0 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80032d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	3301      	adds	r3, #1
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	73fb      	strb	r3, [r7, #15]
 80032de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032e2:	2b07      	cmp	r3, #7
 80032e4:	dde5      	ble.n	80032b2 <wizchip_init+0x22>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80032e6:	2300      	movs	r3, #0
 80032e8:	73fb      	strb	r3, [r7, #15]
 80032ea:	e015      	b.n	8003318 <wizchip_init+0x88>
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 80032ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	3301      	adds	r3, #1
 80032f4:	00db      	lsls	r3, r3, #3
 80032f6:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 80032fa:	4618      	mov	r0, r3
 80032fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003300:	687a      	ldr	r2, [r7, #4]
 8003302:	4413      	add	r3, r2
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	4619      	mov	r1, r3
 8003308:	f7fd f83e 	bl	8000388 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800330c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003310:	b2db      	uxtb	r3, r3
 8003312:	3301      	adds	r3, #1
 8003314:	b2db      	uxtb	r3, r3
 8003316:	73fb      	strb	r3, [r7, #15]
 8003318:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800331c:	2b07      	cmp	r3, #7
 800331e:	dde5      	ble.n	80032ec <wizchip_init+0x5c>
#endif
		}	
   }

   if(rxsize)
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d03b      	beq.n	800339e <wizchip_init+0x10e>
   {
      tmp = 0;
 8003326:	2300      	movs	r3, #0
 8003328:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800332a:	2300      	movs	r3, #0
 800332c:	73fb      	strb	r3, [r7, #15]
 800332e:	e015      	b.n	800335c <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 8003330:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003334:	683a      	ldr	r2, [r7, #0]
 8003336:	4413      	add	r3, r2
 8003338:	781a      	ldrb	r2, [r3, #0]
 800333a:	7bbb      	ldrb	r3, [r7, #14]
 800333c:	4413      	add	r3, r2
 800333e:	b2db      	uxtb	r3, r3
 8003340:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#elif  _WIZCHIP_ == W6300
			if(tmp > 32) return -1;
#else
			if(tmp > 16) return -1;
 8003342:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003346:	2b10      	cmp	r3, #16
 8003348:	dd02      	ble.n	8003350 <wizchip_init+0xc0>
 800334a:	f04f 33ff 	mov.w	r3, #4294967295
 800334e:	e027      	b.n	80033a0 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003350:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003354:	b2db      	uxtb	r3, r3
 8003356:	3301      	adds	r3, #1
 8003358:	b2db      	uxtb	r3, r3
 800335a:	73fb      	strb	r3, [r7, #15]
 800335c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003360:	2b07      	cmp	r3, #7
 8003362:	dde5      	ble.n	8003330 <wizchip_init+0xa0>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003364:	2300      	movs	r3, #0
 8003366:	73fb      	strb	r3, [r7, #15]
 8003368:	e015      	b.n	8003396 <wizchip_init+0x106>
#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 800336a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	3301      	adds	r3, #1
 8003372:	00db      	lsls	r3, r3, #3
 8003374:	f503 53f0 	add.w	r3, r3, #7680	@ 0x1e00
 8003378:	4618      	mov	r0, r3
 800337a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800337e:	683a      	ldr	r2, [r7, #0]
 8003380:	4413      	add	r3, r2
 8003382:	781b      	ldrb	r3, [r3, #0]
 8003384:	4619      	mov	r1, r3
 8003386:	f7fc ffff 	bl	8000388 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800338a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800338e:	b2db      	uxtb	r3, r3
 8003390:	3301      	adds	r3, #1
 8003392:	b2db      	uxtb	r3, r3
 8003394:	73fb      	strb	r3, [r7, #15]
 8003396:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800339a:	2b07      	cmp	r3, #7
 800339c:	dde5      	ble.n	800336a <wizchip_init+0xda>
#endif
		}
   }
   return 0;
 800339e:	2300      	movs	r3, #0
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	3710      	adds	r7, #16
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}

080033a8 <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b084      	sub	sp, #16
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	4603      	mov	r3, r0
 80033b0:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 80033b2:	88fb      	ldrh	r3, [r7, #6]
 80033b4:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 80033b6:	88fb      	ldrh	r3, [r7, #6]
 80033b8:	0a1b      	lsrs	r3, r3, #8
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	73bb      	strb	r3, [r7, #14]
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
#else
   setIR(ir);
 80033be:	7bfb      	ldrb	r3, [r7, #15]
 80033c0:	f023 030f 	bic.w	r3, r3, #15
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	4619      	mov	r1, r3
 80033c8:	f44f 50a8 	mov.w	r0, #5376	@ 0x1500
 80033cc:	f7fc ffdc 	bl	8000388 <WIZCHIP_WRITE>
//M20200227 : For clear
   //setSIR(sir);
   for(ir=0; ir<8; ir++){
 80033d0:	2300      	movs	r3, #0
 80033d2:	73fb      	strb	r3, [r7, #15]
 80033d4:	e014      	b.n	8003400 <wizchip_clrinterrupt+0x58>
       if(sir & (0x01 <<ir) ) setSn_IR(ir, 0xff);
 80033d6:	7bba      	ldrb	r2, [r7, #14]
 80033d8:	7bfb      	ldrb	r3, [r7, #15]
 80033da:	fa42 f303 	asr.w	r3, r2, r3
 80033de:	f003 0301 	and.w	r3, r3, #1
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d009      	beq.n	80033fa <wizchip_clrinterrupt+0x52>
 80033e6:	7bfb      	ldrb	r3, [r7, #15]
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	3301      	adds	r3, #1
 80033ec:	00db      	lsls	r3, r3, #3
 80033ee:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80033f2:	211f      	movs	r1, #31
 80033f4:	4618      	mov	r0, r3
 80033f6:	f7fc ffc7 	bl	8000388 <WIZCHIP_WRITE>
   for(ir=0; ir<8; ir++){
 80033fa:	7bfb      	ldrb	r3, [r7, #15]
 80033fc:	3301      	adds	r3, #1
 80033fe:	73fb      	strb	r3, [r7, #15]
 8003400:	7bfb      	ldrb	r3, [r7, #15]
 8003402:	2b07      	cmp	r3, #7
 8003404:	d9e7      	bls.n	80033d6 <wizchip_clrinterrupt+0x2e>
   }

#endif   
}
 8003406:	bf00      	nop
 8003408:	bf00      	nop
 800340a:	3710      	adds	r7, #16
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}

08003410 <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b082      	sub	sp, #8
 8003414:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 8003416:	2300      	movs	r3, #0
 8003418:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 800341a:	2300      	movs	r3, #0
 800341c:	71bb      	strb	r3, [r7, #6]
   uint32_t ret = 0;
 800341e:	2300      	movs	r3, #0
 8003420:	603b      	str	r3, [r7, #0]
#elif _WIZCHIP_  == W5300
   ret = getIR();
   ir = (uint8_t)(ret >> 8);
   sir = (uint8_t)ret;
#else
   ir  = getIR();
 8003422:	f44f 50a8 	mov.w	r0, #5376	@ 0x1500
 8003426:	f7fc ff63 	bl	80002f0 <WIZCHIP_READ>
 800342a:	4603      	mov	r3, r0
 800342c:	f023 030f 	bic.w	r3, r3, #15
 8003430:	71fb      	strb	r3, [r7, #7]
   sir = getSIR();
 8003432:	f44f 50b8 	mov.w	r0, #5888	@ 0x1700
 8003436:	f7fc ff5b 	bl	80002f0 <WIZCHIP_READ>
 800343a:	4603      	mov	r3, r0
 800343c:	71bb      	strb	r3, [r7, #6]
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 800343e:	79bb      	ldrb	r3, [r7, #6]
 8003440:	603b      	str	r3, [r7, #0]
  ret = (ret << 8) + ir;
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	021a      	lsls	r2, r3, #8
 8003446:	79fb      	ldrb	r3, [r7, #7]
 8003448:	4413      	add	r3, r2
 800344a:	603b      	str	r3, [r7, #0]
  //teddy 240122
#if _WIZCHIP_ == W6100 || _WIZCHIP_ == W6300
  ret = (((uint32_t)getSLIR())<<16) | ret;
#endif

  return (intr_kind)ret;
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	b29b      	uxth	r3, r3
}
 8003450:	4618      	mov	r0, r3
 8003452:	3708      	adds	r7, #8
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}

08003458 <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b084      	sub	sp, #16
 800345c:	af00      	add	r7, sp, #0
 800345e:	4603      	mov	r3, r0
 8003460:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 8003462:	88fb      	ldrh	r3, [r7, #6]
 8003464:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 8003466:	88fb      	ldrh	r3, [r7, #6]
 8003468:	0a1b      	lsrs	r3, r3, #8
 800346a:	b29b      	uxth	r3, r3
 800346c:	73bb      	strb	r3, [r7, #14]
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
#else
   setIMR(imr);
 800346e:	7bfb      	ldrb	r3, [r7, #15]
 8003470:	4619      	mov	r1, r3
 8003472:	f44f 50b0 	mov.w	r0, #5632	@ 0x1600
 8003476:	f7fc ff87 	bl	8000388 <WIZCHIP_WRITE>
   setSIMR(simr);
 800347a:	7bbb      	ldrb	r3, [r7, #14]
 800347c:	4619      	mov	r1, r3
 800347e:	f44f 50c0 	mov.w	r0, #6144	@ 0x1800
 8003482:	f7fc ff81 	bl	8000388 <WIZCHIP_WRITE>
#if _WIZCHIP_ == W6100 || _WIZCHIP_ == W6300
   uint8_t slimr = (uint8_t)((uint32_t)intr >> 16);
   setSLIMR(slimr);
#endif
#endif   
}
 8003486:	bf00      	nop
 8003488:	3710      	adds	r7, #16
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}

0800348e <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 800348e:	b580      	push	{r7, lr}
 8003490:	b082      	sub	sp, #8
 8003492:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 8003494:	2300      	movs	r3, #0
 8003496:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 8003498:	2300      	movs	r3, #0
 800349a:	71bb      	strb	r3, [r7, #6]
   uint32_t ret = 0;
 800349c:	2300      	movs	r3, #0
 800349e:	603b      	str	r3, [r7, #0]
#elif _WIZCHIP_ == W5300
   ret = getIMR();
   imr = (uint8_t)(ret >> 8);
   simr = (uint8_t)ret;
#else
   imr  = getIMR();
 80034a0:	f44f 50b0 	mov.w	r0, #5632	@ 0x1600
 80034a4:	f7fc ff24 	bl	80002f0 <WIZCHIP_READ>
 80034a8:	4603      	mov	r3, r0
 80034aa:	71fb      	strb	r3, [r7, #7]
   simr = getSIMR();
 80034ac:	f44f 50c0 	mov.w	r0, #6144	@ 0x1800
 80034b0:	f7fc ff1e 	bl	80002f0 <WIZCHIP_READ>
 80034b4:	4603      	mov	r3, r0
 80034b6:	71bb      	strb	r3, [r7, #6]
   imr &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 80034b8:	79bb      	ldrb	r3, [r7, #6]
 80034ba:	603b      	str	r3, [r7, #0]
  ret = (ret << 8) + imr;
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	021a      	lsls	r2, r3, #8
 80034c0:	79fb      	ldrb	r3, [r7, #7]
 80034c2:	4413      	add	r3, r2
 80034c4:	603b      	str	r3, [r7, #0]
  //teddy 240122
#if _WIZCHIP_ == W6100 || _WIZCHIP_ == W6300
  ret = (((uint32_t)getSLIMR())<<16) | ret;
#endif
  
  return (intr_kind)ret;
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	b29b      	uxth	r3, r3
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3708      	adds	r7, #8
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}

080034d2 <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 80034d2:	b580      	push	{r7, lr}
 80034d4:	b082      	sub	sp, #8
 80034d6:	af00      	add	r7, sp, #0
   int8_t tmp = PHY_LINK_OFF;
 80034d8:	2300      	movs	r3, #0
 80034da:	71fb      	strb	r3, [r7, #7]
	   tmp = PHY_LINK_ON;
#elif   _WIZCHIP_ == W5200
   if(getPHYSTATUS() & PHYSTATUS_LINK)
      tmp = PHY_LINK_ON;
#elif _WIZCHIP_ == W5500
   if(getPHYCFGR() & PHYCFGR_LNK_ON)
 80034dc:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 80034e0:	f7fc ff06 	bl	80002f0 <WIZCHIP_READ>
 80034e4:	4603      	mov	r3, r0
 80034e6:	f003 0301 	and.w	r3, r3, #1
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d001      	beq.n	80034f2 <wizphy_getphylink+0x20>
      tmp = PHY_LINK_ON;
 80034ee:	2301      	movs	r3, #1
 80034f0:	71fb      	strb	r3, [r7, #7]
#endif

#else
   tmp = -1;
#endif
   return tmp;
 80034f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3708      	adds	r7, #8
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}

080034fe <wizphy_getphypmode>:

#if _WIZCHIP_ > W5100

int8_t wizphy_getphypmode(void)
{
 80034fe:	b580      	push	{r7, lr}
 8003500:	b082      	sub	sp, #8
 8003502:	af00      	add	r7, sp, #0
   int8_t tmp = 0;
 8003504:	2300      	movs	r3, #0
 8003506:	71fb      	strb	r3, [r7, #7]
      if(getPHYSTATUS() & PHYSTATUS_POWERDOWN)
         tmp = PHY_POWER_DOWN;
      else          
         tmp = PHY_POWER_NORM;
   #elif _WIZCHIP_ == 5500
      if((getPHYCFGR() & PHYCFGR_OPMDC_ALLA) == PHYCFGR_OPMDC_PDOWN)
 8003508:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 800350c:	f7fc fef0 	bl	80002f0 <WIZCHIP_READ>
 8003510:	4603      	mov	r3, r0
 8003512:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003516:	2b30      	cmp	r3, #48	@ 0x30
 8003518:	d102      	bne.n	8003520 <wizphy_getphypmode+0x22>
         tmp = PHY_POWER_DOWN;
 800351a:	2301      	movs	r3, #1
 800351c:	71fb      	strb	r3, [r7, #7]
 800351e:	e001      	b.n	8003524 <wizphy_getphypmode+0x26>
      else 
         tmp = PHY_POWER_NORM;
 8003520:	2300      	movs	r3, #0
 8003522:	71fb      	strb	r3, [r7, #7]
   #endif   
      return PHY_POWER_NORM;
   #else
      tmp = -1;
   #endif
   return tmp;
 8003524:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8003528:	4618      	mov	r0, r3
 800352a:	3708      	adds	r7, #8
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}

08003530 <wizphy_reset>:
   return -1;
}

#elif _WIZCHIP_ == W5500
void wizphy_reset(void)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b082      	sub	sp, #8
 8003534:	af00      	add	r7, sp, #0
   uint8_t tmp = getPHYCFGR();
 8003536:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 800353a:	f7fc fed9 	bl	80002f0 <WIZCHIP_READ>
 800353e:	4603      	mov	r3, r0
 8003540:	71fb      	strb	r3, [r7, #7]
   tmp &= PHYCFGR_RST;
 8003542:	79fb      	ldrb	r3, [r7, #7]
 8003544:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003548:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 800354a:	79fb      	ldrb	r3, [r7, #7]
 800354c:	4619      	mov	r1, r3
 800354e:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8003552:	f7fc ff19 	bl	8000388 <WIZCHIP_WRITE>
   tmp = getPHYCFGR();
 8003556:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 800355a:	f7fc fec9 	bl	80002f0 <WIZCHIP_READ>
 800355e:	4603      	mov	r3, r0
 8003560:	71fb      	strb	r3, [r7, #7]
   tmp |= ~PHYCFGR_RST;
 8003562:	79fb      	ldrb	r3, [r7, #7]
 8003564:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003568:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 800356a:	79fb      	ldrb	r3, [r7, #7]
 800356c:	4619      	mov	r1, r3
 800356e:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8003572:	f7fc ff09 	bl	8000388 <WIZCHIP_WRITE>
}
 8003576:	bf00      	nop
 8003578:	3708      	adds	r7, #8
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}

0800357e <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 800357e:	b580      	push	{r7, lr}
 8003580:	b084      	sub	sp, #16
 8003582:	af00      	add	r7, sp, #0
 8003584:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8003586:	2300      	movs	r3, #0
 8003588:	73fb      	strb	r3, [r7, #15]
   if(phyconf->by == PHY_CONFBY_SW)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	781b      	ldrb	r3, [r3, #0]
 800358e:	2b01      	cmp	r3, #1
 8003590:	d104      	bne.n	800359c <wizphy_setphyconf+0x1e>
      tmp |= PHYCFGR_OPMD;
 8003592:	7bfb      	ldrb	r3, [r7, #15]
 8003594:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003598:	73fb      	strb	r3, [r7, #15]
 800359a:	e003      	b.n	80035a4 <wizphy_setphyconf+0x26>
   else
      tmp &= ~PHYCFGR_OPMD;
 800359c:	7bfb      	ldrb	r3, [r7, #15]
 800359e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80035a2:	73fb      	strb	r3, [r7, #15]
   if(phyconf->mode == PHY_MODE_AUTONEGO)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	785b      	ldrb	r3, [r3, #1]
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d104      	bne.n	80035b6 <wizphy_setphyconf+0x38>
      tmp |= PHYCFGR_OPMDC_ALLA;
 80035ac:	7bfb      	ldrb	r3, [r7, #15]
 80035ae:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 80035b2:	73fb      	strb	r3, [r7, #15]
 80035b4:	e019      	b.n	80035ea <wizphy_setphyconf+0x6c>
   else
   {
      if(phyconf->duplex == PHY_DUPLEX_FULL)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	78db      	ldrb	r3, [r3, #3]
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d10d      	bne.n	80035da <wizphy_setphyconf+0x5c>
      {
         if(phyconf->speed == PHY_SPEED_100)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	789b      	ldrb	r3, [r3, #2]
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d104      	bne.n	80035d0 <wizphy_setphyconf+0x52>
            tmp |= PHYCFGR_OPMDC_100F;
 80035c6:	7bfb      	ldrb	r3, [r7, #15]
 80035c8:	f043 0318 	orr.w	r3, r3, #24
 80035cc:	73fb      	strb	r3, [r7, #15]
 80035ce:	e00c      	b.n	80035ea <wizphy_setphyconf+0x6c>
         else
            tmp |= PHYCFGR_OPMDC_10F;
 80035d0:	7bfb      	ldrb	r3, [r7, #15]
 80035d2:	f043 0308 	orr.w	r3, r3, #8
 80035d6:	73fb      	strb	r3, [r7, #15]
 80035d8:	e007      	b.n	80035ea <wizphy_setphyconf+0x6c>
      }   
      else
      {
         if(phyconf->speed == PHY_SPEED_100)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	789b      	ldrb	r3, [r3, #2]
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d103      	bne.n	80035ea <wizphy_setphyconf+0x6c>
            tmp |= PHYCFGR_OPMDC_100H;
 80035e2:	7bfb      	ldrb	r3, [r7, #15]
 80035e4:	f043 0310 	orr.w	r3, r3, #16
 80035e8:	73fb      	strb	r3, [r7, #15]
         else
            tmp |= PHYCFGR_OPMDC_10H;
      }
   }
   setPHYCFGR(tmp);
 80035ea:	7bfb      	ldrb	r3, [r7, #15]
 80035ec:	4619      	mov	r1, r3
 80035ee:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 80035f2:	f7fc fec9 	bl	8000388 <WIZCHIP_WRITE>
   wizphy_reset();
 80035f6:	f7ff ff9b 	bl	8003530 <wizphy_reset>
}
 80035fa:	bf00      	nop
 80035fc:	3710      	adds	r7, #16
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}
	...

08003604 <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b084      	sub	sp, #16
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 800360c:	2300      	movs	r3, #0
 800360e:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 8003610:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8003614:	f7fc fe6c 	bl	80002f0 <WIZCHIP_READ>
 8003618:	4603      	mov	r3, r0
 800361a:	73fb      	strb	r3, [r7, #15]
   phyconf->by   = (tmp & PHYCFGR_OPMD) ? PHY_CONFBY_SW : PHY_CONFBY_HW;
 800361c:	7bfb      	ldrb	r3, [r7, #15]
 800361e:	119b      	asrs	r3, r3, #6
 8003620:	b2db      	uxtb	r3, r3
 8003622:	f003 0301 	and.w	r3, r3, #1
 8003626:	b2da      	uxtb	r2, r3
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	701a      	strb	r2, [r3, #0]
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 800362c:	7bfb      	ldrb	r3, [r7, #15]
 800362e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003632:	2b20      	cmp	r3, #32
 8003634:	d001      	beq.n	800363a <wizphy_getphyconf+0x36>
 8003636:	2b38      	cmp	r3, #56	@ 0x38
 8003638:	d103      	bne.n	8003642 <wizphy_getphyconf+0x3e>
   {
      case PHYCFGR_OPMDC_ALLA:
      case PHYCFGR_OPMDC_100FA: 
         phyconf->mode = PHY_MODE_AUTONEGO;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2201      	movs	r2, #1
 800363e:	705a      	strb	r2, [r3, #1]
         break;
 8003640:	e003      	b.n	800364a <wizphy_getphyconf+0x46>
      default:
         phyconf->mode = PHY_MODE_MANUAL;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2200      	movs	r2, #0
 8003646:	705a      	strb	r2, [r3, #1]
         break;
 8003648:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 800364a:	7bfb      	ldrb	r3, [r7, #15]
 800364c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003650:	3b10      	subs	r3, #16
 8003652:	2b10      	cmp	r3, #16
 8003654:	bf8c      	ite	hi
 8003656:	2201      	movhi	r2, #1
 8003658:	2200      	movls	r2, #0
 800365a:	b2d2      	uxtb	r2, r2
 800365c:	2a00      	cmp	r2, #0
 800365e:	d10f      	bne.n	8003680 <wizphy_getphyconf+0x7c>
 8003660:	4a1b      	ldr	r2, [pc, #108]	@ (80036d0 <wizphy_getphyconf+0xcc>)
 8003662:	fa22 f303 	lsr.w	r3, r2, r3
 8003666:	f003 0301 	and.w	r3, r3, #1
 800366a:	2b00      	cmp	r3, #0
 800366c:	bf14      	ite	ne
 800366e:	2301      	movne	r3, #1
 8003670:	2300      	moveq	r3, #0
 8003672:	b2db      	uxtb	r3, r3
 8003674:	2b00      	cmp	r3, #0
 8003676:	d003      	beq.n	8003680 <wizphy_getphyconf+0x7c>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_100H:
         phyconf->speed = PHY_SPEED_100;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2201      	movs	r2, #1
 800367c:	709a      	strb	r2, [r3, #2]
         break;
 800367e:	e003      	b.n	8003688 <wizphy_getphyconf+0x84>
      default:
         phyconf->speed = PHY_SPEED_10;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2200      	movs	r2, #0
 8003684:	709a      	strb	r2, [r3, #2]
         break;
 8003686:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8003688:	7bfb      	ldrb	r3, [r7, #15]
 800368a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800368e:	3b08      	subs	r3, #8
 8003690:	2b18      	cmp	r3, #24
 8003692:	bf8c      	ite	hi
 8003694:	2201      	movhi	r2, #1
 8003696:	2200      	movls	r2, #0
 8003698:	b2d2      	uxtb	r2, r2
 800369a:	2a00      	cmp	r2, #0
 800369c:	d10f      	bne.n	80036be <wizphy_getphyconf+0xba>
 800369e:	4a0d      	ldr	r2, [pc, #52]	@ (80036d4 <wizphy_getphyconf+0xd0>)
 80036a0:	fa22 f303 	lsr.w	r3, r2, r3
 80036a4:	f003 0301 	and.w	r3, r3, #1
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	bf14      	ite	ne
 80036ac:	2301      	movne	r3, #1
 80036ae:	2300      	moveq	r3, #0
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d003      	beq.n	80036be <wizphy_getphyconf+0xba>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_10F:
         phyconf->duplex = PHY_DUPLEX_FULL;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2201      	movs	r2, #1
 80036ba:	70da      	strb	r2, [r3, #3]
         break;
 80036bc:	e003      	b.n	80036c6 <wizphy_getphyconf+0xc2>
      default:
         phyconf->duplex = PHY_DUPLEX_HALF;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	70da      	strb	r2, [r3, #3]
         break;
 80036c4:	bf00      	nop
   }
}
 80036c6:	bf00      	nop
 80036c8:	3710      	adds	r7, #16
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	bf00      	nop
 80036d0:	00010101 	.word	0x00010101
 80036d4:	01010001 	.word	0x01010001

080036d8 <wizphy_getphystat>:

void wizphy_getphystat(wiz_PhyConf* phyconf)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b084      	sub	sp, #16
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
   uint8_t tmp = getPHYCFGR();
 80036e0:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 80036e4:	f7fc fe04 	bl	80002f0 <WIZCHIP_READ>
 80036e8:	4603      	mov	r3, r0
 80036ea:	73fb      	strb	r3, [r7, #15]
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
 80036ec:	7bfb      	ldrb	r3, [r7, #15]
 80036ee:	109b      	asrs	r3, r3, #2
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	f003 0301 	and.w	r3, r3, #1
 80036f6:	b2da      	uxtb	r2, r3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	70da      	strb	r2, [r3, #3]
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
 80036fc:	7bfb      	ldrb	r3, [r7, #15]
 80036fe:	105b      	asrs	r3, r3, #1
 8003700:	b2db      	uxtb	r3, r3
 8003702:	f003 0301 	and.w	r3, r3, #1
 8003706:	b2da      	uxtb	r2, r3
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	709a      	strb	r2, [r3, #2]
}
 800370c:	bf00      	nop
 800370e:	3710      	adds	r7, #16
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}

08003714 <wizphy_setphypmode>:

int8_t wizphy_setphypmode(uint8_t pmode)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b084      	sub	sp, #16
 8003718:	af00      	add	r7, sp, #0
 800371a:	4603      	mov	r3, r0
 800371c:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 800371e:	2300      	movs	r3, #0
 8003720:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 8003722:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8003726:	f7fc fde3 	bl	80002f0 <WIZCHIP_READ>
 800372a:	4603      	mov	r3, r0
 800372c:	73fb      	strb	r3, [r7, #15]
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
 800372e:	7bfb      	ldrb	r3, [r7, #15]
 8003730:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003734:	2b00      	cmp	r3, #0
 8003736:	d102      	bne.n	800373e <wizphy_setphypmode+0x2a>
 8003738:	f04f 33ff 	mov.w	r3, #4294967295
 800373c:	e030      	b.n	80037a0 <wizphy_setphypmode+0x8c>
   tmp &= ~PHYCFGR_OPMDC_ALLA;         
 800373e:	7bfb      	ldrb	r3, [r7, #15]
 8003740:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 8003744:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 8003746:	79fb      	ldrb	r3, [r7, #7]
 8003748:	2b01      	cmp	r3, #1
 800374a:	d104      	bne.n	8003756 <wizphy_setphypmode+0x42>
      tmp |= PHYCFGR_OPMDC_PDOWN;
 800374c:	7bfb      	ldrb	r3, [r7, #15]
 800374e:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8003752:	73fb      	strb	r3, [r7, #15]
 8003754:	e003      	b.n	800375e <wizphy_setphypmode+0x4a>
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
 8003756:	7bfb      	ldrb	r3, [r7, #15]
 8003758:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 800375c:	73fb      	strb	r3, [r7, #15]
   setPHYCFGR(tmp);
 800375e:	7bfb      	ldrb	r3, [r7, #15]
 8003760:	4619      	mov	r1, r3
 8003762:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8003766:	f7fc fe0f 	bl	8000388 <WIZCHIP_WRITE>
   wizphy_reset();
 800376a:	f7ff fee1 	bl	8003530 <wizphy_reset>
   tmp = getPHYCFGR();
 800376e:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8003772:	f7fc fdbd 	bl	80002f0 <WIZCHIP_READ>
 8003776:	4603      	mov	r3, r0
 8003778:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 800377a:	79fb      	ldrb	r3, [r7, #7]
 800377c:	2b01      	cmp	r3, #1
 800377e:	d106      	bne.n	800378e <wizphy_setphypmode+0x7a>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
 8003780:	7bfb      	ldrb	r3, [r7, #15]
 8003782:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003786:	2b00      	cmp	r3, #0
 8003788:	d008      	beq.n	800379c <wizphy_setphypmode+0x88>
 800378a:	2300      	movs	r3, #0
 800378c:	e008      	b.n	80037a0 <wizphy_setphypmode+0x8c>
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
 800378e:	7bfb      	ldrb	r3, [r7, #15]
 8003790:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003794:	2b00      	cmp	r3, #0
 8003796:	d001      	beq.n	800379c <wizphy_setphypmode+0x88>
 8003798:	2300      	movs	r3, #0
 800379a:	e001      	b.n	80037a0 <wizphy_setphypmode+0x8c>
   }
   return -1;
 800379c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3710      	adds	r7, #16
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}

080037a8 <wizchip_setnetinfo>:

#endif

#if (_WIZCHIP_ == W5100 || _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5300 || _WIZCHIP_ == W5500)
void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b082      	sub	sp, #8
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2206      	movs	r2, #6
 80037b4:	4619      	mov	r1, r3
 80037b6:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 80037ba:	f7fc fe93 	bl	80004e4 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	330e      	adds	r3, #14
 80037c2:	2204      	movs	r2, #4
 80037c4:	4619      	mov	r1, r3
 80037c6:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80037ca:	f7fc fe8b 	bl	80004e4 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	330a      	adds	r3, #10
 80037d2:	2204      	movs	r2, #4
 80037d4:	4619      	mov	r1, r3
 80037d6:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 80037da:	f7fc fe83 	bl	80004e4 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	3306      	adds	r3, #6
 80037e2:	2204      	movs	r2, #4
 80037e4:	4619      	mov	r1, r3
 80037e6:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 80037ea:	f7fc fe7b 	bl	80004e4 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	7c9a      	ldrb	r2, [r3, #18]
 80037f2:	4b0b      	ldr	r3, [pc, #44]	@ (8003820 <wizchip_setnetinfo+0x78>)
 80037f4:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	7cda      	ldrb	r2, [r3, #19]
 80037fa:	4b09      	ldr	r3, [pc, #36]	@ (8003820 <wizchip_setnetinfo+0x78>)
 80037fc:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	7d1a      	ldrb	r2, [r3, #20]
 8003802:	4b07      	ldr	r3, [pc, #28]	@ (8003820 <wizchip_setnetinfo+0x78>)
 8003804:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	7d5a      	ldrb	r2, [r3, #21]
 800380a:	4b05      	ldr	r3, [pc, #20]	@ (8003820 <wizchip_setnetinfo+0x78>)
 800380c:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	7d9a      	ldrb	r2, [r3, #22]
 8003812:	4b04      	ldr	r3, [pc, #16]	@ (8003824 <wizchip_setnetinfo+0x7c>)
 8003814:	701a      	strb	r2, [r3, #0]
}
 8003816:	bf00      	nop
 8003818:	3708      	adds	r7, #8
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop
 8003820:	20001720 	.word	0x20001720
 8003824:	20001724 	.word	0x20001724

08003828 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b082      	sub	sp, #8
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2206      	movs	r2, #6
 8003834:	4619      	mov	r1, r3
 8003836:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 800383a:	f7fc fdf3 	bl	8000424 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	330e      	adds	r3, #14
 8003842:	2204      	movs	r2, #4
 8003844:	4619      	mov	r1, r3
 8003846:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800384a:	f7fc fdeb 	bl	8000424 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	330a      	adds	r3, #10
 8003852:	2204      	movs	r2, #4
 8003854:	4619      	mov	r1, r3
 8003856:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 800385a:	f7fc fde3 	bl	8000424 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	3306      	adds	r3, #6
 8003862:	2204      	movs	r2, #4
 8003864:	4619      	mov	r1, r3
 8003866:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 800386a:	f7fc fddb 	bl	8000424 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 800386e:	4b0c      	ldr	r3, [pc, #48]	@ (80038a0 <wizchip_getnetinfo+0x78>)
 8003870:	781a      	ldrb	r2, [r3, #0]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 8003876:	4b0a      	ldr	r3, [pc, #40]	@ (80038a0 <wizchip_getnetinfo+0x78>)
 8003878:	785a      	ldrb	r2, [r3, #1]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 800387e:	4b08      	ldr	r3, [pc, #32]	@ (80038a0 <wizchip_getnetinfo+0x78>)
 8003880:	789a      	ldrb	r2, [r3, #2]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 8003886:	4b06      	ldr	r3, [pc, #24]	@ (80038a0 <wizchip_getnetinfo+0x78>)
 8003888:	78da      	ldrb	r2, [r3, #3]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 800388e:	4b05      	ldr	r3, [pc, #20]	@ (80038a4 <wizchip_getnetinfo+0x7c>)
 8003890:	781a      	ldrb	r2, [r3, #0]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	759a      	strb	r2, [r3, #22]
}
 8003896:	bf00      	nop
 8003898:	3708      	adds	r7, #8
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	20001720 	.word	0x20001720
 80038a4:	20001724 	.word	0x20001724

080038a8 <wizchip_setnetmode>:

int8_t wizchip_setnetmode(netmode_type netmode)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b084      	sub	sp, #16
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	4603      	mov	r3, r0
 80038b0:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 80038b2:	2300      	movs	r3, #0
 80038b4:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ != W5500
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
#else
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
 80038b6:	79fb      	ldrb	r3, [r7, #7]
 80038b8:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d002      	beq.n	80038c6 <wizchip_setnetmode+0x1e>
 80038c0:	f04f 33ff 	mov.w	r3, #4294967295
 80038c4:	e00e      	b.n	80038e4 <wizchip_setnetmode+0x3c>
#endif      
   tmp = getMR();
 80038c6:	2000      	movs	r0, #0
 80038c8:	f7fc fd12 	bl	80002f0 <WIZCHIP_READ>
 80038cc:	4603      	mov	r3, r0
 80038ce:	73fb      	strb	r3, [r7, #15]
   tmp |= (uint8_t)netmode;
 80038d0:	7bfa      	ldrb	r2, [r7, #15]
 80038d2:	79fb      	ldrb	r3, [r7, #7]
 80038d4:	4313      	orrs	r3, r2
 80038d6:	73fb      	strb	r3, [r7, #15]
   setMR(tmp);
 80038d8:	7bfb      	ldrb	r3, [r7, #15]
 80038da:	4619      	mov	r1, r3
 80038dc:	2000      	movs	r0, #0
 80038de:	f7fc fd53 	bl	8000388 <WIZCHIP_WRITE>
   return 0;
 80038e2:	2300      	movs	r3, #0
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	3710      	adds	r7, #16
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}

080038ec <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	af00      	add	r7, sp, #0
   return (netmode_type) getMR();
 80038f0:	2000      	movs	r0, #0
 80038f2:	f7fc fcfd 	bl	80002f0 <WIZCHIP_READ>
 80038f6:	4603      	mov	r3, r0
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	bd80      	pop	{r7, pc}

080038fc <wizchip_settimeout>:

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b082      	sub	sp, #8
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
   setRCR(nettime->retry_cnt);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	781b      	ldrb	r3, [r3, #0]
 8003908:	4619      	mov	r1, r3
 800390a:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 800390e:	f7fc fd3b 	bl	8000388 <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	885b      	ldrh	r3, [r3, #2]
 8003916:	0a1b      	lsrs	r3, r3, #8
 8003918:	b29b      	uxth	r3, r3
 800391a:	b2db      	uxtb	r3, r3
 800391c:	4619      	mov	r1, r3
 800391e:	f44f 50c8 	mov.w	r0, #6400	@ 0x1900
 8003922:	f7fc fd31 	bl	8000388 <WIZCHIP_WRITE>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	885b      	ldrh	r3, [r3, #2]
 800392a:	b2db      	uxtb	r3, r3
 800392c:	4619      	mov	r1, r3
 800392e:	f44f 50d0 	mov.w	r0, #6656	@ 0x1a00
 8003932:	f7fc fd29 	bl	8000388 <WIZCHIP_WRITE>
}
 8003936:	bf00      	nop
 8003938:	3708      	adds	r7, #8
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}

0800393e <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
 800393e:	b590      	push	{r4, r7, lr}
 8003940:	b083      	sub	sp, #12
 8003942:	af00      	add	r7, sp, #0
 8003944:	6078      	str	r0, [r7, #4]
   nettime->retry_cnt = getRCR();
 8003946:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 800394a:	f7fc fcd1 	bl	80002f0 <WIZCHIP_READ>
 800394e:	4603      	mov	r3, r0
 8003950:	461a      	mov	r2, r3
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	701a      	strb	r2, [r3, #0]
   nettime->time_100us = getRTR();
 8003956:	f44f 50c8 	mov.w	r0, #6400	@ 0x1900
 800395a:	f7fc fcc9 	bl	80002f0 <WIZCHIP_READ>
 800395e:	4603      	mov	r3, r0
 8003960:	021b      	lsls	r3, r3, #8
 8003962:	b29c      	uxth	r4, r3
 8003964:	f44f 50d0 	mov.w	r0, #6656	@ 0x1a00
 8003968:	f7fc fcc2 	bl	80002f0 <WIZCHIP_READ>
 800396c:	4603      	mov	r3, r0
 800396e:	4423      	add	r3, r4
 8003970:	b29a      	uxth	r2, r3
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	805a      	strh	r2, [r3, #2]
}
 8003976:	bf00      	nop
 8003978:	370c      	adds	r7, #12
 800397a:	46bd      	mov	sp, r7
 800397c:	bd90      	pop	{r4, r7, pc}
	...

08003980 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003980:	480d      	ldr	r0, [pc, #52]	@ (80039b8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003982:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003984:	f7ff f9c8 	bl	8002d18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003988:	480c      	ldr	r0, [pc, #48]	@ (80039bc <LoopForever+0x6>)
  ldr r1, =_edata
 800398a:	490d      	ldr	r1, [pc, #52]	@ (80039c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800398c:	4a0d      	ldr	r2, [pc, #52]	@ (80039c4 <LoopForever+0xe>)
  movs r3, #0
 800398e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003990:	e002      	b.n	8003998 <LoopCopyDataInit>

08003992 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003992:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003994:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003996:	3304      	adds	r3, #4

08003998 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003998:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800399a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800399c:	d3f9      	bcc.n	8003992 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800399e:	4a0a      	ldr	r2, [pc, #40]	@ (80039c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80039a0:	4c0a      	ldr	r4, [pc, #40]	@ (80039cc <LoopForever+0x16>)
  movs r3, #0
 80039a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80039a4:	e001      	b.n	80039aa <LoopFillZerobss>

080039a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80039a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80039a8:	3204      	adds	r2, #4

080039aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80039aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80039ac:	d3fb      	bcc.n	80039a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80039ae:	f002 fbd9 	bl	8006164 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80039b2:	f7fe facf 	bl	8001f54 <main>

080039b6 <LoopForever>:

LoopForever:
    b LoopForever
 80039b6:	e7fe      	b.n	80039b6 <LoopForever>
  ldr   r0, =_estack
 80039b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80039bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80039c0:	200000cc 	.word	0x200000cc
  ldr r2, =_sidata
 80039c4:	080084e4 	.word	0x080084e4
  ldr r2, =_sbss
 80039c8:	200000cc 	.word	0x200000cc
  ldr r4, =_ebss
 80039cc:	20001878 	.word	0x20001878

080039d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80039d0:	e7fe      	b.n	80039d0 <ADC1_2_IRQHandler>

080039d2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80039d2:	b580      	push	{r7, lr}
 80039d4:	b082      	sub	sp, #8
 80039d6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80039d8:	2300      	movs	r3, #0
 80039da:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80039dc:	2003      	movs	r0, #3
 80039de:	f000 f93d 	bl	8003c5c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80039e2:	200f      	movs	r0, #15
 80039e4:	f000 f80e 	bl	8003a04 <HAL_InitTick>
 80039e8:	4603      	mov	r3, r0
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d002      	beq.n	80039f4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	71fb      	strb	r3, [r7, #7]
 80039f2:	e001      	b.n	80039f8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80039f4:	f7ff f834 	bl	8002a60 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80039f8:	79fb      	ldrb	r3, [r7, #7]

}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3708      	adds	r7, #8
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
	...

08003a04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b084      	sub	sp, #16
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003a10:	4b16      	ldr	r3, [pc, #88]	@ (8003a6c <HAL_InitTick+0x68>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d022      	beq.n	8003a5e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003a18:	4b15      	ldr	r3, [pc, #84]	@ (8003a70 <HAL_InitTick+0x6c>)
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	4b13      	ldr	r3, [pc, #76]	@ (8003a6c <HAL_InitTick+0x68>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003a24:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a28:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f000 f93a 	bl	8003ca6 <HAL_SYSTICK_Config>
 8003a32:	4603      	mov	r3, r0
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d10f      	bne.n	8003a58 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2b0f      	cmp	r3, #15
 8003a3c:	d809      	bhi.n	8003a52 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003a3e:	2200      	movs	r2, #0
 8003a40:	6879      	ldr	r1, [r7, #4]
 8003a42:	f04f 30ff 	mov.w	r0, #4294967295
 8003a46:	f000 f914 	bl	8003c72 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003a4a:	4a0a      	ldr	r2, [pc, #40]	@ (8003a74 <HAL_InitTick+0x70>)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6013      	str	r3, [r2, #0]
 8003a50:	e007      	b.n	8003a62 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	73fb      	strb	r3, [r7, #15]
 8003a56:	e004      	b.n	8003a62 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	73fb      	strb	r3, [r7, #15]
 8003a5c:	e001      	b.n	8003a62 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003a62:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	3710      	adds	r7, #16
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}
 8003a6c:	2000006c 	.word	0x2000006c
 8003a70:	20000038 	.word	0x20000038
 8003a74:	20000068 	.word	0x20000068

08003a78 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003a7c:	4b05      	ldr	r3, [pc, #20]	@ (8003a94 <HAL_IncTick+0x1c>)
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	4b05      	ldr	r3, [pc, #20]	@ (8003a98 <HAL_IncTick+0x20>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4413      	add	r3, r2
 8003a86:	4a03      	ldr	r2, [pc, #12]	@ (8003a94 <HAL_IncTick+0x1c>)
 8003a88:	6013      	str	r3, [r2, #0]
}
 8003a8a:	bf00      	nop
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr
 8003a94:	20001728 	.word	0x20001728
 8003a98:	2000006c 	.word	0x2000006c

08003a9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	af00      	add	r7, sp, #0
  return uwTick;
 8003aa0:	4b03      	ldr	r3, [pc, #12]	@ (8003ab0 <HAL_GetTick+0x14>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr
 8003aae:	bf00      	nop
 8003ab0:	20001728 	.word	0x20001728

08003ab4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b084      	sub	sp, #16
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003abc:	f7ff ffee 	bl	8003a9c <HAL_GetTick>
 8003ac0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003acc:	d004      	beq.n	8003ad8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8003ace:	4b09      	ldr	r3, [pc, #36]	@ (8003af4 <HAL_Delay+0x40>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	68fa      	ldr	r2, [r7, #12]
 8003ad4:	4413      	add	r3, r2
 8003ad6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003ad8:	bf00      	nop
 8003ada:	f7ff ffdf 	bl	8003a9c <HAL_GetTick>
 8003ade:	4602      	mov	r2, r0
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	1ad3      	subs	r3, r2, r3
 8003ae4:	68fa      	ldr	r2, [r7, #12]
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	d8f7      	bhi.n	8003ada <HAL_Delay+0x26>
  {
  }
}
 8003aea:	bf00      	nop
 8003aec:	bf00      	nop
 8003aee:	3710      	adds	r7, #16
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}
 8003af4:	2000006c 	.word	0x2000006c

08003af8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b085      	sub	sp, #20
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	f003 0307 	and.w	r3, r3, #7
 8003b06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b08:	4b0c      	ldr	r3, [pc, #48]	@ (8003b3c <__NVIC_SetPriorityGrouping+0x44>)
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b0e:	68ba      	ldr	r2, [r7, #8]
 8003b10:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003b14:	4013      	ands	r3, r2
 8003b16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b20:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003b24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b2a:	4a04      	ldr	r2, [pc, #16]	@ (8003b3c <__NVIC_SetPriorityGrouping+0x44>)
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	60d3      	str	r3, [r2, #12]
}
 8003b30:	bf00      	nop
 8003b32:	3714      	adds	r7, #20
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr
 8003b3c:	e000ed00 	.word	0xe000ed00

08003b40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b40:	b480      	push	{r7}
 8003b42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b44:	4b04      	ldr	r3, [pc, #16]	@ (8003b58 <__NVIC_GetPriorityGrouping+0x18>)
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	0a1b      	lsrs	r3, r3, #8
 8003b4a:	f003 0307 	and.w	r3, r3, #7
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr
 8003b58:	e000ed00 	.word	0xe000ed00

08003b5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b083      	sub	sp, #12
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	4603      	mov	r3, r0
 8003b64:	6039      	str	r1, [r7, #0]
 8003b66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	db0a      	blt.n	8003b86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	b2da      	uxtb	r2, r3
 8003b74:	490c      	ldr	r1, [pc, #48]	@ (8003ba8 <__NVIC_SetPriority+0x4c>)
 8003b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b7a:	0112      	lsls	r2, r2, #4
 8003b7c:	b2d2      	uxtb	r2, r2
 8003b7e:	440b      	add	r3, r1
 8003b80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b84:	e00a      	b.n	8003b9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	b2da      	uxtb	r2, r3
 8003b8a:	4908      	ldr	r1, [pc, #32]	@ (8003bac <__NVIC_SetPriority+0x50>)
 8003b8c:	79fb      	ldrb	r3, [r7, #7]
 8003b8e:	f003 030f 	and.w	r3, r3, #15
 8003b92:	3b04      	subs	r3, #4
 8003b94:	0112      	lsls	r2, r2, #4
 8003b96:	b2d2      	uxtb	r2, r2
 8003b98:	440b      	add	r3, r1
 8003b9a:	761a      	strb	r2, [r3, #24]
}
 8003b9c:	bf00      	nop
 8003b9e:	370c      	adds	r7, #12
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr
 8003ba8:	e000e100 	.word	0xe000e100
 8003bac:	e000ed00 	.word	0xe000ed00

08003bb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b089      	sub	sp, #36	@ 0x24
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	60f8      	str	r0, [r7, #12]
 8003bb8:	60b9      	str	r1, [r7, #8]
 8003bba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f003 0307 	and.w	r3, r3, #7
 8003bc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003bc4:	69fb      	ldr	r3, [r7, #28]
 8003bc6:	f1c3 0307 	rsb	r3, r3, #7
 8003bca:	2b04      	cmp	r3, #4
 8003bcc:	bf28      	it	cs
 8003bce:	2304      	movcs	r3, #4
 8003bd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003bd2:	69fb      	ldr	r3, [r7, #28]
 8003bd4:	3304      	adds	r3, #4
 8003bd6:	2b06      	cmp	r3, #6
 8003bd8:	d902      	bls.n	8003be0 <NVIC_EncodePriority+0x30>
 8003bda:	69fb      	ldr	r3, [r7, #28]
 8003bdc:	3b03      	subs	r3, #3
 8003bde:	e000      	b.n	8003be2 <NVIC_EncodePriority+0x32>
 8003be0:	2300      	movs	r3, #0
 8003be2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003be4:	f04f 32ff 	mov.w	r2, #4294967295
 8003be8:	69bb      	ldr	r3, [r7, #24]
 8003bea:	fa02 f303 	lsl.w	r3, r2, r3
 8003bee:	43da      	mvns	r2, r3
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	401a      	ands	r2, r3
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003bf8:	f04f 31ff 	mov.w	r1, #4294967295
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	fa01 f303 	lsl.w	r3, r1, r3
 8003c02:	43d9      	mvns	r1, r3
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c08:	4313      	orrs	r3, r2
         );
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3724      	adds	r7, #36	@ 0x24
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr
	...

08003c18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b082      	sub	sp, #8
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	3b01      	subs	r3, #1
 8003c24:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003c28:	d301      	bcc.n	8003c2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e00f      	b.n	8003c4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c2e:	4a0a      	ldr	r2, [pc, #40]	@ (8003c58 <SysTick_Config+0x40>)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	3b01      	subs	r3, #1
 8003c34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c36:	210f      	movs	r1, #15
 8003c38:	f04f 30ff 	mov.w	r0, #4294967295
 8003c3c:	f7ff ff8e 	bl	8003b5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c40:	4b05      	ldr	r3, [pc, #20]	@ (8003c58 <SysTick_Config+0x40>)
 8003c42:	2200      	movs	r2, #0
 8003c44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c46:	4b04      	ldr	r3, [pc, #16]	@ (8003c58 <SysTick_Config+0x40>)
 8003c48:	2207      	movs	r2, #7
 8003c4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c4c:	2300      	movs	r3, #0
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3708      	adds	r7, #8
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	e000e010 	.word	0xe000e010

08003c5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b082      	sub	sp, #8
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	f7ff ff47 	bl	8003af8 <__NVIC_SetPriorityGrouping>
}
 8003c6a:	bf00      	nop
 8003c6c:	3708      	adds	r7, #8
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}

08003c72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c72:	b580      	push	{r7, lr}
 8003c74:	b086      	sub	sp, #24
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	4603      	mov	r3, r0
 8003c7a:	60b9      	str	r1, [r7, #8]
 8003c7c:	607a      	str	r2, [r7, #4]
 8003c7e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003c80:	f7ff ff5e 	bl	8003b40 <__NVIC_GetPriorityGrouping>
 8003c84:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c86:	687a      	ldr	r2, [r7, #4]
 8003c88:	68b9      	ldr	r1, [r7, #8]
 8003c8a:	6978      	ldr	r0, [r7, #20]
 8003c8c:	f7ff ff90 	bl	8003bb0 <NVIC_EncodePriority>
 8003c90:	4602      	mov	r2, r0
 8003c92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c96:	4611      	mov	r1, r2
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f7ff ff5f 	bl	8003b5c <__NVIC_SetPriority>
}
 8003c9e:	bf00      	nop
 8003ca0:	3718      	adds	r7, #24
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}

08003ca6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ca6:	b580      	push	{r7, lr}
 8003ca8:	b082      	sub	sp, #8
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f7ff ffb2 	bl	8003c18 <SysTick_Config>
 8003cb4:	4603      	mov	r3, r0
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3708      	adds	r7, #8
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}
	...

08003cc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b087      	sub	sp, #28
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
 8003cc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003cce:	e15a      	b.n	8003f86 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	2101      	movs	r1, #1
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	fa01 f303 	lsl.w	r3, r1, r3
 8003cdc:	4013      	ands	r3, r2
 8003cde:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	f000 814c 	beq.w	8003f80 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	f003 0303 	and.w	r3, r3, #3
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d005      	beq.n	8003d00 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003cfc:	2b02      	cmp	r3, #2
 8003cfe:	d130      	bne.n	8003d62 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	005b      	lsls	r3, r3, #1
 8003d0a:	2203      	movs	r2, #3
 8003d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d10:	43db      	mvns	r3, r3
 8003d12:	693a      	ldr	r2, [r7, #16]
 8003d14:	4013      	ands	r3, r2
 8003d16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	68da      	ldr	r2, [r3, #12]
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	005b      	lsls	r3, r3, #1
 8003d20:	fa02 f303 	lsl.w	r3, r2, r3
 8003d24:	693a      	ldr	r2, [r7, #16]
 8003d26:	4313      	orrs	r3, r2
 8003d28:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	693a      	ldr	r2, [r7, #16]
 8003d2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003d36:	2201      	movs	r2, #1
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d3e:	43db      	mvns	r3, r3
 8003d40:	693a      	ldr	r2, [r7, #16]
 8003d42:	4013      	ands	r3, r2
 8003d44:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	091b      	lsrs	r3, r3, #4
 8003d4c:	f003 0201 	and.w	r2, r3, #1
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	fa02 f303 	lsl.w	r3, r2, r3
 8003d56:	693a      	ldr	r2, [r7, #16]
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	693a      	ldr	r2, [r7, #16]
 8003d60:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	f003 0303 	and.w	r3, r3, #3
 8003d6a:	2b03      	cmp	r3, #3
 8003d6c:	d017      	beq.n	8003d9e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	68db      	ldr	r3, [r3, #12]
 8003d72:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	005b      	lsls	r3, r3, #1
 8003d78:	2203      	movs	r2, #3
 8003d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d7e:	43db      	mvns	r3, r3
 8003d80:	693a      	ldr	r2, [r7, #16]
 8003d82:	4013      	ands	r3, r2
 8003d84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	689a      	ldr	r2, [r3, #8]
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	005b      	lsls	r3, r3, #1
 8003d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d92:	693a      	ldr	r2, [r7, #16]
 8003d94:	4313      	orrs	r3, r2
 8003d96:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	693a      	ldr	r2, [r7, #16]
 8003d9c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	f003 0303 	and.w	r3, r3, #3
 8003da6:	2b02      	cmp	r3, #2
 8003da8:	d123      	bne.n	8003df2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	08da      	lsrs	r2, r3, #3
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	3208      	adds	r2, #8
 8003db2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003db6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	f003 0307 	and.w	r3, r3, #7
 8003dbe:	009b      	lsls	r3, r3, #2
 8003dc0:	220f      	movs	r2, #15
 8003dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc6:	43db      	mvns	r3, r3
 8003dc8:	693a      	ldr	r2, [r7, #16]
 8003dca:	4013      	ands	r3, r2
 8003dcc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	691a      	ldr	r2, [r3, #16]
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	f003 0307 	and.w	r3, r3, #7
 8003dd8:	009b      	lsls	r3, r3, #2
 8003dda:	fa02 f303 	lsl.w	r3, r2, r3
 8003dde:	693a      	ldr	r2, [r7, #16]
 8003de0:	4313      	orrs	r3, r2
 8003de2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	08da      	lsrs	r2, r3, #3
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	3208      	adds	r2, #8
 8003dec:	6939      	ldr	r1, [r7, #16]
 8003dee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	005b      	lsls	r3, r3, #1
 8003dfc:	2203      	movs	r2, #3
 8003dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8003e02:	43db      	mvns	r3, r3
 8003e04:	693a      	ldr	r2, [r7, #16]
 8003e06:	4013      	ands	r3, r2
 8003e08:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	f003 0203 	and.w	r2, r3, #3
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	005b      	lsls	r3, r3, #1
 8003e16:	fa02 f303 	lsl.w	r3, r2, r3
 8003e1a:	693a      	ldr	r2, [r7, #16]
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	693a      	ldr	r2, [r7, #16]
 8003e24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	f000 80a6 	beq.w	8003f80 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e34:	4b5b      	ldr	r3, [pc, #364]	@ (8003fa4 <HAL_GPIO_Init+0x2e4>)
 8003e36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e38:	4a5a      	ldr	r2, [pc, #360]	@ (8003fa4 <HAL_GPIO_Init+0x2e4>)
 8003e3a:	f043 0301 	orr.w	r3, r3, #1
 8003e3e:	6613      	str	r3, [r2, #96]	@ 0x60
 8003e40:	4b58      	ldr	r3, [pc, #352]	@ (8003fa4 <HAL_GPIO_Init+0x2e4>)
 8003e42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e44:	f003 0301 	and.w	r3, r3, #1
 8003e48:	60bb      	str	r3, [r7, #8]
 8003e4a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003e4c:	4a56      	ldr	r2, [pc, #344]	@ (8003fa8 <HAL_GPIO_Init+0x2e8>)
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	089b      	lsrs	r3, r3, #2
 8003e52:	3302      	adds	r3, #2
 8003e54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e58:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	f003 0303 	and.w	r3, r3, #3
 8003e60:	009b      	lsls	r3, r3, #2
 8003e62:	220f      	movs	r2, #15
 8003e64:	fa02 f303 	lsl.w	r3, r2, r3
 8003e68:	43db      	mvns	r3, r3
 8003e6a:	693a      	ldr	r2, [r7, #16]
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003e76:	d01f      	beq.n	8003eb8 <HAL_GPIO_Init+0x1f8>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	4a4c      	ldr	r2, [pc, #304]	@ (8003fac <HAL_GPIO_Init+0x2ec>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d019      	beq.n	8003eb4 <HAL_GPIO_Init+0x1f4>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	4a4b      	ldr	r2, [pc, #300]	@ (8003fb0 <HAL_GPIO_Init+0x2f0>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d013      	beq.n	8003eb0 <HAL_GPIO_Init+0x1f0>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	4a4a      	ldr	r2, [pc, #296]	@ (8003fb4 <HAL_GPIO_Init+0x2f4>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d00d      	beq.n	8003eac <HAL_GPIO_Init+0x1ec>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	4a49      	ldr	r2, [pc, #292]	@ (8003fb8 <HAL_GPIO_Init+0x2f8>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d007      	beq.n	8003ea8 <HAL_GPIO_Init+0x1e8>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	4a48      	ldr	r2, [pc, #288]	@ (8003fbc <HAL_GPIO_Init+0x2fc>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d101      	bne.n	8003ea4 <HAL_GPIO_Init+0x1e4>
 8003ea0:	2305      	movs	r3, #5
 8003ea2:	e00a      	b.n	8003eba <HAL_GPIO_Init+0x1fa>
 8003ea4:	2306      	movs	r3, #6
 8003ea6:	e008      	b.n	8003eba <HAL_GPIO_Init+0x1fa>
 8003ea8:	2304      	movs	r3, #4
 8003eaa:	e006      	b.n	8003eba <HAL_GPIO_Init+0x1fa>
 8003eac:	2303      	movs	r3, #3
 8003eae:	e004      	b.n	8003eba <HAL_GPIO_Init+0x1fa>
 8003eb0:	2302      	movs	r3, #2
 8003eb2:	e002      	b.n	8003eba <HAL_GPIO_Init+0x1fa>
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	e000      	b.n	8003eba <HAL_GPIO_Init+0x1fa>
 8003eb8:	2300      	movs	r3, #0
 8003eba:	697a      	ldr	r2, [r7, #20]
 8003ebc:	f002 0203 	and.w	r2, r2, #3
 8003ec0:	0092      	lsls	r2, r2, #2
 8003ec2:	4093      	lsls	r3, r2
 8003ec4:	693a      	ldr	r2, [r7, #16]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003eca:	4937      	ldr	r1, [pc, #220]	@ (8003fa8 <HAL_GPIO_Init+0x2e8>)
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	089b      	lsrs	r3, r3, #2
 8003ed0:	3302      	adds	r3, #2
 8003ed2:	693a      	ldr	r2, [r7, #16]
 8003ed4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003ed8:	4b39      	ldr	r3, [pc, #228]	@ (8003fc0 <HAL_GPIO_Init+0x300>)
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	43db      	mvns	r3, r3
 8003ee2:	693a      	ldr	r2, [r7, #16]
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d003      	beq.n	8003efc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003ef4:	693a      	ldr	r2, [r7, #16]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003efc:	4a30      	ldr	r2, [pc, #192]	@ (8003fc0 <HAL_GPIO_Init+0x300>)
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003f02:	4b2f      	ldr	r3, [pc, #188]	@ (8003fc0 <HAL_GPIO_Init+0x300>)
 8003f04:	68db      	ldr	r3, [r3, #12]
 8003f06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	43db      	mvns	r3, r3
 8003f0c:	693a      	ldr	r2, [r7, #16]
 8003f0e:	4013      	ands	r3, r2
 8003f10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d003      	beq.n	8003f26 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003f1e:	693a      	ldr	r2, [r7, #16]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	4313      	orrs	r3, r2
 8003f24:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003f26:	4a26      	ldr	r2, [pc, #152]	@ (8003fc0 <HAL_GPIO_Init+0x300>)
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003f2c:	4b24      	ldr	r3, [pc, #144]	@ (8003fc0 <HAL_GPIO_Init+0x300>)
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	43db      	mvns	r3, r3
 8003f36:	693a      	ldr	r2, [r7, #16]
 8003f38:	4013      	ands	r3, r2
 8003f3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d003      	beq.n	8003f50 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003f48:	693a      	ldr	r2, [r7, #16]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003f50:	4a1b      	ldr	r2, [pc, #108]	@ (8003fc0 <HAL_GPIO_Init+0x300>)
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003f56:	4b1a      	ldr	r3, [pc, #104]	@ (8003fc0 <HAL_GPIO_Init+0x300>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	43db      	mvns	r3, r3
 8003f60:	693a      	ldr	r2, [r7, #16]
 8003f62:	4013      	ands	r3, r2
 8003f64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d003      	beq.n	8003f7a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003f72:	693a      	ldr	r2, [r7, #16]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	4313      	orrs	r3, r2
 8003f78:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003f7a:	4a11      	ldr	r2, [pc, #68]	@ (8003fc0 <HAL_GPIO_Init+0x300>)
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	3301      	adds	r3, #1
 8003f84:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	fa22 f303 	lsr.w	r3, r2, r3
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	f47f ae9d 	bne.w	8003cd0 <HAL_GPIO_Init+0x10>
  }
}
 8003f96:	bf00      	nop
 8003f98:	bf00      	nop
 8003f9a:	371c      	adds	r7, #28
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa2:	4770      	bx	lr
 8003fa4:	40021000 	.word	0x40021000
 8003fa8:	40010000 	.word	0x40010000
 8003fac:	48000400 	.word	0x48000400
 8003fb0:	48000800 	.word	0x48000800
 8003fb4:	48000c00 	.word	0x48000c00
 8003fb8:	48001000 	.word	0x48001000
 8003fbc:	48001400 	.word	0x48001400
 8003fc0:	40010400 	.word	0x40010400

08003fc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b083      	sub	sp, #12
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
 8003fcc:	460b      	mov	r3, r1
 8003fce:	807b      	strh	r3, [r7, #2]
 8003fd0:	4613      	mov	r3, r2
 8003fd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003fd4:	787b      	ldrb	r3, [r7, #1]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d003      	beq.n	8003fe2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003fda:	887a      	ldrh	r2, [r7, #2]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003fe0:	e002      	b.n	8003fe8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003fe2:	887a      	ldrh	r2, [r7, #2]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003fe8:	bf00      	nop
 8003fea:	370c      	adds	r7, #12
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr

08003ff4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b085      	sub	sp, #20
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d141      	bne.n	8004086 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004002:	4b4b      	ldr	r3, [pc, #300]	@ (8004130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800400a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800400e:	d131      	bne.n	8004074 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004010:	4b47      	ldr	r3, [pc, #284]	@ (8004130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004012:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004016:	4a46      	ldr	r2, [pc, #280]	@ (8004130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004018:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800401c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004020:	4b43      	ldr	r3, [pc, #268]	@ (8004130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004028:	4a41      	ldr	r2, [pc, #260]	@ (8004130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800402a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800402e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004030:	4b40      	ldr	r3, [pc, #256]	@ (8004134 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	2232      	movs	r2, #50	@ 0x32
 8004036:	fb02 f303 	mul.w	r3, r2, r3
 800403a:	4a3f      	ldr	r2, [pc, #252]	@ (8004138 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800403c:	fba2 2303 	umull	r2, r3, r2, r3
 8004040:	0c9b      	lsrs	r3, r3, #18
 8004042:	3301      	adds	r3, #1
 8004044:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004046:	e002      	b.n	800404e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	3b01      	subs	r3, #1
 800404c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800404e:	4b38      	ldr	r3, [pc, #224]	@ (8004130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004050:	695b      	ldr	r3, [r3, #20]
 8004052:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004056:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800405a:	d102      	bne.n	8004062 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d1f2      	bne.n	8004048 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004062:	4b33      	ldr	r3, [pc, #204]	@ (8004130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004064:	695b      	ldr	r3, [r3, #20]
 8004066:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800406a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800406e:	d158      	bne.n	8004122 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004070:	2303      	movs	r3, #3
 8004072:	e057      	b.n	8004124 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004074:	4b2e      	ldr	r3, [pc, #184]	@ (8004130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004076:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800407a:	4a2d      	ldr	r2, [pc, #180]	@ (8004130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800407c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004080:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004084:	e04d      	b.n	8004122 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800408c:	d141      	bne.n	8004112 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800408e:	4b28      	ldr	r3, [pc, #160]	@ (8004130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004096:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800409a:	d131      	bne.n	8004100 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800409c:	4b24      	ldr	r3, [pc, #144]	@ (8004130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800409e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80040a2:	4a23      	ldr	r2, [pc, #140]	@ (8004130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040a8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80040ac:	4b20      	ldr	r3, [pc, #128]	@ (8004130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80040b4:	4a1e      	ldr	r2, [pc, #120]	@ (8004130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80040ba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80040bc:	4b1d      	ldr	r3, [pc, #116]	@ (8004134 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	2232      	movs	r2, #50	@ 0x32
 80040c2:	fb02 f303 	mul.w	r3, r2, r3
 80040c6:	4a1c      	ldr	r2, [pc, #112]	@ (8004138 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80040c8:	fba2 2303 	umull	r2, r3, r2, r3
 80040cc:	0c9b      	lsrs	r3, r3, #18
 80040ce:	3301      	adds	r3, #1
 80040d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80040d2:	e002      	b.n	80040da <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	3b01      	subs	r3, #1
 80040d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80040da:	4b15      	ldr	r3, [pc, #84]	@ (8004130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040dc:	695b      	ldr	r3, [r3, #20]
 80040de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040e6:	d102      	bne.n	80040ee <HAL_PWREx_ControlVoltageScaling+0xfa>
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d1f2      	bne.n	80040d4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80040ee:	4b10      	ldr	r3, [pc, #64]	@ (8004130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040f0:	695b      	ldr	r3, [r3, #20]
 80040f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040fa:	d112      	bne.n	8004122 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80040fc:	2303      	movs	r3, #3
 80040fe:	e011      	b.n	8004124 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004100:	4b0b      	ldr	r3, [pc, #44]	@ (8004130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004102:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004106:	4a0a      	ldr	r2, [pc, #40]	@ (8004130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004108:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800410c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004110:	e007      	b.n	8004122 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004112:	4b07      	ldr	r3, [pc, #28]	@ (8004130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800411a:	4a05      	ldr	r2, [pc, #20]	@ (8004130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800411c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004120:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004122:	2300      	movs	r3, #0
}
 8004124:	4618      	mov	r0, r3
 8004126:	3714      	adds	r7, #20
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr
 8004130:	40007000 	.word	0x40007000
 8004134:	20000038 	.word	0x20000038
 8004138:	431bde83 	.word	0x431bde83

0800413c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800413c:	b480      	push	{r7}
 800413e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004140:	4b05      	ldr	r3, [pc, #20]	@ (8004158 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	4a04      	ldr	r2, [pc, #16]	@ (8004158 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004146:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800414a:	6093      	str	r3, [r2, #8]
}
 800414c:	bf00      	nop
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr
 8004156:	bf00      	nop
 8004158:	40007000 	.word	0x40007000

0800415c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b088      	sub	sp, #32
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d101      	bne.n	800416e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e2fe      	b.n	800476c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 0301 	and.w	r3, r3, #1
 8004176:	2b00      	cmp	r3, #0
 8004178:	d075      	beq.n	8004266 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800417a:	4b97      	ldr	r3, [pc, #604]	@ (80043d8 <HAL_RCC_OscConfig+0x27c>)
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	f003 030c 	and.w	r3, r3, #12
 8004182:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004184:	4b94      	ldr	r3, [pc, #592]	@ (80043d8 <HAL_RCC_OscConfig+0x27c>)
 8004186:	68db      	ldr	r3, [r3, #12]
 8004188:	f003 0303 	and.w	r3, r3, #3
 800418c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800418e:	69bb      	ldr	r3, [r7, #24]
 8004190:	2b0c      	cmp	r3, #12
 8004192:	d102      	bne.n	800419a <HAL_RCC_OscConfig+0x3e>
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	2b03      	cmp	r3, #3
 8004198:	d002      	beq.n	80041a0 <HAL_RCC_OscConfig+0x44>
 800419a:	69bb      	ldr	r3, [r7, #24]
 800419c:	2b08      	cmp	r3, #8
 800419e:	d10b      	bne.n	80041b8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041a0:	4b8d      	ldr	r3, [pc, #564]	@ (80043d8 <HAL_RCC_OscConfig+0x27c>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d05b      	beq.n	8004264 <HAL_RCC_OscConfig+0x108>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d157      	bne.n	8004264 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	e2d9      	b.n	800476c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041c0:	d106      	bne.n	80041d0 <HAL_RCC_OscConfig+0x74>
 80041c2:	4b85      	ldr	r3, [pc, #532]	@ (80043d8 <HAL_RCC_OscConfig+0x27c>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a84      	ldr	r2, [pc, #528]	@ (80043d8 <HAL_RCC_OscConfig+0x27c>)
 80041c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041cc:	6013      	str	r3, [r2, #0]
 80041ce:	e01d      	b.n	800420c <HAL_RCC_OscConfig+0xb0>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80041d8:	d10c      	bne.n	80041f4 <HAL_RCC_OscConfig+0x98>
 80041da:	4b7f      	ldr	r3, [pc, #508]	@ (80043d8 <HAL_RCC_OscConfig+0x27c>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a7e      	ldr	r2, [pc, #504]	@ (80043d8 <HAL_RCC_OscConfig+0x27c>)
 80041e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80041e4:	6013      	str	r3, [r2, #0]
 80041e6:	4b7c      	ldr	r3, [pc, #496]	@ (80043d8 <HAL_RCC_OscConfig+0x27c>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a7b      	ldr	r2, [pc, #492]	@ (80043d8 <HAL_RCC_OscConfig+0x27c>)
 80041ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041f0:	6013      	str	r3, [r2, #0]
 80041f2:	e00b      	b.n	800420c <HAL_RCC_OscConfig+0xb0>
 80041f4:	4b78      	ldr	r3, [pc, #480]	@ (80043d8 <HAL_RCC_OscConfig+0x27c>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a77      	ldr	r2, [pc, #476]	@ (80043d8 <HAL_RCC_OscConfig+0x27c>)
 80041fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041fe:	6013      	str	r3, [r2, #0]
 8004200:	4b75      	ldr	r3, [pc, #468]	@ (80043d8 <HAL_RCC_OscConfig+0x27c>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a74      	ldr	r2, [pc, #464]	@ (80043d8 <HAL_RCC_OscConfig+0x27c>)
 8004206:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800420a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d013      	beq.n	800423c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004214:	f7ff fc42 	bl	8003a9c <HAL_GetTick>
 8004218:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800421a:	e008      	b.n	800422e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800421c:	f7ff fc3e 	bl	8003a9c <HAL_GetTick>
 8004220:	4602      	mov	r2, r0
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	1ad3      	subs	r3, r2, r3
 8004226:	2b64      	cmp	r3, #100	@ 0x64
 8004228:	d901      	bls.n	800422e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800422a:	2303      	movs	r3, #3
 800422c:	e29e      	b.n	800476c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800422e:	4b6a      	ldr	r3, [pc, #424]	@ (80043d8 <HAL_RCC_OscConfig+0x27c>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004236:	2b00      	cmp	r3, #0
 8004238:	d0f0      	beq.n	800421c <HAL_RCC_OscConfig+0xc0>
 800423a:	e014      	b.n	8004266 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800423c:	f7ff fc2e 	bl	8003a9c <HAL_GetTick>
 8004240:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004242:	e008      	b.n	8004256 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004244:	f7ff fc2a 	bl	8003a9c <HAL_GetTick>
 8004248:	4602      	mov	r2, r0
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	1ad3      	subs	r3, r2, r3
 800424e:	2b64      	cmp	r3, #100	@ 0x64
 8004250:	d901      	bls.n	8004256 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004252:	2303      	movs	r3, #3
 8004254:	e28a      	b.n	800476c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004256:	4b60      	ldr	r3, [pc, #384]	@ (80043d8 <HAL_RCC_OscConfig+0x27c>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800425e:	2b00      	cmp	r3, #0
 8004260:	d1f0      	bne.n	8004244 <HAL_RCC_OscConfig+0xe8>
 8004262:	e000      	b.n	8004266 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004264:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 0302 	and.w	r3, r3, #2
 800426e:	2b00      	cmp	r3, #0
 8004270:	d075      	beq.n	800435e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004272:	4b59      	ldr	r3, [pc, #356]	@ (80043d8 <HAL_RCC_OscConfig+0x27c>)
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	f003 030c 	and.w	r3, r3, #12
 800427a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800427c:	4b56      	ldr	r3, [pc, #344]	@ (80043d8 <HAL_RCC_OscConfig+0x27c>)
 800427e:	68db      	ldr	r3, [r3, #12]
 8004280:	f003 0303 	and.w	r3, r3, #3
 8004284:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004286:	69bb      	ldr	r3, [r7, #24]
 8004288:	2b0c      	cmp	r3, #12
 800428a:	d102      	bne.n	8004292 <HAL_RCC_OscConfig+0x136>
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	2b02      	cmp	r3, #2
 8004290:	d002      	beq.n	8004298 <HAL_RCC_OscConfig+0x13c>
 8004292:	69bb      	ldr	r3, [r7, #24]
 8004294:	2b04      	cmp	r3, #4
 8004296:	d11f      	bne.n	80042d8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004298:	4b4f      	ldr	r3, [pc, #316]	@ (80043d8 <HAL_RCC_OscConfig+0x27c>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d005      	beq.n	80042b0 <HAL_RCC_OscConfig+0x154>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d101      	bne.n	80042b0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80042ac:	2301      	movs	r3, #1
 80042ae:	e25d      	b.n	800476c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042b0:	4b49      	ldr	r3, [pc, #292]	@ (80043d8 <HAL_RCC_OscConfig+0x27c>)
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	691b      	ldr	r3, [r3, #16]
 80042bc:	061b      	lsls	r3, r3, #24
 80042be:	4946      	ldr	r1, [pc, #280]	@ (80043d8 <HAL_RCC_OscConfig+0x27c>)
 80042c0:	4313      	orrs	r3, r2
 80042c2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80042c4:	4b45      	ldr	r3, [pc, #276]	@ (80043dc <HAL_RCC_OscConfig+0x280>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4618      	mov	r0, r3
 80042ca:	f7ff fb9b 	bl	8003a04 <HAL_InitTick>
 80042ce:	4603      	mov	r3, r0
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d043      	beq.n	800435c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80042d4:	2301      	movs	r3, #1
 80042d6:	e249      	b.n	800476c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	68db      	ldr	r3, [r3, #12]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d023      	beq.n	8004328 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042e0:	4b3d      	ldr	r3, [pc, #244]	@ (80043d8 <HAL_RCC_OscConfig+0x27c>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a3c      	ldr	r2, [pc, #240]	@ (80043d8 <HAL_RCC_OscConfig+0x27c>)
 80042e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042ec:	f7ff fbd6 	bl	8003a9c <HAL_GetTick>
 80042f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042f2:	e008      	b.n	8004306 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042f4:	f7ff fbd2 	bl	8003a9c <HAL_GetTick>
 80042f8:	4602      	mov	r2, r0
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	1ad3      	subs	r3, r2, r3
 80042fe:	2b02      	cmp	r3, #2
 8004300:	d901      	bls.n	8004306 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004302:	2303      	movs	r3, #3
 8004304:	e232      	b.n	800476c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004306:	4b34      	ldr	r3, [pc, #208]	@ (80043d8 <HAL_RCC_OscConfig+0x27c>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800430e:	2b00      	cmp	r3, #0
 8004310:	d0f0      	beq.n	80042f4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004312:	4b31      	ldr	r3, [pc, #196]	@ (80043d8 <HAL_RCC_OscConfig+0x27c>)
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	691b      	ldr	r3, [r3, #16]
 800431e:	061b      	lsls	r3, r3, #24
 8004320:	492d      	ldr	r1, [pc, #180]	@ (80043d8 <HAL_RCC_OscConfig+0x27c>)
 8004322:	4313      	orrs	r3, r2
 8004324:	604b      	str	r3, [r1, #4]
 8004326:	e01a      	b.n	800435e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004328:	4b2b      	ldr	r3, [pc, #172]	@ (80043d8 <HAL_RCC_OscConfig+0x27c>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a2a      	ldr	r2, [pc, #168]	@ (80043d8 <HAL_RCC_OscConfig+0x27c>)
 800432e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004332:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004334:	f7ff fbb2 	bl	8003a9c <HAL_GetTick>
 8004338:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800433a:	e008      	b.n	800434e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800433c:	f7ff fbae 	bl	8003a9c <HAL_GetTick>
 8004340:	4602      	mov	r2, r0
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	2b02      	cmp	r3, #2
 8004348:	d901      	bls.n	800434e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800434a:	2303      	movs	r3, #3
 800434c:	e20e      	b.n	800476c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800434e:	4b22      	ldr	r3, [pc, #136]	@ (80043d8 <HAL_RCC_OscConfig+0x27c>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004356:	2b00      	cmp	r3, #0
 8004358:	d1f0      	bne.n	800433c <HAL_RCC_OscConfig+0x1e0>
 800435a:	e000      	b.n	800435e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800435c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 0308 	and.w	r3, r3, #8
 8004366:	2b00      	cmp	r3, #0
 8004368:	d041      	beq.n	80043ee <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	695b      	ldr	r3, [r3, #20]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d01c      	beq.n	80043ac <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004372:	4b19      	ldr	r3, [pc, #100]	@ (80043d8 <HAL_RCC_OscConfig+0x27c>)
 8004374:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004378:	4a17      	ldr	r2, [pc, #92]	@ (80043d8 <HAL_RCC_OscConfig+0x27c>)
 800437a:	f043 0301 	orr.w	r3, r3, #1
 800437e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004382:	f7ff fb8b 	bl	8003a9c <HAL_GetTick>
 8004386:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004388:	e008      	b.n	800439c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800438a:	f7ff fb87 	bl	8003a9c <HAL_GetTick>
 800438e:	4602      	mov	r2, r0
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	1ad3      	subs	r3, r2, r3
 8004394:	2b02      	cmp	r3, #2
 8004396:	d901      	bls.n	800439c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004398:	2303      	movs	r3, #3
 800439a:	e1e7      	b.n	800476c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800439c:	4b0e      	ldr	r3, [pc, #56]	@ (80043d8 <HAL_RCC_OscConfig+0x27c>)
 800439e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80043a2:	f003 0302 	and.w	r3, r3, #2
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d0ef      	beq.n	800438a <HAL_RCC_OscConfig+0x22e>
 80043aa:	e020      	b.n	80043ee <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043ac:	4b0a      	ldr	r3, [pc, #40]	@ (80043d8 <HAL_RCC_OscConfig+0x27c>)
 80043ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80043b2:	4a09      	ldr	r2, [pc, #36]	@ (80043d8 <HAL_RCC_OscConfig+0x27c>)
 80043b4:	f023 0301 	bic.w	r3, r3, #1
 80043b8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043bc:	f7ff fb6e 	bl	8003a9c <HAL_GetTick>
 80043c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80043c2:	e00d      	b.n	80043e0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043c4:	f7ff fb6a 	bl	8003a9c <HAL_GetTick>
 80043c8:	4602      	mov	r2, r0
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	1ad3      	subs	r3, r2, r3
 80043ce:	2b02      	cmp	r3, #2
 80043d0:	d906      	bls.n	80043e0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80043d2:	2303      	movs	r3, #3
 80043d4:	e1ca      	b.n	800476c <HAL_RCC_OscConfig+0x610>
 80043d6:	bf00      	nop
 80043d8:	40021000 	.word	0x40021000
 80043dc:	20000068 	.word	0x20000068
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80043e0:	4b8c      	ldr	r3, [pc, #560]	@ (8004614 <HAL_RCC_OscConfig+0x4b8>)
 80043e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80043e6:	f003 0302 	and.w	r3, r3, #2
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d1ea      	bne.n	80043c4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 0304 	and.w	r3, r3, #4
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	f000 80a6 	beq.w	8004548 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043fc:	2300      	movs	r3, #0
 80043fe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004400:	4b84      	ldr	r3, [pc, #528]	@ (8004614 <HAL_RCC_OscConfig+0x4b8>)
 8004402:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004404:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004408:	2b00      	cmp	r3, #0
 800440a:	d101      	bne.n	8004410 <HAL_RCC_OscConfig+0x2b4>
 800440c:	2301      	movs	r3, #1
 800440e:	e000      	b.n	8004412 <HAL_RCC_OscConfig+0x2b6>
 8004410:	2300      	movs	r3, #0
 8004412:	2b00      	cmp	r3, #0
 8004414:	d00d      	beq.n	8004432 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004416:	4b7f      	ldr	r3, [pc, #508]	@ (8004614 <HAL_RCC_OscConfig+0x4b8>)
 8004418:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800441a:	4a7e      	ldr	r2, [pc, #504]	@ (8004614 <HAL_RCC_OscConfig+0x4b8>)
 800441c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004420:	6593      	str	r3, [r2, #88]	@ 0x58
 8004422:	4b7c      	ldr	r3, [pc, #496]	@ (8004614 <HAL_RCC_OscConfig+0x4b8>)
 8004424:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004426:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800442a:	60fb      	str	r3, [r7, #12]
 800442c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800442e:	2301      	movs	r3, #1
 8004430:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004432:	4b79      	ldr	r3, [pc, #484]	@ (8004618 <HAL_RCC_OscConfig+0x4bc>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800443a:	2b00      	cmp	r3, #0
 800443c:	d118      	bne.n	8004470 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800443e:	4b76      	ldr	r3, [pc, #472]	@ (8004618 <HAL_RCC_OscConfig+0x4bc>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a75      	ldr	r2, [pc, #468]	@ (8004618 <HAL_RCC_OscConfig+0x4bc>)
 8004444:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004448:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800444a:	f7ff fb27 	bl	8003a9c <HAL_GetTick>
 800444e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004450:	e008      	b.n	8004464 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004452:	f7ff fb23 	bl	8003a9c <HAL_GetTick>
 8004456:	4602      	mov	r2, r0
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	1ad3      	subs	r3, r2, r3
 800445c:	2b02      	cmp	r3, #2
 800445e:	d901      	bls.n	8004464 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004460:	2303      	movs	r3, #3
 8004462:	e183      	b.n	800476c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004464:	4b6c      	ldr	r3, [pc, #432]	@ (8004618 <HAL_RCC_OscConfig+0x4bc>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800446c:	2b00      	cmp	r3, #0
 800446e:	d0f0      	beq.n	8004452 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	2b01      	cmp	r3, #1
 8004476:	d108      	bne.n	800448a <HAL_RCC_OscConfig+0x32e>
 8004478:	4b66      	ldr	r3, [pc, #408]	@ (8004614 <HAL_RCC_OscConfig+0x4b8>)
 800447a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800447e:	4a65      	ldr	r2, [pc, #404]	@ (8004614 <HAL_RCC_OscConfig+0x4b8>)
 8004480:	f043 0301 	orr.w	r3, r3, #1
 8004484:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004488:	e024      	b.n	80044d4 <HAL_RCC_OscConfig+0x378>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	2b05      	cmp	r3, #5
 8004490:	d110      	bne.n	80044b4 <HAL_RCC_OscConfig+0x358>
 8004492:	4b60      	ldr	r3, [pc, #384]	@ (8004614 <HAL_RCC_OscConfig+0x4b8>)
 8004494:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004498:	4a5e      	ldr	r2, [pc, #376]	@ (8004614 <HAL_RCC_OscConfig+0x4b8>)
 800449a:	f043 0304 	orr.w	r3, r3, #4
 800449e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80044a2:	4b5c      	ldr	r3, [pc, #368]	@ (8004614 <HAL_RCC_OscConfig+0x4b8>)
 80044a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044a8:	4a5a      	ldr	r2, [pc, #360]	@ (8004614 <HAL_RCC_OscConfig+0x4b8>)
 80044aa:	f043 0301 	orr.w	r3, r3, #1
 80044ae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80044b2:	e00f      	b.n	80044d4 <HAL_RCC_OscConfig+0x378>
 80044b4:	4b57      	ldr	r3, [pc, #348]	@ (8004614 <HAL_RCC_OscConfig+0x4b8>)
 80044b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044ba:	4a56      	ldr	r2, [pc, #344]	@ (8004614 <HAL_RCC_OscConfig+0x4b8>)
 80044bc:	f023 0301 	bic.w	r3, r3, #1
 80044c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80044c4:	4b53      	ldr	r3, [pc, #332]	@ (8004614 <HAL_RCC_OscConfig+0x4b8>)
 80044c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044ca:	4a52      	ldr	r2, [pc, #328]	@ (8004614 <HAL_RCC_OscConfig+0x4b8>)
 80044cc:	f023 0304 	bic.w	r3, r3, #4
 80044d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d016      	beq.n	800450a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044dc:	f7ff fade 	bl	8003a9c <HAL_GetTick>
 80044e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044e2:	e00a      	b.n	80044fa <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044e4:	f7ff fada 	bl	8003a9c <HAL_GetTick>
 80044e8:	4602      	mov	r2, r0
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d901      	bls.n	80044fa <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80044f6:	2303      	movs	r3, #3
 80044f8:	e138      	b.n	800476c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044fa:	4b46      	ldr	r3, [pc, #280]	@ (8004614 <HAL_RCC_OscConfig+0x4b8>)
 80044fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004500:	f003 0302 	and.w	r3, r3, #2
 8004504:	2b00      	cmp	r3, #0
 8004506:	d0ed      	beq.n	80044e4 <HAL_RCC_OscConfig+0x388>
 8004508:	e015      	b.n	8004536 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800450a:	f7ff fac7 	bl	8003a9c <HAL_GetTick>
 800450e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004510:	e00a      	b.n	8004528 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004512:	f7ff fac3 	bl	8003a9c <HAL_GetTick>
 8004516:	4602      	mov	r2, r0
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	1ad3      	subs	r3, r2, r3
 800451c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004520:	4293      	cmp	r3, r2
 8004522:	d901      	bls.n	8004528 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004524:	2303      	movs	r3, #3
 8004526:	e121      	b.n	800476c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004528:	4b3a      	ldr	r3, [pc, #232]	@ (8004614 <HAL_RCC_OscConfig+0x4b8>)
 800452a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800452e:	f003 0302 	and.w	r3, r3, #2
 8004532:	2b00      	cmp	r3, #0
 8004534:	d1ed      	bne.n	8004512 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004536:	7ffb      	ldrb	r3, [r7, #31]
 8004538:	2b01      	cmp	r3, #1
 800453a:	d105      	bne.n	8004548 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800453c:	4b35      	ldr	r3, [pc, #212]	@ (8004614 <HAL_RCC_OscConfig+0x4b8>)
 800453e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004540:	4a34      	ldr	r2, [pc, #208]	@ (8004614 <HAL_RCC_OscConfig+0x4b8>)
 8004542:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004546:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f003 0320 	and.w	r3, r3, #32
 8004550:	2b00      	cmp	r3, #0
 8004552:	d03c      	beq.n	80045ce <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	699b      	ldr	r3, [r3, #24]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d01c      	beq.n	8004596 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800455c:	4b2d      	ldr	r3, [pc, #180]	@ (8004614 <HAL_RCC_OscConfig+0x4b8>)
 800455e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004562:	4a2c      	ldr	r2, [pc, #176]	@ (8004614 <HAL_RCC_OscConfig+0x4b8>)
 8004564:	f043 0301 	orr.w	r3, r3, #1
 8004568:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800456c:	f7ff fa96 	bl	8003a9c <HAL_GetTick>
 8004570:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004572:	e008      	b.n	8004586 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004574:	f7ff fa92 	bl	8003a9c <HAL_GetTick>
 8004578:	4602      	mov	r2, r0
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	1ad3      	subs	r3, r2, r3
 800457e:	2b02      	cmp	r3, #2
 8004580:	d901      	bls.n	8004586 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004582:	2303      	movs	r3, #3
 8004584:	e0f2      	b.n	800476c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004586:	4b23      	ldr	r3, [pc, #140]	@ (8004614 <HAL_RCC_OscConfig+0x4b8>)
 8004588:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800458c:	f003 0302 	and.w	r3, r3, #2
 8004590:	2b00      	cmp	r3, #0
 8004592:	d0ef      	beq.n	8004574 <HAL_RCC_OscConfig+0x418>
 8004594:	e01b      	b.n	80045ce <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004596:	4b1f      	ldr	r3, [pc, #124]	@ (8004614 <HAL_RCC_OscConfig+0x4b8>)
 8004598:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800459c:	4a1d      	ldr	r2, [pc, #116]	@ (8004614 <HAL_RCC_OscConfig+0x4b8>)
 800459e:	f023 0301 	bic.w	r3, r3, #1
 80045a2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045a6:	f7ff fa79 	bl	8003a9c <HAL_GetTick>
 80045aa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80045ac:	e008      	b.n	80045c0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80045ae:	f7ff fa75 	bl	8003a9c <HAL_GetTick>
 80045b2:	4602      	mov	r2, r0
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	1ad3      	subs	r3, r2, r3
 80045b8:	2b02      	cmp	r3, #2
 80045ba:	d901      	bls.n	80045c0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80045bc:	2303      	movs	r3, #3
 80045be:	e0d5      	b.n	800476c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80045c0:	4b14      	ldr	r3, [pc, #80]	@ (8004614 <HAL_RCC_OscConfig+0x4b8>)
 80045c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80045c6:	f003 0302 	and.w	r3, r3, #2
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d1ef      	bne.n	80045ae <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	69db      	ldr	r3, [r3, #28]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	f000 80c9 	beq.w	800476a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80045d8:	4b0e      	ldr	r3, [pc, #56]	@ (8004614 <HAL_RCC_OscConfig+0x4b8>)
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	f003 030c 	and.w	r3, r3, #12
 80045e0:	2b0c      	cmp	r3, #12
 80045e2:	f000 8083 	beq.w	80046ec <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	69db      	ldr	r3, [r3, #28]
 80045ea:	2b02      	cmp	r3, #2
 80045ec:	d15e      	bne.n	80046ac <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045ee:	4b09      	ldr	r3, [pc, #36]	@ (8004614 <HAL_RCC_OscConfig+0x4b8>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a08      	ldr	r2, [pc, #32]	@ (8004614 <HAL_RCC_OscConfig+0x4b8>)
 80045f4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80045f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045fa:	f7ff fa4f 	bl	8003a9c <HAL_GetTick>
 80045fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004600:	e00c      	b.n	800461c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004602:	f7ff fa4b 	bl	8003a9c <HAL_GetTick>
 8004606:	4602      	mov	r2, r0
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	1ad3      	subs	r3, r2, r3
 800460c:	2b02      	cmp	r3, #2
 800460e:	d905      	bls.n	800461c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004610:	2303      	movs	r3, #3
 8004612:	e0ab      	b.n	800476c <HAL_RCC_OscConfig+0x610>
 8004614:	40021000 	.word	0x40021000
 8004618:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800461c:	4b55      	ldr	r3, [pc, #340]	@ (8004774 <HAL_RCC_OscConfig+0x618>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004624:	2b00      	cmp	r3, #0
 8004626:	d1ec      	bne.n	8004602 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004628:	4b52      	ldr	r3, [pc, #328]	@ (8004774 <HAL_RCC_OscConfig+0x618>)
 800462a:	68da      	ldr	r2, [r3, #12]
 800462c:	4b52      	ldr	r3, [pc, #328]	@ (8004778 <HAL_RCC_OscConfig+0x61c>)
 800462e:	4013      	ands	r3, r2
 8004630:	687a      	ldr	r2, [r7, #4]
 8004632:	6a11      	ldr	r1, [r2, #32]
 8004634:	687a      	ldr	r2, [r7, #4]
 8004636:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004638:	3a01      	subs	r2, #1
 800463a:	0112      	lsls	r2, r2, #4
 800463c:	4311      	orrs	r1, r2
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004642:	0212      	lsls	r2, r2, #8
 8004644:	4311      	orrs	r1, r2
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800464a:	0852      	lsrs	r2, r2, #1
 800464c:	3a01      	subs	r2, #1
 800464e:	0552      	lsls	r2, r2, #21
 8004650:	4311      	orrs	r1, r2
 8004652:	687a      	ldr	r2, [r7, #4]
 8004654:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004656:	0852      	lsrs	r2, r2, #1
 8004658:	3a01      	subs	r2, #1
 800465a:	0652      	lsls	r2, r2, #25
 800465c:	4311      	orrs	r1, r2
 800465e:	687a      	ldr	r2, [r7, #4]
 8004660:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004662:	06d2      	lsls	r2, r2, #27
 8004664:	430a      	orrs	r2, r1
 8004666:	4943      	ldr	r1, [pc, #268]	@ (8004774 <HAL_RCC_OscConfig+0x618>)
 8004668:	4313      	orrs	r3, r2
 800466a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800466c:	4b41      	ldr	r3, [pc, #260]	@ (8004774 <HAL_RCC_OscConfig+0x618>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a40      	ldr	r2, [pc, #256]	@ (8004774 <HAL_RCC_OscConfig+0x618>)
 8004672:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004676:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004678:	4b3e      	ldr	r3, [pc, #248]	@ (8004774 <HAL_RCC_OscConfig+0x618>)
 800467a:	68db      	ldr	r3, [r3, #12]
 800467c:	4a3d      	ldr	r2, [pc, #244]	@ (8004774 <HAL_RCC_OscConfig+0x618>)
 800467e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004682:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004684:	f7ff fa0a 	bl	8003a9c <HAL_GetTick>
 8004688:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800468a:	e008      	b.n	800469e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800468c:	f7ff fa06 	bl	8003a9c <HAL_GetTick>
 8004690:	4602      	mov	r2, r0
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	1ad3      	subs	r3, r2, r3
 8004696:	2b02      	cmp	r3, #2
 8004698:	d901      	bls.n	800469e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800469a:	2303      	movs	r3, #3
 800469c:	e066      	b.n	800476c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800469e:	4b35      	ldr	r3, [pc, #212]	@ (8004774 <HAL_RCC_OscConfig+0x618>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d0f0      	beq.n	800468c <HAL_RCC_OscConfig+0x530>
 80046aa:	e05e      	b.n	800476a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046ac:	4b31      	ldr	r3, [pc, #196]	@ (8004774 <HAL_RCC_OscConfig+0x618>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a30      	ldr	r2, [pc, #192]	@ (8004774 <HAL_RCC_OscConfig+0x618>)
 80046b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80046b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046b8:	f7ff f9f0 	bl	8003a9c <HAL_GetTick>
 80046bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046be:	e008      	b.n	80046d2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046c0:	f7ff f9ec 	bl	8003a9c <HAL_GetTick>
 80046c4:	4602      	mov	r2, r0
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	1ad3      	subs	r3, r2, r3
 80046ca:	2b02      	cmp	r3, #2
 80046cc:	d901      	bls.n	80046d2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80046ce:	2303      	movs	r3, #3
 80046d0:	e04c      	b.n	800476c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046d2:	4b28      	ldr	r3, [pc, #160]	@ (8004774 <HAL_RCC_OscConfig+0x618>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d1f0      	bne.n	80046c0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80046de:	4b25      	ldr	r3, [pc, #148]	@ (8004774 <HAL_RCC_OscConfig+0x618>)
 80046e0:	68da      	ldr	r2, [r3, #12]
 80046e2:	4924      	ldr	r1, [pc, #144]	@ (8004774 <HAL_RCC_OscConfig+0x618>)
 80046e4:	4b25      	ldr	r3, [pc, #148]	@ (800477c <HAL_RCC_OscConfig+0x620>)
 80046e6:	4013      	ands	r3, r2
 80046e8:	60cb      	str	r3, [r1, #12]
 80046ea:	e03e      	b.n	800476a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	69db      	ldr	r3, [r3, #28]
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d101      	bne.n	80046f8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	e039      	b.n	800476c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80046f8:	4b1e      	ldr	r3, [pc, #120]	@ (8004774 <HAL_RCC_OscConfig+0x618>)
 80046fa:	68db      	ldr	r3, [r3, #12]
 80046fc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	f003 0203 	and.w	r2, r3, #3
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6a1b      	ldr	r3, [r3, #32]
 8004708:	429a      	cmp	r2, r3
 800470a:	d12c      	bne.n	8004766 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004716:	3b01      	subs	r3, #1
 8004718:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800471a:	429a      	cmp	r2, r3
 800471c:	d123      	bne.n	8004766 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004728:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800472a:	429a      	cmp	r2, r3
 800472c:	d11b      	bne.n	8004766 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004738:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800473a:	429a      	cmp	r2, r3
 800473c:	d113      	bne.n	8004766 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004748:	085b      	lsrs	r3, r3, #1
 800474a:	3b01      	subs	r3, #1
 800474c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800474e:	429a      	cmp	r2, r3
 8004750:	d109      	bne.n	8004766 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800475c:	085b      	lsrs	r3, r3, #1
 800475e:	3b01      	subs	r3, #1
 8004760:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004762:	429a      	cmp	r2, r3
 8004764:	d001      	beq.n	800476a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	e000      	b.n	800476c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800476a:	2300      	movs	r3, #0
}
 800476c:	4618      	mov	r0, r3
 800476e:	3720      	adds	r7, #32
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}
 8004774:	40021000 	.word	0x40021000
 8004778:	019f800c 	.word	0x019f800c
 800477c:	feeefffc 	.word	0xfeeefffc

08004780 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b086      	sub	sp, #24
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800478a:	2300      	movs	r3, #0
 800478c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d101      	bne.n	8004798 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	e11e      	b.n	80049d6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004798:	4b91      	ldr	r3, [pc, #580]	@ (80049e0 <HAL_RCC_ClockConfig+0x260>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f003 030f 	and.w	r3, r3, #15
 80047a0:	683a      	ldr	r2, [r7, #0]
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d910      	bls.n	80047c8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047a6:	4b8e      	ldr	r3, [pc, #568]	@ (80049e0 <HAL_RCC_ClockConfig+0x260>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f023 020f 	bic.w	r2, r3, #15
 80047ae:	498c      	ldr	r1, [pc, #560]	@ (80049e0 <HAL_RCC_ClockConfig+0x260>)
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	4313      	orrs	r3, r2
 80047b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047b6:	4b8a      	ldr	r3, [pc, #552]	@ (80049e0 <HAL_RCC_ClockConfig+0x260>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f003 030f 	and.w	r3, r3, #15
 80047be:	683a      	ldr	r2, [r7, #0]
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d001      	beq.n	80047c8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
 80047c6:	e106      	b.n	80049d6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f003 0301 	and.w	r3, r3, #1
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d073      	beq.n	80048bc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	2b03      	cmp	r3, #3
 80047da:	d129      	bne.n	8004830 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047dc:	4b81      	ldr	r3, [pc, #516]	@ (80049e4 <HAL_RCC_ClockConfig+0x264>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d101      	bne.n	80047ec <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	e0f4      	b.n	80049d6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80047ec:	f000 f966 	bl	8004abc <RCC_GetSysClockFreqFromPLLSource>
 80047f0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	4a7c      	ldr	r2, [pc, #496]	@ (80049e8 <HAL_RCC_ClockConfig+0x268>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d93f      	bls.n	800487a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80047fa:	4b7a      	ldr	r3, [pc, #488]	@ (80049e4 <HAL_RCC_ClockConfig+0x264>)
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004802:	2b00      	cmp	r3, #0
 8004804:	d009      	beq.n	800481a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800480e:	2b00      	cmp	r3, #0
 8004810:	d033      	beq.n	800487a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004816:	2b00      	cmp	r3, #0
 8004818:	d12f      	bne.n	800487a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800481a:	4b72      	ldr	r3, [pc, #456]	@ (80049e4 <HAL_RCC_ClockConfig+0x264>)
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004822:	4a70      	ldr	r2, [pc, #448]	@ (80049e4 <HAL_RCC_ClockConfig+0x264>)
 8004824:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004828:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800482a:	2380      	movs	r3, #128	@ 0x80
 800482c:	617b      	str	r3, [r7, #20]
 800482e:	e024      	b.n	800487a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	2b02      	cmp	r3, #2
 8004836:	d107      	bne.n	8004848 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004838:	4b6a      	ldr	r3, [pc, #424]	@ (80049e4 <HAL_RCC_ClockConfig+0x264>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004840:	2b00      	cmp	r3, #0
 8004842:	d109      	bne.n	8004858 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004844:	2301      	movs	r3, #1
 8004846:	e0c6      	b.n	80049d6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004848:	4b66      	ldr	r3, [pc, #408]	@ (80049e4 <HAL_RCC_ClockConfig+0x264>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004850:	2b00      	cmp	r3, #0
 8004852:	d101      	bne.n	8004858 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004854:	2301      	movs	r3, #1
 8004856:	e0be      	b.n	80049d6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004858:	f000 f8ce 	bl	80049f8 <HAL_RCC_GetSysClockFreq>
 800485c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	4a61      	ldr	r2, [pc, #388]	@ (80049e8 <HAL_RCC_ClockConfig+0x268>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d909      	bls.n	800487a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004866:	4b5f      	ldr	r3, [pc, #380]	@ (80049e4 <HAL_RCC_ClockConfig+0x264>)
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800486e:	4a5d      	ldr	r2, [pc, #372]	@ (80049e4 <HAL_RCC_ClockConfig+0x264>)
 8004870:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004874:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004876:	2380      	movs	r3, #128	@ 0x80
 8004878:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800487a:	4b5a      	ldr	r3, [pc, #360]	@ (80049e4 <HAL_RCC_ClockConfig+0x264>)
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	f023 0203 	bic.w	r2, r3, #3
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	4957      	ldr	r1, [pc, #348]	@ (80049e4 <HAL_RCC_ClockConfig+0x264>)
 8004888:	4313      	orrs	r3, r2
 800488a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800488c:	f7ff f906 	bl	8003a9c <HAL_GetTick>
 8004890:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004892:	e00a      	b.n	80048aa <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004894:	f7ff f902 	bl	8003a9c <HAL_GetTick>
 8004898:	4602      	mov	r2, r0
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	1ad3      	subs	r3, r2, r3
 800489e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d901      	bls.n	80048aa <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80048a6:	2303      	movs	r3, #3
 80048a8:	e095      	b.n	80049d6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048aa:	4b4e      	ldr	r3, [pc, #312]	@ (80049e4 <HAL_RCC_ClockConfig+0x264>)
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	f003 020c 	and.w	r2, r3, #12
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	009b      	lsls	r3, r3, #2
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d1eb      	bne.n	8004894 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 0302 	and.w	r3, r3, #2
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d023      	beq.n	8004910 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f003 0304 	and.w	r3, r3, #4
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d005      	beq.n	80048e0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048d4:	4b43      	ldr	r3, [pc, #268]	@ (80049e4 <HAL_RCC_ClockConfig+0x264>)
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	4a42      	ldr	r2, [pc, #264]	@ (80049e4 <HAL_RCC_ClockConfig+0x264>)
 80048da:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80048de:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f003 0308 	and.w	r3, r3, #8
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d007      	beq.n	80048fc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80048ec:	4b3d      	ldr	r3, [pc, #244]	@ (80049e4 <HAL_RCC_ClockConfig+0x264>)
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80048f4:	4a3b      	ldr	r2, [pc, #236]	@ (80049e4 <HAL_RCC_ClockConfig+0x264>)
 80048f6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80048fa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048fc:	4b39      	ldr	r3, [pc, #228]	@ (80049e4 <HAL_RCC_ClockConfig+0x264>)
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	4936      	ldr	r1, [pc, #216]	@ (80049e4 <HAL_RCC_ClockConfig+0x264>)
 800490a:	4313      	orrs	r3, r2
 800490c:	608b      	str	r3, [r1, #8]
 800490e:	e008      	b.n	8004922 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	2b80      	cmp	r3, #128	@ 0x80
 8004914:	d105      	bne.n	8004922 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004916:	4b33      	ldr	r3, [pc, #204]	@ (80049e4 <HAL_RCC_ClockConfig+0x264>)
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	4a32      	ldr	r2, [pc, #200]	@ (80049e4 <HAL_RCC_ClockConfig+0x264>)
 800491c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004920:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004922:	4b2f      	ldr	r3, [pc, #188]	@ (80049e0 <HAL_RCC_ClockConfig+0x260>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 030f 	and.w	r3, r3, #15
 800492a:	683a      	ldr	r2, [r7, #0]
 800492c:	429a      	cmp	r2, r3
 800492e:	d21d      	bcs.n	800496c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004930:	4b2b      	ldr	r3, [pc, #172]	@ (80049e0 <HAL_RCC_ClockConfig+0x260>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f023 020f 	bic.w	r2, r3, #15
 8004938:	4929      	ldr	r1, [pc, #164]	@ (80049e0 <HAL_RCC_ClockConfig+0x260>)
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	4313      	orrs	r3, r2
 800493e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004940:	f7ff f8ac 	bl	8003a9c <HAL_GetTick>
 8004944:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004946:	e00a      	b.n	800495e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004948:	f7ff f8a8 	bl	8003a9c <HAL_GetTick>
 800494c:	4602      	mov	r2, r0
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	1ad3      	subs	r3, r2, r3
 8004952:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004956:	4293      	cmp	r3, r2
 8004958:	d901      	bls.n	800495e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800495a:	2303      	movs	r3, #3
 800495c:	e03b      	b.n	80049d6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800495e:	4b20      	ldr	r3, [pc, #128]	@ (80049e0 <HAL_RCC_ClockConfig+0x260>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 030f 	and.w	r3, r3, #15
 8004966:	683a      	ldr	r2, [r7, #0]
 8004968:	429a      	cmp	r2, r3
 800496a:	d1ed      	bne.n	8004948 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f003 0304 	and.w	r3, r3, #4
 8004974:	2b00      	cmp	r3, #0
 8004976:	d008      	beq.n	800498a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004978:	4b1a      	ldr	r3, [pc, #104]	@ (80049e4 <HAL_RCC_ClockConfig+0x264>)
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	68db      	ldr	r3, [r3, #12]
 8004984:	4917      	ldr	r1, [pc, #92]	@ (80049e4 <HAL_RCC_ClockConfig+0x264>)
 8004986:	4313      	orrs	r3, r2
 8004988:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f003 0308 	and.w	r3, r3, #8
 8004992:	2b00      	cmp	r3, #0
 8004994:	d009      	beq.n	80049aa <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004996:	4b13      	ldr	r3, [pc, #76]	@ (80049e4 <HAL_RCC_ClockConfig+0x264>)
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	691b      	ldr	r3, [r3, #16]
 80049a2:	00db      	lsls	r3, r3, #3
 80049a4:	490f      	ldr	r1, [pc, #60]	@ (80049e4 <HAL_RCC_ClockConfig+0x264>)
 80049a6:	4313      	orrs	r3, r2
 80049a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80049aa:	f000 f825 	bl	80049f8 <HAL_RCC_GetSysClockFreq>
 80049ae:	4602      	mov	r2, r0
 80049b0:	4b0c      	ldr	r3, [pc, #48]	@ (80049e4 <HAL_RCC_ClockConfig+0x264>)
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	091b      	lsrs	r3, r3, #4
 80049b6:	f003 030f 	and.w	r3, r3, #15
 80049ba:	490c      	ldr	r1, [pc, #48]	@ (80049ec <HAL_RCC_ClockConfig+0x26c>)
 80049bc:	5ccb      	ldrb	r3, [r1, r3]
 80049be:	f003 031f 	and.w	r3, r3, #31
 80049c2:	fa22 f303 	lsr.w	r3, r2, r3
 80049c6:	4a0a      	ldr	r2, [pc, #40]	@ (80049f0 <HAL_RCC_ClockConfig+0x270>)
 80049c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80049ca:	4b0a      	ldr	r3, [pc, #40]	@ (80049f4 <HAL_RCC_ClockConfig+0x274>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4618      	mov	r0, r3
 80049d0:	f7ff f818 	bl	8003a04 <HAL_InitTick>
 80049d4:	4603      	mov	r3, r0
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3718      	adds	r7, #24
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}
 80049de:	bf00      	nop
 80049e0:	40022000 	.word	0x40022000
 80049e4:	40021000 	.word	0x40021000
 80049e8:	04c4b400 	.word	0x04c4b400
 80049ec:	080083e4 	.word	0x080083e4
 80049f0:	20000038 	.word	0x20000038
 80049f4:	20000068 	.word	0x20000068

080049f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b087      	sub	sp, #28
 80049fc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80049fe:	4b2c      	ldr	r3, [pc, #176]	@ (8004ab0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	f003 030c 	and.w	r3, r3, #12
 8004a06:	2b04      	cmp	r3, #4
 8004a08:	d102      	bne.n	8004a10 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004a0a:	4b2a      	ldr	r3, [pc, #168]	@ (8004ab4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004a0c:	613b      	str	r3, [r7, #16]
 8004a0e:	e047      	b.n	8004aa0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004a10:	4b27      	ldr	r3, [pc, #156]	@ (8004ab0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	f003 030c 	and.w	r3, r3, #12
 8004a18:	2b08      	cmp	r3, #8
 8004a1a:	d102      	bne.n	8004a22 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004a1c:	4b26      	ldr	r3, [pc, #152]	@ (8004ab8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004a1e:	613b      	str	r3, [r7, #16]
 8004a20:	e03e      	b.n	8004aa0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004a22:	4b23      	ldr	r3, [pc, #140]	@ (8004ab0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	f003 030c 	and.w	r3, r3, #12
 8004a2a:	2b0c      	cmp	r3, #12
 8004a2c:	d136      	bne.n	8004a9c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004a2e:	4b20      	ldr	r3, [pc, #128]	@ (8004ab0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a30:	68db      	ldr	r3, [r3, #12]
 8004a32:	f003 0303 	and.w	r3, r3, #3
 8004a36:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004a38:	4b1d      	ldr	r3, [pc, #116]	@ (8004ab0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a3a:	68db      	ldr	r3, [r3, #12]
 8004a3c:	091b      	lsrs	r3, r3, #4
 8004a3e:	f003 030f 	and.w	r3, r3, #15
 8004a42:	3301      	adds	r3, #1
 8004a44:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2b03      	cmp	r3, #3
 8004a4a:	d10c      	bne.n	8004a66 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004a4c:	4a1a      	ldr	r2, [pc, #104]	@ (8004ab8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a54:	4a16      	ldr	r2, [pc, #88]	@ (8004ab0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a56:	68d2      	ldr	r2, [r2, #12]
 8004a58:	0a12      	lsrs	r2, r2, #8
 8004a5a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004a5e:	fb02 f303 	mul.w	r3, r2, r3
 8004a62:	617b      	str	r3, [r7, #20]
      break;
 8004a64:	e00c      	b.n	8004a80 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004a66:	4a13      	ldr	r2, [pc, #76]	@ (8004ab4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a6e:	4a10      	ldr	r2, [pc, #64]	@ (8004ab0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a70:	68d2      	ldr	r2, [r2, #12]
 8004a72:	0a12      	lsrs	r2, r2, #8
 8004a74:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004a78:	fb02 f303 	mul.w	r3, r2, r3
 8004a7c:	617b      	str	r3, [r7, #20]
      break;
 8004a7e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004a80:	4b0b      	ldr	r3, [pc, #44]	@ (8004ab0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	0e5b      	lsrs	r3, r3, #25
 8004a86:	f003 0303 	and.w	r3, r3, #3
 8004a8a:	3301      	adds	r3, #1
 8004a8c:	005b      	lsls	r3, r3, #1
 8004a8e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004a90:	697a      	ldr	r2, [r7, #20]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a98:	613b      	str	r3, [r7, #16]
 8004a9a:	e001      	b.n	8004aa0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004aa0:	693b      	ldr	r3, [r7, #16]
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	371c      	adds	r7, #28
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aac:	4770      	bx	lr
 8004aae:	bf00      	nop
 8004ab0:	40021000 	.word	0x40021000
 8004ab4:	00f42400 	.word	0x00f42400
 8004ab8:	007a1200 	.word	0x007a1200

08004abc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b087      	sub	sp, #28
 8004ac0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004ac2:	4b1e      	ldr	r3, [pc, #120]	@ (8004b3c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004ac4:	68db      	ldr	r3, [r3, #12]
 8004ac6:	f003 0303 	and.w	r3, r3, #3
 8004aca:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004acc:	4b1b      	ldr	r3, [pc, #108]	@ (8004b3c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004ace:	68db      	ldr	r3, [r3, #12]
 8004ad0:	091b      	lsrs	r3, r3, #4
 8004ad2:	f003 030f 	and.w	r3, r3, #15
 8004ad6:	3301      	adds	r3, #1
 8004ad8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	2b03      	cmp	r3, #3
 8004ade:	d10c      	bne.n	8004afa <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004ae0:	4a17      	ldr	r2, [pc, #92]	@ (8004b40 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ae8:	4a14      	ldr	r2, [pc, #80]	@ (8004b3c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004aea:	68d2      	ldr	r2, [r2, #12]
 8004aec:	0a12      	lsrs	r2, r2, #8
 8004aee:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004af2:	fb02 f303 	mul.w	r3, r2, r3
 8004af6:	617b      	str	r3, [r7, #20]
    break;
 8004af8:	e00c      	b.n	8004b14 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004afa:	4a12      	ldr	r2, [pc, #72]	@ (8004b44 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b02:	4a0e      	ldr	r2, [pc, #56]	@ (8004b3c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004b04:	68d2      	ldr	r2, [r2, #12]
 8004b06:	0a12      	lsrs	r2, r2, #8
 8004b08:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004b0c:	fb02 f303 	mul.w	r3, r2, r3
 8004b10:	617b      	str	r3, [r7, #20]
    break;
 8004b12:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004b14:	4b09      	ldr	r3, [pc, #36]	@ (8004b3c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004b16:	68db      	ldr	r3, [r3, #12]
 8004b18:	0e5b      	lsrs	r3, r3, #25
 8004b1a:	f003 0303 	and.w	r3, r3, #3
 8004b1e:	3301      	adds	r3, #1
 8004b20:	005b      	lsls	r3, r3, #1
 8004b22:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004b24:	697a      	ldr	r2, [r7, #20]
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b2c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004b2e:	687b      	ldr	r3, [r7, #4]
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	371c      	adds	r7, #28
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr
 8004b3c:	40021000 	.word	0x40021000
 8004b40:	007a1200 	.word	0x007a1200
 8004b44:	00f42400 	.word	0x00f42400

08004b48 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b084      	sub	sp, #16
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d101      	bne.n	8004b5a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	e09d      	b.n	8004c96 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d108      	bne.n	8004b74 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004b6a:	d009      	beq.n	8004b80 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	61da      	str	r2, [r3, #28]
 8004b72:	e005      	b.n	8004b80 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2200      	movs	r2, #0
 8004b78:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2200      	movs	r2, #0
 8004b84:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d106      	bne.n	8004ba0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2200      	movs	r2, #0
 8004b96:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f7fd ff84 	bl	8002aa8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2202      	movs	r2, #2
 8004ba4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004bb6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004bc0:	d902      	bls.n	8004bc8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	60fb      	str	r3, [r7, #12]
 8004bc6:	e002      	b.n	8004bce <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004bc8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004bcc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	68db      	ldr	r3, [r3, #12]
 8004bd2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004bd6:	d007      	beq.n	8004be8 <HAL_SPI_Init+0xa0>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	68db      	ldr	r3, [r3, #12]
 8004bdc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004be0:	d002      	beq.n	8004be8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2200      	movs	r2, #0
 8004be6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004bf8:	431a      	orrs	r2, r3
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	691b      	ldr	r3, [r3, #16]
 8004bfe:	f003 0302 	and.w	r3, r3, #2
 8004c02:	431a      	orrs	r2, r3
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	695b      	ldr	r3, [r3, #20]
 8004c08:	f003 0301 	and.w	r3, r3, #1
 8004c0c:	431a      	orrs	r2, r3
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	699b      	ldr	r3, [r3, #24]
 8004c12:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c16:	431a      	orrs	r2, r3
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	69db      	ldr	r3, [r3, #28]
 8004c1c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004c20:	431a      	orrs	r2, r3
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6a1b      	ldr	r3, [r3, #32]
 8004c26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c2a:	ea42 0103 	orr.w	r1, r2, r3
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c32:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	430a      	orrs	r2, r1
 8004c3c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	699b      	ldr	r3, [r3, #24]
 8004c42:	0c1b      	lsrs	r3, r3, #16
 8004c44:	f003 0204 	and.w	r2, r3, #4
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c4c:	f003 0310 	and.w	r3, r3, #16
 8004c50:	431a      	orrs	r2, r3
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c56:	f003 0308 	and.w	r3, r3, #8
 8004c5a:	431a      	orrs	r2, r3
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	68db      	ldr	r3, [r3, #12]
 8004c60:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004c64:	ea42 0103 	orr.w	r1, r2, r3
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	430a      	orrs	r2, r1
 8004c74:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	69da      	ldr	r2, [r3, #28]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004c84:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2201      	movs	r2, #1
 8004c90:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004c94:	2300      	movs	r3, #0
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3710      	adds	r7, #16
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}

08004c9e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c9e:	b580      	push	{r7, lr}
 8004ca0:	b088      	sub	sp, #32
 8004ca2:	af00      	add	r7, sp, #0
 8004ca4:	60f8      	str	r0, [r7, #12]
 8004ca6:	60b9      	str	r1, [r7, #8]
 8004ca8:	603b      	str	r3, [r7, #0]
 8004caa:	4613      	mov	r3, r2
 8004cac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	d101      	bne.n	8004cc0 <HAL_SPI_Transmit+0x22>
 8004cbc:	2302      	movs	r3, #2
 8004cbe:	e15f      	b.n	8004f80 <HAL_SPI_Transmit+0x2e2>
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004cc8:	f7fe fee8 	bl	8003a9c <HAL_GetTick>
 8004ccc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004cce:	88fb      	ldrh	r3, [r7, #6]
 8004cd0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004cd8:	b2db      	uxtb	r3, r3
 8004cda:	2b01      	cmp	r3, #1
 8004cdc:	d002      	beq.n	8004ce4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004cde:	2302      	movs	r3, #2
 8004ce0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004ce2:	e148      	b.n	8004f76 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d002      	beq.n	8004cf0 <HAL_SPI_Transmit+0x52>
 8004cea:	88fb      	ldrh	r3, [r7, #6]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d102      	bne.n	8004cf6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004cf4:	e13f      	b.n	8004f76 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2203      	movs	r2, #3
 8004cfa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2200      	movs	r2, #0
 8004d02:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	68ba      	ldr	r2, [r7, #8]
 8004d08:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	88fa      	ldrh	r2, [r7, #6]
 8004d0e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	88fa      	ldrh	r2, [r7, #6]
 8004d14:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2200      	movs	r2, #0
 8004d28:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2200      	movs	r2, #0
 8004d36:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d40:	d10f      	bne.n	8004d62 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	681a      	ldr	r2, [r3, #0]
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004d50:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004d60:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d6c:	2b40      	cmp	r3, #64	@ 0x40
 8004d6e:	d007      	beq.n	8004d80 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004d7e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	68db      	ldr	r3, [r3, #12]
 8004d84:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004d88:	d94f      	bls.n	8004e2a <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d002      	beq.n	8004d98 <HAL_SPI_Transmit+0xfa>
 8004d92:	8afb      	ldrh	r3, [r7, #22]
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d142      	bne.n	8004e1e <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d9c:	881a      	ldrh	r2, [r3, #0]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004da8:	1c9a      	adds	r2, r3, #2
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004db2:	b29b      	uxth	r3, r3
 8004db4:	3b01      	subs	r3, #1
 8004db6:	b29a      	uxth	r2, r3
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004dbc:	e02f      	b.n	8004e1e <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	f003 0302 	and.w	r3, r3, #2
 8004dc8:	2b02      	cmp	r3, #2
 8004dca:	d112      	bne.n	8004df2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dd0:	881a      	ldrh	r2, [r3, #0]
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ddc:	1c9a      	adds	r2, r3, #2
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	3b01      	subs	r3, #1
 8004dea:	b29a      	uxth	r2, r3
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004df0:	e015      	b.n	8004e1e <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004df2:	f7fe fe53 	bl	8003a9c <HAL_GetTick>
 8004df6:	4602      	mov	r2, r0
 8004df8:	69bb      	ldr	r3, [r7, #24]
 8004dfa:	1ad3      	subs	r3, r2, r3
 8004dfc:	683a      	ldr	r2, [r7, #0]
 8004dfe:	429a      	cmp	r2, r3
 8004e00:	d803      	bhi.n	8004e0a <HAL_SPI_Transmit+0x16c>
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e08:	d102      	bne.n	8004e10 <HAL_SPI_Transmit+0x172>
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d106      	bne.n	8004e1e <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8004e10:	2303      	movs	r3, #3
 8004e12:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2201      	movs	r2, #1
 8004e18:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8004e1c:	e0ab      	b.n	8004f76 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e22:	b29b      	uxth	r3, r3
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d1ca      	bne.n	8004dbe <HAL_SPI_Transmit+0x120>
 8004e28:	e080      	b.n	8004f2c <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d002      	beq.n	8004e38 <HAL_SPI_Transmit+0x19a>
 8004e32:	8afb      	ldrh	r3, [r7, #22]
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	d174      	bne.n	8004f22 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e3c:	b29b      	uxth	r3, r3
 8004e3e:	2b01      	cmp	r3, #1
 8004e40:	d912      	bls.n	8004e68 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e46:	881a      	ldrh	r2, [r3, #0]
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e52:	1c9a      	adds	r2, r3, #2
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e5c:	b29b      	uxth	r3, r3
 8004e5e:	3b02      	subs	r3, #2
 8004e60:	b29a      	uxth	r2, r3
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004e66:	e05c      	b.n	8004f22 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	330c      	adds	r3, #12
 8004e72:	7812      	ldrb	r2, [r2, #0]
 8004e74:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e7a:	1c5a      	adds	r2, r3, #1
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e84:	b29b      	uxth	r3, r3
 8004e86:	3b01      	subs	r3, #1
 8004e88:	b29a      	uxth	r2, r3
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004e8e:	e048      	b.n	8004f22 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	f003 0302 	and.w	r3, r3, #2
 8004e9a:	2b02      	cmp	r3, #2
 8004e9c:	d12b      	bne.n	8004ef6 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ea2:	b29b      	uxth	r3, r3
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d912      	bls.n	8004ece <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004eac:	881a      	ldrh	r2, [r3, #0]
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004eb8:	1c9a      	adds	r2, r3, #2
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	3b02      	subs	r3, #2
 8004ec6:	b29a      	uxth	r2, r3
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004ecc:	e029      	b.n	8004f22 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	330c      	adds	r3, #12
 8004ed8:	7812      	ldrb	r2, [r2, #0]
 8004eda:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ee0:	1c5a      	adds	r2, r3, #1
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004eea:	b29b      	uxth	r3, r3
 8004eec:	3b01      	subs	r3, #1
 8004eee:	b29a      	uxth	r2, r3
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004ef4:	e015      	b.n	8004f22 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ef6:	f7fe fdd1 	bl	8003a9c <HAL_GetTick>
 8004efa:	4602      	mov	r2, r0
 8004efc:	69bb      	ldr	r3, [r7, #24]
 8004efe:	1ad3      	subs	r3, r2, r3
 8004f00:	683a      	ldr	r2, [r7, #0]
 8004f02:	429a      	cmp	r2, r3
 8004f04:	d803      	bhi.n	8004f0e <HAL_SPI_Transmit+0x270>
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f0c:	d102      	bne.n	8004f14 <HAL_SPI_Transmit+0x276>
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d106      	bne.n	8004f22 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8004f14:	2303      	movs	r3, #3
 8004f16:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8004f20:	e029      	b.n	8004f76 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d1b1      	bne.n	8004e90 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f2c:	69ba      	ldr	r2, [r7, #24]
 8004f2e:	6839      	ldr	r1, [r7, #0]
 8004f30:	68f8      	ldr	r0, [r7, #12]
 8004f32:	f000 fcf9 	bl	8005928 <SPI_EndRxTxTransaction>
 8004f36:	4603      	mov	r3, r0
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d002      	beq.n	8004f42 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2220      	movs	r2, #32
 8004f40:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d10a      	bne.n	8004f60 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	613b      	str	r3, [r7, #16]
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	68db      	ldr	r3, [r3, #12]
 8004f54:	613b      	str	r3, [r7, #16]
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	689b      	ldr	r3, [r3, #8]
 8004f5c:	613b      	str	r3, [r7, #16]
 8004f5e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d002      	beq.n	8004f6e <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	77fb      	strb	r3, [r7, #31]
 8004f6c:	e003      	b.n	8004f76 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2201      	movs	r2, #1
 8004f72:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8004f7e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	3720      	adds	r7, #32
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}

08004f88 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b088      	sub	sp, #32
 8004f8c:	af02      	add	r7, sp, #8
 8004f8e:	60f8      	str	r0, [r7, #12]
 8004f90:	60b9      	str	r1, [r7, #8]
 8004f92:	603b      	str	r3, [r7, #0]
 8004f94:	4613      	mov	r3, r2
 8004f96:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004fa2:	b2db      	uxtb	r3, r3
 8004fa4:	2b01      	cmp	r3, #1
 8004fa6:	d002      	beq.n	8004fae <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8004fa8:	2302      	movs	r3, #2
 8004faa:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004fac:	e11a      	b.n	80051e4 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004fb6:	d112      	bne.n	8004fde <HAL_SPI_Receive+0x56>
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d10e      	bne.n	8004fde <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2204      	movs	r2, #4
 8004fc4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004fc8:	88fa      	ldrh	r2, [r7, #6]
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	9300      	str	r3, [sp, #0]
 8004fce:	4613      	mov	r3, r2
 8004fd0:	68ba      	ldr	r2, [r7, #8]
 8004fd2:	68b9      	ldr	r1, [r7, #8]
 8004fd4:	68f8      	ldr	r0, [r7, #12]
 8004fd6:	f000 f90e 	bl	80051f6 <HAL_SPI_TransmitReceive>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	e107      	b.n	80051ee <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	d101      	bne.n	8004fec <HAL_SPI_Receive+0x64>
 8004fe8:	2302      	movs	r3, #2
 8004fea:	e100      	b.n	80051ee <HAL_SPI_Receive+0x266>
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	2201      	movs	r2, #1
 8004ff0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ff4:	f7fe fd52 	bl	8003a9c <HAL_GetTick>
 8004ff8:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d002      	beq.n	8005006 <HAL_SPI_Receive+0x7e>
 8005000:	88fb      	ldrh	r3, [r7, #6]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d102      	bne.n	800500c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	75fb      	strb	r3, [r7, #23]
    goto error;
 800500a:	e0eb      	b.n	80051e4 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2204      	movs	r2, #4
 8005010:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2200      	movs	r2, #0
 8005018:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	68ba      	ldr	r2, [r7, #8]
 800501e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	88fa      	ldrh	r2, [r7, #6]
 8005024:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	88fa      	ldrh	r2, [r7, #6]
 800502c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2200      	movs	r2, #0
 8005034:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2200      	movs	r2, #0
 800503a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2200      	movs	r2, #0
 8005040:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2200      	movs	r2, #0
 8005046:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2200      	movs	r2, #0
 800504c:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	68db      	ldr	r3, [r3, #12]
 8005052:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005056:	d908      	bls.n	800506a <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	685a      	ldr	r2, [r3, #4]
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005066:	605a      	str	r2, [r3, #4]
 8005068:	e007      	b.n	800507a <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	685a      	ldr	r2, [r3, #4]
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005078:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005082:	d10f      	bne.n	80050a4 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	681a      	ldr	r2, [r3, #0]
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005092:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	681a      	ldr	r2, [r3, #0]
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80050a2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050ae:	2b40      	cmp	r3, #64	@ 0x40
 80050b0:	d007      	beq.n	80050c2 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80050c0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	68db      	ldr	r3, [r3, #12]
 80050c6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80050ca:	d86f      	bhi.n	80051ac <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80050cc:	e034      	b.n	8005138 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	f003 0301 	and.w	r3, r3, #1
 80050d8:	2b01      	cmp	r3, #1
 80050da:	d117      	bne.n	800510c <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f103 020c 	add.w	r2, r3, #12
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050e8:	7812      	ldrb	r2, [r2, #0]
 80050ea:	b2d2      	uxtb	r2, r2
 80050ec:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050f2:	1c5a      	adds	r2, r3, #1
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80050fe:	b29b      	uxth	r3, r3
 8005100:	3b01      	subs	r3, #1
 8005102:	b29a      	uxth	r2, r3
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800510a:	e015      	b.n	8005138 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800510c:	f7fe fcc6 	bl	8003a9c <HAL_GetTick>
 8005110:	4602      	mov	r2, r0
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	1ad3      	subs	r3, r2, r3
 8005116:	683a      	ldr	r2, [r7, #0]
 8005118:	429a      	cmp	r2, r3
 800511a:	d803      	bhi.n	8005124 <HAL_SPI_Receive+0x19c>
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005122:	d102      	bne.n	800512a <HAL_SPI_Receive+0x1a2>
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d106      	bne.n	8005138 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 800512a:	2303      	movs	r3, #3
 800512c:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	2201      	movs	r2, #1
 8005132:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8005136:	e055      	b.n	80051e4 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800513e:	b29b      	uxth	r3, r3
 8005140:	2b00      	cmp	r3, #0
 8005142:	d1c4      	bne.n	80050ce <HAL_SPI_Receive+0x146>
 8005144:	e038      	b.n	80051b8 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	f003 0301 	and.w	r3, r3, #1
 8005150:	2b01      	cmp	r3, #1
 8005152:	d115      	bne.n	8005180 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	68da      	ldr	r2, [r3, #12]
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800515e:	b292      	uxth	r2, r2
 8005160:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005166:	1c9a      	adds	r2, r3, #2
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005172:	b29b      	uxth	r3, r3
 8005174:	3b01      	subs	r3, #1
 8005176:	b29a      	uxth	r2, r3
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800517e:	e015      	b.n	80051ac <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005180:	f7fe fc8c 	bl	8003a9c <HAL_GetTick>
 8005184:	4602      	mov	r2, r0
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	1ad3      	subs	r3, r2, r3
 800518a:	683a      	ldr	r2, [r7, #0]
 800518c:	429a      	cmp	r2, r3
 800518e:	d803      	bhi.n	8005198 <HAL_SPI_Receive+0x210>
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005196:	d102      	bne.n	800519e <HAL_SPI_Receive+0x216>
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d106      	bne.n	80051ac <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 800519e:	2303      	movs	r3, #3
 80051a0:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2201      	movs	r2, #1
 80051a6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80051aa:	e01b      	b.n	80051e4 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80051b2:	b29b      	uxth	r3, r3
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d1c6      	bne.n	8005146 <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80051b8:	693a      	ldr	r2, [r7, #16]
 80051ba:	6839      	ldr	r1, [r7, #0]
 80051bc:	68f8      	ldr	r0, [r7, #12]
 80051be:	f000 fb5b 	bl	8005878 <SPI_EndRxTransaction>
 80051c2:	4603      	mov	r3, r0
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d002      	beq.n	80051ce <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2220      	movs	r2, #32
 80051cc:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d002      	beq.n	80051dc <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	75fb      	strb	r3, [r7, #23]
 80051da:	e003      	b.n	80051e4 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2201      	movs	r2, #1
 80051e0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	2200      	movs	r2, #0
 80051e8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80051ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3718      	adds	r7, #24
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}

080051f6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80051f6:	b580      	push	{r7, lr}
 80051f8:	b08a      	sub	sp, #40	@ 0x28
 80051fa:	af00      	add	r7, sp, #0
 80051fc:	60f8      	str	r0, [r7, #12]
 80051fe:	60b9      	str	r1, [r7, #8]
 8005200:	607a      	str	r2, [r7, #4]
 8005202:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005204:	2301      	movs	r3, #1
 8005206:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005208:	2300      	movs	r3, #0
 800520a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005214:	2b01      	cmp	r3, #1
 8005216:	d101      	bne.n	800521c <HAL_SPI_TransmitReceive+0x26>
 8005218:	2302      	movs	r3, #2
 800521a:	e20a      	b.n	8005632 <HAL_SPI_TransmitReceive+0x43c>
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2201      	movs	r2, #1
 8005220:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005224:	f7fe fc3a 	bl	8003a9c <HAL_GetTick>
 8005228:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005230:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005238:	887b      	ldrh	r3, [r7, #2]
 800523a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800523c:	887b      	ldrh	r3, [r7, #2]
 800523e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005240:	7efb      	ldrb	r3, [r7, #27]
 8005242:	2b01      	cmp	r3, #1
 8005244:	d00e      	beq.n	8005264 <HAL_SPI_TransmitReceive+0x6e>
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800524c:	d106      	bne.n	800525c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	689b      	ldr	r3, [r3, #8]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d102      	bne.n	800525c <HAL_SPI_TransmitReceive+0x66>
 8005256:	7efb      	ldrb	r3, [r7, #27]
 8005258:	2b04      	cmp	r3, #4
 800525a:	d003      	beq.n	8005264 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800525c:	2302      	movs	r3, #2
 800525e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8005262:	e1e0      	b.n	8005626 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d005      	beq.n	8005276 <HAL_SPI_TransmitReceive+0x80>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d002      	beq.n	8005276 <HAL_SPI_TransmitReceive+0x80>
 8005270:	887b      	ldrh	r3, [r7, #2]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d103      	bne.n	800527e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800527c:	e1d3      	b.n	8005626 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005284:	b2db      	uxtb	r3, r3
 8005286:	2b04      	cmp	r3, #4
 8005288:	d003      	beq.n	8005292 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2205      	movs	r2, #5
 800528e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2200      	movs	r2, #0
 8005296:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	687a      	ldr	r2, [r7, #4]
 800529c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	887a      	ldrh	r2, [r7, #2]
 80052a2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	887a      	ldrh	r2, [r7, #2]
 80052aa:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	68ba      	ldr	r2, [r7, #8]
 80052b2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	887a      	ldrh	r2, [r7, #2]
 80052b8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	887a      	ldrh	r2, [r7, #2]
 80052be:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2200      	movs	r2, #0
 80052c4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2200      	movs	r2, #0
 80052ca:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	68db      	ldr	r3, [r3, #12]
 80052d0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80052d4:	d802      	bhi.n	80052dc <HAL_SPI_TransmitReceive+0xe6>
 80052d6:	8a3b      	ldrh	r3, [r7, #16]
 80052d8:	2b01      	cmp	r3, #1
 80052da:	d908      	bls.n	80052ee <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	685a      	ldr	r2, [r3, #4]
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80052ea:	605a      	str	r2, [r3, #4]
 80052ec:	e007      	b.n	80052fe <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	685a      	ldr	r2, [r3, #4]
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80052fc:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005308:	2b40      	cmp	r3, #64	@ 0x40
 800530a:	d007      	beq.n	800531c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	681a      	ldr	r2, [r3, #0]
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800531a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	68db      	ldr	r3, [r3, #12]
 8005320:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005324:	f240 8081 	bls.w	800542a <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d002      	beq.n	8005336 <HAL_SPI_TransmitReceive+0x140>
 8005330:	8a7b      	ldrh	r3, [r7, #18]
 8005332:	2b01      	cmp	r3, #1
 8005334:	d16d      	bne.n	8005412 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800533a:	881a      	ldrh	r2, [r3, #0]
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005346:	1c9a      	adds	r2, r3, #2
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005350:	b29b      	uxth	r3, r3
 8005352:	3b01      	subs	r3, #1
 8005354:	b29a      	uxth	r2, r3
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800535a:	e05a      	b.n	8005412 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	689b      	ldr	r3, [r3, #8]
 8005362:	f003 0302 	and.w	r3, r3, #2
 8005366:	2b02      	cmp	r3, #2
 8005368:	d11b      	bne.n	80053a2 <HAL_SPI_TransmitReceive+0x1ac>
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800536e:	b29b      	uxth	r3, r3
 8005370:	2b00      	cmp	r3, #0
 8005372:	d016      	beq.n	80053a2 <HAL_SPI_TransmitReceive+0x1ac>
 8005374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005376:	2b01      	cmp	r3, #1
 8005378:	d113      	bne.n	80053a2 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800537e:	881a      	ldrh	r2, [r3, #0]
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800538a:	1c9a      	adds	r2, r3, #2
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005394:	b29b      	uxth	r3, r3
 8005396:	3b01      	subs	r3, #1
 8005398:	b29a      	uxth	r2, r3
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800539e:	2300      	movs	r3, #0
 80053a0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	f003 0301 	and.w	r3, r3, #1
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d11c      	bne.n	80053ea <HAL_SPI_TransmitReceive+0x1f4>
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80053b6:	b29b      	uxth	r3, r3
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d016      	beq.n	80053ea <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	68da      	ldr	r2, [r3, #12]
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053c6:	b292      	uxth	r2, r2
 80053c8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053ce:	1c9a      	adds	r2, r3, #2
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80053da:	b29b      	uxth	r3, r3
 80053dc:	3b01      	subs	r3, #1
 80053de:	b29a      	uxth	r2, r3
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80053e6:	2301      	movs	r3, #1
 80053e8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80053ea:	f7fe fb57 	bl	8003a9c <HAL_GetTick>
 80053ee:	4602      	mov	r2, r0
 80053f0:	69fb      	ldr	r3, [r7, #28]
 80053f2:	1ad3      	subs	r3, r2, r3
 80053f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80053f6:	429a      	cmp	r2, r3
 80053f8:	d80b      	bhi.n	8005412 <HAL_SPI_TransmitReceive+0x21c>
 80053fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005400:	d007      	beq.n	8005412 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8005402:	2303      	movs	r3, #3
 8005404:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2201      	movs	r2, #1
 800540c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8005410:	e109      	b.n	8005626 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005416:	b29b      	uxth	r3, r3
 8005418:	2b00      	cmp	r3, #0
 800541a:	d19f      	bne.n	800535c <HAL_SPI_TransmitReceive+0x166>
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005422:	b29b      	uxth	r3, r3
 8005424:	2b00      	cmp	r3, #0
 8005426:	d199      	bne.n	800535c <HAL_SPI_TransmitReceive+0x166>
 8005428:	e0e3      	b.n	80055f2 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d003      	beq.n	800543a <HAL_SPI_TransmitReceive+0x244>
 8005432:	8a7b      	ldrh	r3, [r7, #18]
 8005434:	2b01      	cmp	r3, #1
 8005436:	f040 80cf 	bne.w	80055d8 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800543e:	b29b      	uxth	r3, r3
 8005440:	2b01      	cmp	r3, #1
 8005442:	d912      	bls.n	800546a <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005448:	881a      	ldrh	r2, [r3, #0]
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005454:	1c9a      	adds	r2, r3, #2
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800545e:	b29b      	uxth	r3, r3
 8005460:	3b02      	subs	r3, #2
 8005462:	b29a      	uxth	r2, r3
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005468:	e0b6      	b.n	80055d8 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	330c      	adds	r3, #12
 8005474:	7812      	ldrb	r2, [r2, #0]
 8005476:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800547c:	1c5a      	adds	r2, r3, #1
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005486:	b29b      	uxth	r3, r3
 8005488:	3b01      	subs	r3, #1
 800548a:	b29a      	uxth	r2, r3
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005490:	e0a2      	b.n	80055d8 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	689b      	ldr	r3, [r3, #8]
 8005498:	f003 0302 	and.w	r3, r3, #2
 800549c:	2b02      	cmp	r3, #2
 800549e:	d134      	bne.n	800550a <HAL_SPI_TransmitReceive+0x314>
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80054a4:	b29b      	uxth	r3, r3
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d02f      	beq.n	800550a <HAL_SPI_TransmitReceive+0x314>
 80054aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	d12c      	bne.n	800550a <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80054b4:	b29b      	uxth	r3, r3
 80054b6:	2b01      	cmp	r3, #1
 80054b8:	d912      	bls.n	80054e0 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054be:	881a      	ldrh	r2, [r3, #0]
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054ca:	1c9a      	adds	r2, r3, #2
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80054d4:	b29b      	uxth	r3, r3
 80054d6:	3b02      	subs	r3, #2
 80054d8:	b29a      	uxth	r2, r3
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80054de:	e012      	b.n	8005506 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	330c      	adds	r3, #12
 80054ea:	7812      	ldrb	r2, [r2, #0]
 80054ec:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054f2:	1c5a      	adds	r2, r3, #1
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80054fc:	b29b      	uxth	r3, r3
 80054fe:	3b01      	subs	r3, #1
 8005500:	b29a      	uxth	r2, r3
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005506:	2300      	movs	r3, #0
 8005508:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	689b      	ldr	r3, [r3, #8]
 8005510:	f003 0301 	and.w	r3, r3, #1
 8005514:	2b01      	cmp	r3, #1
 8005516:	d148      	bne.n	80055aa <HAL_SPI_TransmitReceive+0x3b4>
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800551e:	b29b      	uxth	r3, r3
 8005520:	2b00      	cmp	r3, #0
 8005522:	d042      	beq.n	80055aa <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800552a:	b29b      	uxth	r3, r3
 800552c:	2b01      	cmp	r3, #1
 800552e:	d923      	bls.n	8005578 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	68da      	ldr	r2, [r3, #12]
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800553a:	b292      	uxth	r2, r2
 800553c:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005542:	1c9a      	adds	r2, r3, #2
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800554e:	b29b      	uxth	r3, r3
 8005550:	3b02      	subs	r3, #2
 8005552:	b29a      	uxth	r2, r3
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005560:	b29b      	uxth	r3, r3
 8005562:	2b01      	cmp	r3, #1
 8005564:	d81f      	bhi.n	80055a6 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	685a      	ldr	r2, [r3, #4]
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005574:	605a      	str	r2, [r3, #4]
 8005576:	e016      	b.n	80055a6 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f103 020c 	add.w	r2, r3, #12
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005584:	7812      	ldrb	r2, [r2, #0]
 8005586:	b2d2      	uxtb	r2, r2
 8005588:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800558e:	1c5a      	adds	r2, r3, #1
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800559a:	b29b      	uxth	r3, r3
 800559c:	3b01      	subs	r3, #1
 800559e:	b29a      	uxth	r2, r3
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80055a6:	2301      	movs	r3, #1
 80055a8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80055aa:	f7fe fa77 	bl	8003a9c <HAL_GetTick>
 80055ae:	4602      	mov	r2, r0
 80055b0:	69fb      	ldr	r3, [r7, #28]
 80055b2:	1ad3      	subs	r3, r2, r3
 80055b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055b6:	429a      	cmp	r2, r3
 80055b8:	d803      	bhi.n	80055c2 <HAL_SPI_TransmitReceive+0x3cc>
 80055ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055c0:	d102      	bne.n	80055c8 <HAL_SPI_TransmitReceive+0x3d2>
 80055c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d107      	bne.n	80055d8 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 80055c8:	2303      	movs	r3, #3
 80055ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	2201      	movs	r2, #1
 80055d2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80055d6:	e026      	b.n	8005626 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80055dc:	b29b      	uxth	r3, r3
 80055de:	2b00      	cmp	r3, #0
 80055e0:	f47f af57 	bne.w	8005492 <HAL_SPI_TransmitReceive+0x29c>
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80055ea:	b29b      	uxth	r3, r3
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	f47f af50 	bne.w	8005492 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80055f2:	69fa      	ldr	r2, [r7, #28]
 80055f4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80055f6:	68f8      	ldr	r0, [r7, #12]
 80055f8:	f000 f996 	bl	8005928 <SPI_EndRxTxTransaction>
 80055fc:	4603      	mov	r3, r0
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d005      	beq.n	800560e <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8005602:	2301      	movs	r3, #1
 8005604:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2220      	movs	r2, #32
 800560c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005612:	2b00      	cmp	r3, #0
 8005614:	d003      	beq.n	800561e <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8005616:	2301      	movs	r3, #1
 8005618:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800561c:	e003      	b.n	8005626 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2201      	movs	r2, #1
 8005622:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2200      	movs	r2, #0
 800562a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800562e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8005632:	4618      	mov	r0, r3
 8005634:	3728      	adds	r7, #40	@ 0x28
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}
	...

0800563c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b088      	sub	sp, #32
 8005640:	af00      	add	r7, sp, #0
 8005642:	60f8      	str	r0, [r7, #12]
 8005644:	60b9      	str	r1, [r7, #8]
 8005646:	603b      	str	r3, [r7, #0]
 8005648:	4613      	mov	r3, r2
 800564a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800564c:	f7fe fa26 	bl	8003a9c <HAL_GetTick>
 8005650:	4602      	mov	r2, r0
 8005652:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005654:	1a9b      	subs	r3, r3, r2
 8005656:	683a      	ldr	r2, [r7, #0]
 8005658:	4413      	add	r3, r2
 800565a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800565c:	f7fe fa1e 	bl	8003a9c <HAL_GetTick>
 8005660:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005662:	4b39      	ldr	r3, [pc, #228]	@ (8005748 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	015b      	lsls	r3, r3, #5
 8005668:	0d1b      	lsrs	r3, r3, #20
 800566a:	69fa      	ldr	r2, [r7, #28]
 800566c:	fb02 f303 	mul.w	r3, r2, r3
 8005670:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005672:	e054      	b.n	800571e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	f1b3 3fff 	cmp.w	r3, #4294967295
 800567a:	d050      	beq.n	800571e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800567c:	f7fe fa0e 	bl	8003a9c <HAL_GetTick>
 8005680:	4602      	mov	r2, r0
 8005682:	69bb      	ldr	r3, [r7, #24]
 8005684:	1ad3      	subs	r3, r2, r3
 8005686:	69fa      	ldr	r2, [r7, #28]
 8005688:	429a      	cmp	r2, r3
 800568a:	d902      	bls.n	8005692 <SPI_WaitFlagStateUntilTimeout+0x56>
 800568c:	69fb      	ldr	r3, [r7, #28]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d13d      	bne.n	800570e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	685a      	ldr	r2, [r3, #4]
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80056a0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80056aa:	d111      	bne.n	80056d0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	689b      	ldr	r3, [r3, #8]
 80056b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80056b4:	d004      	beq.n	80056c0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	689b      	ldr	r3, [r3, #8]
 80056ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056be:	d107      	bne.n	80056d0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	681a      	ldr	r2, [r3, #0]
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80056ce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80056d8:	d10f      	bne.n	80056fa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	681a      	ldr	r2, [r3, #0]
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80056e8:	601a      	str	r2, [r3, #0]
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	681a      	ldr	r2, [r3, #0]
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80056f8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	2201      	movs	r2, #1
 80056fe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	2200      	movs	r2, #0
 8005706:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800570a:	2303      	movs	r3, #3
 800570c:	e017      	b.n	800573e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d101      	bne.n	8005718 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005714:	2300      	movs	r3, #0
 8005716:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	3b01      	subs	r3, #1
 800571c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	689a      	ldr	r2, [r3, #8]
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	4013      	ands	r3, r2
 8005728:	68ba      	ldr	r2, [r7, #8]
 800572a:	429a      	cmp	r2, r3
 800572c:	bf0c      	ite	eq
 800572e:	2301      	moveq	r3, #1
 8005730:	2300      	movne	r3, #0
 8005732:	b2db      	uxtb	r3, r3
 8005734:	461a      	mov	r2, r3
 8005736:	79fb      	ldrb	r3, [r7, #7]
 8005738:	429a      	cmp	r2, r3
 800573a:	d19b      	bne.n	8005674 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800573c:	2300      	movs	r3, #0
}
 800573e:	4618      	mov	r0, r3
 8005740:	3720      	adds	r7, #32
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}
 8005746:	bf00      	nop
 8005748:	20000038 	.word	0x20000038

0800574c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b08a      	sub	sp, #40	@ 0x28
 8005750:	af00      	add	r7, sp, #0
 8005752:	60f8      	str	r0, [r7, #12]
 8005754:	60b9      	str	r1, [r7, #8]
 8005756:	607a      	str	r2, [r7, #4]
 8005758:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800575a:	2300      	movs	r3, #0
 800575c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800575e:	f7fe f99d 	bl	8003a9c <HAL_GetTick>
 8005762:	4602      	mov	r2, r0
 8005764:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005766:	1a9b      	subs	r3, r3, r2
 8005768:	683a      	ldr	r2, [r7, #0]
 800576a:	4413      	add	r3, r2
 800576c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800576e:	f7fe f995 	bl	8003a9c <HAL_GetTick>
 8005772:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	330c      	adds	r3, #12
 800577a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800577c:	4b3d      	ldr	r3, [pc, #244]	@ (8005874 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800577e:	681a      	ldr	r2, [r3, #0]
 8005780:	4613      	mov	r3, r2
 8005782:	009b      	lsls	r3, r3, #2
 8005784:	4413      	add	r3, r2
 8005786:	00da      	lsls	r2, r3, #3
 8005788:	1ad3      	subs	r3, r2, r3
 800578a:	0d1b      	lsrs	r3, r3, #20
 800578c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800578e:	fb02 f303 	mul.w	r3, r2, r3
 8005792:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005794:	e060      	b.n	8005858 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800579c:	d107      	bne.n	80057ae <SPI_WaitFifoStateUntilTimeout+0x62>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d104      	bne.n	80057ae <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80057a4:	69fb      	ldr	r3, [r7, #28]
 80057a6:	781b      	ldrb	r3, [r3, #0]
 80057a8:	b2db      	uxtb	r3, r3
 80057aa:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80057ac:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057b4:	d050      	beq.n	8005858 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80057b6:	f7fe f971 	bl	8003a9c <HAL_GetTick>
 80057ba:	4602      	mov	r2, r0
 80057bc:	6a3b      	ldr	r3, [r7, #32]
 80057be:	1ad3      	subs	r3, r2, r3
 80057c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057c2:	429a      	cmp	r2, r3
 80057c4:	d902      	bls.n	80057cc <SPI_WaitFifoStateUntilTimeout+0x80>
 80057c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d13d      	bne.n	8005848 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	685a      	ldr	r2, [r3, #4]
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80057da:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80057e4:	d111      	bne.n	800580a <SPI_WaitFifoStateUntilTimeout+0xbe>
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80057ee:	d004      	beq.n	80057fa <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057f8:	d107      	bne.n	800580a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	681a      	ldr	r2, [r3, #0]
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005808:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800580e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005812:	d10f      	bne.n	8005834 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	681a      	ldr	r2, [r3, #0]
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005822:	601a      	str	r2, [r3, #0]
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	681a      	ldr	r2, [r3, #0]
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005832:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2201      	movs	r2, #1
 8005838:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2200      	movs	r2, #0
 8005840:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005844:	2303      	movs	r3, #3
 8005846:	e010      	b.n	800586a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005848:	69bb      	ldr	r3, [r7, #24]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d101      	bne.n	8005852 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800584e:	2300      	movs	r3, #0
 8005850:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8005852:	69bb      	ldr	r3, [r7, #24]
 8005854:	3b01      	subs	r3, #1
 8005856:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	689a      	ldr	r2, [r3, #8]
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	4013      	ands	r3, r2
 8005862:	687a      	ldr	r2, [r7, #4]
 8005864:	429a      	cmp	r2, r3
 8005866:	d196      	bne.n	8005796 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005868:	2300      	movs	r3, #0
}
 800586a:	4618      	mov	r0, r3
 800586c:	3728      	adds	r7, #40	@ 0x28
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}
 8005872:	bf00      	nop
 8005874:	20000038 	.word	0x20000038

08005878 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b086      	sub	sp, #24
 800587c:	af02      	add	r7, sp, #8
 800587e:	60f8      	str	r0, [r7, #12]
 8005880:	60b9      	str	r1, [r7, #8]
 8005882:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800588c:	d111      	bne.n	80058b2 <SPI_EndRxTransaction+0x3a>
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	689b      	ldr	r3, [r3, #8]
 8005892:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005896:	d004      	beq.n	80058a2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	689b      	ldr	r3, [r3, #8]
 800589c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80058a0:	d107      	bne.n	80058b2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	681a      	ldr	r2, [r3, #0]
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80058b0:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	9300      	str	r3, [sp, #0]
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	2200      	movs	r2, #0
 80058ba:	2180      	movs	r1, #128	@ 0x80
 80058bc:	68f8      	ldr	r0, [r7, #12]
 80058be:	f7ff febd 	bl	800563c <SPI_WaitFlagStateUntilTimeout>
 80058c2:	4603      	mov	r3, r0
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d007      	beq.n	80058d8 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80058cc:	f043 0220 	orr.w	r2, r3, #32
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80058d4:	2303      	movs	r3, #3
 80058d6:	e023      	b.n	8005920 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80058e0:	d11d      	bne.n	800591e <SPI_EndRxTransaction+0xa6>
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80058ea:	d004      	beq.n	80058f6 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80058f4:	d113      	bne.n	800591e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	9300      	str	r3, [sp, #0]
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	2200      	movs	r2, #0
 80058fe:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8005902:	68f8      	ldr	r0, [r7, #12]
 8005904:	f7ff ff22 	bl	800574c <SPI_WaitFifoStateUntilTimeout>
 8005908:	4603      	mov	r3, r0
 800590a:	2b00      	cmp	r3, #0
 800590c:	d007      	beq.n	800591e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005912:	f043 0220 	orr.w	r2, r3, #32
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800591a:	2303      	movs	r3, #3
 800591c:	e000      	b.n	8005920 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800591e:	2300      	movs	r3, #0
}
 8005920:	4618      	mov	r0, r3
 8005922:	3710      	adds	r7, #16
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}

08005928 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b086      	sub	sp, #24
 800592c:	af02      	add	r7, sp, #8
 800592e:	60f8      	str	r0, [r7, #12]
 8005930:	60b9      	str	r1, [r7, #8]
 8005932:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	9300      	str	r3, [sp, #0]
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	2200      	movs	r2, #0
 800593c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8005940:	68f8      	ldr	r0, [r7, #12]
 8005942:	f7ff ff03 	bl	800574c <SPI_WaitFifoStateUntilTimeout>
 8005946:	4603      	mov	r3, r0
 8005948:	2b00      	cmp	r3, #0
 800594a:	d007      	beq.n	800595c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005950:	f043 0220 	orr.w	r2, r3, #32
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005958:	2303      	movs	r3, #3
 800595a:	e027      	b.n	80059ac <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	9300      	str	r3, [sp, #0]
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	2200      	movs	r2, #0
 8005964:	2180      	movs	r1, #128	@ 0x80
 8005966:	68f8      	ldr	r0, [r7, #12]
 8005968:	f7ff fe68 	bl	800563c <SPI_WaitFlagStateUntilTimeout>
 800596c:	4603      	mov	r3, r0
 800596e:	2b00      	cmp	r3, #0
 8005970:	d007      	beq.n	8005982 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005976:	f043 0220 	orr.w	r2, r3, #32
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800597e:	2303      	movs	r3, #3
 8005980:	e014      	b.n	80059ac <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	9300      	str	r3, [sp, #0]
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	2200      	movs	r2, #0
 800598a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800598e:	68f8      	ldr	r0, [r7, #12]
 8005990:	f7ff fedc 	bl	800574c <SPI_WaitFifoStateUntilTimeout>
 8005994:	4603      	mov	r3, r0
 8005996:	2b00      	cmp	r3, #0
 8005998:	d007      	beq.n	80059aa <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800599e:	f043 0220 	orr.w	r2, r3, #32
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80059a6:	2303      	movs	r3, #3
 80059a8:	e000      	b.n	80059ac <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80059aa:	2300      	movs	r3, #0
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	3710      	adds	r7, #16
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}

080059b4 <malloc>:
 80059b4:	4b02      	ldr	r3, [pc, #8]	@ (80059c0 <malloc+0xc>)
 80059b6:	4601      	mov	r1, r0
 80059b8:	6818      	ldr	r0, [r3, #0]
 80059ba:	f000 b825 	b.w	8005a08 <_malloc_r>
 80059be:	bf00      	nop
 80059c0:	2000007c 	.word	0x2000007c

080059c4 <sbrk_aligned>:
 80059c4:	b570      	push	{r4, r5, r6, lr}
 80059c6:	4e0f      	ldr	r6, [pc, #60]	@ (8005a04 <sbrk_aligned+0x40>)
 80059c8:	460c      	mov	r4, r1
 80059ca:	6831      	ldr	r1, [r6, #0]
 80059cc:	4605      	mov	r5, r0
 80059ce:	b911      	cbnz	r1, 80059d6 <sbrk_aligned+0x12>
 80059d0:	f000 fba0 	bl	8006114 <_sbrk_r>
 80059d4:	6030      	str	r0, [r6, #0]
 80059d6:	4621      	mov	r1, r4
 80059d8:	4628      	mov	r0, r5
 80059da:	f000 fb9b 	bl	8006114 <_sbrk_r>
 80059de:	1c43      	adds	r3, r0, #1
 80059e0:	d103      	bne.n	80059ea <sbrk_aligned+0x26>
 80059e2:	f04f 34ff 	mov.w	r4, #4294967295
 80059e6:	4620      	mov	r0, r4
 80059e8:	bd70      	pop	{r4, r5, r6, pc}
 80059ea:	1cc4      	adds	r4, r0, #3
 80059ec:	f024 0403 	bic.w	r4, r4, #3
 80059f0:	42a0      	cmp	r0, r4
 80059f2:	d0f8      	beq.n	80059e6 <sbrk_aligned+0x22>
 80059f4:	1a21      	subs	r1, r4, r0
 80059f6:	4628      	mov	r0, r5
 80059f8:	f000 fb8c 	bl	8006114 <_sbrk_r>
 80059fc:	3001      	adds	r0, #1
 80059fe:	d1f2      	bne.n	80059e6 <sbrk_aligned+0x22>
 8005a00:	e7ef      	b.n	80059e2 <sbrk_aligned+0x1e>
 8005a02:	bf00      	nop
 8005a04:	2000172c 	.word	0x2000172c

08005a08 <_malloc_r>:
 8005a08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a0c:	1ccd      	adds	r5, r1, #3
 8005a0e:	f025 0503 	bic.w	r5, r5, #3
 8005a12:	3508      	adds	r5, #8
 8005a14:	2d0c      	cmp	r5, #12
 8005a16:	bf38      	it	cc
 8005a18:	250c      	movcc	r5, #12
 8005a1a:	2d00      	cmp	r5, #0
 8005a1c:	4606      	mov	r6, r0
 8005a1e:	db01      	blt.n	8005a24 <_malloc_r+0x1c>
 8005a20:	42a9      	cmp	r1, r5
 8005a22:	d904      	bls.n	8005a2e <_malloc_r+0x26>
 8005a24:	230c      	movs	r3, #12
 8005a26:	6033      	str	r3, [r6, #0]
 8005a28:	2000      	movs	r0, #0
 8005a2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a2e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005b04 <_malloc_r+0xfc>
 8005a32:	f000 f869 	bl	8005b08 <__malloc_lock>
 8005a36:	f8d8 3000 	ldr.w	r3, [r8]
 8005a3a:	461c      	mov	r4, r3
 8005a3c:	bb44      	cbnz	r4, 8005a90 <_malloc_r+0x88>
 8005a3e:	4629      	mov	r1, r5
 8005a40:	4630      	mov	r0, r6
 8005a42:	f7ff ffbf 	bl	80059c4 <sbrk_aligned>
 8005a46:	1c43      	adds	r3, r0, #1
 8005a48:	4604      	mov	r4, r0
 8005a4a:	d158      	bne.n	8005afe <_malloc_r+0xf6>
 8005a4c:	f8d8 4000 	ldr.w	r4, [r8]
 8005a50:	4627      	mov	r7, r4
 8005a52:	2f00      	cmp	r7, #0
 8005a54:	d143      	bne.n	8005ade <_malloc_r+0xd6>
 8005a56:	2c00      	cmp	r4, #0
 8005a58:	d04b      	beq.n	8005af2 <_malloc_r+0xea>
 8005a5a:	6823      	ldr	r3, [r4, #0]
 8005a5c:	4639      	mov	r1, r7
 8005a5e:	4630      	mov	r0, r6
 8005a60:	eb04 0903 	add.w	r9, r4, r3
 8005a64:	f000 fb56 	bl	8006114 <_sbrk_r>
 8005a68:	4581      	cmp	r9, r0
 8005a6a:	d142      	bne.n	8005af2 <_malloc_r+0xea>
 8005a6c:	6821      	ldr	r1, [r4, #0]
 8005a6e:	1a6d      	subs	r5, r5, r1
 8005a70:	4629      	mov	r1, r5
 8005a72:	4630      	mov	r0, r6
 8005a74:	f7ff ffa6 	bl	80059c4 <sbrk_aligned>
 8005a78:	3001      	adds	r0, #1
 8005a7a:	d03a      	beq.n	8005af2 <_malloc_r+0xea>
 8005a7c:	6823      	ldr	r3, [r4, #0]
 8005a7e:	442b      	add	r3, r5
 8005a80:	6023      	str	r3, [r4, #0]
 8005a82:	f8d8 3000 	ldr.w	r3, [r8]
 8005a86:	685a      	ldr	r2, [r3, #4]
 8005a88:	bb62      	cbnz	r2, 8005ae4 <_malloc_r+0xdc>
 8005a8a:	f8c8 7000 	str.w	r7, [r8]
 8005a8e:	e00f      	b.n	8005ab0 <_malloc_r+0xa8>
 8005a90:	6822      	ldr	r2, [r4, #0]
 8005a92:	1b52      	subs	r2, r2, r5
 8005a94:	d420      	bmi.n	8005ad8 <_malloc_r+0xd0>
 8005a96:	2a0b      	cmp	r2, #11
 8005a98:	d917      	bls.n	8005aca <_malloc_r+0xc2>
 8005a9a:	1961      	adds	r1, r4, r5
 8005a9c:	42a3      	cmp	r3, r4
 8005a9e:	6025      	str	r5, [r4, #0]
 8005aa0:	bf18      	it	ne
 8005aa2:	6059      	strne	r1, [r3, #4]
 8005aa4:	6863      	ldr	r3, [r4, #4]
 8005aa6:	bf08      	it	eq
 8005aa8:	f8c8 1000 	streq.w	r1, [r8]
 8005aac:	5162      	str	r2, [r4, r5]
 8005aae:	604b      	str	r3, [r1, #4]
 8005ab0:	4630      	mov	r0, r6
 8005ab2:	f000 f82f 	bl	8005b14 <__malloc_unlock>
 8005ab6:	f104 000b 	add.w	r0, r4, #11
 8005aba:	1d23      	adds	r3, r4, #4
 8005abc:	f020 0007 	bic.w	r0, r0, #7
 8005ac0:	1ac2      	subs	r2, r0, r3
 8005ac2:	bf1c      	itt	ne
 8005ac4:	1a1b      	subne	r3, r3, r0
 8005ac6:	50a3      	strne	r3, [r4, r2]
 8005ac8:	e7af      	b.n	8005a2a <_malloc_r+0x22>
 8005aca:	6862      	ldr	r2, [r4, #4]
 8005acc:	42a3      	cmp	r3, r4
 8005ace:	bf0c      	ite	eq
 8005ad0:	f8c8 2000 	streq.w	r2, [r8]
 8005ad4:	605a      	strne	r2, [r3, #4]
 8005ad6:	e7eb      	b.n	8005ab0 <_malloc_r+0xa8>
 8005ad8:	4623      	mov	r3, r4
 8005ada:	6864      	ldr	r4, [r4, #4]
 8005adc:	e7ae      	b.n	8005a3c <_malloc_r+0x34>
 8005ade:	463c      	mov	r4, r7
 8005ae0:	687f      	ldr	r7, [r7, #4]
 8005ae2:	e7b6      	b.n	8005a52 <_malloc_r+0x4a>
 8005ae4:	461a      	mov	r2, r3
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	42a3      	cmp	r3, r4
 8005aea:	d1fb      	bne.n	8005ae4 <_malloc_r+0xdc>
 8005aec:	2300      	movs	r3, #0
 8005aee:	6053      	str	r3, [r2, #4]
 8005af0:	e7de      	b.n	8005ab0 <_malloc_r+0xa8>
 8005af2:	230c      	movs	r3, #12
 8005af4:	6033      	str	r3, [r6, #0]
 8005af6:	4630      	mov	r0, r6
 8005af8:	f000 f80c 	bl	8005b14 <__malloc_unlock>
 8005afc:	e794      	b.n	8005a28 <_malloc_r+0x20>
 8005afe:	6005      	str	r5, [r0, #0]
 8005b00:	e7d6      	b.n	8005ab0 <_malloc_r+0xa8>
 8005b02:	bf00      	nop
 8005b04:	20001730 	.word	0x20001730

08005b08 <__malloc_lock>:
 8005b08:	4801      	ldr	r0, [pc, #4]	@ (8005b10 <__malloc_lock+0x8>)
 8005b0a:	f000 bb50 	b.w	80061ae <__retarget_lock_acquire_recursive>
 8005b0e:	bf00      	nop
 8005b10:	20001874 	.word	0x20001874

08005b14 <__malloc_unlock>:
 8005b14:	4801      	ldr	r0, [pc, #4]	@ (8005b1c <__malloc_unlock+0x8>)
 8005b16:	f000 bb4b 	b.w	80061b0 <__retarget_lock_release_recursive>
 8005b1a:	bf00      	nop
 8005b1c:	20001874 	.word	0x20001874

08005b20 <std>:
 8005b20:	2300      	movs	r3, #0
 8005b22:	b510      	push	{r4, lr}
 8005b24:	4604      	mov	r4, r0
 8005b26:	e9c0 3300 	strd	r3, r3, [r0]
 8005b2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005b2e:	6083      	str	r3, [r0, #8]
 8005b30:	8181      	strh	r1, [r0, #12]
 8005b32:	6643      	str	r3, [r0, #100]	@ 0x64
 8005b34:	81c2      	strh	r2, [r0, #14]
 8005b36:	6183      	str	r3, [r0, #24]
 8005b38:	4619      	mov	r1, r3
 8005b3a:	2208      	movs	r2, #8
 8005b3c:	305c      	adds	r0, #92	@ 0x5c
 8005b3e:	f000 fa19 	bl	8005f74 <memset>
 8005b42:	4b0d      	ldr	r3, [pc, #52]	@ (8005b78 <std+0x58>)
 8005b44:	6263      	str	r3, [r4, #36]	@ 0x24
 8005b46:	4b0d      	ldr	r3, [pc, #52]	@ (8005b7c <std+0x5c>)
 8005b48:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005b4a:	4b0d      	ldr	r3, [pc, #52]	@ (8005b80 <std+0x60>)
 8005b4c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005b4e:	4b0d      	ldr	r3, [pc, #52]	@ (8005b84 <std+0x64>)
 8005b50:	6323      	str	r3, [r4, #48]	@ 0x30
 8005b52:	4b0d      	ldr	r3, [pc, #52]	@ (8005b88 <std+0x68>)
 8005b54:	6224      	str	r4, [r4, #32]
 8005b56:	429c      	cmp	r4, r3
 8005b58:	d006      	beq.n	8005b68 <std+0x48>
 8005b5a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005b5e:	4294      	cmp	r4, r2
 8005b60:	d002      	beq.n	8005b68 <std+0x48>
 8005b62:	33d0      	adds	r3, #208	@ 0xd0
 8005b64:	429c      	cmp	r4, r3
 8005b66:	d105      	bne.n	8005b74 <std+0x54>
 8005b68:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005b6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b70:	f000 bb1c 	b.w	80061ac <__retarget_lock_init_recursive>
 8005b74:	bd10      	pop	{r4, pc}
 8005b76:	bf00      	nop
 8005b78:	08005dc5 	.word	0x08005dc5
 8005b7c:	08005de7 	.word	0x08005de7
 8005b80:	08005e1f 	.word	0x08005e1f
 8005b84:	08005e43 	.word	0x08005e43
 8005b88:	20001734 	.word	0x20001734

08005b8c <stdio_exit_handler>:
 8005b8c:	4a02      	ldr	r2, [pc, #8]	@ (8005b98 <stdio_exit_handler+0xc>)
 8005b8e:	4903      	ldr	r1, [pc, #12]	@ (8005b9c <stdio_exit_handler+0x10>)
 8005b90:	4803      	ldr	r0, [pc, #12]	@ (8005ba0 <stdio_exit_handler+0x14>)
 8005b92:	f000 b869 	b.w	8005c68 <_fwalk_sglue>
 8005b96:	bf00      	nop
 8005b98:	20000070 	.word	0x20000070
 8005b9c:	08006c09 	.word	0x08006c09
 8005ba0:	20000080 	.word	0x20000080

08005ba4 <cleanup_stdio>:
 8005ba4:	6841      	ldr	r1, [r0, #4]
 8005ba6:	4b0c      	ldr	r3, [pc, #48]	@ (8005bd8 <cleanup_stdio+0x34>)
 8005ba8:	4299      	cmp	r1, r3
 8005baa:	b510      	push	{r4, lr}
 8005bac:	4604      	mov	r4, r0
 8005bae:	d001      	beq.n	8005bb4 <cleanup_stdio+0x10>
 8005bb0:	f001 f82a 	bl	8006c08 <_fflush_r>
 8005bb4:	68a1      	ldr	r1, [r4, #8]
 8005bb6:	4b09      	ldr	r3, [pc, #36]	@ (8005bdc <cleanup_stdio+0x38>)
 8005bb8:	4299      	cmp	r1, r3
 8005bba:	d002      	beq.n	8005bc2 <cleanup_stdio+0x1e>
 8005bbc:	4620      	mov	r0, r4
 8005bbe:	f001 f823 	bl	8006c08 <_fflush_r>
 8005bc2:	68e1      	ldr	r1, [r4, #12]
 8005bc4:	4b06      	ldr	r3, [pc, #24]	@ (8005be0 <cleanup_stdio+0x3c>)
 8005bc6:	4299      	cmp	r1, r3
 8005bc8:	d004      	beq.n	8005bd4 <cleanup_stdio+0x30>
 8005bca:	4620      	mov	r0, r4
 8005bcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005bd0:	f001 b81a 	b.w	8006c08 <_fflush_r>
 8005bd4:	bd10      	pop	{r4, pc}
 8005bd6:	bf00      	nop
 8005bd8:	20001734 	.word	0x20001734
 8005bdc:	2000179c 	.word	0x2000179c
 8005be0:	20001804 	.word	0x20001804

08005be4 <global_stdio_init.part.0>:
 8005be4:	b510      	push	{r4, lr}
 8005be6:	4b0b      	ldr	r3, [pc, #44]	@ (8005c14 <global_stdio_init.part.0+0x30>)
 8005be8:	4c0b      	ldr	r4, [pc, #44]	@ (8005c18 <global_stdio_init.part.0+0x34>)
 8005bea:	4a0c      	ldr	r2, [pc, #48]	@ (8005c1c <global_stdio_init.part.0+0x38>)
 8005bec:	601a      	str	r2, [r3, #0]
 8005bee:	4620      	mov	r0, r4
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	2104      	movs	r1, #4
 8005bf4:	f7ff ff94 	bl	8005b20 <std>
 8005bf8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005bfc:	2201      	movs	r2, #1
 8005bfe:	2109      	movs	r1, #9
 8005c00:	f7ff ff8e 	bl	8005b20 <std>
 8005c04:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005c08:	2202      	movs	r2, #2
 8005c0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c0e:	2112      	movs	r1, #18
 8005c10:	f7ff bf86 	b.w	8005b20 <std>
 8005c14:	2000186c 	.word	0x2000186c
 8005c18:	20001734 	.word	0x20001734
 8005c1c:	08005b8d 	.word	0x08005b8d

08005c20 <__sfp_lock_acquire>:
 8005c20:	4801      	ldr	r0, [pc, #4]	@ (8005c28 <__sfp_lock_acquire+0x8>)
 8005c22:	f000 bac4 	b.w	80061ae <__retarget_lock_acquire_recursive>
 8005c26:	bf00      	nop
 8005c28:	20001875 	.word	0x20001875

08005c2c <__sfp_lock_release>:
 8005c2c:	4801      	ldr	r0, [pc, #4]	@ (8005c34 <__sfp_lock_release+0x8>)
 8005c2e:	f000 babf 	b.w	80061b0 <__retarget_lock_release_recursive>
 8005c32:	bf00      	nop
 8005c34:	20001875 	.word	0x20001875

08005c38 <__sinit>:
 8005c38:	b510      	push	{r4, lr}
 8005c3a:	4604      	mov	r4, r0
 8005c3c:	f7ff fff0 	bl	8005c20 <__sfp_lock_acquire>
 8005c40:	6a23      	ldr	r3, [r4, #32]
 8005c42:	b11b      	cbz	r3, 8005c4c <__sinit+0x14>
 8005c44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c48:	f7ff bff0 	b.w	8005c2c <__sfp_lock_release>
 8005c4c:	4b04      	ldr	r3, [pc, #16]	@ (8005c60 <__sinit+0x28>)
 8005c4e:	6223      	str	r3, [r4, #32]
 8005c50:	4b04      	ldr	r3, [pc, #16]	@ (8005c64 <__sinit+0x2c>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d1f5      	bne.n	8005c44 <__sinit+0xc>
 8005c58:	f7ff ffc4 	bl	8005be4 <global_stdio_init.part.0>
 8005c5c:	e7f2      	b.n	8005c44 <__sinit+0xc>
 8005c5e:	bf00      	nop
 8005c60:	08005ba5 	.word	0x08005ba5
 8005c64:	2000186c 	.word	0x2000186c

08005c68 <_fwalk_sglue>:
 8005c68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c6c:	4607      	mov	r7, r0
 8005c6e:	4688      	mov	r8, r1
 8005c70:	4614      	mov	r4, r2
 8005c72:	2600      	movs	r6, #0
 8005c74:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005c78:	f1b9 0901 	subs.w	r9, r9, #1
 8005c7c:	d505      	bpl.n	8005c8a <_fwalk_sglue+0x22>
 8005c7e:	6824      	ldr	r4, [r4, #0]
 8005c80:	2c00      	cmp	r4, #0
 8005c82:	d1f7      	bne.n	8005c74 <_fwalk_sglue+0xc>
 8005c84:	4630      	mov	r0, r6
 8005c86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c8a:	89ab      	ldrh	r3, [r5, #12]
 8005c8c:	2b01      	cmp	r3, #1
 8005c8e:	d907      	bls.n	8005ca0 <_fwalk_sglue+0x38>
 8005c90:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005c94:	3301      	adds	r3, #1
 8005c96:	d003      	beq.n	8005ca0 <_fwalk_sglue+0x38>
 8005c98:	4629      	mov	r1, r5
 8005c9a:	4638      	mov	r0, r7
 8005c9c:	47c0      	blx	r8
 8005c9e:	4306      	orrs	r6, r0
 8005ca0:	3568      	adds	r5, #104	@ 0x68
 8005ca2:	e7e9      	b.n	8005c78 <_fwalk_sglue+0x10>

08005ca4 <iprintf>:
 8005ca4:	b40f      	push	{r0, r1, r2, r3}
 8005ca6:	b507      	push	{r0, r1, r2, lr}
 8005ca8:	4906      	ldr	r1, [pc, #24]	@ (8005cc4 <iprintf+0x20>)
 8005caa:	ab04      	add	r3, sp, #16
 8005cac:	6808      	ldr	r0, [r1, #0]
 8005cae:	f853 2b04 	ldr.w	r2, [r3], #4
 8005cb2:	6881      	ldr	r1, [r0, #8]
 8005cb4:	9301      	str	r3, [sp, #4]
 8005cb6:	f000 fc7d 	bl	80065b4 <_vfiprintf_r>
 8005cba:	b003      	add	sp, #12
 8005cbc:	f85d eb04 	ldr.w	lr, [sp], #4
 8005cc0:	b004      	add	sp, #16
 8005cc2:	4770      	bx	lr
 8005cc4:	2000007c 	.word	0x2000007c

08005cc8 <_puts_r>:
 8005cc8:	6a03      	ldr	r3, [r0, #32]
 8005cca:	b570      	push	{r4, r5, r6, lr}
 8005ccc:	6884      	ldr	r4, [r0, #8]
 8005cce:	4605      	mov	r5, r0
 8005cd0:	460e      	mov	r6, r1
 8005cd2:	b90b      	cbnz	r3, 8005cd8 <_puts_r+0x10>
 8005cd4:	f7ff ffb0 	bl	8005c38 <__sinit>
 8005cd8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005cda:	07db      	lsls	r3, r3, #31
 8005cdc:	d405      	bmi.n	8005cea <_puts_r+0x22>
 8005cde:	89a3      	ldrh	r3, [r4, #12]
 8005ce0:	0598      	lsls	r0, r3, #22
 8005ce2:	d402      	bmi.n	8005cea <_puts_r+0x22>
 8005ce4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005ce6:	f000 fa62 	bl	80061ae <__retarget_lock_acquire_recursive>
 8005cea:	89a3      	ldrh	r3, [r4, #12]
 8005cec:	0719      	lsls	r1, r3, #28
 8005cee:	d502      	bpl.n	8005cf6 <_puts_r+0x2e>
 8005cf0:	6923      	ldr	r3, [r4, #16]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d135      	bne.n	8005d62 <_puts_r+0x9a>
 8005cf6:	4621      	mov	r1, r4
 8005cf8:	4628      	mov	r0, r5
 8005cfa:	f000 f8e5 	bl	8005ec8 <__swsetup_r>
 8005cfe:	b380      	cbz	r0, 8005d62 <_puts_r+0x9a>
 8005d00:	f04f 35ff 	mov.w	r5, #4294967295
 8005d04:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005d06:	07da      	lsls	r2, r3, #31
 8005d08:	d405      	bmi.n	8005d16 <_puts_r+0x4e>
 8005d0a:	89a3      	ldrh	r3, [r4, #12]
 8005d0c:	059b      	lsls	r3, r3, #22
 8005d0e:	d402      	bmi.n	8005d16 <_puts_r+0x4e>
 8005d10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005d12:	f000 fa4d 	bl	80061b0 <__retarget_lock_release_recursive>
 8005d16:	4628      	mov	r0, r5
 8005d18:	bd70      	pop	{r4, r5, r6, pc}
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	da04      	bge.n	8005d28 <_puts_r+0x60>
 8005d1e:	69a2      	ldr	r2, [r4, #24]
 8005d20:	429a      	cmp	r2, r3
 8005d22:	dc17      	bgt.n	8005d54 <_puts_r+0x8c>
 8005d24:	290a      	cmp	r1, #10
 8005d26:	d015      	beq.n	8005d54 <_puts_r+0x8c>
 8005d28:	6823      	ldr	r3, [r4, #0]
 8005d2a:	1c5a      	adds	r2, r3, #1
 8005d2c:	6022      	str	r2, [r4, #0]
 8005d2e:	7019      	strb	r1, [r3, #0]
 8005d30:	68a3      	ldr	r3, [r4, #8]
 8005d32:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005d36:	3b01      	subs	r3, #1
 8005d38:	60a3      	str	r3, [r4, #8]
 8005d3a:	2900      	cmp	r1, #0
 8005d3c:	d1ed      	bne.n	8005d1a <_puts_r+0x52>
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	da11      	bge.n	8005d66 <_puts_r+0x9e>
 8005d42:	4622      	mov	r2, r4
 8005d44:	210a      	movs	r1, #10
 8005d46:	4628      	mov	r0, r5
 8005d48:	f000 f87f 	bl	8005e4a <__swbuf_r>
 8005d4c:	3001      	adds	r0, #1
 8005d4e:	d0d7      	beq.n	8005d00 <_puts_r+0x38>
 8005d50:	250a      	movs	r5, #10
 8005d52:	e7d7      	b.n	8005d04 <_puts_r+0x3c>
 8005d54:	4622      	mov	r2, r4
 8005d56:	4628      	mov	r0, r5
 8005d58:	f000 f877 	bl	8005e4a <__swbuf_r>
 8005d5c:	3001      	adds	r0, #1
 8005d5e:	d1e7      	bne.n	8005d30 <_puts_r+0x68>
 8005d60:	e7ce      	b.n	8005d00 <_puts_r+0x38>
 8005d62:	3e01      	subs	r6, #1
 8005d64:	e7e4      	b.n	8005d30 <_puts_r+0x68>
 8005d66:	6823      	ldr	r3, [r4, #0]
 8005d68:	1c5a      	adds	r2, r3, #1
 8005d6a:	6022      	str	r2, [r4, #0]
 8005d6c:	220a      	movs	r2, #10
 8005d6e:	701a      	strb	r2, [r3, #0]
 8005d70:	e7ee      	b.n	8005d50 <_puts_r+0x88>
	...

08005d74 <puts>:
 8005d74:	4b02      	ldr	r3, [pc, #8]	@ (8005d80 <puts+0xc>)
 8005d76:	4601      	mov	r1, r0
 8005d78:	6818      	ldr	r0, [r3, #0]
 8005d7a:	f7ff bfa5 	b.w	8005cc8 <_puts_r>
 8005d7e:	bf00      	nop
 8005d80:	2000007c 	.word	0x2000007c

08005d84 <siprintf>:
 8005d84:	b40e      	push	{r1, r2, r3}
 8005d86:	b500      	push	{lr}
 8005d88:	b09c      	sub	sp, #112	@ 0x70
 8005d8a:	ab1d      	add	r3, sp, #116	@ 0x74
 8005d8c:	9002      	str	r0, [sp, #8]
 8005d8e:	9006      	str	r0, [sp, #24]
 8005d90:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005d94:	4809      	ldr	r0, [pc, #36]	@ (8005dbc <siprintf+0x38>)
 8005d96:	9107      	str	r1, [sp, #28]
 8005d98:	9104      	str	r1, [sp, #16]
 8005d9a:	4909      	ldr	r1, [pc, #36]	@ (8005dc0 <siprintf+0x3c>)
 8005d9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005da0:	9105      	str	r1, [sp, #20]
 8005da2:	6800      	ldr	r0, [r0, #0]
 8005da4:	9301      	str	r3, [sp, #4]
 8005da6:	a902      	add	r1, sp, #8
 8005da8:	f000 fade 	bl	8006368 <_svfiprintf_r>
 8005dac:	9b02      	ldr	r3, [sp, #8]
 8005dae:	2200      	movs	r2, #0
 8005db0:	701a      	strb	r2, [r3, #0]
 8005db2:	b01c      	add	sp, #112	@ 0x70
 8005db4:	f85d eb04 	ldr.w	lr, [sp], #4
 8005db8:	b003      	add	sp, #12
 8005dba:	4770      	bx	lr
 8005dbc:	2000007c 	.word	0x2000007c
 8005dc0:	ffff0208 	.word	0xffff0208

08005dc4 <__sread>:
 8005dc4:	b510      	push	{r4, lr}
 8005dc6:	460c      	mov	r4, r1
 8005dc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005dcc:	f000 f990 	bl	80060f0 <_read_r>
 8005dd0:	2800      	cmp	r0, #0
 8005dd2:	bfab      	itete	ge
 8005dd4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005dd6:	89a3      	ldrhlt	r3, [r4, #12]
 8005dd8:	181b      	addge	r3, r3, r0
 8005dda:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005dde:	bfac      	ite	ge
 8005de0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005de2:	81a3      	strhlt	r3, [r4, #12]
 8005de4:	bd10      	pop	{r4, pc}

08005de6 <__swrite>:
 8005de6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005dea:	461f      	mov	r7, r3
 8005dec:	898b      	ldrh	r3, [r1, #12]
 8005dee:	05db      	lsls	r3, r3, #23
 8005df0:	4605      	mov	r5, r0
 8005df2:	460c      	mov	r4, r1
 8005df4:	4616      	mov	r6, r2
 8005df6:	d505      	bpl.n	8005e04 <__swrite+0x1e>
 8005df8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005dfc:	2302      	movs	r3, #2
 8005dfe:	2200      	movs	r2, #0
 8005e00:	f000 f964 	bl	80060cc <_lseek_r>
 8005e04:	89a3      	ldrh	r3, [r4, #12]
 8005e06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e0a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005e0e:	81a3      	strh	r3, [r4, #12]
 8005e10:	4632      	mov	r2, r6
 8005e12:	463b      	mov	r3, r7
 8005e14:	4628      	mov	r0, r5
 8005e16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e1a:	f000 b98b 	b.w	8006134 <_write_r>

08005e1e <__sseek>:
 8005e1e:	b510      	push	{r4, lr}
 8005e20:	460c      	mov	r4, r1
 8005e22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e26:	f000 f951 	bl	80060cc <_lseek_r>
 8005e2a:	1c43      	adds	r3, r0, #1
 8005e2c:	89a3      	ldrh	r3, [r4, #12]
 8005e2e:	bf15      	itete	ne
 8005e30:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005e32:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005e36:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005e3a:	81a3      	strheq	r3, [r4, #12]
 8005e3c:	bf18      	it	ne
 8005e3e:	81a3      	strhne	r3, [r4, #12]
 8005e40:	bd10      	pop	{r4, pc}

08005e42 <__sclose>:
 8005e42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e46:	f000 b931 	b.w	80060ac <_close_r>

08005e4a <__swbuf_r>:
 8005e4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e4c:	460e      	mov	r6, r1
 8005e4e:	4614      	mov	r4, r2
 8005e50:	4605      	mov	r5, r0
 8005e52:	b118      	cbz	r0, 8005e5c <__swbuf_r+0x12>
 8005e54:	6a03      	ldr	r3, [r0, #32]
 8005e56:	b90b      	cbnz	r3, 8005e5c <__swbuf_r+0x12>
 8005e58:	f7ff feee 	bl	8005c38 <__sinit>
 8005e5c:	69a3      	ldr	r3, [r4, #24]
 8005e5e:	60a3      	str	r3, [r4, #8]
 8005e60:	89a3      	ldrh	r3, [r4, #12]
 8005e62:	071a      	lsls	r2, r3, #28
 8005e64:	d501      	bpl.n	8005e6a <__swbuf_r+0x20>
 8005e66:	6923      	ldr	r3, [r4, #16]
 8005e68:	b943      	cbnz	r3, 8005e7c <__swbuf_r+0x32>
 8005e6a:	4621      	mov	r1, r4
 8005e6c:	4628      	mov	r0, r5
 8005e6e:	f000 f82b 	bl	8005ec8 <__swsetup_r>
 8005e72:	b118      	cbz	r0, 8005e7c <__swbuf_r+0x32>
 8005e74:	f04f 37ff 	mov.w	r7, #4294967295
 8005e78:	4638      	mov	r0, r7
 8005e7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e7c:	6823      	ldr	r3, [r4, #0]
 8005e7e:	6922      	ldr	r2, [r4, #16]
 8005e80:	1a98      	subs	r0, r3, r2
 8005e82:	6963      	ldr	r3, [r4, #20]
 8005e84:	b2f6      	uxtb	r6, r6
 8005e86:	4283      	cmp	r3, r0
 8005e88:	4637      	mov	r7, r6
 8005e8a:	dc05      	bgt.n	8005e98 <__swbuf_r+0x4e>
 8005e8c:	4621      	mov	r1, r4
 8005e8e:	4628      	mov	r0, r5
 8005e90:	f000 feba 	bl	8006c08 <_fflush_r>
 8005e94:	2800      	cmp	r0, #0
 8005e96:	d1ed      	bne.n	8005e74 <__swbuf_r+0x2a>
 8005e98:	68a3      	ldr	r3, [r4, #8]
 8005e9a:	3b01      	subs	r3, #1
 8005e9c:	60a3      	str	r3, [r4, #8]
 8005e9e:	6823      	ldr	r3, [r4, #0]
 8005ea0:	1c5a      	adds	r2, r3, #1
 8005ea2:	6022      	str	r2, [r4, #0]
 8005ea4:	701e      	strb	r6, [r3, #0]
 8005ea6:	6962      	ldr	r2, [r4, #20]
 8005ea8:	1c43      	adds	r3, r0, #1
 8005eaa:	429a      	cmp	r2, r3
 8005eac:	d004      	beq.n	8005eb8 <__swbuf_r+0x6e>
 8005eae:	89a3      	ldrh	r3, [r4, #12]
 8005eb0:	07db      	lsls	r3, r3, #31
 8005eb2:	d5e1      	bpl.n	8005e78 <__swbuf_r+0x2e>
 8005eb4:	2e0a      	cmp	r6, #10
 8005eb6:	d1df      	bne.n	8005e78 <__swbuf_r+0x2e>
 8005eb8:	4621      	mov	r1, r4
 8005eba:	4628      	mov	r0, r5
 8005ebc:	f000 fea4 	bl	8006c08 <_fflush_r>
 8005ec0:	2800      	cmp	r0, #0
 8005ec2:	d0d9      	beq.n	8005e78 <__swbuf_r+0x2e>
 8005ec4:	e7d6      	b.n	8005e74 <__swbuf_r+0x2a>
	...

08005ec8 <__swsetup_r>:
 8005ec8:	b538      	push	{r3, r4, r5, lr}
 8005eca:	4b29      	ldr	r3, [pc, #164]	@ (8005f70 <__swsetup_r+0xa8>)
 8005ecc:	4605      	mov	r5, r0
 8005ece:	6818      	ldr	r0, [r3, #0]
 8005ed0:	460c      	mov	r4, r1
 8005ed2:	b118      	cbz	r0, 8005edc <__swsetup_r+0x14>
 8005ed4:	6a03      	ldr	r3, [r0, #32]
 8005ed6:	b90b      	cbnz	r3, 8005edc <__swsetup_r+0x14>
 8005ed8:	f7ff feae 	bl	8005c38 <__sinit>
 8005edc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ee0:	0719      	lsls	r1, r3, #28
 8005ee2:	d422      	bmi.n	8005f2a <__swsetup_r+0x62>
 8005ee4:	06da      	lsls	r2, r3, #27
 8005ee6:	d407      	bmi.n	8005ef8 <__swsetup_r+0x30>
 8005ee8:	2209      	movs	r2, #9
 8005eea:	602a      	str	r2, [r5, #0]
 8005eec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005ef0:	81a3      	strh	r3, [r4, #12]
 8005ef2:	f04f 30ff 	mov.w	r0, #4294967295
 8005ef6:	e033      	b.n	8005f60 <__swsetup_r+0x98>
 8005ef8:	0758      	lsls	r0, r3, #29
 8005efa:	d512      	bpl.n	8005f22 <__swsetup_r+0x5a>
 8005efc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005efe:	b141      	cbz	r1, 8005f12 <__swsetup_r+0x4a>
 8005f00:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005f04:	4299      	cmp	r1, r3
 8005f06:	d002      	beq.n	8005f0e <__swsetup_r+0x46>
 8005f08:	4628      	mov	r0, r5
 8005f0a:	f000 f987 	bl	800621c <_free_r>
 8005f0e:	2300      	movs	r3, #0
 8005f10:	6363      	str	r3, [r4, #52]	@ 0x34
 8005f12:	89a3      	ldrh	r3, [r4, #12]
 8005f14:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005f18:	81a3      	strh	r3, [r4, #12]
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	6063      	str	r3, [r4, #4]
 8005f1e:	6923      	ldr	r3, [r4, #16]
 8005f20:	6023      	str	r3, [r4, #0]
 8005f22:	89a3      	ldrh	r3, [r4, #12]
 8005f24:	f043 0308 	orr.w	r3, r3, #8
 8005f28:	81a3      	strh	r3, [r4, #12]
 8005f2a:	6923      	ldr	r3, [r4, #16]
 8005f2c:	b94b      	cbnz	r3, 8005f42 <__swsetup_r+0x7a>
 8005f2e:	89a3      	ldrh	r3, [r4, #12]
 8005f30:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005f34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f38:	d003      	beq.n	8005f42 <__swsetup_r+0x7a>
 8005f3a:	4621      	mov	r1, r4
 8005f3c:	4628      	mov	r0, r5
 8005f3e:	f000 fec3 	bl	8006cc8 <__smakebuf_r>
 8005f42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f46:	f013 0201 	ands.w	r2, r3, #1
 8005f4a:	d00a      	beq.n	8005f62 <__swsetup_r+0x9a>
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	60a2      	str	r2, [r4, #8]
 8005f50:	6962      	ldr	r2, [r4, #20]
 8005f52:	4252      	negs	r2, r2
 8005f54:	61a2      	str	r2, [r4, #24]
 8005f56:	6922      	ldr	r2, [r4, #16]
 8005f58:	b942      	cbnz	r2, 8005f6c <__swsetup_r+0xa4>
 8005f5a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005f5e:	d1c5      	bne.n	8005eec <__swsetup_r+0x24>
 8005f60:	bd38      	pop	{r3, r4, r5, pc}
 8005f62:	0799      	lsls	r1, r3, #30
 8005f64:	bf58      	it	pl
 8005f66:	6962      	ldrpl	r2, [r4, #20]
 8005f68:	60a2      	str	r2, [r4, #8]
 8005f6a:	e7f4      	b.n	8005f56 <__swsetup_r+0x8e>
 8005f6c:	2000      	movs	r0, #0
 8005f6e:	e7f7      	b.n	8005f60 <__swsetup_r+0x98>
 8005f70:	2000007c 	.word	0x2000007c

08005f74 <memset>:
 8005f74:	4402      	add	r2, r0
 8005f76:	4603      	mov	r3, r0
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d100      	bne.n	8005f7e <memset+0xa>
 8005f7c:	4770      	bx	lr
 8005f7e:	f803 1b01 	strb.w	r1, [r3], #1
 8005f82:	e7f9      	b.n	8005f78 <memset+0x4>

08005f84 <strcat>:
 8005f84:	b510      	push	{r4, lr}
 8005f86:	4602      	mov	r2, r0
 8005f88:	7814      	ldrb	r4, [r2, #0]
 8005f8a:	4613      	mov	r3, r2
 8005f8c:	3201      	adds	r2, #1
 8005f8e:	2c00      	cmp	r4, #0
 8005f90:	d1fa      	bne.n	8005f88 <strcat+0x4>
 8005f92:	3b01      	subs	r3, #1
 8005f94:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005f98:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005f9c:	2a00      	cmp	r2, #0
 8005f9e:	d1f9      	bne.n	8005f94 <strcat+0x10>
 8005fa0:	bd10      	pop	{r4, pc}

08005fa2 <strncpy>:
 8005fa2:	b510      	push	{r4, lr}
 8005fa4:	3901      	subs	r1, #1
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	b132      	cbz	r2, 8005fb8 <strncpy+0x16>
 8005faa:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005fae:	f803 4b01 	strb.w	r4, [r3], #1
 8005fb2:	3a01      	subs	r2, #1
 8005fb4:	2c00      	cmp	r4, #0
 8005fb6:	d1f7      	bne.n	8005fa8 <strncpy+0x6>
 8005fb8:	441a      	add	r2, r3
 8005fba:	2100      	movs	r1, #0
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d100      	bne.n	8005fc2 <strncpy+0x20>
 8005fc0:	bd10      	pop	{r4, pc}
 8005fc2:	f803 1b01 	strb.w	r1, [r3], #1
 8005fc6:	e7f9      	b.n	8005fbc <strncpy+0x1a>

08005fc8 <strtok>:
 8005fc8:	4b16      	ldr	r3, [pc, #88]	@ (8006024 <strtok+0x5c>)
 8005fca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fce:	681f      	ldr	r7, [r3, #0]
 8005fd0:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8005fd2:	4605      	mov	r5, r0
 8005fd4:	460e      	mov	r6, r1
 8005fd6:	b9ec      	cbnz	r4, 8006014 <strtok+0x4c>
 8005fd8:	2050      	movs	r0, #80	@ 0x50
 8005fda:	f7ff fceb 	bl	80059b4 <malloc>
 8005fde:	4602      	mov	r2, r0
 8005fe0:	6478      	str	r0, [r7, #68]	@ 0x44
 8005fe2:	b920      	cbnz	r0, 8005fee <strtok+0x26>
 8005fe4:	4b10      	ldr	r3, [pc, #64]	@ (8006028 <strtok+0x60>)
 8005fe6:	4811      	ldr	r0, [pc, #68]	@ (800602c <strtok+0x64>)
 8005fe8:	215b      	movs	r1, #91	@ 0x5b
 8005fea:	f000 f8f9 	bl	80061e0 <__assert_func>
 8005fee:	e9c0 4400 	strd	r4, r4, [r0]
 8005ff2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8005ff6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8005ffa:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8005ffe:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8006002:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8006006:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800600a:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800600e:	6184      	str	r4, [r0, #24]
 8006010:	7704      	strb	r4, [r0, #28]
 8006012:	6244      	str	r4, [r0, #36]	@ 0x24
 8006014:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006016:	4631      	mov	r1, r6
 8006018:	4628      	mov	r0, r5
 800601a:	2301      	movs	r3, #1
 800601c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006020:	f000 b806 	b.w	8006030 <__strtok_r>
 8006024:	2000007c 	.word	0x2000007c
 8006028:	080083f4 	.word	0x080083f4
 800602c:	0800840b 	.word	0x0800840b

08006030 <__strtok_r>:
 8006030:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006032:	4604      	mov	r4, r0
 8006034:	b908      	cbnz	r0, 800603a <__strtok_r+0xa>
 8006036:	6814      	ldr	r4, [r2, #0]
 8006038:	b144      	cbz	r4, 800604c <__strtok_r+0x1c>
 800603a:	4620      	mov	r0, r4
 800603c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8006040:	460f      	mov	r7, r1
 8006042:	f817 6b01 	ldrb.w	r6, [r7], #1
 8006046:	b91e      	cbnz	r6, 8006050 <__strtok_r+0x20>
 8006048:	b965      	cbnz	r5, 8006064 <__strtok_r+0x34>
 800604a:	6015      	str	r5, [r2, #0]
 800604c:	2000      	movs	r0, #0
 800604e:	e005      	b.n	800605c <__strtok_r+0x2c>
 8006050:	42b5      	cmp	r5, r6
 8006052:	d1f6      	bne.n	8006042 <__strtok_r+0x12>
 8006054:	2b00      	cmp	r3, #0
 8006056:	d1f0      	bne.n	800603a <__strtok_r+0xa>
 8006058:	6014      	str	r4, [r2, #0]
 800605a:	7003      	strb	r3, [r0, #0]
 800605c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800605e:	461c      	mov	r4, r3
 8006060:	e00c      	b.n	800607c <__strtok_r+0x4c>
 8006062:	b915      	cbnz	r5, 800606a <__strtok_r+0x3a>
 8006064:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006068:	460e      	mov	r6, r1
 800606a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800606e:	42ab      	cmp	r3, r5
 8006070:	d1f7      	bne.n	8006062 <__strtok_r+0x32>
 8006072:	2b00      	cmp	r3, #0
 8006074:	d0f3      	beq.n	800605e <__strtok_r+0x2e>
 8006076:	2300      	movs	r3, #0
 8006078:	f804 3c01 	strb.w	r3, [r4, #-1]
 800607c:	6014      	str	r4, [r2, #0]
 800607e:	e7ed      	b.n	800605c <__strtok_r+0x2c>

08006080 <strstr>:
 8006080:	780a      	ldrb	r2, [r1, #0]
 8006082:	b570      	push	{r4, r5, r6, lr}
 8006084:	b96a      	cbnz	r2, 80060a2 <strstr+0x22>
 8006086:	bd70      	pop	{r4, r5, r6, pc}
 8006088:	429a      	cmp	r2, r3
 800608a:	d109      	bne.n	80060a0 <strstr+0x20>
 800608c:	460c      	mov	r4, r1
 800608e:	4605      	mov	r5, r0
 8006090:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8006094:	2b00      	cmp	r3, #0
 8006096:	d0f6      	beq.n	8006086 <strstr+0x6>
 8006098:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800609c:	429e      	cmp	r6, r3
 800609e:	d0f7      	beq.n	8006090 <strstr+0x10>
 80060a0:	3001      	adds	r0, #1
 80060a2:	7803      	ldrb	r3, [r0, #0]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d1ef      	bne.n	8006088 <strstr+0x8>
 80060a8:	4618      	mov	r0, r3
 80060aa:	e7ec      	b.n	8006086 <strstr+0x6>

080060ac <_close_r>:
 80060ac:	b538      	push	{r3, r4, r5, lr}
 80060ae:	4d06      	ldr	r5, [pc, #24]	@ (80060c8 <_close_r+0x1c>)
 80060b0:	2300      	movs	r3, #0
 80060b2:	4604      	mov	r4, r0
 80060b4:	4608      	mov	r0, r1
 80060b6:	602b      	str	r3, [r5, #0]
 80060b8:	f7fc fdc3 	bl	8002c42 <_close>
 80060bc:	1c43      	adds	r3, r0, #1
 80060be:	d102      	bne.n	80060c6 <_close_r+0x1a>
 80060c0:	682b      	ldr	r3, [r5, #0]
 80060c2:	b103      	cbz	r3, 80060c6 <_close_r+0x1a>
 80060c4:	6023      	str	r3, [r4, #0]
 80060c6:	bd38      	pop	{r3, r4, r5, pc}
 80060c8:	20001870 	.word	0x20001870

080060cc <_lseek_r>:
 80060cc:	b538      	push	{r3, r4, r5, lr}
 80060ce:	4d07      	ldr	r5, [pc, #28]	@ (80060ec <_lseek_r+0x20>)
 80060d0:	4604      	mov	r4, r0
 80060d2:	4608      	mov	r0, r1
 80060d4:	4611      	mov	r1, r2
 80060d6:	2200      	movs	r2, #0
 80060d8:	602a      	str	r2, [r5, #0]
 80060da:	461a      	mov	r2, r3
 80060dc:	f7fc fdd8 	bl	8002c90 <_lseek>
 80060e0:	1c43      	adds	r3, r0, #1
 80060e2:	d102      	bne.n	80060ea <_lseek_r+0x1e>
 80060e4:	682b      	ldr	r3, [r5, #0]
 80060e6:	b103      	cbz	r3, 80060ea <_lseek_r+0x1e>
 80060e8:	6023      	str	r3, [r4, #0]
 80060ea:	bd38      	pop	{r3, r4, r5, pc}
 80060ec:	20001870 	.word	0x20001870

080060f0 <_read_r>:
 80060f0:	b538      	push	{r3, r4, r5, lr}
 80060f2:	4d07      	ldr	r5, [pc, #28]	@ (8006110 <_read_r+0x20>)
 80060f4:	4604      	mov	r4, r0
 80060f6:	4608      	mov	r0, r1
 80060f8:	4611      	mov	r1, r2
 80060fa:	2200      	movs	r2, #0
 80060fc:	602a      	str	r2, [r5, #0]
 80060fe:	461a      	mov	r2, r3
 8006100:	f7fc fd66 	bl	8002bd0 <_read>
 8006104:	1c43      	adds	r3, r0, #1
 8006106:	d102      	bne.n	800610e <_read_r+0x1e>
 8006108:	682b      	ldr	r3, [r5, #0]
 800610a:	b103      	cbz	r3, 800610e <_read_r+0x1e>
 800610c:	6023      	str	r3, [r4, #0]
 800610e:	bd38      	pop	{r3, r4, r5, pc}
 8006110:	20001870 	.word	0x20001870

08006114 <_sbrk_r>:
 8006114:	b538      	push	{r3, r4, r5, lr}
 8006116:	4d06      	ldr	r5, [pc, #24]	@ (8006130 <_sbrk_r+0x1c>)
 8006118:	2300      	movs	r3, #0
 800611a:	4604      	mov	r4, r0
 800611c:	4608      	mov	r0, r1
 800611e:	602b      	str	r3, [r5, #0]
 8006120:	f7fc fdc4 	bl	8002cac <_sbrk>
 8006124:	1c43      	adds	r3, r0, #1
 8006126:	d102      	bne.n	800612e <_sbrk_r+0x1a>
 8006128:	682b      	ldr	r3, [r5, #0]
 800612a:	b103      	cbz	r3, 800612e <_sbrk_r+0x1a>
 800612c:	6023      	str	r3, [r4, #0]
 800612e:	bd38      	pop	{r3, r4, r5, pc}
 8006130:	20001870 	.word	0x20001870

08006134 <_write_r>:
 8006134:	b538      	push	{r3, r4, r5, lr}
 8006136:	4d07      	ldr	r5, [pc, #28]	@ (8006154 <_write_r+0x20>)
 8006138:	4604      	mov	r4, r0
 800613a:	4608      	mov	r0, r1
 800613c:	4611      	mov	r1, r2
 800613e:	2200      	movs	r2, #0
 8006140:	602a      	str	r2, [r5, #0]
 8006142:	461a      	mov	r2, r3
 8006144:	f7fc fd61 	bl	8002c0a <_write>
 8006148:	1c43      	adds	r3, r0, #1
 800614a:	d102      	bne.n	8006152 <_write_r+0x1e>
 800614c:	682b      	ldr	r3, [r5, #0]
 800614e:	b103      	cbz	r3, 8006152 <_write_r+0x1e>
 8006150:	6023      	str	r3, [r4, #0]
 8006152:	bd38      	pop	{r3, r4, r5, pc}
 8006154:	20001870 	.word	0x20001870

08006158 <__errno>:
 8006158:	4b01      	ldr	r3, [pc, #4]	@ (8006160 <__errno+0x8>)
 800615a:	6818      	ldr	r0, [r3, #0]
 800615c:	4770      	bx	lr
 800615e:	bf00      	nop
 8006160:	2000007c 	.word	0x2000007c

08006164 <__libc_init_array>:
 8006164:	b570      	push	{r4, r5, r6, lr}
 8006166:	4d0d      	ldr	r5, [pc, #52]	@ (800619c <__libc_init_array+0x38>)
 8006168:	4c0d      	ldr	r4, [pc, #52]	@ (80061a0 <__libc_init_array+0x3c>)
 800616a:	1b64      	subs	r4, r4, r5
 800616c:	10a4      	asrs	r4, r4, #2
 800616e:	2600      	movs	r6, #0
 8006170:	42a6      	cmp	r6, r4
 8006172:	d109      	bne.n	8006188 <__libc_init_array+0x24>
 8006174:	4d0b      	ldr	r5, [pc, #44]	@ (80061a4 <__libc_init_array+0x40>)
 8006176:	4c0c      	ldr	r4, [pc, #48]	@ (80061a8 <__libc_init_array+0x44>)
 8006178:	f000 fea0 	bl	8006ebc <_init>
 800617c:	1b64      	subs	r4, r4, r5
 800617e:	10a4      	asrs	r4, r4, #2
 8006180:	2600      	movs	r6, #0
 8006182:	42a6      	cmp	r6, r4
 8006184:	d105      	bne.n	8006192 <__libc_init_array+0x2e>
 8006186:	bd70      	pop	{r4, r5, r6, pc}
 8006188:	f855 3b04 	ldr.w	r3, [r5], #4
 800618c:	4798      	blx	r3
 800618e:	3601      	adds	r6, #1
 8006190:	e7ee      	b.n	8006170 <__libc_init_array+0xc>
 8006192:	f855 3b04 	ldr.w	r3, [r5], #4
 8006196:	4798      	blx	r3
 8006198:	3601      	adds	r6, #1
 800619a:	e7f2      	b.n	8006182 <__libc_init_array+0x1e>
 800619c:	080084dc 	.word	0x080084dc
 80061a0:	080084dc 	.word	0x080084dc
 80061a4:	080084dc 	.word	0x080084dc
 80061a8:	080084e0 	.word	0x080084e0

080061ac <__retarget_lock_init_recursive>:
 80061ac:	4770      	bx	lr

080061ae <__retarget_lock_acquire_recursive>:
 80061ae:	4770      	bx	lr

080061b0 <__retarget_lock_release_recursive>:
 80061b0:	4770      	bx	lr

080061b2 <strcpy>:
 80061b2:	4603      	mov	r3, r0
 80061b4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80061b8:	f803 2b01 	strb.w	r2, [r3], #1
 80061bc:	2a00      	cmp	r2, #0
 80061be:	d1f9      	bne.n	80061b4 <strcpy+0x2>
 80061c0:	4770      	bx	lr

080061c2 <memcpy>:
 80061c2:	440a      	add	r2, r1
 80061c4:	4291      	cmp	r1, r2
 80061c6:	f100 33ff 	add.w	r3, r0, #4294967295
 80061ca:	d100      	bne.n	80061ce <memcpy+0xc>
 80061cc:	4770      	bx	lr
 80061ce:	b510      	push	{r4, lr}
 80061d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80061d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80061d8:	4291      	cmp	r1, r2
 80061da:	d1f9      	bne.n	80061d0 <memcpy+0xe>
 80061dc:	bd10      	pop	{r4, pc}
	...

080061e0 <__assert_func>:
 80061e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80061e2:	4614      	mov	r4, r2
 80061e4:	461a      	mov	r2, r3
 80061e6:	4b09      	ldr	r3, [pc, #36]	@ (800620c <__assert_func+0x2c>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4605      	mov	r5, r0
 80061ec:	68d8      	ldr	r0, [r3, #12]
 80061ee:	b954      	cbnz	r4, 8006206 <__assert_func+0x26>
 80061f0:	4b07      	ldr	r3, [pc, #28]	@ (8006210 <__assert_func+0x30>)
 80061f2:	461c      	mov	r4, r3
 80061f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80061f8:	9100      	str	r1, [sp, #0]
 80061fa:	462b      	mov	r3, r5
 80061fc:	4905      	ldr	r1, [pc, #20]	@ (8006214 <__assert_func+0x34>)
 80061fe:	f000 fd2b 	bl	8006c58 <fiprintf>
 8006202:	f000 fdd9 	bl	8006db8 <abort>
 8006206:	4b04      	ldr	r3, [pc, #16]	@ (8006218 <__assert_func+0x38>)
 8006208:	e7f4      	b.n	80061f4 <__assert_func+0x14>
 800620a:	bf00      	nop
 800620c:	2000007c 	.word	0x2000007c
 8006210:	080084a0 	.word	0x080084a0
 8006214:	08008472 	.word	0x08008472
 8006218:	08008465 	.word	0x08008465

0800621c <_free_r>:
 800621c:	b538      	push	{r3, r4, r5, lr}
 800621e:	4605      	mov	r5, r0
 8006220:	2900      	cmp	r1, #0
 8006222:	d041      	beq.n	80062a8 <_free_r+0x8c>
 8006224:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006228:	1f0c      	subs	r4, r1, #4
 800622a:	2b00      	cmp	r3, #0
 800622c:	bfb8      	it	lt
 800622e:	18e4      	addlt	r4, r4, r3
 8006230:	f7ff fc6a 	bl	8005b08 <__malloc_lock>
 8006234:	4a1d      	ldr	r2, [pc, #116]	@ (80062ac <_free_r+0x90>)
 8006236:	6813      	ldr	r3, [r2, #0]
 8006238:	b933      	cbnz	r3, 8006248 <_free_r+0x2c>
 800623a:	6063      	str	r3, [r4, #4]
 800623c:	6014      	str	r4, [r2, #0]
 800623e:	4628      	mov	r0, r5
 8006240:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006244:	f7ff bc66 	b.w	8005b14 <__malloc_unlock>
 8006248:	42a3      	cmp	r3, r4
 800624a:	d908      	bls.n	800625e <_free_r+0x42>
 800624c:	6820      	ldr	r0, [r4, #0]
 800624e:	1821      	adds	r1, r4, r0
 8006250:	428b      	cmp	r3, r1
 8006252:	bf01      	itttt	eq
 8006254:	6819      	ldreq	r1, [r3, #0]
 8006256:	685b      	ldreq	r3, [r3, #4]
 8006258:	1809      	addeq	r1, r1, r0
 800625a:	6021      	streq	r1, [r4, #0]
 800625c:	e7ed      	b.n	800623a <_free_r+0x1e>
 800625e:	461a      	mov	r2, r3
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	b10b      	cbz	r3, 8006268 <_free_r+0x4c>
 8006264:	42a3      	cmp	r3, r4
 8006266:	d9fa      	bls.n	800625e <_free_r+0x42>
 8006268:	6811      	ldr	r1, [r2, #0]
 800626a:	1850      	adds	r0, r2, r1
 800626c:	42a0      	cmp	r0, r4
 800626e:	d10b      	bne.n	8006288 <_free_r+0x6c>
 8006270:	6820      	ldr	r0, [r4, #0]
 8006272:	4401      	add	r1, r0
 8006274:	1850      	adds	r0, r2, r1
 8006276:	4283      	cmp	r3, r0
 8006278:	6011      	str	r1, [r2, #0]
 800627a:	d1e0      	bne.n	800623e <_free_r+0x22>
 800627c:	6818      	ldr	r0, [r3, #0]
 800627e:	685b      	ldr	r3, [r3, #4]
 8006280:	6053      	str	r3, [r2, #4]
 8006282:	4408      	add	r0, r1
 8006284:	6010      	str	r0, [r2, #0]
 8006286:	e7da      	b.n	800623e <_free_r+0x22>
 8006288:	d902      	bls.n	8006290 <_free_r+0x74>
 800628a:	230c      	movs	r3, #12
 800628c:	602b      	str	r3, [r5, #0]
 800628e:	e7d6      	b.n	800623e <_free_r+0x22>
 8006290:	6820      	ldr	r0, [r4, #0]
 8006292:	1821      	adds	r1, r4, r0
 8006294:	428b      	cmp	r3, r1
 8006296:	bf04      	itt	eq
 8006298:	6819      	ldreq	r1, [r3, #0]
 800629a:	685b      	ldreq	r3, [r3, #4]
 800629c:	6063      	str	r3, [r4, #4]
 800629e:	bf04      	itt	eq
 80062a0:	1809      	addeq	r1, r1, r0
 80062a2:	6021      	streq	r1, [r4, #0]
 80062a4:	6054      	str	r4, [r2, #4]
 80062a6:	e7ca      	b.n	800623e <_free_r+0x22>
 80062a8:	bd38      	pop	{r3, r4, r5, pc}
 80062aa:	bf00      	nop
 80062ac:	20001730 	.word	0x20001730

080062b0 <__ssputs_r>:
 80062b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062b4:	688e      	ldr	r6, [r1, #8]
 80062b6:	461f      	mov	r7, r3
 80062b8:	42be      	cmp	r6, r7
 80062ba:	680b      	ldr	r3, [r1, #0]
 80062bc:	4682      	mov	sl, r0
 80062be:	460c      	mov	r4, r1
 80062c0:	4690      	mov	r8, r2
 80062c2:	d82d      	bhi.n	8006320 <__ssputs_r+0x70>
 80062c4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80062c8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80062cc:	d026      	beq.n	800631c <__ssputs_r+0x6c>
 80062ce:	6965      	ldr	r5, [r4, #20]
 80062d0:	6909      	ldr	r1, [r1, #16]
 80062d2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80062d6:	eba3 0901 	sub.w	r9, r3, r1
 80062da:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80062de:	1c7b      	adds	r3, r7, #1
 80062e0:	444b      	add	r3, r9
 80062e2:	106d      	asrs	r5, r5, #1
 80062e4:	429d      	cmp	r5, r3
 80062e6:	bf38      	it	cc
 80062e8:	461d      	movcc	r5, r3
 80062ea:	0553      	lsls	r3, r2, #21
 80062ec:	d527      	bpl.n	800633e <__ssputs_r+0x8e>
 80062ee:	4629      	mov	r1, r5
 80062f0:	f7ff fb8a 	bl	8005a08 <_malloc_r>
 80062f4:	4606      	mov	r6, r0
 80062f6:	b360      	cbz	r0, 8006352 <__ssputs_r+0xa2>
 80062f8:	6921      	ldr	r1, [r4, #16]
 80062fa:	464a      	mov	r2, r9
 80062fc:	f7ff ff61 	bl	80061c2 <memcpy>
 8006300:	89a3      	ldrh	r3, [r4, #12]
 8006302:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006306:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800630a:	81a3      	strh	r3, [r4, #12]
 800630c:	6126      	str	r6, [r4, #16]
 800630e:	6165      	str	r5, [r4, #20]
 8006310:	444e      	add	r6, r9
 8006312:	eba5 0509 	sub.w	r5, r5, r9
 8006316:	6026      	str	r6, [r4, #0]
 8006318:	60a5      	str	r5, [r4, #8]
 800631a:	463e      	mov	r6, r7
 800631c:	42be      	cmp	r6, r7
 800631e:	d900      	bls.n	8006322 <__ssputs_r+0x72>
 8006320:	463e      	mov	r6, r7
 8006322:	6820      	ldr	r0, [r4, #0]
 8006324:	4632      	mov	r2, r6
 8006326:	4641      	mov	r1, r8
 8006328:	f000 fd0a 	bl	8006d40 <memmove>
 800632c:	68a3      	ldr	r3, [r4, #8]
 800632e:	1b9b      	subs	r3, r3, r6
 8006330:	60a3      	str	r3, [r4, #8]
 8006332:	6823      	ldr	r3, [r4, #0]
 8006334:	4433      	add	r3, r6
 8006336:	6023      	str	r3, [r4, #0]
 8006338:	2000      	movs	r0, #0
 800633a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800633e:	462a      	mov	r2, r5
 8006340:	f000 fd41 	bl	8006dc6 <_realloc_r>
 8006344:	4606      	mov	r6, r0
 8006346:	2800      	cmp	r0, #0
 8006348:	d1e0      	bne.n	800630c <__ssputs_r+0x5c>
 800634a:	6921      	ldr	r1, [r4, #16]
 800634c:	4650      	mov	r0, sl
 800634e:	f7ff ff65 	bl	800621c <_free_r>
 8006352:	230c      	movs	r3, #12
 8006354:	f8ca 3000 	str.w	r3, [sl]
 8006358:	89a3      	ldrh	r3, [r4, #12]
 800635a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800635e:	81a3      	strh	r3, [r4, #12]
 8006360:	f04f 30ff 	mov.w	r0, #4294967295
 8006364:	e7e9      	b.n	800633a <__ssputs_r+0x8a>
	...

08006368 <_svfiprintf_r>:
 8006368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800636c:	4698      	mov	r8, r3
 800636e:	898b      	ldrh	r3, [r1, #12]
 8006370:	061b      	lsls	r3, r3, #24
 8006372:	b09d      	sub	sp, #116	@ 0x74
 8006374:	4607      	mov	r7, r0
 8006376:	460d      	mov	r5, r1
 8006378:	4614      	mov	r4, r2
 800637a:	d510      	bpl.n	800639e <_svfiprintf_r+0x36>
 800637c:	690b      	ldr	r3, [r1, #16]
 800637e:	b973      	cbnz	r3, 800639e <_svfiprintf_r+0x36>
 8006380:	2140      	movs	r1, #64	@ 0x40
 8006382:	f7ff fb41 	bl	8005a08 <_malloc_r>
 8006386:	6028      	str	r0, [r5, #0]
 8006388:	6128      	str	r0, [r5, #16]
 800638a:	b930      	cbnz	r0, 800639a <_svfiprintf_r+0x32>
 800638c:	230c      	movs	r3, #12
 800638e:	603b      	str	r3, [r7, #0]
 8006390:	f04f 30ff 	mov.w	r0, #4294967295
 8006394:	b01d      	add	sp, #116	@ 0x74
 8006396:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800639a:	2340      	movs	r3, #64	@ 0x40
 800639c:	616b      	str	r3, [r5, #20]
 800639e:	2300      	movs	r3, #0
 80063a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80063a2:	2320      	movs	r3, #32
 80063a4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80063a8:	f8cd 800c 	str.w	r8, [sp, #12]
 80063ac:	2330      	movs	r3, #48	@ 0x30
 80063ae:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800654c <_svfiprintf_r+0x1e4>
 80063b2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80063b6:	f04f 0901 	mov.w	r9, #1
 80063ba:	4623      	mov	r3, r4
 80063bc:	469a      	mov	sl, r3
 80063be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80063c2:	b10a      	cbz	r2, 80063c8 <_svfiprintf_r+0x60>
 80063c4:	2a25      	cmp	r2, #37	@ 0x25
 80063c6:	d1f9      	bne.n	80063bc <_svfiprintf_r+0x54>
 80063c8:	ebba 0b04 	subs.w	fp, sl, r4
 80063cc:	d00b      	beq.n	80063e6 <_svfiprintf_r+0x7e>
 80063ce:	465b      	mov	r3, fp
 80063d0:	4622      	mov	r2, r4
 80063d2:	4629      	mov	r1, r5
 80063d4:	4638      	mov	r0, r7
 80063d6:	f7ff ff6b 	bl	80062b0 <__ssputs_r>
 80063da:	3001      	adds	r0, #1
 80063dc:	f000 80a7 	beq.w	800652e <_svfiprintf_r+0x1c6>
 80063e0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80063e2:	445a      	add	r2, fp
 80063e4:	9209      	str	r2, [sp, #36]	@ 0x24
 80063e6:	f89a 3000 	ldrb.w	r3, [sl]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	f000 809f 	beq.w	800652e <_svfiprintf_r+0x1c6>
 80063f0:	2300      	movs	r3, #0
 80063f2:	f04f 32ff 	mov.w	r2, #4294967295
 80063f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80063fa:	f10a 0a01 	add.w	sl, sl, #1
 80063fe:	9304      	str	r3, [sp, #16]
 8006400:	9307      	str	r3, [sp, #28]
 8006402:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006406:	931a      	str	r3, [sp, #104]	@ 0x68
 8006408:	4654      	mov	r4, sl
 800640a:	2205      	movs	r2, #5
 800640c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006410:	484e      	ldr	r0, [pc, #312]	@ (800654c <_svfiprintf_r+0x1e4>)
 8006412:	f7f9 ff1d 	bl	8000250 <memchr>
 8006416:	9a04      	ldr	r2, [sp, #16]
 8006418:	b9d8      	cbnz	r0, 8006452 <_svfiprintf_r+0xea>
 800641a:	06d0      	lsls	r0, r2, #27
 800641c:	bf44      	itt	mi
 800641e:	2320      	movmi	r3, #32
 8006420:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006424:	0711      	lsls	r1, r2, #28
 8006426:	bf44      	itt	mi
 8006428:	232b      	movmi	r3, #43	@ 0x2b
 800642a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800642e:	f89a 3000 	ldrb.w	r3, [sl]
 8006432:	2b2a      	cmp	r3, #42	@ 0x2a
 8006434:	d015      	beq.n	8006462 <_svfiprintf_r+0xfa>
 8006436:	9a07      	ldr	r2, [sp, #28]
 8006438:	4654      	mov	r4, sl
 800643a:	2000      	movs	r0, #0
 800643c:	f04f 0c0a 	mov.w	ip, #10
 8006440:	4621      	mov	r1, r4
 8006442:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006446:	3b30      	subs	r3, #48	@ 0x30
 8006448:	2b09      	cmp	r3, #9
 800644a:	d94b      	bls.n	80064e4 <_svfiprintf_r+0x17c>
 800644c:	b1b0      	cbz	r0, 800647c <_svfiprintf_r+0x114>
 800644e:	9207      	str	r2, [sp, #28]
 8006450:	e014      	b.n	800647c <_svfiprintf_r+0x114>
 8006452:	eba0 0308 	sub.w	r3, r0, r8
 8006456:	fa09 f303 	lsl.w	r3, r9, r3
 800645a:	4313      	orrs	r3, r2
 800645c:	9304      	str	r3, [sp, #16]
 800645e:	46a2      	mov	sl, r4
 8006460:	e7d2      	b.n	8006408 <_svfiprintf_r+0xa0>
 8006462:	9b03      	ldr	r3, [sp, #12]
 8006464:	1d19      	adds	r1, r3, #4
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	9103      	str	r1, [sp, #12]
 800646a:	2b00      	cmp	r3, #0
 800646c:	bfbb      	ittet	lt
 800646e:	425b      	neglt	r3, r3
 8006470:	f042 0202 	orrlt.w	r2, r2, #2
 8006474:	9307      	strge	r3, [sp, #28]
 8006476:	9307      	strlt	r3, [sp, #28]
 8006478:	bfb8      	it	lt
 800647a:	9204      	strlt	r2, [sp, #16]
 800647c:	7823      	ldrb	r3, [r4, #0]
 800647e:	2b2e      	cmp	r3, #46	@ 0x2e
 8006480:	d10a      	bne.n	8006498 <_svfiprintf_r+0x130>
 8006482:	7863      	ldrb	r3, [r4, #1]
 8006484:	2b2a      	cmp	r3, #42	@ 0x2a
 8006486:	d132      	bne.n	80064ee <_svfiprintf_r+0x186>
 8006488:	9b03      	ldr	r3, [sp, #12]
 800648a:	1d1a      	adds	r2, r3, #4
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	9203      	str	r2, [sp, #12]
 8006490:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006494:	3402      	adds	r4, #2
 8006496:	9305      	str	r3, [sp, #20]
 8006498:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800655c <_svfiprintf_r+0x1f4>
 800649c:	7821      	ldrb	r1, [r4, #0]
 800649e:	2203      	movs	r2, #3
 80064a0:	4650      	mov	r0, sl
 80064a2:	f7f9 fed5 	bl	8000250 <memchr>
 80064a6:	b138      	cbz	r0, 80064b8 <_svfiprintf_r+0x150>
 80064a8:	9b04      	ldr	r3, [sp, #16]
 80064aa:	eba0 000a 	sub.w	r0, r0, sl
 80064ae:	2240      	movs	r2, #64	@ 0x40
 80064b0:	4082      	lsls	r2, r0
 80064b2:	4313      	orrs	r3, r2
 80064b4:	3401      	adds	r4, #1
 80064b6:	9304      	str	r3, [sp, #16]
 80064b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064bc:	4824      	ldr	r0, [pc, #144]	@ (8006550 <_svfiprintf_r+0x1e8>)
 80064be:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80064c2:	2206      	movs	r2, #6
 80064c4:	f7f9 fec4 	bl	8000250 <memchr>
 80064c8:	2800      	cmp	r0, #0
 80064ca:	d036      	beq.n	800653a <_svfiprintf_r+0x1d2>
 80064cc:	4b21      	ldr	r3, [pc, #132]	@ (8006554 <_svfiprintf_r+0x1ec>)
 80064ce:	bb1b      	cbnz	r3, 8006518 <_svfiprintf_r+0x1b0>
 80064d0:	9b03      	ldr	r3, [sp, #12]
 80064d2:	3307      	adds	r3, #7
 80064d4:	f023 0307 	bic.w	r3, r3, #7
 80064d8:	3308      	adds	r3, #8
 80064da:	9303      	str	r3, [sp, #12]
 80064dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80064de:	4433      	add	r3, r6
 80064e0:	9309      	str	r3, [sp, #36]	@ 0x24
 80064e2:	e76a      	b.n	80063ba <_svfiprintf_r+0x52>
 80064e4:	fb0c 3202 	mla	r2, ip, r2, r3
 80064e8:	460c      	mov	r4, r1
 80064ea:	2001      	movs	r0, #1
 80064ec:	e7a8      	b.n	8006440 <_svfiprintf_r+0xd8>
 80064ee:	2300      	movs	r3, #0
 80064f0:	3401      	adds	r4, #1
 80064f2:	9305      	str	r3, [sp, #20]
 80064f4:	4619      	mov	r1, r3
 80064f6:	f04f 0c0a 	mov.w	ip, #10
 80064fa:	4620      	mov	r0, r4
 80064fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006500:	3a30      	subs	r2, #48	@ 0x30
 8006502:	2a09      	cmp	r2, #9
 8006504:	d903      	bls.n	800650e <_svfiprintf_r+0x1a6>
 8006506:	2b00      	cmp	r3, #0
 8006508:	d0c6      	beq.n	8006498 <_svfiprintf_r+0x130>
 800650a:	9105      	str	r1, [sp, #20]
 800650c:	e7c4      	b.n	8006498 <_svfiprintf_r+0x130>
 800650e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006512:	4604      	mov	r4, r0
 8006514:	2301      	movs	r3, #1
 8006516:	e7f0      	b.n	80064fa <_svfiprintf_r+0x192>
 8006518:	ab03      	add	r3, sp, #12
 800651a:	9300      	str	r3, [sp, #0]
 800651c:	462a      	mov	r2, r5
 800651e:	4b0e      	ldr	r3, [pc, #56]	@ (8006558 <_svfiprintf_r+0x1f0>)
 8006520:	a904      	add	r1, sp, #16
 8006522:	4638      	mov	r0, r7
 8006524:	f3af 8000 	nop.w
 8006528:	1c42      	adds	r2, r0, #1
 800652a:	4606      	mov	r6, r0
 800652c:	d1d6      	bne.n	80064dc <_svfiprintf_r+0x174>
 800652e:	89ab      	ldrh	r3, [r5, #12]
 8006530:	065b      	lsls	r3, r3, #25
 8006532:	f53f af2d 	bmi.w	8006390 <_svfiprintf_r+0x28>
 8006536:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006538:	e72c      	b.n	8006394 <_svfiprintf_r+0x2c>
 800653a:	ab03      	add	r3, sp, #12
 800653c:	9300      	str	r3, [sp, #0]
 800653e:	462a      	mov	r2, r5
 8006540:	4b05      	ldr	r3, [pc, #20]	@ (8006558 <_svfiprintf_r+0x1f0>)
 8006542:	a904      	add	r1, sp, #16
 8006544:	4638      	mov	r0, r7
 8006546:	f000 f9bb 	bl	80068c0 <_printf_i>
 800654a:	e7ed      	b.n	8006528 <_svfiprintf_r+0x1c0>
 800654c:	080084a1 	.word	0x080084a1
 8006550:	080084ab 	.word	0x080084ab
 8006554:	00000000 	.word	0x00000000
 8006558:	080062b1 	.word	0x080062b1
 800655c:	080084a7 	.word	0x080084a7

08006560 <__sfputc_r>:
 8006560:	6893      	ldr	r3, [r2, #8]
 8006562:	3b01      	subs	r3, #1
 8006564:	2b00      	cmp	r3, #0
 8006566:	b410      	push	{r4}
 8006568:	6093      	str	r3, [r2, #8]
 800656a:	da08      	bge.n	800657e <__sfputc_r+0x1e>
 800656c:	6994      	ldr	r4, [r2, #24]
 800656e:	42a3      	cmp	r3, r4
 8006570:	db01      	blt.n	8006576 <__sfputc_r+0x16>
 8006572:	290a      	cmp	r1, #10
 8006574:	d103      	bne.n	800657e <__sfputc_r+0x1e>
 8006576:	f85d 4b04 	ldr.w	r4, [sp], #4
 800657a:	f7ff bc66 	b.w	8005e4a <__swbuf_r>
 800657e:	6813      	ldr	r3, [r2, #0]
 8006580:	1c58      	adds	r0, r3, #1
 8006582:	6010      	str	r0, [r2, #0]
 8006584:	7019      	strb	r1, [r3, #0]
 8006586:	4608      	mov	r0, r1
 8006588:	f85d 4b04 	ldr.w	r4, [sp], #4
 800658c:	4770      	bx	lr

0800658e <__sfputs_r>:
 800658e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006590:	4606      	mov	r6, r0
 8006592:	460f      	mov	r7, r1
 8006594:	4614      	mov	r4, r2
 8006596:	18d5      	adds	r5, r2, r3
 8006598:	42ac      	cmp	r4, r5
 800659a:	d101      	bne.n	80065a0 <__sfputs_r+0x12>
 800659c:	2000      	movs	r0, #0
 800659e:	e007      	b.n	80065b0 <__sfputs_r+0x22>
 80065a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065a4:	463a      	mov	r2, r7
 80065a6:	4630      	mov	r0, r6
 80065a8:	f7ff ffda 	bl	8006560 <__sfputc_r>
 80065ac:	1c43      	adds	r3, r0, #1
 80065ae:	d1f3      	bne.n	8006598 <__sfputs_r+0xa>
 80065b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080065b4 <_vfiprintf_r>:
 80065b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065b8:	460d      	mov	r5, r1
 80065ba:	b09d      	sub	sp, #116	@ 0x74
 80065bc:	4614      	mov	r4, r2
 80065be:	4698      	mov	r8, r3
 80065c0:	4606      	mov	r6, r0
 80065c2:	b118      	cbz	r0, 80065cc <_vfiprintf_r+0x18>
 80065c4:	6a03      	ldr	r3, [r0, #32]
 80065c6:	b90b      	cbnz	r3, 80065cc <_vfiprintf_r+0x18>
 80065c8:	f7ff fb36 	bl	8005c38 <__sinit>
 80065cc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80065ce:	07d9      	lsls	r1, r3, #31
 80065d0:	d405      	bmi.n	80065de <_vfiprintf_r+0x2a>
 80065d2:	89ab      	ldrh	r3, [r5, #12]
 80065d4:	059a      	lsls	r2, r3, #22
 80065d6:	d402      	bmi.n	80065de <_vfiprintf_r+0x2a>
 80065d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80065da:	f7ff fde8 	bl	80061ae <__retarget_lock_acquire_recursive>
 80065de:	89ab      	ldrh	r3, [r5, #12]
 80065e0:	071b      	lsls	r3, r3, #28
 80065e2:	d501      	bpl.n	80065e8 <_vfiprintf_r+0x34>
 80065e4:	692b      	ldr	r3, [r5, #16]
 80065e6:	b99b      	cbnz	r3, 8006610 <_vfiprintf_r+0x5c>
 80065e8:	4629      	mov	r1, r5
 80065ea:	4630      	mov	r0, r6
 80065ec:	f7ff fc6c 	bl	8005ec8 <__swsetup_r>
 80065f0:	b170      	cbz	r0, 8006610 <_vfiprintf_r+0x5c>
 80065f2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80065f4:	07dc      	lsls	r4, r3, #31
 80065f6:	d504      	bpl.n	8006602 <_vfiprintf_r+0x4e>
 80065f8:	f04f 30ff 	mov.w	r0, #4294967295
 80065fc:	b01d      	add	sp, #116	@ 0x74
 80065fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006602:	89ab      	ldrh	r3, [r5, #12]
 8006604:	0598      	lsls	r0, r3, #22
 8006606:	d4f7      	bmi.n	80065f8 <_vfiprintf_r+0x44>
 8006608:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800660a:	f7ff fdd1 	bl	80061b0 <__retarget_lock_release_recursive>
 800660e:	e7f3      	b.n	80065f8 <_vfiprintf_r+0x44>
 8006610:	2300      	movs	r3, #0
 8006612:	9309      	str	r3, [sp, #36]	@ 0x24
 8006614:	2320      	movs	r3, #32
 8006616:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800661a:	f8cd 800c 	str.w	r8, [sp, #12]
 800661e:	2330      	movs	r3, #48	@ 0x30
 8006620:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80067d0 <_vfiprintf_r+0x21c>
 8006624:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006628:	f04f 0901 	mov.w	r9, #1
 800662c:	4623      	mov	r3, r4
 800662e:	469a      	mov	sl, r3
 8006630:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006634:	b10a      	cbz	r2, 800663a <_vfiprintf_r+0x86>
 8006636:	2a25      	cmp	r2, #37	@ 0x25
 8006638:	d1f9      	bne.n	800662e <_vfiprintf_r+0x7a>
 800663a:	ebba 0b04 	subs.w	fp, sl, r4
 800663e:	d00b      	beq.n	8006658 <_vfiprintf_r+0xa4>
 8006640:	465b      	mov	r3, fp
 8006642:	4622      	mov	r2, r4
 8006644:	4629      	mov	r1, r5
 8006646:	4630      	mov	r0, r6
 8006648:	f7ff ffa1 	bl	800658e <__sfputs_r>
 800664c:	3001      	adds	r0, #1
 800664e:	f000 80a7 	beq.w	80067a0 <_vfiprintf_r+0x1ec>
 8006652:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006654:	445a      	add	r2, fp
 8006656:	9209      	str	r2, [sp, #36]	@ 0x24
 8006658:	f89a 3000 	ldrb.w	r3, [sl]
 800665c:	2b00      	cmp	r3, #0
 800665e:	f000 809f 	beq.w	80067a0 <_vfiprintf_r+0x1ec>
 8006662:	2300      	movs	r3, #0
 8006664:	f04f 32ff 	mov.w	r2, #4294967295
 8006668:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800666c:	f10a 0a01 	add.w	sl, sl, #1
 8006670:	9304      	str	r3, [sp, #16]
 8006672:	9307      	str	r3, [sp, #28]
 8006674:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006678:	931a      	str	r3, [sp, #104]	@ 0x68
 800667a:	4654      	mov	r4, sl
 800667c:	2205      	movs	r2, #5
 800667e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006682:	4853      	ldr	r0, [pc, #332]	@ (80067d0 <_vfiprintf_r+0x21c>)
 8006684:	f7f9 fde4 	bl	8000250 <memchr>
 8006688:	9a04      	ldr	r2, [sp, #16]
 800668a:	b9d8      	cbnz	r0, 80066c4 <_vfiprintf_r+0x110>
 800668c:	06d1      	lsls	r1, r2, #27
 800668e:	bf44      	itt	mi
 8006690:	2320      	movmi	r3, #32
 8006692:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006696:	0713      	lsls	r3, r2, #28
 8006698:	bf44      	itt	mi
 800669a:	232b      	movmi	r3, #43	@ 0x2b
 800669c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80066a0:	f89a 3000 	ldrb.w	r3, [sl]
 80066a4:	2b2a      	cmp	r3, #42	@ 0x2a
 80066a6:	d015      	beq.n	80066d4 <_vfiprintf_r+0x120>
 80066a8:	9a07      	ldr	r2, [sp, #28]
 80066aa:	4654      	mov	r4, sl
 80066ac:	2000      	movs	r0, #0
 80066ae:	f04f 0c0a 	mov.w	ip, #10
 80066b2:	4621      	mov	r1, r4
 80066b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80066b8:	3b30      	subs	r3, #48	@ 0x30
 80066ba:	2b09      	cmp	r3, #9
 80066bc:	d94b      	bls.n	8006756 <_vfiprintf_r+0x1a2>
 80066be:	b1b0      	cbz	r0, 80066ee <_vfiprintf_r+0x13a>
 80066c0:	9207      	str	r2, [sp, #28]
 80066c2:	e014      	b.n	80066ee <_vfiprintf_r+0x13a>
 80066c4:	eba0 0308 	sub.w	r3, r0, r8
 80066c8:	fa09 f303 	lsl.w	r3, r9, r3
 80066cc:	4313      	orrs	r3, r2
 80066ce:	9304      	str	r3, [sp, #16]
 80066d0:	46a2      	mov	sl, r4
 80066d2:	e7d2      	b.n	800667a <_vfiprintf_r+0xc6>
 80066d4:	9b03      	ldr	r3, [sp, #12]
 80066d6:	1d19      	adds	r1, r3, #4
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	9103      	str	r1, [sp, #12]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	bfbb      	ittet	lt
 80066e0:	425b      	neglt	r3, r3
 80066e2:	f042 0202 	orrlt.w	r2, r2, #2
 80066e6:	9307      	strge	r3, [sp, #28]
 80066e8:	9307      	strlt	r3, [sp, #28]
 80066ea:	bfb8      	it	lt
 80066ec:	9204      	strlt	r2, [sp, #16]
 80066ee:	7823      	ldrb	r3, [r4, #0]
 80066f0:	2b2e      	cmp	r3, #46	@ 0x2e
 80066f2:	d10a      	bne.n	800670a <_vfiprintf_r+0x156>
 80066f4:	7863      	ldrb	r3, [r4, #1]
 80066f6:	2b2a      	cmp	r3, #42	@ 0x2a
 80066f8:	d132      	bne.n	8006760 <_vfiprintf_r+0x1ac>
 80066fa:	9b03      	ldr	r3, [sp, #12]
 80066fc:	1d1a      	adds	r2, r3, #4
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	9203      	str	r2, [sp, #12]
 8006702:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006706:	3402      	adds	r4, #2
 8006708:	9305      	str	r3, [sp, #20]
 800670a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80067e0 <_vfiprintf_r+0x22c>
 800670e:	7821      	ldrb	r1, [r4, #0]
 8006710:	2203      	movs	r2, #3
 8006712:	4650      	mov	r0, sl
 8006714:	f7f9 fd9c 	bl	8000250 <memchr>
 8006718:	b138      	cbz	r0, 800672a <_vfiprintf_r+0x176>
 800671a:	9b04      	ldr	r3, [sp, #16]
 800671c:	eba0 000a 	sub.w	r0, r0, sl
 8006720:	2240      	movs	r2, #64	@ 0x40
 8006722:	4082      	lsls	r2, r0
 8006724:	4313      	orrs	r3, r2
 8006726:	3401      	adds	r4, #1
 8006728:	9304      	str	r3, [sp, #16]
 800672a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800672e:	4829      	ldr	r0, [pc, #164]	@ (80067d4 <_vfiprintf_r+0x220>)
 8006730:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006734:	2206      	movs	r2, #6
 8006736:	f7f9 fd8b 	bl	8000250 <memchr>
 800673a:	2800      	cmp	r0, #0
 800673c:	d03f      	beq.n	80067be <_vfiprintf_r+0x20a>
 800673e:	4b26      	ldr	r3, [pc, #152]	@ (80067d8 <_vfiprintf_r+0x224>)
 8006740:	bb1b      	cbnz	r3, 800678a <_vfiprintf_r+0x1d6>
 8006742:	9b03      	ldr	r3, [sp, #12]
 8006744:	3307      	adds	r3, #7
 8006746:	f023 0307 	bic.w	r3, r3, #7
 800674a:	3308      	adds	r3, #8
 800674c:	9303      	str	r3, [sp, #12]
 800674e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006750:	443b      	add	r3, r7
 8006752:	9309      	str	r3, [sp, #36]	@ 0x24
 8006754:	e76a      	b.n	800662c <_vfiprintf_r+0x78>
 8006756:	fb0c 3202 	mla	r2, ip, r2, r3
 800675a:	460c      	mov	r4, r1
 800675c:	2001      	movs	r0, #1
 800675e:	e7a8      	b.n	80066b2 <_vfiprintf_r+0xfe>
 8006760:	2300      	movs	r3, #0
 8006762:	3401      	adds	r4, #1
 8006764:	9305      	str	r3, [sp, #20]
 8006766:	4619      	mov	r1, r3
 8006768:	f04f 0c0a 	mov.w	ip, #10
 800676c:	4620      	mov	r0, r4
 800676e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006772:	3a30      	subs	r2, #48	@ 0x30
 8006774:	2a09      	cmp	r2, #9
 8006776:	d903      	bls.n	8006780 <_vfiprintf_r+0x1cc>
 8006778:	2b00      	cmp	r3, #0
 800677a:	d0c6      	beq.n	800670a <_vfiprintf_r+0x156>
 800677c:	9105      	str	r1, [sp, #20]
 800677e:	e7c4      	b.n	800670a <_vfiprintf_r+0x156>
 8006780:	fb0c 2101 	mla	r1, ip, r1, r2
 8006784:	4604      	mov	r4, r0
 8006786:	2301      	movs	r3, #1
 8006788:	e7f0      	b.n	800676c <_vfiprintf_r+0x1b8>
 800678a:	ab03      	add	r3, sp, #12
 800678c:	9300      	str	r3, [sp, #0]
 800678e:	462a      	mov	r2, r5
 8006790:	4b12      	ldr	r3, [pc, #72]	@ (80067dc <_vfiprintf_r+0x228>)
 8006792:	a904      	add	r1, sp, #16
 8006794:	4630      	mov	r0, r6
 8006796:	f3af 8000 	nop.w
 800679a:	4607      	mov	r7, r0
 800679c:	1c78      	adds	r0, r7, #1
 800679e:	d1d6      	bne.n	800674e <_vfiprintf_r+0x19a>
 80067a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80067a2:	07d9      	lsls	r1, r3, #31
 80067a4:	d405      	bmi.n	80067b2 <_vfiprintf_r+0x1fe>
 80067a6:	89ab      	ldrh	r3, [r5, #12]
 80067a8:	059a      	lsls	r2, r3, #22
 80067aa:	d402      	bmi.n	80067b2 <_vfiprintf_r+0x1fe>
 80067ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80067ae:	f7ff fcff 	bl	80061b0 <__retarget_lock_release_recursive>
 80067b2:	89ab      	ldrh	r3, [r5, #12]
 80067b4:	065b      	lsls	r3, r3, #25
 80067b6:	f53f af1f 	bmi.w	80065f8 <_vfiprintf_r+0x44>
 80067ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80067bc:	e71e      	b.n	80065fc <_vfiprintf_r+0x48>
 80067be:	ab03      	add	r3, sp, #12
 80067c0:	9300      	str	r3, [sp, #0]
 80067c2:	462a      	mov	r2, r5
 80067c4:	4b05      	ldr	r3, [pc, #20]	@ (80067dc <_vfiprintf_r+0x228>)
 80067c6:	a904      	add	r1, sp, #16
 80067c8:	4630      	mov	r0, r6
 80067ca:	f000 f879 	bl	80068c0 <_printf_i>
 80067ce:	e7e4      	b.n	800679a <_vfiprintf_r+0x1e6>
 80067d0:	080084a1 	.word	0x080084a1
 80067d4:	080084ab 	.word	0x080084ab
 80067d8:	00000000 	.word	0x00000000
 80067dc:	0800658f 	.word	0x0800658f
 80067e0:	080084a7 	.word	0x080084a7

080067e4 <_printf_common>:
 80067e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067e8:	4616      	mov	r6, r2
 80067ea:	4698      	mov	r8, r3
 80067ec:	688a      	ldr	r2, [r1, #8]
 80067ee:	690b      	ldr	r3, [r1, #16]
 80067f0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80067f4:	4293      	cmp	r3, r2
 80067f6:	bfb8      	it	lt
 80067f8:	4613      	movlt	r3, r2
 80067fa:	6033      	str	r3, [r6, #0]
 80067fc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006800:	4607      	mov	r7, r0
 8006802:	460c      	mov	r4, r1
 8006804:	b10a      	cbz	r2, 800680a <_printf_common+0x26>
 8006806:	3301      	adds	r3, #1
 8006808:	6033      	str	r3, [r6, #0]
 800680a:	6823      	ldr	r3, [r4, #0]
 800680c:	0699      	lsls	r1, r3, #26
 800680e:	bf42      	ittt	mi
 8006810:	6833      	ldrmi	r3, [r6, #0]
 8006812:	3302      	addmi	r3, #2
 8006814:	6033      	strmi	r3, [r6, #0]
 8006816:	6825      	ldr	r5, [r4, #0]
 8006818:	f015 0506 	ands.w	r5, r5, #6
 800681c:	d106      	bne.n	800682c <_printf_common+0x48>
 800681e:	f104 0a19 	add.w	sl, r4, #25
 8006822:	68e3      	ldr	r3, [r4, #12]
 8006824:	6832      	ldr	r2, [r6, #0]
 8006826:	1a9b      	subs	r3, r3, r2
 8006828:	42ab      	cmp	r3, r5
 800682a:	dc26      	bgt.n	800687a <_printf_common+0x96>
 800682c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006830:	6822      	ldr	r2, [r4, #0]
 8006832:	3b00      	subs	r3, #0
 8006834:	bf18      	it	ne
 8006836:	2301      	movne	r3, #1
 8006838:	0692      	lsls	r2, r2, #26
 800683a:	d42b      	bmi.n	8006894 <_printf_common+0xb0>
 800683c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006840:	4641      	mov	r1, r8
 8006842:	4638      	mov	r0, r7
 8006844:	47c8      	blx	r9
 8006846:	3001      	adds	r0, #1
 8006848:	d01e      	beq.n	8006888 <_printf_common+0xa4>
 800684a:	6823      	ldr	r3, [r4, #0]
 800684c:	6922      	ldr	r2, [r4, #16]
 800684e:	f003 0306 	and.w	r3, r3, #6
 8006852:	2b04      	cmp	r3, #4
 8006854:	bf02      	ittt	eq
 8006856:	68e5      	ldreq	r5, [r4, #12]
 8006858:	6833      	ldreq	r3, [r6, #0]
 800685a:	1aed      	subeq	r5, r5, r3
 800685c:	68a3      	ldr	r3, [r4, #8]
 800685e:	bf0c      	ite	eq
 8006860:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006864:	2500      	movne	r5, #0
 8006866:	4293      	cmp	r3, r2
 8006868:	bfc4      	itt	gt
 800686a:	1a9b      	subgt	r3, r3, r2
 800686c:	18ed      	addgt	r5, r5, r3
 800686e:	2600      	movs	r6, #0
 8006870:	341a      	adds	r4, #26
 8006872:	42b5      	cmp	r5, r6
 8006874:	d11a      	bne.n	80068ac <_printf_common+0xc8>
 8006876:	2000      	movs	r0, #0
 8006878:	e008      	b.n	800688c <_printf_common+0xa8>
 800687a:	2301      	movs	r3, #1
 800687c:	4652      	mov	r2, sl
 800687e:	4641      	mov	r1, r8
 8006880:	4638      	mov	r0, r7
 8006882:	47c8      	blx	r9
 8006884:	3001      	adds	r0, #1
 8006886:	d103      	bne.n	8006890 <_printf_common+0xac>
 8006888:	f04f 30ff 	mov.w	r0, #4294967295
 800688c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006890:	3501      	adds	r5, #1
 8006892:	e7c6      	b.n	8006822 <_printf_common+0x3e>
 8006894:	18e1      	adds	r1, r4, r3
 8006896:	1c5a      	adds	r2, r3, #1
 8006898:	2030      	movs	r0, #48	@ 0x30
 800689a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800689e:	4422      	add	r2, r4
 80068a0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80068a4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80068a8:	3302      	adds	r3, #2
 80068aa:	e7c7      	b.n	800683c <_printf_common+0x58>
 80068ac:	2301      	movs	r3, #1
 80068ae:	4622      	mov	r2, r4
 80068b0:	4641      	mov	r1, r8
 80068b2:	4638      	mov	r0, r7
 80068b4:	47c8      	blx	r9
 80068b6:	3001      	adds	r0, #1
 80068b8:	d0e6      	beq.n	8006888 <_printf_common+0xa4>
 80068ba:	3601      	adds	r6, #1
 80068bc:	e7d9      	b.n	8006872 <_printf_common+0x8e>
	...

080068c0 <_printf_i>:
 80068c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80068c4:	7e0f      	ldrb	r7, [r1, #24]
 80068c6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80068c8:	2f78      	cmp	r7, #120	@ 0x78
 80068ca:	4691      	mov	r9, r2
 80068cc:	4680      	mov	r8, r0
 80068ce:	460c      	mov	r4, r1
 80068d0:	469a      	mov	sl, r3
 80068d2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80068d6:	d807      	bhi.n	80068e8 <_printf_i+0x28>
 80068d8:	2f62      	cmp	r7, #98	@ 0x62
 80068da:	d80a      	bhi.n	80068f2 <_printf_i+0x32>
 80068dc:	2f00      	cmp	r7, #0
 80068de:	f000 80d2 	beq.w	8006a86 <_printf_i+0x1c6>
 80068e2:	2f58      	cmp	r7, #88	@ 0x58
 80068e4:	f000 80b9 	beq.w	8006a5a <_printf_i+0x19a>
 80068e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80068ec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80068f0:	e03a      	b.n	8006968 <_printf_i+0xa8>
 80068f2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80068f6:	2b15      	cmp	r3, #21
 80068f8:	d8f6      	bhi.n	80068e8 <_printf_i+0x28>
 80068fa:	a101      	add	r1, pc, #4	@ (adr r1, 8006900 <_printf_i+0x40>)
 80068fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006900:	08006959 	.word	0x08006959
 8006904:	0800696d 	.word	0x0800696d
 8006908:	080068e9 	.word	0x080068e9
 800690c:	080068e9 	.word	0x080068e9
 8006910:	080068e9 	.word	0x080068e9
 8006914:	080068e9 	.word	0x080068e9
 8006918:	0800696d 	.word	0x0800696d
 800691c:	080068e9 	.word	0x080068e9
 8006920:	080068e9 	.word	0x080068e9
 8006924:	080068e9 	.word	0x080068e9
 8006928:	080068e9 	.word	0x080068e9
 800692c:	08006a6d 	.word	0x08006a6d
 8006930:	08006997 	.word	0x08006997
 8006934:	08006a27 	.word	0x08006a27
 8006938:	080068e9 	.word	0x080068e9
 800693c:	080068e9 	.word	0x080068e9
 8006940:	08006a8f 	.word	0x08006a8f
 8006944:	080068e9 	.word	0x080068e9
 8006948:	08006997 	.word	0x08006997
 800694c:	080068e9 	.word	0x080068e9
 8006950:	080068e9 	.word	0x080068e9
 8006954:	08006a2f 	.word	0x08006a2f
 8006958:	6833      	ldr	r3, [r6, #0]
 800695a:	1d1a      	adds	r2, r3, #4
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	6032      	str	r2, [r6, #0]
 8006960:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006964:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006968:	2301      	movs	r3, #1
 800696a:	e09d      	b.n	8006aa8 <_printf_i+0x1e8>
 800696c:	6833      	ldr	r3, [r6, #0]
 800696e:	6820      	ldr	r0, [r4, #0]
 8006970:	1d19      	adds	r1, r3, #4
 8006972:	6031      	str	r1, [r6, #0]
 8006974:	0606      	lsls	r6, r0, #24
 8006976:	d501      	bpl.n	800697c <_printf_i+0xbc>
 8006978:	681d      	ldr	r5, [r3, #0]
 800697a:	e003      	b.n	8006984 <_printf_i+0xc4>
 800697c:	0645      	lsls	r5, r0, #25
 800697e:	d5fb      	bpl.n	8006978 <_printf_i+0xb8>
 8006980:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006984:	2d00      	cmp	r5, #0
 8006986:	da03      	bge.n	8006990 <_printf_i+0xd0>
 8006988:	232d      	movs	r3, #45	@ 0x2d
 800698a:	426d      	negs	r5, r5
 800698c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006990:	4859      	ldr	r0, [pc, #356]	@ (8006af8 <_printf_i+0x238>)
 8006992:	230a      	movs	r3, #10
 8006994:	e011      	b.n	80069ba <_printf_i+0xfa>
 8006996:	6821      	ldr	r1, [r4, #0]
 8006998:	6833      	ldr	r3, [r6, #0]
 800699a:	0608      	lsls	r0, r1, #24
 800699c:	f853 5b04 	ldr.w	r5, [r3], #4
 80069a0:	d402      	bmi.n	80069a8 <_printf_i+0xe8>
 80069a2:	0649      	lsls	r1, r1, #25
 80069a4:	bf48      	it	mi
 80069a6:	b2ad      	uxthmi	r5, r5
 80069a8:	2f6f      	cmp	r7, #111	@ 0x6f
 80069aa:	4853      	ldr	r0, [pc, #332]	@ (8006af8 <_printf_i+0x238>)
 80069ac:	6033      	str	r3, [r6, #0]
 80069ae:	bf14      	ite	ne
 80069b0:	230a      	movne	r3, #10
 80069b2:	2308      	moveq	r3, #8
 80069b4:	2100      	movs	r1, #0
 80069b6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80069ba:	6866      	ldr	r6, [r4, #4]
 80069bc:	60a6      	str	r6, [r4, #8]
 80069be:	2e00      	cmp	r6, #0
 80069c0:	bfa2      	ittt	ge
 80069c2:	6821      	ldrge	r1, [r4, #0]
 80069c4:	f021 0104 	bicge.w	r1, r1, #4
 80069c8:	6021      	strge	r1, [r4, #0]
 80069ca:	b90d      	cbnz	r5, 80069d0 <_printf_i+0x110>
 80069cc:	2e00      	cmp	r6, #0
 80069ce:	d04b      	beq.n	8006a68 <_printf_i+0x1a8>
 80069d0:	4616      	mov	r6, r2
 80069d2:	fbb5 f1f3 	udiv	r1, r5, r3
 80069d6:	fb03 5711 	mls	r7, r3, r1, r5
 80069da:	5dc7      	ldrb	r7, [r0, r7]
 80069dc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80069e0:	462f      	mov	r7, r5
 80069e2:	42bb      	cmp	r3, r7
 80069e4:	460d      	mov	r5, r1
 80069e6:	d9f4      	bls.n	80069d2 <_printf_i+0x112>
 80069e8:	2b08      	cmp	r3, #8
 80069ea:	d10b      	bne.n	8006a04 <_printf_i+0x144>
 80069ec:	6823      	ldr	r3, [r4, #0]
 80069ee:	07df      	lsls	r7, r3, #31
 80069f0:	d508      	bpl.n	8006a04 <_printf_i+0x144>
 80069f2:	6923      	ldr	r3, [r4, #16]
 80069f4:	6861      	ldr	r1, [r4, #4]
 80069f6:	4299      	cmp	r1, r3
 80069f8:	bfde      	ittt	le
 80069fa:	2330      	movle	r3, #48	@ 0x30
 80069fc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006a00:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006a04:	1b92      	subs	r2, r2, r6
 8006a06:	6122      	str	r2, [r4, #16]
 8006a08:	f8cd a000 	str.w	sl, [sp]
 8006a0c:	464b      	mov	r3, r9
 8006a0e:	aa03      	add	r2, sp, #12
 8006a10:	4621      	mov	r1, r4
 8006a12:	4640      	mov	r0, r8
 8006a14:	f7ff fee6 	bl	80067e4 <_printf_common>
 8006a18:	3001      	adds	r0, #1
 8006a1a:	d14a      	bne.n	8006ab2 <_printf_i+0x1f2>
 8006a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8006a20:	b004      	add	sp, #16
 8006a22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a26:	6823      	ldr	r3, [r4, #0]
 8006a28:	f043 0320 	orr.w	r3, r3, #32
 8006a2c:	6023      	str	r3, [r4, #0]
 8006a2e:	4833      	ldr	r0, [pc, #204]	@ (8006afc <_printf_i+0x23c>)
 8006a30:	2778      	movs	r7, #120	@ 0x78
 8006a32:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006a36:	6823      	ldr	r3, [r4, #0]
 8006a38:	6831      	ldr	r1, [r6, #0]
 8006a3a:	061f      	lsls	r7, r3, #24
 8006a3c:	f851 5b04 	ldr.w	r5, [r1], #4
 8006a40:	d402      	bmi.n	8006a48 <_printf_i+0x188>
 8006a42:	065f      	lsls	r7, r3, #25
 8006a44:	bf48      	it	mi
 8006a46:	b2ad      	uxthmi	r5, r5
 8006a48:	6031      	str	r1, [r6, #0]
 8006a4a:	07d9      	lsls	r1, r3, #31
 8006a4c:	bf44      	itt	mi
 8006a4e:	f043 0320 	orrmi.w	r3, r3, #32
 8006a52:	6023      	strmi	r3, [r4, #0]
 8006a54:	b11d      	cbz	r5, 8006a5e <_printf_i+0x19e>
 8006a56:	2310      	movs	r3, #16
 8006a58:	e7ac      	b.n	80069b4 <_printf_i+0xf4>
 8006a5a:	4827      	ldr	r0, [pc, #156]	@ (8006af8 <_printf_i+0x238>)
 8006a5c:	e7e9      	b.n	8006a32 <_printf_i+0x172>
 8006a5e:	6823      	ldr	r3, [r4, #0]
 8006a60:	f023 0320 	bic.w	r3, r3, #32
 8006a64:	6023      	str	r3, [r4, #0]
 8006a66:	e7f6      	b.n	8006a56 <_printf_i+0x196>
 8006a68:	4616      	mov	r6, r2
 8006a6a:	e7bd      	b.n	80069e8 <_printf_i+0x128>
 8006a6c:	6833      	ldr	r3, [r6, #0]
 8006a6e:	6825      	ldr	r5, [r4, #0]
 8006a70:	6961      	ldr	r1, [r4, #20]
 8006a72:	1d18      	adds	r0, r3, #4
 8006a74:	6030      	str	r0, [r6, #0]
 8006a76:	062e      	lsls	r6, r5, #24
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	d501      	bpl.n	8006a80 <_printf_i+0x1c0>
 8006a7c:	6019      	str	r1, [r3, #0]
 8006a7e:	e002      	b.n	8006a86 <_printf_i+0x1c6>
 8006a80:	0668      	lsls	r0, r5, #25
 8006a82:	d5fb      	bpl.n	8006a7c <_printf_i+0x1bc>
 8006a84:	8019      	strh	r1, [r3, #0]
 8006a86:	2300      	movs	r3, #0
 8006a88:	6123      	str	r3, [r4, #16]
 8006a8a:	4616      	mov	r6, r2
 8006a8c:	e7bc      	b.n	8006a08 <_printf_i+0x148>
 8006a8e:	6833      	ldr	r3, [r6, #0]
 8006a90:	1d1a      	adds	r2, r3, #4
 8006a92:	6032      	str	r2, [r6, #0]
 8006a94:	681e      	ldr	r6, [r3, #0]
 8006a96:	6862      	ldr	r2, [r4, #4]
 8006a98:	2100      	movs	r1, #0
 8006a9a:	4630      	mov	r0, r6
 8006a9c:	f7f9 fbd8 	bl	8000250 <memchr>
 8006aa0:	b108      	cbz	r0, 8006aa6 <_printf_i+0x1e6>
 8006aa2:	1b80      	subs	r0, r0, r6
 8006aa4:	6060      	str	r0, [r4, #4]
 8006aa6:	6863      	ldr	r3, [r4, #4]
 8006aa8:	6123      	str	r3, [r4, #16]
 8006aaa:	2300      	movs	r3, #0
 8006aac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006ab0:	e7aa      	b.n	8006a08 <_printf_i+0x148>
 8006ab2:	6923      	ldr	r3, [r4, #16]
 8006ab4:	4632      	mov	r2, r6
 8006ab6:	4649      	mov	r1, r9
 8006ab8:	4640      	mov	r0, r8
 8006aba:	47d0      	blx	sl
 8006abc:	3001      	adds	r0, #1
 8006abe:	d0ad      	beq.n	8006a1c <_printf_i+0x15c>
 8006ac0:	6823      	ldr	r3, [r4, #0]
 8006ac2:	079b      	lsls	r3, r3, #30
 8006ac4:	d413      	bmi.n	8006aee <_printf_i+0x22e>
 8006ac6:	68e0      	ldr	r0, [r4, #12]
 8006ac8:	9b03      	ldr	r3, [sp, #12]
 8006aca:	4298      	cmp	r0, r3
 8006acc:	bfb8      	it	lt
 8006ace:	4618      	movlt	r0, r3
 8006ad0:	e7a6      	b.n	8006a20 <_printf_i+0x160>
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	4632      	mov	r2, r6
 8006ad6:	4649      	mov	r1, r9
 8006ad8:	4640      	mov	r0, r8
 8006ada:	47d0      	blx	sl
 8006adc:	3001      	adds	r0, #1
 8006ade:	d09d      	beq.n	8006a1c <_printf_i+0x15c>
 8006ae0:	3501      	adds	r5, #1
 8006ae2:	68e3      	ldr	r3, [r4, #12]
 8006ae4:	9903      	ldr	r1, [sp, #12]
 8006ae6:	1a5b      	subs	r3, r3, r1
 8006ae8:	42ab      	cmp	r3, r5
 8006aea:	dcf2      	bgt.n	8006ad2 <_printf_i+0x212>
 8006aec:	e7eb      	b.n	8006ac6 <_printf_i+0x206>
 8006aee:	2500      	movs	r5, #0
 8006af0:	f104 0619 	add.w	r6, r4, #25
 8006af4:	e7f5      	b.n	8006ae2 <_printf_i+0x222>
 8006af6:	bf00      	nop
 8006af8:	080084b2 	.word	0x080084b2
 8006afc:	080084c3 	.word	0x080084c3

08006b00 <__sflush_r>:
 8006b00:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006b04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b08:	0716      	lsls	r6, r2, #28
 8006b0a:	4605      	mov	r5, r0
 8006b0c:	460c      	mov	r4, r1
 8006b0e:	d454      	bmi.n	8006bba <__sflush_r+0xba>
 8006b10:	684b      	ldr	r3, [r1, #4]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	dc02      	bgt.n	8006b1c <__sflush_r+0x1c>
 8006b16:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	dd48      	ble.n	8006bae <__sflush_r+0xae>
 8006b1c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006b1e:	2e00      	cmp	r6, #0
 8006b20:	d045      	beq.n	8006bae <__sflush_r+0xae>
 8006b22:	2300      	movs	r3, #0
 8006b24:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006b28:	682f      	ldr	r7, [r5, #0]
 8006b2a:	6a21      	ldr	r1, [r4, #32]
 8006b2c:	602b      	str	r3, [r5, #0]
 8006b2e:	d030      	beq.n	8006b92 <__sflush_r+0x92>
 8006b30:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006b32:	89a3      	ldrh	r3, [r4, #12]
 8006b34:	0759      	lsls	r1, r3, #29
 8006b36:	d505      	bpl.n	8006b44 <__sflush_r+0x44>
 8006b38:	6863      	ldr	r3, [r4, #4]
 8006b3a:	1ad2      	subs	r2, r2, r3
 8006b3c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006b3e:	b10b      	cbz	r3, 8006b44 <__sflush_r+0x44>
 8006b40:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006b42:	1ad2      	subs	r2, r2, r3
 8006b44:	2300      	movs	r3, #0
 8006b46:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006b48:	6a21      	ldr	r1, [r4, #32]
 8006b4a:	4628      	mov	r0, r5
 8006b4c:	47b0      	blx	r6
 8006b4e:	1c43      	adds	r3, r0, #1
 8006b50:	89a3      	ldrh	r3, [r4, #12]
 8006b52:	d106      	bne.n	8006b62 <__sflush_r+0x62>
 8006b54:	6829      	ldr	r1, [r5, #0]
 8006b56:	291d      	cmp	r1, #29
 8006b58:	d82b      	bhi.n	8006bb2 <__sflush_r+0xb2>
 8006b5a:	4a2a      	ldr	r2, [pc, #168]	@ (8006c04 <__sflush_r+0x104>)
 8006b5c:	410a      	asrs	r2, r1
 8006b5e:	07d6      	lsls	r6, r2, #31
 8006b60:	d427      	bmi.n	8006bb2 <__sflush_r+0xb2>
 8006b62:	2200      	movs	r2, #0
 8006b64:	6062      	str	r2, [r4, #4]
 8006b66:	04d9      	lsls	r1, r3, #19
 8006b68:	6922      	ldr	r2, [r4, #16]
 8006b6a:	6022      	str	r2, [r4, #0]
 8006b6c:	d504      	bpl.n	8006b78 <__sflush_r+0x78>
 8006b6e:	1c42      	adds	r2, r0, #1
 8006b70:	d101      	bne.n	8006b76 <__sflush_r+0x76>
 8006b72:	682b      	ldr	r3, [r5, #0]
 8006b74:	b903      	cbnz	r3, 8006b78 <__sflush_r+0x78>
 8006b76:	6560      	str	r0, [r4, #84]	@ 0x54
 8006b78:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006b7a:	602f      	str	r7, [r5, #0]
 8006b7c:	b1b9      	cbz	r1, 8006bae <__sflush_r+0xae>
 8006b7e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006b82:	4299      	cmp	r1, r3
 8006b84:	d002      	beq.n	8006b8c <__sflush_r+0x8c>
 8006b86:	4628      	mov	r0, r5
 8006b88:	f7ff fb48 	bl	800621c <_free_r>
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	6363      	str	r3, [r4, #52]	@ 0x34
 8006b90:	e00d      	b.n	8006bae <__sflush_r+0xae>
 8006b92:	2301      	movs	r3, #1
 8006b94:	4628      	mov	r0, r5
 8006b96:	47b0      	blx	r6
 8006b98:	4602      	mov	r2, r0
 8006b9a:	1c50      	adds	r0, r2, #1
 8006b9c:	d1c9      	bne.n	8006b32 <__sflush_r+0x32>
 8006b9e:	682b      	ldr	r3, [r5, #0]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d0c6      	beq.n	8006b32 <__sflush_r+0x32>
 8006ba4:	2b1d      	cmp	r3, #29
 8006ba6:	d001      	beq.n	8006bac <__sflush_r+0xac>
 8006ba8:	2b16      	cmp	r3, #22
 8006baa:	d11e      	bne.n	8006bea <__sflush_r+0xea>
 8006bac:	602f      	str	r7, [r5, #0]
 8006bae:	2000      	movs	r0, #0
 8006bb0:	e022      	b.n	8006bf8 <__sflush_r+0xf8>
 8006bb2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006bb6:	b21b      	sxth	r3, r3
 8006bb8:	e01b      	b.n	8006bf2 <__sflush_r+0xf2>
 8006bba:	690f      	ldr	r7, [r1, #16]
 8006bbc:	2f00      	cmp	r7, #0
 8006bbe:	d0f6      	beq.n	8006bae <__sflush_r+0xae>
 8006bc0:	0793      	lsls	r3, r2, #30
 8006bc2:	680e      	ldr	r6, [r1, #0]
 8006bc4:	bf08      	it	eq
 8006bc6:	694b      	ldreq	r3, [r1, #20]
 8006bc8:	600f      	str	r7, [r1, #0]
 8006bca:	bf18      	it	ne
 8006bcc:	2300      	movne	r3, #0
 8006bce:	eba6 0807 	sub.w	r8, r6, r7
 8006bd2:	608b      	str	r3, [r1, #8]
 8006bd4:	f1b8 0f00 	cmp.w	r8, #0
 8006bd8:	dde9      	ble.n	8006bae <__sflush_r+0xae>
 8006bda:	6a21      	ldr	r1, [r4, #32]
 8006bdc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006bde:	4643      	mov	r3, r8
 8006be0:	463a      	mov	r2, r7
 8006be2:	4628      	mov	r0, r5
 8006be4:	47b0      	blx	r6
 8006be6:	2800      	cmp	r0, #0
 8006be8:	dc08      	bgt.n	8006bfc <__sflush_r+0xfc>
 8006bea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006bee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006bf2:	81a3      	strh	r3, [r4, #12]
 8006bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8006bf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006bfc:	4407      	add	r7, r0
 8006bfe:	eba8 0800 	sub.w	r8, r8, r0
 8006c02:	e7e7      	b.n	8006bd4 <__sflush_r+0xd4>
 8006c04:	dfbffffe 	.word	0xdfbffffe

08006c08 <_fflush_r>:
 8006c08:	b538      	push	{r3, r4, r5, lr}
 8006c0a:	690b      	ldr	r3, [r1, #16]
 8006c0c:	4605      	mov	r5, r0
 8006c0e:	460c      	mov	r4, r1
 8006c10:	b913      	cbnz	r3, 8006c18 <_fflush_r+0x10>
 8006c12:	2500      	movs	r5, #0
 8006c14:	4628      	mov	r0, r5
 8006c16:	bd38      	pop	{r3, r4, r5, pc}
 8006c18:	b118      	cbz	r0, 8006c22 <_fflush_r+0x1a>
 8006c1a:	6a03      	ldr	r3, [r0, #32]
 8006c1c:	b90b      	cbnz	r3, 8006c22 <_fflush_r+0x1a>
 8006c1e:	f7ff f80b 	bl	8005c38 <__sinit>
 8006c22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d0f3      	beq.n	8006c12 <_fflush_r+0xa>
 8006c2a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006c2c:	07d0      	lsls	r0, r2, #31
 8006c2e:	d404      	bmi.n	8006c3a <_fflush_r+0x32>
 8006c30:	0599      	lsls	r1, r3, #22
 8006c32:	d402      	bmi.n	8006c3a <_fflush_r+0x32>
 8006c34:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006c36:	f7ff faba 	bl	80061ae <__retarget_lock_acquire_recursive>
 8006c3a:	4628      	mov	r0, r5
 8006c3c:	4621      	mov	r1, r4
 8006c3e:	f7ff ff5f 	bl	8006b00 <__sflush_r>
 8006c42:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006c44:	07da      	lsls	r2, r3, #31
 8006c46:	4605      	mov	r5, r0
 8006c48:	d4e4      	bmi.n	8006c14 <_fflush_r+0xc>
 8006c4a:	89a3      	ldrh	r3, [r4, #12]
 8006c4c:	059b      	lsls	r3, r3, #22
 8006c4e:	d4e1      	bmi.n	8006c14 <_fflush_r+0xc>
 8006c50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006c52:	f7ff faad 	bl	80061b0 <__retarget_lock_release_recursive>
 8006c56:	e7dd      	b.n	8006c14 <_fflush_r+0xc>

08006c58 <fiprintf>:
 8006c58:	b40e      	push	{r1, r2, r3}
 8006c5a:	b503      	push	{r0, r1, lr}
 8006c5c:	4601      	mov	r1, r0
 8006c5e:	ab03      	add	r3, sp, #12
 8006c60:	4805      	ldr	r0, [pc, #20]	@ (8006c78 <fiprintf+0x20>)
 8006c62:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c66:	6800      	ldr	r0, [r0, #0]
 8006c68:	9301      	str	r3, [sp, #4]
 8006c6a:	f7ff fca3 	bl	80065b4 <_vfiprintf_r>
 8006c6e:	b002      	add	sp, #8
 8006c70:	f85d eb04 	ldr.w	lr, [sp], #4
 8006c74:	b003      	add	sp, #12
 8006c76:	4770      	bx	lr
 8006c78:	2000007c 	.word	0x2000007c

08006c7c <__swhatbuf_r>:
 8006c7c:	b570      	push	{r4, r5, r6, lr}
 8006c7e:	460c      	mov	r4, r1
 8006c80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c84:	2900      	cmp	r1, #0
 8006c86:	b096      	sub	sp, #88	@ 0x58
 8006c88:	4615      	mov	r5, r2
 8006c8a:	461e      	mov	r6, r3
 8006c8c:	da0d      	bge.n	8006caa <__swhatbuf_r+0x2e>
 8006c8e:	89a3      	ldrh	r3, [r4, #12]
 8006c90:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006c94:	f04f 0100 	mov.w	r1, #0
 8006c98:	bf14      	ite	ne
 8006c9a:	2340      	movne	r3, #64	@ 0x40
 8006c9c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006ca0:	2000      	movs	r0, #0
 8006ca2:	6031      	str	r1, [r6, #0]
 8006ca4:	602b      	str	r3, [r5, #0]
 8006ca6:	b016      	add	sp, #88	@ 0x58
 8006ca8:	bd70      	pop	{r4, r5, r6, pc}
 8006caa:	466a      	mov	r2, sp
 8006cac:	f000 f862 	bl	8006d74 <_fstat_r>
 8006cb0:	2800      	cmp	r0, #0
 8006cb2:	dbec      	blt.n	8006c8e <__swhatbuf_r+0x12>
 8006cb4:	9901      	ldr	r1, [sp, #4]
 8006cb6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006cba:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006cbe:	4259      	negs	r1, r3
 8006cc0:	4159      	adcs	r1, r3
 8006cc2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006cc6:	e7eb      	b.n	8006ca0 <__swhatbuf_r+0x24>

08006cc8 <__smakebuf_r>:
 8006cc8:	898b      	ldrh	r3, [r1, #12]
 8006cca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006ccc:	079d      	lsls	r5, r3, #30
 8006cce:	4606      	mov	r6, r0
 8006cd0:	460c      	mov	r4, r1
 8006cd2:	d507      	bpl.n	8006ce4 <__smakebuf_r+0x1c>
 8006cd4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006cd8:	6023      	str	r3, [r4, #0]
 8006cda:	6123      	str	r3, [r4, #16]
 8006cdc:	2301      	movs	r3, #1
 8006cde:	6163      	str	r3, [r4, #20]
 8006ce0:	b003      	add	sp, #12
 8006ce2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ce4:	ab01      	add	r3, sp, #4
 8006ce6:	466a      	mov	r2, sp
 8006ce8:	f7ff ffc8 	bl	8006c7c <__swhatbuf_r>
 8006cec:	9f00      	ldr	r7, [sp, #0]
 8006cee:	4605      	mov	r5, r0
 8006cf0:	4639      	mov	r1, r7
 8006cf2:	4630      	mov	r0, r6
 8006cf4:	f7fe fe88 	bl	8005a08 <_malloc_r>
 8006cf8:	b948      	cbnz	r0, 8006d0e <__smakebuf_r+0x46>
 8006cfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006cfe:	059a      	lsls	r2, r3, #22
 8006d00:	d4ee      	bmi.n	8006ce0 <__smakebuf_r+0x18>
 8006d02:	f023 0303 	bic.w	r3, r3, #3
 8006d06:	f043 0302 	orr.w	r3, r3, #2
 8006d0a:	81a3      	strh	r3, [r4, #12]
 8006d0c:	e7e2      	b.n	8006cd4 <__smakebuf_r+0xc>
 8006d0e:	89a3      	ldrh	r3, [r4, #12]
 8006d10:	6020      	str	r0, [r4, #0]
 8006d12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d16:	81a3      	strh	r3, [r4, #12]
 8006d18:	9b01      	ldr	r3, [sp, #4]
 8006d1a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006d1e:	b15b      	cbz	r3, 8006d38 <__smakebuf_r+0x70>
 8006d20:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d24:	4630      	mov	r0, r6
 8006d26:	f000 f837 	bl	8006d98 <_isatty_r>
 8006d2a:	b128      	cbz	r0, 8006d38 <__smakebuf_r+0x70>
 8006d2c:	89a3      	ldrh	r3, [r4, #12]
 8006d2e:	f023 0303 	bic.w	r3, r3, #3
 8006d32:	f043 0301 	orr.w	r3, r3, #1
 8006d36:	81a3      	strh	r3, [r4, #12]
 8006d38:	89a3      	ldrh	r3, [r4, #12]
 8006d3a:	431d      	orrs	r5, r3
 8006d3c:	81a5      	strh	r5, [r4, #12]
 8006d3e:	e7cf      	b.n	8006ce0 <__smakebuf_r+0x18>

08006d40 <memmove>:
 8006d40:	4288      	cmp	r0, r1
 8006d42:	b510      	push	{r4, lr}
 8006d44:	eb01 0402 	add.w	r4, r1, r2
 8006d48:	d902      	bls.n	8006d50 <memmove+0x10>
 8006d4a:	4284      	cmp	r4, r0
 8006d4c:	4623      	mov	r3, r4
 8006d4e:	d807      	bhi.n	8006d60 <memmove+0x20>
 8006d50:	1e43      	subs	r3, r0, #1
 8006d52:	42a1      	cmp	r1, r4
 8006d54:	d008      	beq.n	8006d68 <memmove+0x28>
 8006d56:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006d5a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006d5e:	e7f8      	b.n	8006d52 <memmove+0x12>
 8006d60:	4402      	add	r2, r0
 8006d62:	4601      	mov	r1, r0
 8006d64:	428a      	cmp	r2, r1
 8006d66:	d100      	bne.n	8006d6a <memmove+0x2a>
 8006d68:	bd10      	pop	{r4, pc}
 8006d6a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006d6e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006d72:	e7f7      	b.n	8006d64 <memmove+0x24>

08006d74 <_fstat_r>:
 8006d74:	b538      	push	{r3, r4, r5, lr}
 8006d76:	4d07      	ldr	r5, [pc, #28]	@ (8006d94 <_fstat_r+0x20>)
 8006d78:	2300      	movs	r3, #0
 8006d7a:	4604      	mov	r4, r0
 8006d7c:	4608      	mov	r0, r1
 8006d7e:	4611      	mov	r1, r2
 8006d80:	602b      	str	r3, [r5, #0]
 8006d82:	f7fb ff6a 	bl	8002c5a <_fstat>
 8006d86:	1c43      	adds	r3, r0, #1
 8006d88:	d102      	bne.n	8006d90 <_fstat_r+0x1c>
 8006d8a:	682b      	ldr	r3, [r5, #0]
 8006d8c:	b103      	cbz	r3, 8006d90 <_fstat_r+0x1c>
 8006d8e:	6023      	str	r3, [r4, #0]
 8006d90:	bd38      	pop	{r3, r4, r5, pc}
 8006d92:	bf00      	nop
 8006d94:	20001870 	.word	0x20001870

08006d98 <_isatty_r>:
 8006d98:	b538      	push	{r3, r4, r5, lr}
 8006d9a:	4d06      	ldr	r5, [pc, #24]	@ (8006db4 <_isatty_r+0x1c>)
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	4604      	mov	r4, r0
 8006da0:	4608      	mov	r0, r1
 8006da2:	602b      	str	r3, [r5, #0]
 8006da4:	f7fb ff69 	bl	8002c7a <_isatty>
 8006da8:	1c43      	adds	r3, r0, #1
 8006daa:	d102      	bne.n	8006db2 <_isatty_r+0x1a>
 8006dac:	682b      	ldr	r3, [r5, #0]
 8006dae:	b103      	cbz	r3, 8006db2 <_isatty_r+0x1a>
 8006db0:	6023      	str	r3, [r4, #0]
 8006db2:	bd38      	pop	{r3, r4, r5, pc}
 8006db4:	20001870 	.word	0x20001870

08006db8 <abort>:
 8006db8:	b508      	push	{r3, lr}
 8006dba:	2006      	movs	r0, #6
 8006dbc:	f000 f85a 	bl	8006e74 <raise>
 8006dc0:	2001      	movs	r0, #1
 8006dc2:	f7fb fefa 	bl	8002bba <_exit>

08006dc6 <_realloc_r>:
 8006dc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006dca:	4680      	mov	r8, r0
 8006dcc:	4615      	mov	r5, r2
 8006dce:	460c      	mov	r4, r1
 8006dd0:	b921      	cbnz	r1, 8006ddc <_realloc_r+0x16>
 8006dd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006dd6:	4611      	mov	r1, r2
 8006dd8:	f7fe be16 	b.w	8005a08 <_malloc_r>
 8006ddc:	b92a      	cbnz	r2, 8006dea <_realloc_r+0x24>
 8006dde:	f7ff fa1d 	bl	800621c <_free_r>
 8006de2:	2400      	movs	r4, #0
 8006de4:	4620      	mov	r0, r4
 8006de6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006dea:	f000 f85f 	bl	8006eac <_malloc_usable_size_r>
 8006dee:	4285      	cmp	r5, r0
 8006df0:	4606      	mov	r6, r0
 8006df2:	d802      	bhi.n	8006dfa <_realloc_r+0x34>
 8006df4:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006df8:	d8f4      	bhi.n	8006de4 <_realloc_r+0x1e>
 8006dfa:	4629      	mov	r1, r5
 8006dfc:	4640      	mov	r0, r8
 8006dfe:	f7fe fe03 	bl	8005a08 <_malloc_r>
 8006e02:	4607      	mov	r7, r0
 8006e04:	2800      	cmp	r0, #0
 8006e06:	d0ec      	beq.n	8006de2 <_realloc_r+0x1c>
 8006e08:	42b5      	cmp	r5, r6
 8006e0a:	462a      	mov	r2, r5
 8006e0c:	4621      	mov	r1, r4
 8006e0e:	bf28      	it	cs
 8006e10:	4632      	movcs	r2, r6
 8006e12:	f7ff f9d6 	bl	80061c2 <memcpy>
 8006e16:	4621      	mov	r1, r4
 8006e18:	4640      	mov	r0, r8
 8006e1a:	f7ff f9ff 	bl	800621c <_free_r>
 8006e1e:	463c      	mov	r4, r7
 8006e20:	e7e0      	b.n	8006de4 <_realloc_r+0x1e>

08006e22 <_raise_r>:
 8006e22:	291f      	cmp	r1, #31
 8006e24:	b538      	push	{r3, r4, r5, lr}
 8006e26:	4605      	mov	r5, r0
 8006e28:	460c      	mov	r4, r1
 8006e2a:	d904      	bls.n	8006e36 <_raise_r+0x14>
 8006e2c:	2316      	movs	r3, #22
 8006e2e:	6003      	str	r3, [r0, #0]
 8006e30:	f04f 30ff 	mov.w	r0, #4294967295
 8006e34:	bd38      	pop	{r3, r4, r5, pc}
 8006e36:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006e38:	b112      	cbz	r2, 8006e40 <_raise_r+0x1e>
 8006e3a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006e3e:	b94b      	cbnz	r3, 8006e54 <_raise_r+0x32>
 8006e40:	4628      	mov	r0, r5
 8006e42:	f000 f831 	bl	8006ea8 <_getpid_r>
 8006e46:	4622      	mov	r2, r4
 8006e48:	4601      	mov	r1, r0
 8006e4a:	4628      	mov	r0, r5
 8006e4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006e50:	f000 b818 	b.w	8006e84 <_kill_r>
 8006e54:	2b01      	cmp	r3, #1
 8006e56:	d00a      	beq.n	8006e6e <_raise_r+0x4c>
 8006e58:	1c59      	adds	r1, r3, #1
 8006e5a:	d103      	bne.n	8006e64 <_raise_r+0x42>
 8006e5c:	2316      	movs	r3, #22
 8006e5e:	6003      	str	r3, [r0, #0]
 8006e60:	2001      	movs	r0, #1
 8006e62:	e7e7      	b.n	8006e34 <_raise_r+0x12>
 8006e64:	2100      	movs	r1, #0
 8006e66:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006e6a:	4620      	mov	r0, r4
 8006e6c:	4798      	blx	r3
 8006e6e:	2000      	movs	r0, #0
 8006e70:	e7e0      	b.n	8006e34 <_raise_r+0x12>
	...

08006e74 <raise>:
 8006e74:	4b02      	ldr	r3, [pc, #8]	@ (8006e80 <raise+0xc>)
 8006e76:	4601      	mov	r1, r0
 8006e78:	6818      	ldr	r0, [r3, #0]
 8006e7a:	f7ff bfd2 	b.w	8006e22 <_raise_r>
 8006e7e:	bf00      	nop
 8006e80:	2000007c 	.word	0x2000007c

08006e84 <_kill_r>:
 8006e84:	b538      	push	{r3, r4, r5, lr}
 8006e86:	4d07      	ldr	r5, [pc, #28]	@ (8006ea4 <_kill_r+0x20>)
 8006e88:	2300      	movs	r3, #0
 8006e8a:	4604      	mov	r4, r0
 8006e8c:	4608      	mov	r0, r1
 8006e8e:	4611      	mov	r1, r2
 8006e90:	602b      	str	r3, [r5, #0]
 8006e92:	f7fb fe82 	bl	8002b9a <_kill>
 8006e96:	1c43      	adds	r3, r0, #1
 8006e98:	d102      	bne.n	8006ea0 <_kill_r+0x1c>
 8006e9a:	682b      	ldr	r3, [r5, #0]
 8006e9c:	b103      	cbz	r3, 8006ea0 <_kill_r+0x1c>
 8006e9e:	6023      	str	r3, [r4, #0]
 8006ea0:	bd38      	pop	{r3, r4, r5, pc}
 8006ea2:	bf00      	nop
 8006ea4:	20001870 	.word	0x20001870

08006ea8 <_getpid_r>:
 8006ea8:	f7fb be6f 	b.w	8002b8a <_getpid>

08006eac <_malloc_usable_size_r>:
 8006eac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006eb0:	1f18      	subs	r0, r3, #4
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	bfbc      	itt	lt
 8006eb6:	580b      	ldrlt	r3, [r1, r0]
 8006eb8:	18c0      	addlt	r0, r0, r3
 8006eba:	4770      	bx	lr

08006ebc <_init>:
 8006ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ebe:	bf00      	nop
 8006ec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ec2:	bc08      	pop	{r3}
 8006ec4:	469e      	mov	lr, r3
 8006ec6:	4770      	bx	lr

08006ec8 <_fini>:
 8006ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006eca:	bf00      	nop
 8006ecc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ece:	bc08      	pop	{r3}
 8006ed0:	469e      	mov	lr, r3
 8006ed2:	4770      	bx	lr
